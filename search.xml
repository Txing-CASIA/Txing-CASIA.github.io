<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Q1 Two Sum</title>
    <url>/2019/04/21/2019-04-21-Q1-Two-Sum/</url>
    <content><![CDATA[<h1 id="two-sum"><a href="https://leetcode.com/problems/two-sum/">Two
sum</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array of integers, return <strong>indices</strong> of the
two numbers such that they add up to a specific target. You may assume
that each input would have <strong>exactly</strong> one solution, and
you may not use the <em>same</em> element twice.</p>
</blockquote>
<blockquote>
<p>Example:</p>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].</p>
</blockquote>
<h2 id="solution">Solution</h2>
<h3 id="approach-1-brute-force">Approach 1: Brute Force</h3>
<p>The brute force approach is simple. Loop through each element
x<em>x</em> and find if there is another value that equals to
target.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="comment"># if nums[i] not in results:</span></span><br><span class="line">                        results.append(i)</span><br><span class="line">                    <span class="comment"># if nums[j] not in results:</span></span><br><span class="line">                        results.append(j)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">    target = <span class="number">9</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.twoSum(nums, target)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="approach-2-two-pass-hash-table">Approach 2: Two-pass Hash
Table</h3>
<p>To improve our run time complexity, we need a more efficient way to
check if the complement exists in the array. If the complement exists,
we need to look up its index. What is the best way to maintain a mapping
of each element in the array to its index? A hash table.</p>
<p>We reduce the look up time from <em>O</em>(<em>n</em>) to
<em>O</em>(1) by trading space for speed. A hash table is built exactly
for this purpose, it supports fast look up in <em>near</em> constant
time. I say "near" because if a collision occurred, a look up could
degenerate to <em>O</em>(<em>n</em>) time. But look up in hash table
should be amortized <em>O</em>(1) time as long as the hash function was
chosen carefully.</p>
<p>A simple implementation uses two iterations. In the first iteration,
we add each element's value and its index to the table. Then, in the
second iteration we check if each element's complement (target -
nums[i]) exists in the table. Beware that the complement must not be
nums[i] itself!</p>
<p>The codes in some blogs are not preciseness enough. Here gives my
Python code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        Hashmap = <span class="built_in">dict</span>()</span><br><span class="line">        results = []</span><br><span class="line">        <span class="comment"># 建立Hash表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            Hashmap[nums[i]] = i <span class="comment">#键是数值，值是序号</span></span><br><span class="line">        <span class="comment"># 查表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            complement = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> Hashmap <span class="keyword">and</span> Hashmap[complement] != i:</span><br><span class="line">            <span class="comment"># 确认target不等于同一个元素乘以2</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">not</span>(<span class="built_in">set</span>([i,Hashmap[complement]])&lt;<span class="built_in">set</span>(results) <span class="keyword">or</span> [Hashmap[complement],i]==results <span class="keyword">or</span> [i,Hashmap[complement]]==results) <span class="keyword">or</span> results ==[]) :</span><br><span class="line">                <span class="comment"># 首先判断results是否是空集，是则添加[i,Hashmap[complement]]</span></span><br><span class="line">                <span class="comment"># 之后的判断中，把两个加数看成一对，判断是否是results的子集或者全集(注意元素顺序对查询的影响)，</span></span><br><span class="line">                <span class="comment"># 如果不是子集或者全集，results也不是空集，那么添加results</span></span><br><span class="line">                    results.append(i)</span><br><span class="line">                    results.append(Hashmap[complement])</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">    target = <span class="number">9</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.twoSum(nums, target)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>
<p><strong>Runtime: 40 ms, faster than 65.08% of Python online
submissions for Two Sum.</strong></p>
<p><strong>Memory Usage: 13.4 MB, less than 5.02% of Python online
submissions for Two Sum.</strong></p>
<hr />
<h3 id="approach-3-one-pass-hash-table">Approach 3: One-pass Hash
Table</h3>
<p>It turns out we can do it in one-pass. While we iterate and inserting
elements into the table, we also look back to check if current element's
complement already exists in the table. If it exists, we have found a
solution and return immediately.</p>
<p><strong>Of cause, in this question, we assume that only one solution
exists.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        results = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):  <span class="comment"># 一边将列表中的数添加到字典中，一边判断两数之差是否存在于字典中</span></span><br><span class="line">            temp = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> temp <span class="keyword">in</span> results:  <span class="comment"># 判断步骤</span></span><br><span class="line">                <span class="keyword">return</span> [results[temp], i]</span><br><span class="line">            results[nums[i]] = i  <span class="comment"># 添加步骤（切记先判断再添加，以免key冲突）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Solution&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">    target = <span class="number">9</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.twoSum(nums, target)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>在python中调用MATLAB的方法</title>
    <url>/2018/08/15/2018-08-15-%E5%9C%A8python%E4%B8%AD%E8%B0%83%E7%94%A8MATLAB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="在python中调用matlab的方法">在python中调用MATLAB的方法</h1>
<p>网上有些是让你安装mlab库来实现调用的，这个方法已经淘汰不用了，这里介绍比较新的方法。</p>
<h2 id="step-1-install-matlab-engine-api-for-python">Step 1: install
MATLAB Engine API for Python</h2>
<p>官网给出的方案：</p>
<p><a
href="http://ww2.mathworks.cn/help/matlab/matlab_external/install-the-matlab-engine-for-python.html?ue">install
MATLAB Engine API for Python</a></p>
<p>在MATLAB中输入：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">matlabroot</span><br></pre></td></tr></table></figure>
<p>得到返回的位置</p>
<p>打开anaconda，输入下面语句进行安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd matlabroot\extern\engines\python</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>注意要将matlabroot替换为之前返回的位置</p>
<h2 id="step-2-call-user-script-and-function-from-python">Step 2: Call
User Script and Function from Python</h2>
<p>官网给出的方案：</p>
<p><a
href="http://cn.mathworks.com/help/matlab/matlab_external/call-user-script-and-function-from-python.html">Call
User Script and Function from Python</a></p>
<p>###.m脚本的调用</p>
<p>.m文件与.py文件需要放在同一目录下。在test.m文件中输入：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">b=<span class="number">2</span>;</span><br><span class="line">h=<span class="number">3</span>;</span><br><span class="line">a=b*h</span><br></pre></td></tr></table></figure>
<p>在H.py文件中输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matlab.engine</span><br><span class="line">eng = matlab.engine.start_matlab()</span><br><span class="line">eng.test(nargout=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>其中指定 <code>nargout=0</code>。尽管脚本会打印输出，但它不会向
Python 返回任何输出参数。</p>
<h3 id="自定义函数的调用">自定义函数的调用</h3>
<p>在time.m中输入：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> = <span class="title">time</span><span class="params">(b,h)</span></span></span><br><span class="line">	a = b*h;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在H.py中输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matlab.engine</span><br><span class="line">eng = matlab.engine.start_matlab()</span><br><span class="line">ret = eng.time(<span class="number">1.0</span>,<span class="number">5.0</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure>
<p>可以实现函数的调用。由于函数仅返回一个输出参数，因此无需指定
<code>nargout</code>。</p>
<p>‎2018‎年‎8‎月‎15‎日</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>Q11 Container With Most Water</title>
    <url>/2019/04/23/2019-04-23-Q11-Container-With-Most-Water/</url>
    <content><![CDATA[<h1 id="container-with-most-water"><a
href="https://leetcode.com/problems/container-with-most-water/">Container
With Most Water</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given <em>n</em> non-negative integers <span
class="math inline">\(a_1, a_2, ..., a_n\)</span> , where each
represents a point at coordinate (<span
class="math inline">\(i\)</span>, <span
class="math inline">\(a_i\)</span>). <span
class="math inline">\(n\)</span> vertical lines are drawn such that the
two endpoints of line <span class="math inline">\(i\)</span> is at
(<span class="math inline">\(i\)</span>, <span
class="math inline">\(a_i\)</span>) and (<span
class="math inline">\(i\)</span>, <span
class="math inline">\(0\)</span>). Find two lines, which together with
x-axis forms a container, such that the container contains the most
water.</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/question_11.jpg"
alt="question_11.jpg" />
<figcaption aria-hidden="true">question_11.jpg</figcaption>
</figure>
<p>The above vertical lines are represented by array
[1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section)
the container can contain is 49.</p>
</blockquote>
<blockquote>
<p>Example:</p>
<p>Input: [1,8,6,2,5,4,8,3,7] Output: 49</p>
</blockquote>
<h2 id="solution">Solution</h2>
<h3 id="approach-1-brute-force">Approach 1: Brute Force</h3>
<p>In this case, we will simply consider the area for every possible
pair of the lines and find out the maximum area out of those.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        maxarea=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(height)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(height)):</span><br><span class="line">                maxarea=<span class="built_in">max</span>(maxarea,<span class="built_in">min</span>(height[i],height[j])*(j-i))</span><br><span class="line">        <span class="keyword">return</span> maxarea</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    height = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.maxArea(height)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity : <span class="math inline">\(O(n^2)\)</span>.
Calculating area for all <span
class="math inline">\(\frac{n(n-1)}{2}\)</span> height pairs.</li>
<li>Space complexity : $ O(1)$ Constant extra space is used.</li>
</ul>
<hr />
<h3 id="approach-2-two-pointer-approach">Approach 2: Two Pointer
Approach</h3>
<p>The intuition behind this approach is that the area formed between
the lines will always be limited by the height of the shorter line.
Further, the farther the lines, the more will be the area obtained.</p>
<p>We take two pointers, one at the beginning and one at the end of the
array constituting the length of the lines. Futher, we maintain a
variable maxarea to store the maximum area obtained till now. At every
step, we find out the area formed between them, update maxarea and move
the pointer pointing to the shorter line towards the other end by one
step.</p>
<p>How this approach works?</p>
<p>Initially we consider the area constituting the exterior most lines.
Now, to maximize the area, we need to consider the area between the
lines of larger lengths. If we try to move the pointer at the longer
line inwards, we won't gain any increase in area, since it is limited by
the shorter line. But moving the shorter line's pointer could turn out
to be beneficial, as per the same argument, despite the reduction in the
width. This is done since a relatively longer line obtained by moving
the shorter line's pointer might overcome the reduction in area caused
by the width reduction.</p>
<p>For further clarification click <a
href="https://leetcode.com/problems/container-with-most-water/discuss/6099/yet-another-way-to-see-what-happens-in-the-on-algorithm">here</a>
and for the proof click <a
href="https://leetcode.com/problems/container-with-most-water/discuss/6089/Anyone-who-has-a-O(N)-algorithm/7268">here</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        maxarea=<span class="number">0</span></span><br><span class="line">        x=<span class="built_in">len</span>(height)-<span class="number">1</span> <span class="comment"># 最远端的指针</span></span><br><span class="line">        y=<span class="number">0</span> <span class="comment"># 最近端的指针</span></span><br><span class="line">        <span class="keyword">while</span>(y&lt;x):</span><br><span class="line">            maxarea = <span class="built_in">max</span>(maxarea, <span class="built_in">min</span>(height[x], height[y]) * (x - y))</span><br><span class="line">            <span class="keyword">if</span> (height[y] &lt; height[x]):</span><br><span class="line">                y=y+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x=x-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxarea</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    height = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.maxArea(height)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <span class="math inline">\(O(n)\)</span>. Single
pass.</li>
<li>Space complexity : <span class="math inline">\(O(1)\)</span>.
Constant space is used.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q26 Remove Duplicates from Sorted Array</title>
    <url>/2019/04/24/2019-04-24-Q26-Remove-Duplicates-from-Sorted-Array/</url>
    <content><![CDATA[<h1 id="remove-duplicates-from-sorted-array"><a
href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">Remove
Duplicates from Sorted Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a sorted array <em>nums</em>, remove the duplicates in-place
such that each element appear only <em>once</em> and return the new
length.</p>
<p>Do not allocate extra space for another array, you must do this by
<strong>modifying the input array in-place</strong> with O(1) extra
memory.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Given nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements
of nums being 1 and 2 respectively.</p>
<p>It doesn't matter what you leave beyond the returned length.</p>
</blockquote>
<blockquote>
<p><strong>Example 2</strong>:</p>
<p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p>
<p>Your function should return length = 5, with the first five elements
of nums being modified to 0, 1, 2, 3, and 4 respectively.</p>
<p>It doesn't matter what values are set beyond the returned length.</p>
</blockquote>
<blockquote>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an
array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>,
which means modification to the input array will be known to the caller
as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">// nums is passed in by reference. (i.e., without making a copy)</span></span><br><span class="line">&gt;<span class="type">int</span> len = <span class="built_in">removeDuplicates</span>(nums);</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// any modification to nums in your function would be known by the caller.</span></span><br><span class="line">&gt;<span class="comment">// using the length returned by your function, it prints the first len elements.</span></span><br><span class="line">&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">   <span class="built_in">print</span>(nums[i]);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="solution">Solution</h2>
<h3 id="approach-1-two-pointers">Approach 1: Two Pointers</h3>
<p>Since the array is already sorted, we can keep two pointers <span
class="math inline">\(i\)</span> and <span
class="math inline">\(j\)</span>, where <span
class="math inline">\(i\)</span> is the slow-runner while <span
class="math inline">\(j\)</span> is the fast-runner. As long as <span
class="math display">\[nums[i] = nums[j]\]</span>, we increment <span
class="math inline">\(j\)</span> to skip the duplicate.</p>
<p>When we encounter <span class="math inline">\(nums[j]\neq
nums[i]\)</span>, the duplicate run has ended so we must copy its value
to <span class="math inline">\(nums[i + 1]\)</span>. <span
class="math inline">\(i\)</span> is then incremented and we repeat the
same process again <span class="math inline">\(j​\)</span> reaches the
end of array.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="string">&#x27;List[int]&#x27;</span></span>) -&gt; <span class="string">&#x27;int&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index=<span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span>(index+<span class="number">1</span>&lt;<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[index]==nums[index+<span class="number">1</span>]:</span><br><span class="line">                    nums.remove(nums[index])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.removeDuplicates(nums)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<ul>
<li>Time complextiy : <em>O</em>(<em>n</em>). Assume that <em>n</em> is
the length of array. Each of i<em>i</em> and <em>j</em> traverses at
most n<em>n</em>steps.</li>
<li>Space complexity : <em>O</em>(1).</li>
</ul>
<p>代码中使用了nums.remove() 来删除重复元素，.pop()
也有类似效果，但在提交LeetCode时候超时未通过。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q905 Sort Array By Parity</title>
    <url>/2019/04/25/2019-04-25-Q905-Sort-Array-By-Parity/</url>
    <content><![CDATA[<h1 id="sort-array-by-parity"><a
href="https://leetcode.com/problems/sort-array-by-parity/">Sort Array By
Parity</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array <code>A</code> of non-negative integers, return an
array consisting of all the even elements of <code>A</code>, followed by
all the odd elements of <code>A</code>.</p>
<p>You may return any answer array that satisfies this condition.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3],
and [4,2,1,3] would also be accepted.</p>
</blockquote>
<h2 id="solution">Solution</h2>
<h3 id="approach-1-sort">Approach 1: Sort</h3>
<p>Since the array is already sorted, we can keep two pointers <span
class="math inline">\(i\)</span> and <span
class="math inline">\(j\)</span>, where <span
class="math inline">\(i\)</span> is the slow-runner while <span
class="math inline">\(j\)</span> is the fast-runner. As long as <span
class="math display">\[nums[i] = nums[j]\]</span>, we increment <span
class="math inline">\(j\)</span> to skip the duplicate.</p>
<p>When we encounter <span class="math inline">\(nums[j]\neq
nums[i]\)</span>, the duplicate run has ended so we must copy its value
to <span class="math inline">\(nums[i + 1]\)</span>. <span
class="math inline">\(i\)</span> is then incremented and we repeat the
same process again <span class="math inline">\(j\)</span> reaches the
end of array.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArrayByParity</span>(<span class="params">self, A</span>):</span><br><span class="line">        even=[]</span><br><span class="line">        odd=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(A)):</span><br><span class="line">            <span class="keyword">if</span> A[i]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even.append(A[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                odd.append(A[i])</span><br><span class="line">        <span class="keyword">return</span> even+odd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.sortArrayByParity(nums)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 68 ms, faster than 83.75% of Python3 online submissions for
Sort Array By Parity.</li>
<li>Memory Usage: 13.8 MB, less than 5.69% of Python3 online submissions
for Sort Array By Parity.</li>
</ul>
<p>Use a custom comparator when sorting, to sort by parity.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArrayByParity</span>(<span class="params">self, A</span>):</span><br><span class="line">        A.sort(key = <span class="keyword">lambda</span> x: x % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>log<em>N</em>), where
<em>N</em> is the length of <code>A</code>.</li>
<li>Space Complexity: <em>O</em>(<em>N</em>) for the sort, depending on
the built-in implementation of <code>sort</code>.</li>
</ul>
<h3 id="approach-2-two-pass">Approach 2: Two Pass</h3>
<p>Write all the even elements first, then write all the odd
elements.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArrayByParity</span>(<span class="params">self, A</span>):</span><br><span class="line">        <span class="keyword">return</span> ([x <span class="keyword">for</span> x <span class="keyword">in</span> A <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>] +</span><br><span class="line">                [x <span class="keyword">for</span> x <span class="keyword">in</span> A <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>A</code>.</li>
<li>Space Complexity: <em>O</em>(<em>N</em>) for the sort, depending on
the built-in implementation of <code>sort</code>.</li>
</ul>
<h3 id="approach-3-in-place">Approach 3: In-Place</h3>
<p><strong>Intuition</strong></p>
<p>If we want to do the sort in-place, we can use
<strong>quicksort</strong>, a standard textbook algorithm.</p>
<p><strong>Algorithm</strong></p>
<p>​ We'll maintain two pointers <code>i</code> and <code>j</code>. The
loop invariant is everything below <code>i</code> has parity
<code>0</code> (ie. <code>A[k] % 2 == 0</code> when
<code>k &lt; i</code>), and everything above <code>j</code> has parity
<code>1</code>.</p>
<p>Then, there are 4 cases for <code>(A[i] % 2, A[j] % 2)</code>:</p>
<ul>
<li>If it is <code>(0, 1)</code>, then everything is correct:
<code>i++</code> and <code>j--</code>.</li>
<li>If it is <code>(1, 0)</code>, we swap them so they are correct, then
continue.</li>
<li>If it is <code>(0, 0)</code>, only the <code>i</code> place is
correct, so we <code>i++</code> and continue.</li>
<li>If it is <code>(1, 1)</code>, only the <code>j</code> place is
correct, so we <code>j--</code> and continue.</li>
</ul>
<p>Throughout all 4 cases, the loop invariant is maintained, and
<code>j-i</code> is getting smaller. So eventually we will be done with
the array sorted as desired.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArrayByParity</span>(<span class="params">self, A</span>):</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="built_in">len</span>(A) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> A[i] % <span class="number">2</span> &gt; A[j] % <span class="number">2</span>:</span><br><span class="line">                A[i], A[j] = A[j], A[i] <span class="comment"># 直接交换，不用中间变量</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> A[i] % <span class="number">2</span> == <span class="number">0</span>: i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> A[j] % <span class="number">2</span> == <span class="number">1</span>: j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>A</code>. Each step of the while loop makes
<code>j-i</code>decrease by at least one. (Note that while quicksort is
<em>O</em>(<em>N</em>log<em>N</em>) normally, this is
<em>O</em>(<em>N</em>)because we only need one pass to sort the
elements.)</li>
<li>Space Complexity: <em>O</em>(1) in additional space complexity.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q985 Sum of Even Numbers After Queries</title>
    <url>/2019/04/29/2019-04-29-Q985-Sum-of-Even-Numbers-After-Queries/</url>
    <content><![CDATA[<h1 id="sum-of-even-numbers-after-queries"><a
href="https://leetcode.com/problems/sum-of-even-numbers-after-queries/">Sum
of Even Numbers After Queries</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>We have an array <code>A</code> of integers, and an array
<code>queries</code> of queries.</p>
<p>For the <code>i</code>-th query
<code>val = queries[i][0], index = queries[i][1]</code>, we add val to
<code>A[index]</code>. Then, the answer to the <code>i</code>-th query
is the sum of the even values of <code>A</code>.</p>
<p><em>(Here, the given index = queries[i][1] is a 0-based index, and
each query permanently modifies the array A.)</em></p>
<p>Return the answer to all queries. Your <code>answer</code> array
should have <code>answer[i]</code> as the answer to the
<code>i</code>-th query.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] Output:
[8,6,2,4] Explanation: At the beginning, the array is [1,2,3,4]. After
adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is
2 + 2 + 4 = 8. After adding -3 to A[1], the array is [2,-1,3,4], and the
sum of even values is 2 + 4 = 6. After adding -4 to A[0], the array is
[-2,-1,3,4], and the sum of even values is -2 + 4 = 2. After adding 2 to
A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 =
4</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= A.length &lt;= 10000</code></li>
<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>
<li><code>1 &lt;= queries.length &lt;= 10000</code></li>
<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>
<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>
</ul>
</blockquote>
<hr />
<h3 id="approach-1-maintain-array-sum">Approach 1: Maintain Array
Sum</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Let's try to maintain <code>S</code>, the sum of the array throughout
one query operation.</p>
<p>When acting on an array element <code>A[index]</code>, the rest of
the values of <code>A</code> remain the same. Let's remove
<code>A[index]</code> from <code>S</code> if it is even, then add
<code>A[index] + val</code> back (if it is even.)</p>
<p>Here are some examples:</p>
<ul>
<li>If we have <code>A = [2,2,2,2,2]</code>, <code>S = 10</code>, and we
do <code>A[0] += 4</code>: we will update <code>S -= 2</code>, then
<code>S += 6</code>. At the end, we will have
<code>A = [6,2,2,2,2]</code> and <code>S = 14</code>.</li>
<li>If we have <code>A = [1,2,2,2,2]</code>, <code>S = 8</code>, and we
do <code>A[0] += 3</code>: we will skip updating <code>S</code> (since
<code>A[0]</code> is odd), then <code>S += 4</code>. At the end, we will
have <code>A = [4,2,2,2,2]</code> and <code>S = 12</code>.</li>
<li>If we have <code>A = [2,2,2,2,2]</code>, <code>S = 10</code> and we
do <code>A[0] += 1</code>: we will update <code>S -= 2</code>, then skip
updating <code>S</code> (since <code>A[0] + 1</code> is odd.) At the
end, we will have <code>A = [3,2,2,2,2]</code> and
<code>S = 8</code>.</li>
<li>If we have <code>A = [1,2,2,2,2]</code>, <code>S = 8</code> and we
do <code>A[0] += 2</code>: we will skip updating <code>S</code> (since
<code>A[0]</code> is odd), then skip updating <code>S</code> again
(since <code>A[0] + 2</code> is odd.) At the end, we will have
<code>A = [3,2,2,2,2]</code>and <code>S = 8</code>.</li>
</ul>
<p>These examples help illustrate that our algorithm actually maintains
the value of <code>S</code> throughout each query operation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumEvenAfterQueries</span>(<span class="params">self, A: <span class="type">List</span>[<span class="built_in">int</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        results=[]</span><br><span class="line">        even = <span class="built_in">sum</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> A <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> queries:</span><br><span class="line">            <span class="keyword">if</span> x%<span class="number">2</span>!=<span class="number">0</span> <span class="keyword">and</span> A[y]%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">                even+=(x+A[y])</span><br><span class="line">            <span class="keyword">elif</span> x%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">and</span> A[y]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even += x</span><br><span class="line">            <span class="keyword">elif</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> A[y] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                even -= A[y]</span><br><span class="line">            A[y] += x</span><br><span class="line">            results.append(even)</span><br><span class="line">        <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 180 ms, faster than 49.38% of Python3 online submissions
forSum of Even Numbers After Queries.</li>
<li>Memory Usage: 17.5 MB, less than 5.56% of Python3 online submissions
for Sum of Even Numbers After Queries.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q768 Max Chunks To Make Sorted II-(Hard)</title>
    <url>/2019/04/26/2019-04-26-Q768-Max-Chunks-To-Make-Sorted-IId-(Undone)%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="max-chunks-to-make-sorted-ii"><a
href="https://leetcode.com/problems/max-chunks-to-make-sorted-ii/">Max
Chunks To Make Sorted II</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>*This question is the same as "Max Chunks to Make Sorted" except the
integers of the given array are not necessarily distinct, the input
array could be up to length 2000, and the elements could be up to
10**8.*</p>
<p>Given an array <code>arr</code> of integers (<strong>not necessarily
distinct</strong>), we split the array into some number of "chunks"
(partitions), and individually sort each chunk. After concatenating
them, the result equals the sorted array.</p>
<p>What is the most number of chunks we could have made?</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: arr = [5,4,3,2,1] Output: 1 Explanation: Splitting into two or
more chunks will not return the required result. For example, splitting
into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't
sorted.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: arr = [2,1,3,4,4] Output: 4 Explanation: We can split into two
chunks, such as [2, 1], [3, 4, 4]. However, splitting into [2, 1], [3],
[4], [4] is the highest number of chunks possible.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>arr</code> will have length in range
<code>[1, 2000]</code>.</li>
<li><code>arr[i]</code> will be an integer in range
<code>[0, 10**8]</code>.</li>
</ul>
</blockquote>
<hr />
<h3 id="approach-1-sliding-window">Approach 1: Sliding Window</h3>
<p><strong>Intuition</strong></p>
<p>Let's try to find the smallest left-most chunk.</p>
<p><strong>Algorithm</strong></p>
<p>Notice that if <span class="math inline">\(a_1, a_2, \dots,
a_m\)</span> is a chunk, and <span class="math inline">\(a_1, a_2,
\dots, a_n\)</span> is a chunk (<em>m</em>&lt;<em>n</em>), then <span
class="math inline">\(a_{m+1}, a_{m+2}, \dots, a_n\)</span> is a chunk
too. This shows that a greedy approach produces the highest number of
chunks.</p>
<p>We know the array <code>arr</code> should end up like
<code>expect = sorted(arr)</code>. If the count of the first
<code>k</code> elements minus the count what those elements should be is
zero everywhere, then the first <code>k</code> elements form a valid
chunk. We repeatedly perform this process.</p>
<p>We can use a variable <code>nonzero</code> to count the number of
letters where the current count is non-zero.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxChunksToSorted</span>(<span class="params">self, arr</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        count = collections.defaultdict(<span class="built_in">int</span>) <span class="comment"># 声明一个默认整数字典类型</span></span><br><span class="line">        ans = nonzero = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(arr, <span class="built_in">sorted</span>(arr)):</span><br><span class="line">            count[x] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count[x] == <span class="number">0</span>: nonzero -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count[x] == <span class="number">1</span>: nonzero += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            count[y] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count[y] == -<span class="number">1</span>: nonzero += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count[y] == <span class="number">0</span>: nonzero -= <span class="number">1</span></span><br><span class="line">			<span class="comment"># 如果 count[x]中出现过的键都在count[y]中出现过了，nonzero=0</span></span><br><span class="line">            <span class="comment"># 此时分块计数一次</span></span><br><span class="line">            <span class="keyword">if</span> nonzero == <span class="number">0</span>: ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.maxChunksToSorted(arr)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>log<em>N</em>), where
<em>N</em> is the length of <code>arr</code></li>
<li>Space Complexity: <em>O</em>(<em>N</em>).</li>
</ul>
<hr />
<h3 id="approach-2-sorted-count-pairs">Approach 2: Sorted Count
Pairs</h3>
<p><strong>Intuition</strong></p>
<p>As in <em>Approach 1</em>, let's try to find the smallest left-most
chunk, where we have some expectation
<code>expect = sorted(arr)</code></p>
<p>If the elements were distinct, then it is enough to find the smallest
<code>k</code> with <code>max(arr[:k+1]) == expect[k]</code>, as this
must mean the elements of <code>arr[:k+1]</code> are some permutation of
<code>expect[:k+1]</code>.</p>
<p>Since the elements are not distinct, this fails; but we can amend the
cumulative multiplicity of each element to itself to make the elements
distinct.</p>
<p><strong>Algorithm</strong></p>
<p>Instead of elements <code>x</code>, have counted elements
<code>(x, count)</code> where <code>count</code> ranges from
<code>1</code> to the total number of <code>x</code> present in
<code>arr</code>.</p>
<p>Now <code>cur</code> will be the cumulative maximum of
<code>counted[:k+1]</code>, where we expect a result of
<code>Y = expect[k]</code>. We count the number of times they are
equal.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxChunksToSorted</span>(<span class="params">self, arr</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        count = collections.Counter()</span><br><span class="line">        counted = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">            count[x] += <span class="number">1</span></span><br><span class="line">            counted.append((x, count[x]))</span><br><span class="line"></span><br><span class="line">        ans, cur = <span class="number">0</span>, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> X, Y <span class="keyword">in</span> <span class="built_in">zip</span>(counted, <span class="built_in">sorted</span>(counted)):</span><br><span class="line">            cur = <span class="built_in">max</span>(cur, X)</span><br><span class="line">            <span class="keyword">if</span> cur == Y:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>log<em>N</em>), where
<em>N</em> is the length of <code>arr</code></li>
<li>Space Complexity: <em>O</em>(<em>N</em>).</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q867 Transpose Matrix</title>
    <url>/2019/05/04/2019-05-04-Q867-Transpose%20Matrix/</url>
    <content><![CDATA[<h1 id="transpose-matrix"><a
href="https://leetcode.com/problems/transpose-matrix/">Transpose
Matrix</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a matrix <code>A</code>, return the transpose of
<code>A</code>.</p>
<p>The transpose of a matrix is the matrix flipped over it's main
diagonal, switching the row and column indices of the matrix.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: [[1,2,3],[4,5,6],[7,8,9]] Output:
[[1,4,7],[2,5,8],[3,6,9]]</p>
</blockquote>
<blockquote>
<p><strong>Example 2</strong>:</p>
<p>Input: [[1,2,3],[4,5,6]] Output: [[1,4],[2,5],[3,6]]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= A.length &lt;= 1000</code></li>
<li><code>1 &lt;= A[0].length &lt;= 1000</code></li>
</ul>
</blockquote>
<hr />
<h3 id="approach-1-copy-directly">Approach 1: Copy Directly</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>The transpose of a matrix <code>A</code> with dimensions
<code>R x C</code> is a matrix <code>ans</code> with dimensions
<code>C x R</code> for which <code>ans[c][r] = A[r][c]</code>.</p>
<p>Let's initialize a new matrix <code>ans</code> representing the
answer. Then, we'll copy each entry of the matrix as appropriate.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transpose</span>(<span class="params">self, A</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A[<span class="number">0</span>])):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">                temp.append(A[j][i])</span><br><span class="line">            res.append(temp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.transpose(A)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q766 Toeplitz Matrix</title>
    <url>/2019/04/30/2019-04-30-Q766-Toeplitz-Matrix/</url>
    <content><![CDATA[<h1 id="toeplitz-matrix"><a
href="https://leetcode.com/problems/toeplitz-matrix/">Toeplitz
Matrix</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>A matrix is <em>Toeplitz</em> if every diagonal from top-left to
bottom-right has the same element.</p>
<p>Now given an <code>M x N</code> matrix, return <code>True</code> if
and only if the matrix is <em>Toeplitz</em>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: matrix = [ [1,2,3,4], [5,1,2,3], [9,5,1,2]] Output: True
Explanation: In the above grid, the diagonals are: "[9]", "[5, 5]", "[1,
1, 1]", "[2, 2, 2]", "[3, 3]", "[4]". In each diagonal all elements are
the same, so the answer is True.</p>
</blockquote>
<blockquote>
<p><strong>Example 2</strong>:</p>
<p>Input: matrix = [ [1,2], [2,2]] Output: False Explanation: The
diagonal "[1, 2]" has different elements.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>matrix</code> will be a 2D array of integers.</li>
<li><code>matrix</code> will have a number of rows and columns in range
<code>[1, 20]</code>.</li>
<li><code>matrix[i][j]</code> will be integers in range
<code>[0, 99]</code>.</li>
</ul>
</blockquote>
<hr />
<h3 id="approach-1-group-by-category">Approach 1: Group by Category</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>We ask what feature makes two coordinates <code>(r1, c1)</code> and
<code>(r2, c2)</code> belong to the same diagonal?</p>
<p>It turns out two coordinates are on the same diagonal if and only if
<code>r1 - c1 == r2 - c2</code>.</p>
<p>This leads to the following idea: remember the value of that diagonal
as <code>groups[r-c]</code>. If we see a mismatch, the matrix is not
Toeplitz; otherwise it is.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isToeplitzMatrix</span>(<span class="params">self, matrix</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        groups = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> r, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(matrix):</span><br><span class="line">            <span class="keyword">for</span> c, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">                <span class="keyword">if</span> (r - c) <span class="keyword">not</span> <span class="keyword">in</span> groups: <span class="comment"># 行与列的差不在groups</span></span><br><span class="line">                    groups[r - c] = val</span><br><span class="line">                <span class="keyword">elif</span> groups[r - c] != val:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<hr />
<h3 id="approach-2-compare-with-top-left-neighbor">Approach 2: Compare
With Top-Left Neighbor</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>For each diagonal with elements in order <span
class="math inline">\(a_1, a_2, a_3, \dots, a_k\)</span>, we can check
<span class="math inline">\(a_1 = a_2, a_2 = a_3, \dots, a_{k-1} =
a_k\)</span>. The matrix is <em>Toeplitz</em> if and only if all of
these conditions are true for all (top-left to bottom-right)
diagonals.</p>
<p>Every element belongs to some diagonal, and it's previous element (if
it exists) is it's top-left neighbor. Thus, for the square
<code>(r, c)</code>, we only need to check
<code>r == 0 OR c == 0 OR matrix[r-1][c-1] == matrix[r][c]</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isToeplitzMatrix</span>(<span class="params">self, matrix</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>(r == <span class="number">0</span> <span class="keyword">or</span> c == <span class="number">0</span> <span class="keyword">or</span> matrix[r-<span class="number">1</span>][c-<span class="number">1</span>] == val</span><br><span class="line">                   <span class="keyword">for</span> r, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(matrix)</span><br><span class="line">                   <span class="keyword">for</span> c, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(row))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># all(),相当于or的含义，括号中有元素就返回True，无元素返回False</span></span><br></pre></td></tr></table></figure>
<p>Runtime: 44 ms, faster than 98.04% of Python3 online submissions
forToeplitz Matrix.</p>
<p>Memory Usage: 13.1 MB, less than 6.86% of Python3 online submissions
for Toeplitz Matrix.</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q950 Reveal Cards In Increasing Order</title>
    <url>/2019/05/05/2019-05-05-Q950-Reveal-Cards-In-Increasing-Order/</url>
    <content><![CDATA[<h1 id="reveal-cards-in-increasing-order"><a
href="https://leetcode.com/problems/reveal-cards-in-increasing-order/">Reveal
Cards In Increasing Order</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>In a deck of cards, every card has a unique integer. You can order
the deck in any order you want.</p>
<p>Initially, all the cards start face down (unrevealed) in one
deck.</p>
<p>Now, you do the following steps repeatedly, until all cards are
revealed:</p>
<ol type="1">
<li>Take the top card of the deck, reveal it, and take it out of the
deck.</li>
<li>If there are still cards in the deck, put the next top card of the
deck at the bottom of the deck.</li>
<li>If there are still unrevealed cards, go back to step 1. Otherwise,
stop.</li>
</ol>
<p>Return an ordering of the deck that would reveal the cards in
<strong>increasing order.</strong></p>
<p>The first entry in the answer is considered to be the top of the
deck.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: [17,13,11,2,3,5,7] Output: [2,13,3,11,5,17,7] Explanation: We
get the deck in the order [17,13,11,2,3,5,7] (this order doesn't
matter), and reorder it. After reordering, the deck starts as
[2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and
move 13 to the bottom. The deck is now [3,11,5,17,7,13]. We reveal 3,
and move 11 to the bottom. The deck is now [5,17,7,13,11]. We reveal 5,
and move 17 to the bottom. The deck is now [7,13,11,17]. We reveal 7,
and move 13 to the bottom. The deck is now [11,17,13]. We reveal 11, and
move 17 to the bottom. The deck is now [13,17]. We reveal 13, and move
17 to the bottom. The deck is now [17]. We reveal 17. Since all the
cards revealed are in increasing order, the answer is correct.</p>
</blockquote>
<hr />
<h3 id="approach-1-simulation">Approach 1: Simulation</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Simulate the revealing process with a deck set to
<code>[0, 1, 2, ...]</code>. If for example this deck is revealed in the
order <code>[0, 2, 4, ...]</code> then we know we need to put the
smallest card in index <code>0</code>, the second smallest card in index
<code>2</code>, the third smallest card in index <code>4</code>,
etc.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deckRevealedIncreasing</span>(<span class="params">self, deck</span>):</span><br><span class="line">        N = <span class="built_in">len</span>(deck)</span><br><span class="line">        index = collections.deque(<span class="built_in">range</span>(N))</span><br><span class="line">        ans = [<span class="literal">None</span>] * N</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> card <span class="keyword">in</span> <span class="built_in">sorted</span>(deck):</span><br><span class="line">            ans[index.popleft()] = card</span><br><span class="line">            <span class="keyword">if</span> index:</span><br><span class="line">                index.append(index.popleft())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A = [<span class="number">17</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.deckRevealedIncreasing(A)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">deque()是一种双向队列，同时具有队和栈的性质，可以旋转、移动等。具体用法如下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">d = collections.deque([])</span></span><br><span class="line"><span class="string">d.append(&#x27;a&#x27;) # 在最右边添加一个元素，此时 d=deque(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">d.appendleft(&#x27;b&#x27;) # 在最左边添加一个元素，此时 d=deque([&#x27;b&#x27;, &#x27;a&#x27;])</span></span><br><span class="line"><span class="string">d.extend([&#x27;c&#x27;,&#x27;d&#x27;]) # 在最右边添加所有元素，此时 d=deque([&#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line"><span class="string">d.extendleft([&#x27;e&#x27;,&#x27;f&#x27;]) # 在最左边添加所有元素，此时 d=deque([&#x27;f&#x27;, &#x27;e&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line"><span class="string">d.pop() # 将最右边的元素取出，返回 &#x27;d&#x27;，此时 d=deque([&#x27;f&#x27;, &#x27;e&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"><span class="string">d.popleft() # 将最左边的元素取出，返回 &#x27;f&#x27;，此时 d=deque([&#x27;e&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"><span class="string">d.rotate(-2) # 向左旋转两个位置（正数则向右旋转），此时 d=deque([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"><span class="string">d.count(&#x27;a&#x27;) # 队列中&#x27;a&#x27;的个数，返回 1</span></span><br><span class="line"><span class="string">d.remove(&#x27;c&#x27;) # 从队列中将&#x27;c&#x27;删除，此时 d=deque([&#x27;a&#x27;, &#x27;e&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"><span class="string">d.reverse() # 将队列倒序，此时 d=deque([&#x27;b&#x27;, &#x27;e&#x27;, &#x27;a&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Q961 N-Repeated Element in Size 2N Array</title>
    <url>/2019/05/07/2019-05-07-Q961-N-Repeated-Element-in-Size-2N-Array/</url>
    <content><![CDATA[<h1 id="n-repeated-element-in-size-2n-array"><a
href="https://leetcode.com/problems/n-repeated-element-in-size-2n-array/">N-Repeated
Element in Size 2N Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>In a array <code>A</code> of size <code>2N</code>, there are
<code>N+1</code> unique elements, and exactly one of these elements is
repeated N times.</p>
<p>Return the element repeated <code>N</code> times.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: [1,2,3,3] Output: 3</p>
</blockquote>
<blockquote>
<p><strong>Example 2</strong>:</p>
<p>Input: [2,1,2,5,3,2] Output: 2</p>
</blockquote>
<blockquote>
<p><strong>Example 3</strong>:</p>
<p>Input: [5,1,5,2,5,3,5,4] Output: 5</p>
</blockquote>
<blockquote>
<p><strong>Note</strong>:</p>
<ol type="1">
<li><code>4 &lt;= A.length &lt;= 10000</code></li>
<li><code>0 &lt;= A[i] &lt; 10000</code></li>
<li><code>A.length</code> is even</li>
</ol>
</blockquote>
<h3 id="approach-1-hash-table-original-answer">Approach 1: Hash Table
(Original Answer)</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Using Hash table to distinguish repeated element in array
<code>A</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repeatedNTimes</span>(<span class="params">self, A</span>):</span><br><span class="line">        Hashmap=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 建立Hash Table</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(A)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span>(A[i] <span class="keyword">in</span> Hashmap):</span><br><span class="line">                Hashmap[A[i]] = i <span class="comment">#键是数值，值是序号</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> A[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A =[<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.repeatedNTimes(A)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 48 ms, faster than 85.41% of Python3 online submissions for
N-Repeated Element in Size 2N Array.</li>
<li>Memory Usage: 14.1 MB, less than 5.12% of Python3 online submissions
for N-Repeated Element in Size 2N Array.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Emoji in MD</title>
    <url>/2019/05/06/2019-05-06-Markdown-Emoji/</url>
    <content><![CDATA[<h1 id="markdown-emoji"><a
href="https://github.com/guodongxiaren/README/edit/master/emoji.md">Markdown
Emoji</a></h1>
<h2 id="人物">人物</h2>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 18%" />
<col style="width: 19%" />
<col style="width: 18%" />
<col style="width: 13%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>:bowtie:</code></td>
<td style="text-align: center;">:bowtie:</td>
<td style="text-align: center;"><code>:smile:</code></td>
<td style="text-align: center;">:smile:</td>
<td style="text-align: center;"><code>:laughing:</code></td>
<td style="text-align: center;">:laughing:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:blush:</code></td>
<td style="text-align: center;">:blush:</td>
<td style="text-align: center;"><code>:smiley:</code></td>
<td style="text-align: center;">:smiley:</td>
<td style="text-align: center;"><code>:relaxed:</code></td>
<td style="text-align: center;">:relaxed:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:smirk:</code></td>
<td style="text-align: center;">:smirk:</td>
<td style="text-align: center;"><code>:heart_eyes:</code></td>
<td style="text-align: center;">:heart_eyes:</td>
<td style="text-align: center;"><code>:kissing_heart:</code></td>
<td style="text-align: center;">:kissing_heart:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:kissing_closed_eyes:</code></td>
<td style="text-align: center;">:kissing_closed_eyes:</td>
<td style="text-align: center;"><code>:flushed:</code></td>
<td style="text-align: center;">:flushed:</td>
<td style="text-align: center;"><code>:relieved:</code></td>
<td style="text-align: center;">:relieved:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:satisfied:</code></td>
<td style="text-align: center;">:satisfied:</td>
<td style="text-align: center;"><code>:grin:</code></td>
<td style="text-align: center;">:grin:</td>
<td style="text-align: center;"><code>:wink:</code></td>
<td style="text-align: center;">:wink:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:stuck_out_tongue_winking_eye:</code></td>
<td style="text-align: center;">:stuck_out_tongue_winking_eye:</td>
<td
style="text-align: center;"><code>:stuck_out_tongue_closed_eyes:</code></td>
<td style="text-align: center;">:stuck_out_tongue_closed_eyes:</td>
<td style="text-align: center;"><code>:grinning:</code></td>
<td style="text-align: center;">:grinning:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:kissing:</code></td>
<td style="text-align: center;">:kissing:</td>
<td style="text-align: center;"><code>:kissing_smiling_eyes:</code></td>
<td style="text-align: center;">:kissing_smiling_eyes:</td>
<td style="text-align: center;"><code>:stuck_out_tongue:</code></td>
<td style="text-align: center;">:stuck_out_tongue:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sleeping:</code></td>
<td style="text-align: center;">:sleeping:</td>
<td style="text-align: center;"><code>:worried:</code></td>
<td style="text-align: center;">:worried:</td>
<td style="text-align: center;"><code>:frowning:</code></td>
<td style="text-align: center;">:frowning:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:anguished:</code></td>
<td style="text-align: center;">:anguished:</td>
<td style="text-align: center;"><code>:open_mouth:</code></td>
<td style="text-align: center;">:open_mouth:</td>
<td style="text-align: center;"><code>:grimacing:</code></td>
<td style="text-align: center;">:grimacing:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:confused:</code></td>
<td style="text-align: center;">:confused:</td>
<td style="text-align: center;"><code>:hushed:</code></td>
<td style="text-align: center;">:hushed:</td>
<td style="text-align: center;"><code>:expressionless:</code></td>
<td style="text-align: center;">:expressionless:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:unamused:</code></td>
<td style="text-align: center;">:unamused:</td>
<td style="text-align: center;"><code>:sweat_smile:</code></td>
<td style="text-align: center;">:sweat_smile:</td>
<td style="text-align: center;"><code>:sweat:</code></td>
<td style="text-align: center;">:sweat:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:disappointed_relieved:</code></td>
<td style="text-align: center;">:disappointed_relieved:</td>
<td style="text-align: center;"><code>:weary:</code></td>
<td style="text-align: center;">:weary:</td>
<td style="text-align: center;"><code>:pensive:</code></td>
<td style="text-align: center;">:pensive:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:disappointed:</code></td>
<td style="text-align: center;">:disappointed:</td>
<td style="text-align: center;"><code>:confounded:</code></td>
<td style="text-align: center;">:confounded:</td>
<td style="text-align: center;"><code>:fearful:</code></td>
<td style="text-align: center;">:fearful:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:cold_sweat:</code></td>
<td style="text-align: center;">:cold_sweat:</td>
<td style="text-align: center;"><code>:persevere:</code></td>
<td style="text-align: center;">:persevere:</td>
<td style="text-align: center;"><code>:cry:</code></td>
<td style="text-align: center;">:cry:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:sob:</code></td>
<td style="text-align: center;">:sob:</td>
<td style="text-align: center;"><code>:joy:</code></td>
<td style="text-align: center;">:joy:</td>
<td style="text-align: center;"><code>:astonished:</code></td>
<td style="text-align: center;">:astonished:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:scream:</code></td>
<td style="text-align: center;">:scream:</td>
<td style="text-align: center;"><code>:neckbeard:</code></td>
<td style="text-align: center;">:neckbeard:</td>
<td style="text-align: center;"><code>:tired_face:</code></td>
<td style="text-align: center;">:tired_face:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:angry:</code></td>
<td style="text-align: center;">:angry:</td>
<td style="text-align: center;"><code>:rage:</code></td>
<td style="text-align: center;">:rage:</td>
<td style="text-align: center;"><code>:triumph:</code></td>
<td style="text-align: center;">:triumph:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sleepy:</code></td>
<td style="text-align: center;">:sleepy:</td>
<td style="text-align: center;"><code>:yum:</code></td>
<td style="text-align: center;">:yum:</td>
<td style="text-align: center;"><code>:mask:</code></td>
<td style="text-align: center;">:mask:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:sunglasses:</code></td>
<td style="text-align: center;">:sunglasses:</td>
<td style="text-align: center;"><code>:dizzy_face:</code></td>
<td style="text-align: center;">:dizzy_face:</td>
<td style="text-align: center;"><code>:imp:</code></td>
<td style="text-align: center;">:imp:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:smiling_imp:</code></td>
<td style="text-align: center;">:smiling_imp:</td>
<td style="text-align: center;"><code>:neutral_face:</code></td>
<td style="text-align: center;">:neutral_face:</td>
<td style="text-align: center;"><code>:no_mouth:</code></td>
<td style="text-align: center;">:no_mouth:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:innocent:</code></td>
<td style="text-align: center;">:innocent:</td>
<td style="text-align: center;"><code>:alien:</code></td>
<td style="text-align: center;">:alien:</td>
<td style="text-align: center;"><code>:yellow_heart:</code></td>
<td style="text-align: center;">:yellow_heart:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:blue_heart:</code></td>
<td style="text-align: center;">:blue_heart:</td>
<td style="text-align: center;"><code>:purple_heart:</code></td>
<td style="text-align: center;">:purple_heart:</td>
<td style="text-align: center;"><code>:heart:</code></td>
<td style="text-align: center;">:heart:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:green_heart:</code></td>
<td style="text-align: center;">:green_heart:</td>
<td style="text-align: center;"><code>:broken_heart:</code></td>
<td style="text-align: center;">:broken_heart:</td>
<td style="text-align: center;"><code>:heartbeat:</code></td>
<td style="text-align: center;">:heartbeat:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:heartpulse:</code></td>
<td style="text-align: center;">:heartpulse:</td>
<td style="text-align: center;"><code>:two_hearts:</code></td>
<td style="text-align: center;">:two_hearts:</td>
<td style="text-align: center;"><code>:revolving_hearts:</code></td>
<td style="text-align: center;">:revolving_hearts:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:cupid:</code></td>
<td style="text-align: center;">:cupid:</td>
<td style="text-align: center;"><code>:sparkling_heart:</code></td>
<td style="text-align: center;">:sparkling_heart:</td>
<td style="text-align: center;"><code>:sparkles:</code></td>
<td style="text-align: center;">:sparkles:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:star:</code></td>
<td style="text-align: center;">:star:</td>
<td style="text-align: center;"><code>:star2:</code></td>
<td style="text-align: center;">:star2:</td>
<td style="text-align: center;"><code>:dizzy:</code></td>
<td style="text-align: center;">:dizzy:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:boom:</code></td>
<td style="text-align: center;">:boom:</td>
<td style="text-align: center;"><code>:collision:</code></td>
<td style="text-align: center;">:collision:</td>
<td style="text-align: center;"><code>:anger:</code></td>
<td style="text-align: center;">:anger:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:exclamation:</code></td>
<td style="text-align: center;">:exclamation:</td>
<td style="text-align: center;"><code>:question:</code></td>
<td style="text-align: center;">:question:</td>
<td style="text-align: center;"><code>:grey_exclamation:</code></td>
<td style="text-align: center;">:grey_exclamation:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:grey_question:</code></td>
<td style="text-align: center;">:grey_question:</td>
<td style="text-align: center;"><code>:zzz:</code></td>
<td style="text-align: center;">:zzz:</td>
<td style="text-align: center;"><code>:dash:</code></td>
<td style="text-align: center;">:dash:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sweat_drops:</code></td>
<td style="text-align: center;">:sweat_drops:</td>
<td style="text-align: center;"><code>:notes:</code></td>
<td style="text-align: center;">:notes:</td>
<td style="text-align: center;"><code>:musical_note:</code></td>
<td style="text-align: center;">:musical_note:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:fire:</code></td>
<td style="text-align: center;">:fire:</td>
<td style="text-align: center;"><code>:hankey:</code></td>
<td style="text-align: center;">:hankey:</td>
<td style="text-align: center;"><code>:poop:</code></td>
<td style="text-align: center;">:poop:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>::</code></td>
<td style="text-align: center;">:shit:</td>
<td style="text-align: center;"><code>:+1:</code></td>
<td style="text-align: center;">:+1:</td>
<td style="text-align: center;"><code>:thumbsup:</code></td>
<td style="text-align: center;">:thumbsup:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:-1:</code></td>
<td style="text-align: center;">:-1:</td>
<td style="text-align: center;"><code>:thumbsdown:</code></td>
<td style="text-align: center;">:thumbsdown:</td>
<td style="text-align: center;"><code>:ok_hand:</code></td>
<td style="text-align: center;">:ok_hand:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:punch:</code></td>
<td style="text-align: center;">:punch:</td>
<td style="text-align: center;"><code>:facepunch:</code></td>
<td style="text-align: center;">:facepunch:</td>
<td style="text-align: center;"><code>:fist:</code></td>
<td style="text-align: center;">:fist:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:v:</code></td>
<td style="text-align: center;">:v:</td>
<td style="text-align: center;"><code>:wave:</code></td>
<td style="text-align: center;">:wave:</td>
<td style="text-align: center;"><code>:hand:</code></td>
<td style="text-align: center;">:hand:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:raised_hand:</code></td>
<td style="text-align: center;">:raised_hand:</td>
<td style="text-align: center;"><code>:open_hands:</code></td>
<td style="text-align: center;">:open_hands:</td>
<td style="text-align: center;"><code>:point_up:</code></td>
<td style="text-align: center;">:point_up:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:point_down:</code></td>
<td style="text-align: center;">:point_down:</td>
<td style="text-align: center;"><code>:point_left:</code></td>
<td style="text-align: center;">:point_left:</td>
<td style="text-align: center;"><code>:point_right:</code></td>
<td style="text-align: center;">:point_right:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:raised_hands:</code></td>
<td style="text-align: center;">:raised_hands:</td>
<td style="text-align: center;"><code>:pray:</code></td>
<td style="text-align: center;">:pray:</td>
<td style="text-align: center;"><code>:point_up_2:</code></td>
<td style="text-align: center;">:point_up_2:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:clap:</code></td>
<td style="text-align: center;">:clap:</td>
<td style="text-align: center;"><code>:muscle:</code></td>
<td style="text-align: center;">:muscle:</td>
<td style="text-align: center;"><code>:metal:</code></td>
<td style="text-align: center;">:metal:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:fu:</code></td>
<td style="text-align: center;">:fu:</td>
<td style="text-align: center;"><code>:walking:</code></td>
<td style="text-align: center;">:walking:</td>
<td style="text-align: center;"><code>:runner:</code></td>
<td style="text-align: center;">:runner:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:running:</code></td>
<td style="text-align: center;">:running:</td>
<td style="text-align: center;"><code>:couple:</code></td>
<td style="text-align: center;">:couple:</td>
<td style="text-align: center;"><code>:family:</code></td>
<td style="text-align: center;">:family:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:two_men_holding_hands:</code></td>
<td style="text-align: center;">:two_men_holding_hands:</td>
<td
style="text-align: center;"><code>:two_women_holding_hands:</code></td>
<td style="text-align: center;">:two_women_holding_hands:</td>
<td style="text-align: center;"><code>:dancer:</code></td>
<td style="text-align: center;">:dancer:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:dancers:</code></td>
<td style="text-align: center;">:dancers:</td>
<td style="text-align: center;"><code>:ok_woman:</code></td>
<td style="text-align: center;">:ok_woman:</td>
<td style="text-align: center;"><code>:no_good:</code></td>
<td style="text-align: center;">:no_good:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:information_desk_person:</code></td>
<td style="text-align: center;">:information_desk_person:</td>
<td style="text-align: center;"><code>:raising_hand:</code></td>
<td style="text-align: center;">:raising_hand:</td>
<td style="text-align: center;"><code>:bride_with_veil:</code></td>
<td style="text-align: center;">:bride_with_veil:</td>
</tr>
<tr class="odd">
<td
style="text-align: center;"><code>:person_with_pouting_face:</code></td>
<td style="text-align: center;">:person_with_pouting_face:</td>
<td style="text-align: center;"><code>:person_frowning:</code></td>
<td style="text-align: center;">:person_frowning:</td>
<td style="text-align: center;"><code>:bow:</code></td>
<td style="text-align: center;">:bow:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:couplekiss:</code></td>
<td style="text-align: center;">:couplekiss:</td>
<td style="text-align: center;"><code>:couple_with_heart:</code></td>
<td style="text-align: center;">:couple_with_heart:</td>
<td style="text-align: center;"><code>:massage:</code></td>
<td style="text-align: center;">:massage:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:haircut:</code></td>
<td style="text-align: center;">:haircut:</td>
<td style="text-align: center;"><code>:nail_care:</code></td>
<td style="text-align: center;">:nail_care:</td>
<td style="text-align: center;"><code>:boy:</code></td>
<td style="text-align: center;">:boy:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:girl:</code></td>
<td style="text-align: center;">:girl:</td>
<td style="text-align: center;"><code>:woman:</code></td>
<td style="text-align: center;">:woman:</td>
<td style="text-align: center;"><code>:man:</code></td>
<td style="text-align: center;">:man:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:baby:</code></td>
<td style="text-align: center;">:baby:</td>
<td style="text-align: center;"><code>:older_woman:</code></td>
<td style="text-align: center;">:older_woman:</td>
<td style="text-align: center;"><code>:older_man:</code></td>
<td style="text-align: center;">:older_man:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:person_with_blond_hair:</code></td>
<td style="text-align: center;">:person_with_blond_hair:</td>
<td style="text-align: center;"><code>:man_with_gua_pi_mao:</code></td>
<td style="text-align: center;">:man_with_gua_pi_mao:</td>
<td style="text-align: center;"><code>:man_with_turban:</code></td>
<td style="text-align: center;">:man_with_turban:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:construction_worker:</code></td>
<td style="text-align: center;">:construction_worker:</td>
<td style="text-align: center;"><code>:cop:</code></td>
<td style="text-align: center;">:cop:</td>
<td style="text-align: center;"><code>:angel:</code></td>
<td style="text-align: center;">:angel:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:princess:</code></td>
<td style="text-align: center;">:princess:</td>
<td style="text-align: center;"><code>:smiley_cat:</code></td>
<td style="text-align: center;">:smiley_cat:</td>
<td style="text-align: center;"><code>:smile_cat:</code></td>
<td style="text-align: center;">:smile_cat:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:heart_eyes_cat:</code></td>
<td style="text-align: center;">:heart_eyes_cat:</td>
<td style="text-align: center;"><code>:kissing_cat:</code></td>
<td style="text-align: center;">:kissing_cat:</td>
<td style="text-align: center;"><code>:smirk_cat:</code></td>
<td style="text-align: center;">:smirk_cat:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:scream_cat:</code></td>
<td style="text-align: center;">:scream_cat:</td>
<td style="text-align: center;"><code>:crying_cat_face:</code></td>
<td style="text-align: center;">:crying_cat_face:</td>
<td style="text-align: center;"><code>:joy_cat:</code></td>
<td style="text-align: center;">:joy_cat:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:pouting_cat:</code></td>
<td style="text-align: center;">:pouting_cat:</td>
<td style="text-align: center;"><code>:japanese_ogre:</code></td>
<td style="text-align: center;">:japanese_ogre:</td>
<td style="text-align: center;"><code>:japanese_goblin:</code></td>
<td style="text-align: center;">:japanese_goblin:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:see_no_evil:</code></td>
<td style="text-align: center;">:see_no_evil:</td>
<td style="text-align: center;"><code>:hear_no_evil:</code></td>
<td style="text-align: center;">:hear_no_evil:</td>
<td style="text-align: center;"><code>:speak_no_evil:</code></td>
<td style="text-align: center;">:speak_no_evil:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:guardsman:</code></td>
<td style="text-align: center;">:guardsman:</td>
<td style="text-align: center;"><code>:skull:</code></td>
<td style="text-align: center;">:skull:</td>
<td style="text-align: center;"><code>:feet:</code></td>
<td style="text-align: center;">:feet:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:lips:</code></td>
<td style="text-align: center;">:lips:</td>
<td style="text-align: center;"><code>:kiss:</code></td>
<td style="text-align: center;">:kiss:</td>
<td style="text-align: center;"><code>:droplet:</code></td>
<td style="text-align: center;">:droplet:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:ear:</code></td>
<td style="text-align: center;">:ear:</td>
<td style="text-align: center;"><code>:eyes:</code></td>
<td style="text-align: center;">:eyes:</td>
<td style="text-align: center;"><code>:nose:</code></td>
<td style="text-align: center;">:nose:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tongue:</code></td>
<td style="text-align: center;">:tongue:</td>
<td style="text-align: center;"><code>:love_letter:</code></td>
<td style="text-align: center;">:love_letter:</td>
<td style="text-align: center;"><code>:bust_in_silhouette:</code></td>
<td style="text-align: center;">:bust_in_silhouette:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:busts_in_silhouette:</code></td>
<td style="text-align: center;">:busts_in_silhouette:</td>
<td style="text-align: center;"><code>:speech_balloon:</code></td>
<td style="text-align: center;">:speech_balloon:</td>
<td style="text-align: center;"><code>:thought_balloon:</code></td>
<td style="text-align: center;">:thought_balloon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:feelsgood:</code></td>
<td style="text-align: center;">:feelsgood:</td>
<td style="text-align: center;"><code>:finnadie:</code></td>
<td style="text-align: center;">:finnadie:</td>
<td style="text-align: center;"><code>:goberserk:</code></td>
<td style="text-align: center;">:goberserk:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:godmode:</code></td>
<td style="text-align: center;">:godmode:</td>
<td style="text-align: center;"><code>:hurtrealbad:</code></td>
<td style="text-align: center;">:hurtrealbad:</td>
<td style="text-align: center;"><code>:rage1:</code></td>
<td style="text-align: center;">:rage1:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:rage2:</code></td>
<td style="text-align: center;">:rage2:</td>
<td style="text-align: center;"><code>:rage3:</code></td>
<td style="text-align: center;">:rage3:</td>
<td style="text-align: center;"><code>:rage4:</code></td>
<td style="text-align: center;">:rage4:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:suspect:</code></td>
<td style="text-align: center;">:suspect:</td>
<td style="text-align: center;"><code>:trollface:</code></td>
<td style="text-align: center;">:trollface:</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h2 id="自然">自然</h2>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 13%" />
<col style="width: 18%" />
<col style="width: 17%" />
<col style="width: 19%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>:sunny:</code></td>
<td style="text-align: center;">:sunny:</td>
<td style="text-align: center;"><code>:umbrella:</code></td>
<td style="text-align: center;">:umbrella:</td>
<td style="text-align: center;"><code>:cloud:</code></td>
<td style="text-align: center;">:cloud:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:snowflake:</code></td>
<td style="text-align: center;">:snowflake:</td>
<td style="text-align: center;"><code>:snowman:</code></td>
<td style="text-align: center;">:snowman:</td>
<td style="text-align: center;"><code>:zap:</code></td>
<td style="text-align: center;">:zap:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:cyclone:</code></td>
<td style="text-align: center;">:cyclone:</td>
<td style="text-align: center;"><code>:foggy:</code></td>
<td style="text-align: center;">:foggy:</td>
<td style="text-align: center;"><code>:ocean:</code></td>
<td style="text-align: center;">:ocean:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:cat:</code></td>
<td style="text-align: center;">:cat:</td>
<td style="text-align: center;"><code>:dog:</code></td>
<td style="text-align: center;">:dog:</td>
<td style="text-align: center;"><code>:mouse:</code></td>
<td style="text-align: center;">:mouse:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:hamster:</code></td>
<td style="text-align: center;">:hamster:</td>
<td style="text-align: center;"><code>:rabbit:</code></td>
<td style="text-align: center;">:rabbit:</td>
<td style="text-align: center;"><code>:wolf:</code></td>
<td style="text-align: center;">:wolf:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:frog:</code></td>
<td style="text-align: center;">:frog:</td>
<td style="text-align: center;"><code>:tiger:</code></td>
<td style="text-align: center;">:tiger:</td>
<td style="text-align: center;"><code>:koala:</code></td>
<td style="text-align: center;">:koala:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:bear:</code></td>
<td style="text-align: center;">:bear:</td>
<td style="text-align: center;"><code>:pig:</code></td>
<td style="text-align: center;">:pig:</td>
<td style="text-align: center;"><code>:pig_nose:</code></td>
<td style="text-align: center;">:pig_nose:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:cow:</code></td>
<td style="text-align: center;">:cow:</td>
<td style="text-align: center;"><code>:boar:</code></td>
<td style="text-align: center;">:boar:</td>
<td style="text-align: center;"><code>:monkey_face:</code></td>
<td style="text-align: center;">:monkey_face:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:monkey:</code></td>
<td style="text-align: center;">:monkey:</td>
<td style="text-align: center;"><code>:horse:</code></td>
<td style="text-align: center;">:horse:</td>
<td style="text-align: center;"><code>:racehorse:</code></td>
<td style="text-align: center;">:racehorse:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:camel:</code></td>
<td style="text-align: center;">:camel:</td>
<td style="text-align: center;"><code>:sheep:</code></td>
<td style="text-align: center;">:sheep:</td>
<td style="text-align: center;"><code>:elephant:</code></td>
<td style="text-align: center;">:elephant:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:panda_face:</code></td>
<td style="text-align: center;">:panda_face:</td>
<td style="text-align: center;"><code>:snake:</code></td>
<td style="text-align: center;">:snake:</td>
<td style="text-align: center;"><code>:bird:</code></td>
<td style="text-align: center;">:bird:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:baby_chick:</code></td>
<td style="text-align: center;">:baby_chick:</td>
<td style="text-align: center;"><code>:hatched_chick:</code></td>
<td style="text-align: center;">:hatched_chick:</td>
<td style="text-align: center;"><code>:hatching_chick:</code></td>
<td style="text-align: center;">:hatching_chick:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:chicken:</code></td>
<td style="text-align: center;">:chicken:</td>
<td style="text-align: center;"><code>:penguin:</code></td>
<td style="text-align: center;">:penguin:</td>
<td style="text-align: center;"><code>:turtle:</code></td>
<td style="text-align: center;">:turtle:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bug:</code></td>
<td style="text-align: center;">:bug:</td>
<td style="text-align: center;"><code>:honeybee:</code></td>
<td style="text-align: center;">:honeybee:</td>
<td style="text-align: center;"><code>:ant:</code></td>
<td style="text-align: center;">:ant:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:beetle:</code></td>
<td style="text-align: center;">:beetle:</td>
<td style="text-align: center;"><code>:snail:</code></td>
<td style="text-align: center;">:snail:</td>
<td style="text-align: center;"><code>:octopus:</code></td>
<td style="text-align: center;">:octopus:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tropical_fish:</code></td>
<td style="text-align: center;">:tropical_fish:</td>
<td style="text-align: center;"><code>:fish:</code></td>
<td style="text-align: center;">:fish:</td>
<td style="text-align: center;"><code>:whale:</code></td>
<td style="text-align: center;">:whale:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:whale2:</code></td>
<td style="text-align: center;">:whale2:</td>
<td style="text-align: center;"><code>:dolphin:</code></td>
<td style="text-align: center;">:dolphin:</td>
<td style="text-align: center;"><code>:cow2:</code></td>
<td style="text-align: center;">:cow2:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:ram:</code></td>
<td style="text-align: center;">:ram:</td>
<td style="text-align: center;"><code>:rat:</code></td>
<td style="text-align: center;">:rat:</td>
<td style="text-align: center;"><code>:water_buffalo:</code></td>
<td style="text-align: center;">:water_buffalo:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:tiger2:</code></td>
<td style="text-align: center;">:tiger2:</td>
<td style="text-align: center;"><code>:rabbit2:</code></td>
<td style="text-align: center;">:rabbit2:</td>
<td style="text-align: center;"><code>:dragon:</code></td>
<td style="text-align: center;">:dragon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:goat:</code></td>
<td style="text-align: center;">:goat:</td>
<td style="text-align: center;"><code>:rooster:</code></td>
<td style="text-align: center;">:rooster:</td>
<td style="text-align: center;"><code>:dog2:</code></td>
<td style="text-align: center;">:dog2:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:pig2:</code></td>
<td style="text-align: center;">:pig2:</td>
<td style="text-align: center;"><code>:mouse2:</code></td>
<td style="text-align: center;">:mouse2:</td>
<td style="text-align: center;"><code>:ox:</code></td>
<td style="text-align: center;">:ox:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:dragon_face:</code></td>
<td style="text-align: center;">:dragon_face:</td>
<td style="text-align: center;"><code>:blowfish:</code></td>
<td style="text-align: center;">:blowfish:</td>
<td style="text-align: center;"><code>:crocodile:</code></td>
<td style="text-align: center;">:crocodile:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:dromedary_camel:</code></td>
<td style="text-align: center;">:dromedary_camel:</td>
<td style="text-align: center;"><code>:leopard:</code></td>
<td style="text-align: center;">:leopard:</td>
<td style="text-align: center;"><code>:cat2:</code></td>
<td style="text-align: center;">:cat2:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:poodle:</code></td>
<td style="text-align: center;">:poodle:</td>
<td style="text-align: center;"><code>:paw_prints:</code></td>
<td style="text-align: center;">:paw_prints:</td>
<td style="text-align: center;"><code>:bouquet:</code></td>
<td style="text-align: center;">:bouquet:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:cherry_blossom:</code></td>
<td style="text-align: center;">:cherry_blossom:</td>
<td style="text-align: center;"><code>:tulip:</code></td>
<td style="text-align: center;">:tulip:</td>
<td style="text-align: center;"><code>:four_leaf_clover:</code></td>
<td style="text-align: center;">:four_leaf_clover:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:rose:</code></td>
<td style="text-align: center;">:rose:</td>
<td style="text-align: center;"><code>:sunflower:</code></td>
<td style="text-align: center;">:sunflower:</td>
<td style="text-align: center;"><code>:hibiscus:</code></td>
<td style="text-align: center;">:hibiscus:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:maple_leaf:</code></td>
<td style="text-align: center;">:maple_leaf:</td>
<td style="text-align: center;"><code>:leaves:</code></td>
<td style="text-align: center;">:leaves:</td>
<td style="text-align: center;"><code>:fallen_leaf:</code></td>
<td style="text-align: center;">:fallen_leaf:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:herb:</code></td>
<td style="text-align: center;">:herb:</td>
<td style="text-align: center;"><code>:mushroom:</code></td>
<td style="text-align: center;">:mushroom:</td>
<td style="text-align: center;"><code>:cactus:</code></td>
<td style="text-align: center;">:cactus:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:palm_tree:</code></td>
<td style="text-align: center;">:palm_tree:</td>
<td style="text-align: center;"><code>:evergreen_tree:</code></td>
<td style="text-align: center;">:evergreen_tree:</td>
<td style="text-align: center;"><code>:deciduous_tree:</code></td>
<td style="text-align: center;">:deciduous_tree:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:chestnut:</code></td>
<td style="text-align: center;">:chestnut:</td>
<td style="text-align: center;"><code>:seedling:</code></td>
<td style="text-align: center;">:seedling:</td>
<td style="text-align: center;"><code>:blossom:</code></td>
<td style="text-align: center;">:blossom:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:ear_of_rice:</code></td>
<td style="text-align: center;">:ear_of_rice:</td>
<td style="text-align: center;"><code>:shell:</code></td>
<td style="text-align: center;">:shell:</td>
<td style="text-align: center;"><code>:globe_with_meridians:</code></td>
<td style="text-align: center;">:globe_with_meridians:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sun_with_face:</code></td>
<td style="text-align: center;">:sun_with_face:</td>
<td style="text-align: center;"><code>:full_moon_with_face:</code></td>
<td style="text-align: center;">:full_moon_with_face:</td>
<td style="text-align: center;"><code>:new_moon_with_face:</code></td>
<td style="text-align: center;">:new_moon_with_face:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:new_moon:</code></td>
<td style="text-align: center;">:new_moon:</td>
<td style="text-align: center;"><code>:waxing_crescent_moon:</code></td>
<td style="text-align: center;">:waxing_crescent_moon:</td>
<td style="text-align: center;"><code>:first_quarter_moon:</code></td>
<td style="text-align: center;">:first_quarter_moon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:full_moon:</code></td>
<td style="text-align: center;">:full_moon:</td>
<td style="text-align: center;"><code>:waning_gibbous_moon:</code></td>
<td style="text-align: center;">:waning_gibbous_moon:</td>
<td style="text-align: center;"><code>:last_quarter_moon:</code></td>
<td style="text-align: center;">:last_quarter_moon:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:waning_crescent_moon:</code></td>
<td style="text-align: center;">:waning_crescent_moon:</td>
<td
style="text-align: center;"><code>:last_quarter_moon_with_face:</code></td>
<td style="text-align: center;">:last_quarter_moon_with_face:</td>
<td
style="text-align: center;"><code>:first_quarter_moon_with_face:</code></td>
<td style="text-align: center;">:first_quarter_moon_with_face:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:moon:</code></td>
<td style="text-align: center;">:moon:</td>
<td style="text-align: center;"><code>:earth_africa:</code></td>
<td style="text-align: center;">:earth_africa:</td>
<td style="text-align: center;"><code>:earth_americas:</code></td>
<td style="text-align: center;">:earth_americas:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:earth_asia:</code></td>
<td style="text-align: center;">:earth_asia:</td>
<td style="text-align: center;"><code>:volcano:</code></td>
<td style="text-align: center;">:volcano:</td>
<td style="text-align: center;"><code>:milky_way:</code></td>
<td style="text-align: center;">:milky_way:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:partly_sunny:</code></td>
<td style="text-align: center;">:partly_sunny:</td>
<td style="text-align: center;"><code>:octocat:</code></td>
<td style="text-align: center;">:octocat:</td>
<td style="text-align: center;"><code>:squirrel:</code></td>
<td style="text-align: center;">:squirrel:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:waxing_gibbous_moon:</code></td>
<td style="text-align: center;">:waxing_gibbous_moon:</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h2 id="物体">物体</h2>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 18%" />
<col style="width: 17%" />
<col style="width: 16%" />
<col style="width: 14%" />
<col style="width: 13%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>:bamboo:</code></td>
<td style="text-align: center;">:bamboo:</td>
<td style="text-align: center;"><code>:gift_heart:</code></td>
<td style="text-align: center;">:gift_heart:</td>
<td style="text-align: center;"><code>:dolls:</code></td>
<td style="text-align: center;">:dolls:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:school_satchel:</code></td>
<td style="text-align: center;">:school_satchel:</td>
<td style="text-align: center;"><code>:mortar_board:</code></td>
<td style="text-align: center;">:mortar_board:</td>
<td style="text-align: center;"><code>:flags:</code></td>
<td style="text-align: center;">:flags:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:fireworks:</code></td>
<td style="text-align: center;">:fireworks:</td>
<td style="text-align: center;"><code>:sparkler:</code></td>
<td style="text-align: center;">:sparkler:</td>
<td style="text-align: center;"><code>:wind_chime:</code></td>
<td style="text-align: center;">:wind_chime:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:rice_scene:</code></td>
<td style="text-align: center;">:rice_scene:</td>
<td style="text-align: center;"><code>:jack_o_lantern:</code></td>
<td style="text-align: center;">:jack_o_lantern:</td>
<td style="text-align: center;"><code>:ghost:</code></td>
<td style="text-align: center;">:ghost:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:santa:</code></td>
<td style="text-align: center;">:santa:</td>
<td style="text-align: center;"><code>:christmas_tree:</code></td>
<td style="text-align: center;">:christmas_tree:</td>
<td style="text-align: center;"><code>:gift:</code></td>
<td style="text-align: center;">:gift:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bell:</code></td>
<td style="text-align: center;">:bell:</td>
<td style="text-align: center;"><code>:no_bell:</code></td>
<td style="text-align: center;">:no_bell:</td>
<td style="text-align: center;"><code>:tanabata_tree:</code></td>
<td style="text-align: center;">:tanabata_tree:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:tada:</code></td>
<td style="text-align: center;">:tada:</td>
<td style="text-align: center;"><code>:confetti_ball:</code></td>
<td style="text-align: center;">:confetti_ball:</td>
<td style="text-align: center;"><code>:balloon:</code></td>
<td style="text-align: center;">:balloon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:crystal_ball:</code></td>
<td style="text-align: center;">:crystal_ball:</td>
<td style="text-align: center;"><code>:cd:</code></td>
<td style="text-align: center;">:cd:</td>
<td style="text-align: center;"><code>:dvd:</code></td>
<td style="text-align: center;">:dvd:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:floppy_disk:</code></td>
<td style="text-align: center;">:floppy_disk:</td>
<td style="text-align: center;"><code>:camera:</code></td>
<td style="text-align: center;">:camera:</td>
<td style="text-align: center;"><code>:video_camera:</code></td>
<td style="text-align: center;">:video_camera:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:movie_camera:</code></td>
<td style="text-align: center;">:movie_camera:</td>
<td style="text-align: center;"><code>:computer:</code></td>
<td style="text-align: center;">:computer:</td>
<td style="text-align: center;"><code>:tv:</code></td>
<td style="text-align: center;">:tv:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:iphone:</code></td>
<td style="text-align: center;">:iphone:</td>
<td style="text-align: center;"><code>:phone:</code></td>
<td style="text-align: center;">:phone:</td>
<td style="text-align: center;"><code>:telephone:</code></td>
<td style="text-align: center;">:telephone:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:telephone_receiver:</code></td>
<td style="text-align: center;">:telephone_receiver:</td>
<td style="text-align: center;"><code>:pager:</code></td>
<td style="text-align: center;">:pager:</td>
<td style="text-align: center;"><code>:fax:</code></td>
<td style="text-align: center;">:fax:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:minidisc:</code></td>
<td style="text-align: center;">:minidisc:</td>
<td style="text-align: center;"><code>:vhs:</code></td>
<td style="text-align: center;">:vhs:</td>
<td style="text-align: center;"><code>:sound:</code></td>
<td style="text-align: center;">:sound:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:speaker:</code></td>
<td style="text-align: center;">:speaker:</td>
<td style="text-align: center;"><code>:mute:</code></td>
<td style="text-align: center;">:mute:</td>
<td style="text-align: center;"><code>:loudspeaker:</code></td>
<td style="text-align: center;">:loudspeaker:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:mega:</code></td>
<td style="text-align: center;">:mega:</td>
<td style="text-align: center;"><code>:hourglass:</code></td>
<td style="text-align: center;">:hourglass:</td>
<td
style="text-align: center;"><code>:hourglass_flowing_sand:</code></td>
<td style="text-align: center;">:hourglass_flowing_sand:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:alarm_clock:</code></td>
<td style="text-align: center;">:alarm_clock:</td>
<td style="text-align: center;"><code>:watch:</code></td>
<td style="text-align: center;">:watch:</td>
<td style="text-align: center;"><code>:radio:</code></td>
<td style="text-align: center;">:radio:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:satellite:</code></td>
<td style="text-align: center;">:satellite:</td>
<td style="text-align: center;"><code>:loop:</code></td>
<td style="text-align: center;">:loop:</td>
<td style="text-align: center;"><code>:mag:</code></td>
<td style="text-align: center;">:mag:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:mag_right:</code></td>
<td style="text-align: center;">:mag_right:</td>
<td style="text-align: center;"><code>:unlock:</code></td>
<td style="text-align: center;">:unlock:</td>
<td style="text-align: center;"><code>:lock:</code></td>
<td style="text-align: center;">:lock:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:lock_with_ink_pen:</code></td>
<td style="text-align: center;">:lock_with_ink_pen:</td>
<td style="text-align: center;"><code>:closed_lock_with_key:</code></td>
<td style="text-align: center;">:closed_lock_with_key:</td>
<td style="text-align: center;"><code>:key:</code></td>
<td style="text-align: center;">:key:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bulb:</code></td>
<td style="text-align: center;">:bulb:</td>
<td style="text-align: center;"><code>:flashlight:</code></td>
<td style="text-align: center;">:flashlight:</td>
<td style="text-align: center;"><code>:high_brightness:</code></td>
<td style="text-align: center;">:high_brightness:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:low_brightness:</code></td>
<td style="text-align: center;">:low_brightness:</td>
<td style="text-align: center;"><code>:electric_plug:</code></td>
<td style="text-align: center;">:electric_plug:</td>
<td style="text-align: center;"><code>:battery:</code></td>
<td style="text-align: center;">:battery:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:calling:</code></td>
<td style="text-align: center;">:calling:</td>
<td style="text-align: center;"><code>:email:</code></td>
<td style="text-align: center;">:email:</td>
<td style="text-align: center;"><code>:mailbox:</code></td>
<td style="text-align: center;">:mailbox:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:postbox:</code></td>
<td style="text-align: center;">:postbox:</td>
<td style="text-align: center;"><code>:bath:</code></td>
<td style="text-align: center;">:bath:</td>
<td style="text-align: center;"><code>:bathtub:</code></td>
<td style="text-align: center;">:bathtub:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:shower:</code></td>
<td style="text-align: center;">:shower:</td>
<td style="text-align: center;"><code>:toilet:</code></td>
<td style="text-align: center;">:toilet:</td>
<td style="text-align: center;"><code>:wrench:</code></td>
<td style="text-align: center;">:wrench:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:nut_and_bolt:</code></td>
<td style="text-align: center;">:nut_and_bolt:</td>
<td style="text-align: center;"><code>:hammer:</code></td>
<td style="text-align: center;">:hammer:</td>
<td style="text-align: center;"><code>:seat:</code></td>
<td style="text-align: center;">:seat:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:moneybag:</code></td>
<td style="text-align: center;">:moneybag:</td>
<td style="text-align: center;"><code>:yen:</code></td>
<td style="text-align: center;">:yen:</td>
<td style="text-align: center;"><code>:dollar:</code></td>
<td style="text-align: center;">:dollar:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:pound:</code></td>
<td style="text-align: center;">:pound:</td>
<td style="text-align: center;"><code>:euro:</code></td>
<td style="text-align: center;">:euro:</td>
<td style="text-align: center;"><code>:credit_card:</code></td>
<td style="text-align: center;">:credit_card:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:money_with_wings:</code></td>
<td style="text-align: center;">:money_with_wings:</td>
<td style="text-align: center;"><code>:e-mail:</code></td>
<td style="text-align: center;">:e-mail:</td>
<td style="text-align: center;"><code>:inbox_tray:</code></td>
<td style="text-align: center;">:inbox_tray:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:outbox_tray:</code></td>
<td style="text-align: center;">:outbox_tray:</td>
<td style="text-align: center;"><code>:envelope:</code></td>
<td style="text-align: center;">:envelope:</td>
<td style="text-align: center;"><code>:incoming_envelope:</code></td>
<td style="text-align: center;">:incoming_envelope:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:postal_horn:</code></td>
<td style="text-align: center;">:postal_horn:</td>
<td style="text-align: center;"><code>:mailbox_closed:</code></td>
<td style="text-align: center;">:mailbox_closed:</td>
<td style="text-align: center;"><code>:mailbox_with_mail:</code></td>
<td style="text-align: center;">:mailbox_with_mail:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:mailbox_with_no_mail:</code></td>
<td style="text-align: center;">:mailbox_with_no_mail:</td>
<td style="text-align: center;"><code>:door:</code></td>
<td style="text-align: center;">:door:</td>
<td style="text-align: center;"><code>:smoking:</code></td>
<td style="text-align: center;">:smoking:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bomb:</code></td>
<td style="text-align: center;">:bomb:</td>
<td style="text-align: center;"><code>:gun:</code></td>
<td style="text-align: center;">:gun:</td>
<td style="text-align: center;"><code>:hocho:</code></td>
<td style="text-align: center;">:hocho:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:pill:</code></td>
<td style="text-align: center;">:pill:</td>
<td style="text-align: center;"><code>:syringe:</code></td>
<td style="text-align: center;">:syringe:</td>
<td style="text-align: center;"><code>:page_facing_up:</code></td>
<td style="text-align: center;">:page_facing_up:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:page_with_curl:</code></td>
<td style="text-align: center;">:page_with_curl:</td>
<td style="text-align: center;"><code>:bookmark_tabs:</code></td>
<td style="text-align: center;">:bookmark_tabs:</td>
<td style="text-align: center;"><code>:bar_chart:</code></td>
<td style="text-align: center;">:bar_chart:</td>
</tr>
<tr class="odd">
<td
style="text-align: center;"><code>:chart_with_upwards_trend:</code></td>
<td style="text-align: center;">:chart_with_upwards_trend:</td>
<td
style="text-align: center;"><code>:chart_with_downwards_trend:</code></td>
<td style="text-align: center;">:chart_with_downwards_trend:</td>
<td style="text-align: center;"><code>:scroll:</code></td>
<td style="text-align: center;">:scroll:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:clipboard:</code></td>
<td style="text-align: center;">:clipboard:</td>
<td style="text-align: center;"><code>:calendar:</code></td>
<td style="text-align: center;">:calendar:</td>
<td style="text-align: center;"><code>:date:</code></td>
<td style="text-align: center;">:date:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:card_index:</code></td>
<td style="text-align: center;">:card_index:</td>
<td style="text-align: center;"><code>:file_folder:</code></td>
<td style="text-align: center;">:file_folder:</td>
<td style="text-align: center;"><code>:open_file_folder:</code></td>
<td style="text-align: center;">:open_file_folder:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:scissors:</code></td>
<td style="text-align: center;">:scissors:</td>
<td style="text-align: center;"><code>:pushpin:</code></td>
<td style="text-align: center;">:pushpin:</td>
<td style="text-align: center;"><code>:paperclip:</code></td>
<td style="text-align: center;">:paperclip:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:black_nib:</code></td>
<td style="text-align: center;">:black_nib:</td>
<td style="text-align: center;"><code>:pencil2:</code></td>
<td style="text-align: center;">:pencil2:</td>
<td style="text-align: center;"><code>:straight_ruler:</code></td>
<td style="text-align: center;">:straight_ruler:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:triangular_ruler:</code></td>
<td style="text-align: center;">:triangular_ruler:</td>
<td style="text-align: center;"><code>:closed_book:</code></td>
<td style="text-align: center;">:closed_book:</td>
<td style="text-align: center;"><code>:green_book:</code></td>
<td style="text-align: center;">:green_book:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:blue_book:</code></td>
<td style="text-align: center;">:blue_book:</td>
<td style="text-align: center;"><code>:orange_book:</code></td>
<td style="text-align: center;">:orange_book:</td>
<td style="text-align: center;"><code>:notebook:</code></td>
<td style="text-align: center;">:notebook:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:notebook_with_decorative_cover:</code></td>
<td style="text-align: center;">:notebook_with_decorative_cover:</td>
<td style="text-align: center;"><code>:ledger:</code></td>
<td style="text-align: center;">:ledger:</td>
<td style="text-align: center;"><code>:books:</code></td>
<td style="text-align: center;">:books:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:bookmark:</code></td>
<td style="text-align: center;">:bookmark:</td>
<td style="text-align: center;"><code>:microscope:</code></td>
<td style="text-align: center;">:microscope:</td>
<td style="text-align: center;"><code>:telescope:</code></td>
<td style="text-align: center;">:telescope:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:name_badge:</code></td>
<td style="text-align: center;">:name_badge:</td>
<td style="text-align: center;"><code>:newspaper:</code></td>
<td style="text-align: center;">:newspaper:</td>
<td style="text-align: center;"><code>:football:</code></td>
<td style="text-align: center;">:football:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:basketball:</code></td>
<td style="text-align: center;">:basketball:</td>
<td style="text-align: center;"><code>:soccer:</code></td>
<td style="text-align: center;">:soccer:</td>
<td style="text-align: center;"><code>:baseball:</code></td>
<td style="text-align: center;">:baseball:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tennis:</code></td>
<td style="text-align: center;">:tennis:</td>
<td style="text-align: center;"><code>:8ball:</code></td>
<td style="text-align: center;">:8ball:</td>
<td style="text-align: center;"><code>:rugby_football:</code></td>
<td style="text-align: center;">:rugby_football:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:bowling:</code></td>
<td style="text-align: center;">:bowling:</td>
<td style="text-align: center;"><code>:golf:</code></td>
<td style="text-align: center;">:golf:</td>
<td style="text-align: center;"><code>:mountain_bicyclist:</code></td>
<td style="text-align: center;">:mountain_bicyclist:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bicyclist:</code></td>
<td style="text-align: center;">:bicyclist:</td>
<td style="text-align: center;"><code>:horse_racing:</code></td>
<td style="text-align: center;">:horse_racing:</td>
<td style="text-align: center;"><code>:snowboarder:</code></td>
<td style="text-align: center;">:snowboarder:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:swimmer:</code></td>
<td style="text-align: center;">:swimmer:</td>
<td style="text-align: center;"><code>:surfer:</code></td>
<td style="text-align: center;">:surfer:</td>
<td style="text-align: center;"><code>:ski:</code></td>
<td style="text-align: center;">:ski:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:spades:</code></td>
<td style="text-align: center;">:spades:</td>
<td style="text-align: center;"><code>:hearts:</code></td>
<td style="text-align: center;">:hearts:</td>
<td style="text-align: center;"><code>:clubs:</code></td>
<td style="text-align: center;">:clubs:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:diamonds:</code></td>
<td style="text-align: center;">:diamonds:</td>
<td style="text-align: center;"><code>:gem:</code></td>
<td style="text-align: center;">:gem:</td>
<td style="text-align: center;"><code>:ring:</code></td>
<td style="text-align: center;">:ring:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:trophy:</code></td>
<td style="text-align: center;">:trophy:</td>
<td style="text-align: center;"><code>:musical_score:</code></td>
<td style="text-align: center;">:musical_score:</td>
<td style="text-align: center;"><code>:musical_keyboard:</code></td>
<td style="text-align: center;">:musical_keyboard:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:violin:</code></td>
<td style="text-align: center;">:violin:</td>
<td style="text-align: center;"><code>:space_invader:</code></td>
<td style="text-align: center;">:space_invader:</td>
<td style="text-align: center;"><code>:video_game:</code></td>
<td style="text-align: center;">:video_game:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:black_joker:</code></td>
<td style="text-align: center;">:black_joker:</td>
<td style="text-align: center;"><code>:flower_playing_cards:</code></td>
<td style="text-align: center;">:flower_playing_cards:</td>
<td style="text-align: center;"><code>:game_die:</code></td>
<td style="text-align: center;">:game_die:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:dart:</code></td>
<td style="text-align: center;">:dart:</td>
<td style="text-align: center;"><code>:mahjong:</code></td>
<td style="text-align: center;">:mahjong:</td>
<td style="text-align: center;"><code>:clapper:</code></td>
<td style="text-align: center;">:clapper:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:memo:</code></td>
<td style="text-align: center;">:memo:</td>
<td style="text-align: center;"><code>:pencil:</code></td>
<td style="text-align: center;">:pencil:</td>
<td style="text-align: center;"><code>:book:</code></td>
<td style="text-align: center;">:book:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:art:</code></td>
<td style="text-align: center;">:art:</td>
<td style="text-align: center;"><code>:microphone:</code></td>
<td style="text-align: center;">:microphone:</td>
<td style="text-align: center;"><code>:headphones:</code></td>
<td style="text-align: center;">:headphones:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:trumpet:</code></td>
<td style="text-align: center;">:trumpet:</td>
<td style="text-align: center;"><code>:saxophone:</code></td>
<td style="text-align: center;">:saxophone:</td>
<td style="text-align: center;"><code>:guitar:</code></td>
<td style="text-align: center;">:guitar:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:shoe:</code></td>
<td style="text-align: center;">:shoe:</td>
<td style="text-align: center;"><code>:sandal:</code></td>
<td style="text-align: center;">:sandal:</td>
<td style="text-align: center;"><code>:high_heel:</code></td>
<td style="text-align: center;">:high_heel:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:lipstick:</code></td>
<td style="text-align: center;">:lipstick:</td>
<td style="text-align: center;"><code>:boot:</code></td>
<td style="text-align: center;">:boot:</td>
<td style="text-align: center;"><code>:shirt:</code></td>
<td style="text-align: center;">:shirt:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:tshirt:</code></td>
<td style="text-align: center;">:tshirt:</td>
<td style="text-align: center;"><code>:necktie:</code></td>
<td style="text-align: center;">:necktie:</td>
<td style="text-align: center;"><code>:womans_clothes:</code></td>
<td style="text-align: center;">:womans_clothes:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:dress:</code></td>
<td style="text-align: center;">:dress:</td>
<td
style="text-align: center;"><code>:running_shirt_with_sash:</code></td>
<td style="text-align: center;">:running_shirt_with_sash:</td>
<td style="text-align: center;"><code>:jeans:</code></td>
<td style="text-align: center;">:jeans:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:kimono:</code></td>
<td style="text-align: center;">:kimono:</td>
<td style="text-align: center;"><code>:bikini:</code></td>
<td style="text-align: center;">:bikini:</td>
<td style="text-align: center;"><code>:ribbon:</code></td>
<td style="text-align: center;">:ribbon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tophat:</code></td>
<td style="text-align: center;">:tophat:</td>
<td style="text-align: center;"><code>:crown:</code></td>
<td style="text-align: center;">:crown:</td>
<td style="text-align: center;"><code>:womans_hat:</code></td>
<td style="text-align: center;">:womans_hat:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:mans_shoe:</code></td>
<td style="text-align: center;">:mans_shoe:</td>
<td style="text-align: center;"><code>:closed_umbrella:</code></td>
<td style="text-align: center;">:closed_umbrella:</td>
<td style="text-align: center;"><code>:briefcase:</code></td>
<td style="text-align: center;">:briefcase:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:handbag:</code></td>
<td style="text-align: center;">:handbag:</td>
<td style="text-align: center;"><code>:pouch:</code></td>
<td style="text-align: center;">:pouch:</td>
<td style="text-align: center;"><code>:purse:</code></td>
<td style="text-align: center;">:purse:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:eyeglasses:</code></td>
<td style="text-align: center;">:eyeglasses:</td>
<td
style="text-align: center;"><code>:fishing_pole_and_fish:</code></td>
<td style="text-align: center;">:fishing_pole_and_fish:</td>
<td style="text-align: center;"><code>:coffee:</code></td>
<td style="text-align: center;">:coffee:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tea:</code></td>
<td style="text-align: center;">:tea:</td>
<td style="text-align: center;"><code>:sake:</code></td>
<td style="text-align: center;">:sake:</td>
<td style="text-align: center;"><code>:baby_bottle:</code></td>
<td style="text-align: center;">:baby_bottle:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:beer:</code></td>
<td style="text-align: center;">:beer:</td>
<td style="text-align: center;"><code>:beers:</code></td>
<td style="text-align: center;">:beers:</td>
<td style="text-align: center;"><code>:cocktail:</code></td>
<td style="text-align: center;">:cocktail:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:tropical_drink:</code></td>
<td style="text-align: center;">:tropical_drink:</td>
<td style="text-align: center;"><code>:wine_glass:</code></td>
<td style="text-align: center;">:wine_glass:</td>
<td style="text-align: center;"><code>:fork_and_knife:</code></td>
<td style="text-align: center;">:fork_and_knife:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:pizza:</code></td>
<td style="text-align: center;">:pizza:</td>
<td style="text-align: center;"><code>:hamburger:</code></td>
<td style="text-align: center;">:hamburger:</td>
<td style="text-align: center;"><code>:fries:</code></td>
<td style="text-align: center;">:fries:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:poultry_leg:</code></td>
<td style="text-align: center;">:poultry_leg:</td>
<td style="text-align: center;"><code>:meat_on_bone:</code></td>
<td style="text-align: center;">:meat_on_bone:</td>
<td style="text-align: center;"><code>:spaghetti:</code></td>
<td style="text-align: center;">:spaghetti:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:curry:</code></td>
<td style="text-align: center;">:curry:</td>
<td style="text-align: center;"><code>:fried_shrimp:</code></td>
<td style="text-align: center;">:fried_shrimp:</td>
<td style="text-align: center;"><code>:bento:</code></td>
<td style="text-align: center;">:bento:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sushi:</code></td>
<td style="text-align: center;">:sushi:</td>
<td style="text-align: center;"><code>:fish_cake:</code></td>
<td style="text-align: center;">:fish_cake:</td>
<td style="text-align: center;"><code>:rice_ball:</code></td>
<td style="text-align: center;">:rice_ball:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:rice_cracker:</code></td>
<td style="text-align: center;">:rice_cracker:</td>
<td style="text-align: center;"><code>:rice:</code></td>
<td style="text-align: center;">:rice:</td>
<td style="text-align: center;"><code>:ramen:</code></td>
<td style="text-align: center;">:ramen:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:stew:</code></td>
<td style="text-align: center;">:stew:</td>
<td style="text-align: center;"><code>:oden:</code></td>
<td style="text-align: center;">:oden:</td>
<td style="text-align: center;"><code>:dango:</code></td>
<td style="text-align: center;">:dango:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:egg:</code></td>
<td style="text-align: center;">:egg:</td>
<td style="text-align: center;"><code>:bread:</code></td>
<td style="text-align: center;">:bread:</td>
<td style="text-align: center;"><code>:doughnut:</code></td>
<td style="text-align: center;">:doughnut:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:custard:</code></td>
<td style="text-align: center;">:custard:</td>
<td style="text-align: center;"><code>:icecream:</code></td>
<td style="text-align: center;">:icecream:</td>
<td style="text-align: center;"><code>:ice_cream:</code></td>
<td style="text-align: center;">:ice_cream:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:shaved_ice:</code></td>
<td style="text-align: center;">:shaved_ice:</td>
<td style="text-align: center;"><code>:birthday:</code></td>
<td style="text-align: center;">:birthday:</td>
<td style="text-align: center;"><code>:cake:</code></td>
<td style="text-align: center;">:cake:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:cookie:</code></td>
<td style="text-align: center;">:cookie:</td>
<td style="text-align: center;"><code>:chocolate_bar:</code></td>
<td style="text-align: center;">:chocolate_bar:</td>
<td style="text-align: center;"><code>:candy:</code></td>
<td style="text-align: center;">:candy:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:lollipop:</code></td>
<td style="text-align: center;">:lollipop:</td>
<td style="text-align: center;"><code>:honey_pot:</code></td>
<td style="text-align: center;">:honey_pot:</td>
<td style="text-align: center;"><code>:apple:</code></td>
<td style="text-align: center;">:apple:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:green_apple:</code></td>
<td style="text-align: center;">:green_apple:</td>
<td style="text-align: center;"><code>:tangerine:</code></td>
<td style="text-align: center;">:tangerine:</td>
<td style="text-align: center;"><code>:lemon:</code></td>
<td style="text-align: center;">:lemon:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:cherries:</code></td>
<td style="text-align: center;">:cherries:</td>
<td style="text-align: center;"><code>:grapes:</code></td>
<td style="text-align: center;">:grapes:</td>
<td style="text-align: center;"><code>:watermelon:</code></td>
<td style="text-align: center;">:watermelon:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:strawberry:</code></td>
<td style="text-align: center;">:strawberry:</td>
<td style="text-align: center;"><code>:peach:</code></td>
<td style="text-align: center;">:peach:</td>
<td style="text-align: center;"><code>:melon:</code></td>
<td style="text-align: center;">:melon:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:banana:</code></td>
<td style="text-align: center;">:banana:</td>
<td style="text-align: center;"><code>:pear:</code></td>
<td style="text-align: center;">:pear:</td>
<td style="text-align: center;"><code>:pineapple:</code></td>
<td style="text-align: center;">:pineapple:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:sweet_potato:</code></td>
<td style="text-align: center;">:sweet_potato:</td>
<td style="text-align: center;"><code>:eggplant:</code></td>
<td style="text-align: center;">:eggplant:</td>
<td style="text-align: center;"><code>:tomato:</code></td>
<td style="text-align: center;">:tomato:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:corn:</code></td>
<td style="text-align: center;">:corn:</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h2 id="地点">地点</h2>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 14%" />
<col style="width: 18%" />
<col style="width: 16%" />
<col style="width: 18%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>:house:</code></td>
<td style="text-align: center;">:house:</td>
<td style="text-align: center;"><code>:house_with_garden:</code></td>
<td style="text-align: center;">:house_with_garden:</td>
<td style="text-align: center;"><code>:school:</code></td>
<td style="text-align: center;">:school:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:office:</code></td>
<td style="text-align: center;">:office:</td>
<td style="text-align: center;"><code>:post_office:</code></td>
<td style="text-align: center;">:post_office:</td>
<td style="text-align: center;"><code>:hospital:</code></td>
<td style="text-align: center;">:hospital:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:bank:</code></td>
<td style="text-align: center;">:bank:</td>
<td style="text-align: center;"><code>:convenience_store:</code></td>
<td style="text-align: center;">:convenience_store:</td>
<td style="text-align: center;"><code>:love_hotel:</code></td>
<td style="text-align: center;">:love_hotel:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:hotel:</code></td>
<td style="text-align: center;">:hotel:</td>
<td style="text-align: center;"><code>:wedding:</code></td>
<td style="text-align: center;">:wedding:</td>
<td style="text-align: center;"><code>:church:</code></td>
<td style="text-align: center;">:church:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:department_store:</code></td>
<td style="text-align: center;">:department_store:</td>
<td style="text-align: center;"><code>:european_post_office:</code></td>
<td style="text-align: center;">:european_post_office:</td>
<td style="text-align: center;"><code>:city_sunrise:</code></td>
<td style="text-align: center;">:city_sunrise:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:city_sunset:</code></td>
<td style="text-align: center;">:city_sunset:</td>
<td style="text-align: center;"><code>:japanese_castle:</code></td>
<td style="text-align: center;">:japanese_castle:</td>
<td style="text-align: center;"><code>:european_castle:</code></td>
<td style="text-align: center;">:european_castle:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:tent:</code></td>
<td style="text-align: center;">:tent:</td>
<td style="text-align: center;"><code>:factory:</code></td>
<td style="text-align: center;">:factory:</td>
<td style="text-align: center;"><code>:tokyo_tower:</code></td>
<td style="text-align: center;">:tokyo_tower:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:japan:</code></td>
<td style="text-align: center;">:japan:</td>
<td style="text-align: center;"><code>:mount_fuji:</code></td>
<td style="text-align: center;">:mount_fuji:</td>
<td
style="text-align: center;"><code>:sunrise_over_mountains:</code></td>
<td style="text-align: center;">:sunrise_over_mountains:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:sunrise:</code></td>
<td style="text-align: center;">:sunrise:</td>
<td style="text-align: center;"><code>:stars:</code></td>
<td style="text-align: center;">:stars:</td>
<td style="text-align: center;"><code>:statue_of_liberty:</code></td>
<td style="text-align: center;">:statue_of_liberty:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bridge_at_night:</code></td>
<td style="text-align: center;">:bridge_at_night:</td>
<td style="text-align: center;"><code>:carousel_horse:</code></td>
<td style="text-align: center;">:carousel_horse:</td>
<td style="text-align: center;"><code>:rainbow:</code></td>
<td style="text-align: center;">:rainbow:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:ferris_wheel:</code></td>
<td style="text-align: center;">:ferris_wheel:</td>
<td style="text-align: center;"><code>:fountain:</code></td>
<td style="text-align: center;">:fountain:</td>
<td style="text-align: center;"><code>:roller_coaster:</code></td>
<td style="text-align: center;">:roller_coaster:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:ship:</code></td>
<td style="text-align: center;">:ship:</td>
<td style="text-align: center;"><code>:speedboat:</code></td>
<td style="text-align: center;">:speedboat:</td>
<td style="text-align: center;"><code>:boat:</code></td>
<td style="text-align: center;">:boat:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:sailboat:</code></td>
<td style="text-align: center;">:sailboat:</td>
<td style="text-align: center;"><code>:rowboat:</code></td>
<td style="text-align: center;">:rowboat:</td>
<td style="text-align: center;"><code>:anchor:</code></td>
<td style="text-align: center;">:anchor:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:rocket:</code></td>
<td style="text-align: center;">:rocket:</td>
<td style="text-align: center;"><code>:airplane:</code></td>
<td style="text-align: center;">:airplane:</td>
<td style="text-align: center;"><code>:helicopter:</code></td>
<td style="text-align: center;">:helicopter:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:steam_locomotive:</code></td>
<td style="text-align: center;">:steam_locomotive:</td>
<td style="text-align: center;"><code>:tram:</code></td>
<td style="text-align: center;">:tram:</td>
<td style="text-align: center;"><code>:mountain_railway:</code></td>
<td style="text-align: center;">:mountain_railway:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bike:</code></td>
<td style="text-align: center;">:bike:</td>
<td style="text-align: center;"><code>:aerial_tramway:</code></td>
<td style="text-align: center;">:aerial_tramway:</td>
<td style="text-align: center;"><code>:suspension_railway:</code></td>
<td style="text-align: center;">:suspension_railway:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:mountain_cableway:</code></td>
<td style="text-align: center;">:mountain_cableway:</td>
<td style="text-align: center;"><code>:tractor:</code></td>
<td style="text-align: center;">:tractor:</td>
<td style="text-align: center;"><code>:blue_car:</code></td>
<td style="text-align: center;">:blue_car:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:oncoming_automobile:</code></td>
<td style="text-align: center;">:oncoming_automobile:</td>
<td style="text-align: center;"><code>:car:</code></td>
<td style="text-align: center;">:car:</td>
<td style="text-align: center;"><code>:red_car:</code></td>
<td style="text-align: center;">:red_car:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:taxi:</code></td>
<td style="text-align: center;">:taxi:</td>
<td style="text-align: center;"><code>:oncoming_taxi:</code></td>
<td style="text-align: center;">:oncoming_taxi:</td>
<td style="text-align: center;"><code>:articulated_lorry:</code></td>
<td style="text-align: center;">:articulated_lorry:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bus:</code></td>
<td style="text-align: center;">:bus:</td>
<td style="text-align: center;"><code>:oncoming_bus:</code></td>
<td style="text-align: center;">:oncoming_bus:</td>
<td style="text-align: center;"><code>:rotating_light:</code></td>
<td style="text-align: center;">:rotating_light:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:police_car:</code></td>
<td style="text-align: center;">:police_car:</td>
<td style="text-align: center;"><code>:oncoming_police_car:</code></td>
<td style="text-align: center;">:oncoming_police_car:</td>
<td style="text-align: center;"><code>:fire_engine:</code></td>
<td style="text-align: center;">:fire_engine:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:ambulance:</code></td>
<td style="text-align: center;">:ambulance:</td>
<td style="text-align: center;"><code>:minibus:</code></td>
<td style="text-align: center;">:minibus:</td>
<td style="text-align: center;"><code>:truck:</code></td>
<td style="text-align: center;">:truck:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:train:</code></td>
<td style="text-align: center;">:train:</td>
<td style="text-align: center;"><code>:station:</code></td>
<td style="text-align: center;">:station:</td>
<td style="text-align: center;"><code>:train2:</code></td>
<td style="text-align: center;">:train2:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:bullettrain_front:</code></td>
<td style="text-align: center;">:bullettrain_front:</td>
<td style="text-align: center;"><code>:bullettrain_side:</code></td>
<td style="text-align: center;">:bullettrain_side:</td>
<td style="text-align: center;"><code>:light_rail:</code></td>
<td style="text-align: center;">:light_rail:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:monorail:</code></td>
<td style="text-align: center;">:monorail:</td>
<td style="text-align: center;"><code>:railway_car:</code></td>
<td style="text-align: center;">:railway_car:</td>
<td style="text-align: center;"><code>:trolleybus:</code></td>
<td style="text-align: center;">:trolleybus:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:ticket:</code></td>
<td style="text-align: center;">:ticket:</td>
<td style="text-align: center;"><code>:fuelpump:</code></td>
<td style="text-align: center;">:fuelpump:</td>
<td
style="text-align: center;"><code>:vertical_traffic_light:</code></td>
<td style="text-align: center;">:vertical_traffic_light:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:traffic_light:</code></td>
<td style="text-align: center;">:traffic_light:</td>
<td style="text-align: center;"><code>:warning:</code></td>
<td style="text-align: center;">:warning:</td>
<td style="text-align: center;"><code>:construction:</code></td>
<td style="text-align: center;">:construction:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:beginner:</code></td>
<td style="text-align: center;">:beginner:</td>
<td style="text-align: center;"><code>:atm:</code></td>
<td style="text-align: center;">:atm:</td>
<td style="text-align: center;"><code>:slot_machine:</code></td>
<td style="text-align: center;">:slot_machine:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:busstop:</code></td>
<td style="text-align: center;">:busstop:</td>
<td style="text-align: center;"><code>:barber:</code></td>
<td style="text-align: center;">:barber:</td>
<td style="text-align: center;"><code>:hotsprings:</code></td>
<td style="text-align: center;">:hotsprings:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:checkered_flag:</code></td>
<td style="text-align: center;">:checkered_flag:</td>
<td style="text-align: center;"><code>:crossed_flags:</code></td>
<td style="text-align: center;">:crossed_flags:</td>
<td style="text-align: center;"><code>:izakaya_lantern:</code></td>
<td style="text-align: center;">:izakaya_lantern:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:moyai:</code></td>
<td style="text-align: center;">:moyai:</td>
<td style="text-align: center;"><code>:circus_tent:</code></td>
<td style="text-align: center;">:circus_tent:</td>
<td style="text-align: center;"><code>:performing_arts:</code></td>
<td style="text-align: center;">:performing_arts:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:round_pushpin:</code></td>
<td style="text-align: center;">:round_pushpin:</td>
<td
style="text-align: center;"><code>:triangular_flag_on_post:</code></td>
<td style="text-align: center;">:triangular_flag_on_post:</td>
<td style="text-align: center;"><code>:jp:</code></td>
<td style="text-align: center;">:jp:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:kr:</code></td>
<td style="text-align: center;">:kr:</td>
<td style="text-align: center;"><code>:cn:</code></td>
<td style="text-align: center;">:cn:</td>
<td style="text-align: center;"><code>:us:</code></td>
<td style="text-align: center;">:us:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:fr:</code></td>
<td style="text-align: center;">:fr:</td>
<td style="text-align: center;"><code>:es:</code></td>
<td style="text-align: center;">:es:</td>
<td style="text-align: center;"><code>:it:</code></td>
<td style="text-align: center;">:it:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:ru:</code></td>
<td style="text-align: center;">:ru:</td>
<td style="text-align: center;"><code>:gb:</code></td>
<td style="text-align: center;">:gb:</td>
<td style="text-align: center;"><code>:uk:</code></td>
<td style="text-align: center;">:uk:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:de:</code></td>
<td style="text-align: center;">:de:</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h2 id="符号">符号</h2>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 15%" />
<col style="width: 16%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
<th style="text-align: center;">syntax</th>
<th style="text-align: center;">preview</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>:one:</code></td>
<td style="text-align: center;">:one:</td>
<td style="text-align: center;"><code>:two:</code></td>
<td style="text-align: center;">:two:</td>
<td style="text-align: center;"><code>:three:</code></td>
<td style="text-align: center;">:three:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:four:</code></td>
<td style="text-align: center;">:four:</td>
<td style="text-align: center;"><code>:five:</code></td>
<td style="text-align: center;">:five:</td>
<td style="text-align: center;"><code>:six:</code></td>
<td style="text-align: center;">:six:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:seven:</code></td>
<td style="text-align: center;">:seven:</td>
<td style="text-align: center;"><code>:eight:</code></td>
<td style="text-align: center;">:eight:</td>
<td style="text-align: center;"><code>:nine:</code></td>
<td style="text-align: center;">:nine:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:keycap_ten:</code></td>
<td style="text-align: center;">:keycap_ten:</td>
<td style="text-align: center;"><code>:1234:</code></td>
<td style="text-align: center;">:1234:</td>
<td style="text-align: center;"><code>:zero:</code></td>
<td style="text-align: center;">:zero:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:hash:</code></td>
<td style="text-align: center;">:hash:</td>
<td style="text-align: center;"><code>:symbols:</code></td>
<td style="text-align: center;">:symbols:</td>
<td style="text-align: center;"><code>:arrow_backward:</code></td>
<td style="text-align: center;">:arrow_backward:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:arrow_down:</code></td>
<td style="text-align: center;">:arrow_down:</td>
<td style="text-align: center;"><code>:arrow_forward:</code></td>
<td style="text-align: center;">:arrow_forward:</td>
<td style="text-align: center;"><code>:arrow_left:</code></td>
<td style="text-align: center;">:arrow_left:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:capital_abcd:</code></td>
<td style="text-align: center;">:capital_abcd:</td>
<td style="text-align: center;"><code>:abcd:</code></td>
<td style="text-align: center;">:abcd:</td>
<td style="text-align: center;"><code>:abc:</code></td>
<td style="text-align: center;">:abc:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:arrow_lower_left:</code></td>
<td style="text-align: center;">:arrow_lower_left:</td>
<td style="text-align: center;"><code>:arrow_lower_right:</code></td>
<td style="text-align: center;">:arrow_lower_right:</td>
<td style="text-align: center;"><code>:arrow_right:</code></td>
<td style="text-align: center;">:arrow_right:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:arrow_up:</code></td>
<td style="text-align: center;">:arrow_up:</td>
<td style="text-align: center;"><code>:arrow_upper_left:</code></td>
<td style="text-align: center;">:arrow_upper_left:</td>
<td style="text-align: center;"><code>:arrow_upper_right:</code></td>
<td style="text-align: center;">:arrow_upper_right:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:arrow_double_down:</code></td>
<td style="text-align: center;">:arrow_double_down:</td>
<td style="text-align: center;"><code>:arrow_double_up:</code></td>
<td style="text-align: center;">:arrow_double_up:</td>
<td style="text-align: center;"><code>:arrow_down_small:</code></td>
<td style="text-align: center;">:arrow_down_small:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:arrow_heading_down:</code></td>
<td style="text-align: center;">:arrow_heading_down:</td>
<td style="text-align: center;"><code>:arrow_heading_up:</code></td>
<td style="text-align: center;">:arrow_heading_up:</td>
<td
style="text-align: center;"><code>:leftwards_arrow_with_hook:</code></td>
<td style="text-align: center;">:leftwards_arrow_with_hook:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:arrow_right_hook:</code></td>
<td style="text-align: center;">:arrow_right_hook:</td>
<td style="text-align: center;"><code>:left_right_arrow:</code></td>
<td style="text-align: center;">:left_right_arrow:</td>
<td style="text-align: center;"><code>:arrow_up_down:</code></td>
<td style="text-align: center;">:arrow_up_down:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:arrow_up_small:</code></td>
<td style="text-align: center;">:arrow_up_small:</td>
<td style="text-align: center;"><code>:arrows_clockwise:</code></td>
<td style="text-align: center;">:arrows_clockwise:</td>
<td
style="text-align: center;"><code>:arrows_counterclockwise:</code></td>
<td style="text-align: center;">:arrows_counterclockwise:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:rewind:</code></td>
<td style="text-align: center;">:rewind:</td>
<td style="text-align: center;"><code>:fast_forward:</code></td>
<td style="text-align: center;">:fast_forward:</td>
<td style="text-align: center;"><code>:information_source:</code></td>
<td style="text-align: center;">:information_source:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:ok:</code></td>
<td style="text-align: center;">:ok:</td>
<td
style="text-align: center;"><code>:twisted_rightwards_arrows:</code></td>
<td style="text-align: center;">:twisted_rightwards_arrows:</td>
<td style="text-align: center;"><code>:repeat:</code></td>
<td style="text-align: center;">:repeat:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:repeat_one:</code></td>
<td style="text-align: center;">:repeat_one:</td>
<td style="text-align: center;"><code>:new:</code></td>
<td style="text-align: center;">:new:</td>
<td style="text-align: center;"><code>:top:</code></td>
<td style="text-align: center;">:top:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:up:</code></td>
<td style="text-align: center;">:up:</td>
<td style="text-align: center;"><code>:cool:</code></td>
<td style="text-align: center;">:cool:</td>
<td style="text-align: center;"><code>:free:</code></td>
<td style="text-align: center;">:free:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:ng:</code></td>
<td style="text-align: center;">:ng:</td>
<td style="text-align: center;"><code>:cinema:</code></td>
<td style="text-align: center;">:cinema:</td>
<td style="text-align: center;"><code>:koko:</code></td>
<td style="text-align: center;">:koko:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:signal_strength:</code></td>
<td style="text-align: center;">:signal_strength:</td>
<td style="text-align: center;"><code>:u5272:</code></td>
<td style="text-align: center;">:u5272:</td>
<td style="text-align: center;"><code>:u5408:</code></td>
<td style="text-align: center;">:u5408:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:u55b6:</code></td>
<td style="text-align: center;">:u55b6:</td>
<td style="text-align: center;"><code>:u6307:</code></td>
<td style="text-align: center;">:u6307:</td>
<td style="text-align: center;"><code>:u6708:</code></td>
<td style="text-align: center;">:u6708:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:u6709:</code></td>
<td style="text-align: center;">:u6709:</td>
<td style="text-align: center;"><code>:u6e80:</code></td>
<td style="text-align: center;">:u6e80:</td>
<td style="text-align: center;"><code>:u7121:</code></td>
<td style="text-align: center;">:u7121:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:u7533:</code></td>
<td style="text-align: center;">:u7533:</td>
<td style="text-align: center;"><code>:u7a7a:</code></td>
<td style="text-align: center;">:u7a7a:</td>
<td style="text-align: center;"><code>:u7981:</code></td>
<td style="text-align: center;">:u7981:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:sa:</code></td>
<td style="text-align: center;">:sa:</td>
<td style="text-align: center;"><code>:restroom:</code></td>
<td style="text-align: center;">:restroom:</td>
<td style="text-align: center;"><code>:mens:</code></td>
<td style="text-align: center;">:mens:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:womens:</code></td>
<td style="text-align: center;">:womens:</td>
<td style="text-align: center;"><code>:baby_symbol:</code></td>
<td style="text-align: center;">:baby_symbol:</td>
<td style="text-align: center;"><code>:no_smoking:</code></td>
<td style="text-align: center;">:no_smoking:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:parking:</code></td>
<td style="text-align: center;">:parking:</td>
<td style="text-align: center;"><code>:wheelchair:</code></td>
<td style="text-align: center;">:wheelchair:</td>
<td style="text-align: center;"><code>:metro:</code></td>
<td style="text-align: center;">:metro:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:baggage_claim:</code></td>
<td style="text-align: center;">:baggage_claim:</td>
<td style="text-align: center;"><code>:accept:</code></td>
<td style="text-align: center;">:accept:</td>
<td style="text-align: center;"><code>:wc:</code></td>
<td style="text-align: center;">:wc:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:potable_water:</code></td>
<td style="text-align: center;">:potable_water:</td>
<td
style="text-align: center;"><code>:put_litter_in_its_place:</code></td>
<td style="text-align: center;">:put_litter_in_its_place:</td>
<td style="text-align: center;"><code>:secret:</code></td>
<td style="text-align: center;">:secret:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:congratulations:</code></td>
<td style="text-align: center;">:congratulations:</td>
<td style="text-align: center;"><code>:m:</code></td>
<td style="text-align: center;">:m:</td>
<td style="text-align: center;"><code>:passport_control:</code></td>
<td style="text-align: center;">:passport_control:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:left_luggage:</code></td>
<td style="text-align: center;">:left_luggage:</td>
<td style="text-align: center;"><code>:customs:</code></td>
<td style="text-align: center;">:customs:</td>
<td style="text-align: center;"><code>:ideograph_advantage:</code></td>
<td style="text-align: center;">:ideograph_advantage:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:cl:</code></td>
<td style="text-align: center;">:cl:</td>
<td style="text-align: center;"><code>:sos:</code></td>
<td style="text-align: center;">:sos:</td>
<td style="text-align: center;"><code>:id:</code></td>
<td style="text-align: center;">:id:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:no_entry_sign:</code></td>
<td style="text-align: center;">:no_entry_sign:</td>
<td style="text-align: center;"><code>:underage:</code></td>
<td style="text-align: center;">:underage:</td>
<td style="text-align: center;"><code>:no_mobile_phones:</code></td>
<td style="text-align: center;">:no_mobile_phones:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:do_not_litter:</code></td>
<td style="text-align: center;">:do_not_litter:</td>
<td style="text-align: center;"><code>:non-potable_water:</code></td>
<td style="text-align: center;">:non-potable_water:</td>
<td style="text-align: center;"><code>:no_bicycles:</code></td>
<td style="text-align: center;">:no_bicycles:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:no_pedestrians:</code></td>
<td style="text-align: center;">:no_pedestrians:</td>
<td style="text-align: center;"><code>:children_crossing:</code></td>
<td style="text-align: center;">:children_crossing:</td>
<td style="text-align: center;"><code>:no_entry:</code></td>
<td style="text-align: center;">:no_entry:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:eight_spoked_asterisk:</code></td>
<td style="text-align: center;">:eight_spoked_asterisk:</td>
<td
style="text-align: center;"><code>:eight_pointed_black_star:</code></td>
<td style="text-align: center;">:eight_pointed_black_star:</td>
<td style="text-align: center;"><code>:heart_decoration:</code></td>
<td style="text-align: center;">:heart_decoration:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:vs:</code></td>
<td style="text-align: center;">:vs:</td>
<td style="text-align: center;"><code>:vibration_mode:</code></td>
<td style="text-align: center;">:vibration_mode:</td>
<td style="text-align: center;"><code>:mobile_phone_off:</code></td>
<td style="text-align: center;">:mobile_phone_off:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:chart:</code></td>
<td style="text-align: center;">:chart:</td>
<td style="text-align: center;"><code>:currency_exchange:</code></td>
<td style="text-align: center;">:currency_exchange:</td>
<td style="text-align: center;"><code>:aries:</code></td>
<td style="text-align: center;">:aries:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:taurus:</code></td>
<td style="text-align: center;">:taurus:</td>
<td style="text-align: center;"><code>:gemini:</code></td>
<td style="text-align: center;">:gemini:</td>
<td style="text-align: center;"><code>:cancer:</code></td>
<td style="text-align: center;">:cancer:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:leo:</code></td>
<td style="text-align: center;">:leo:</td>
<td style="text-align: center;"><code>:virgo:</code></td>
<td style="text-align: center;">:virgo:</td>
<td style="text-align: center;"><code>:libra:</code></td>
<td style="text-align: center;">:libra:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:scorpius:</code></td>
<td style="text-align: center;">:scorpius:</td>
<td style="text-align: center;"><code>:sagittarius:</code></td>
<td style="text-align: center;">:sagittarius:</td>
<td style="text-align: center;"><code>:capricorn:</code></td>
<td style="text-align: center;">:capricorn:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:aquarius:</code></td>
<td style="text-align: center;">:aquarius:</td>
<td style="text-align: center;"><code>:pisces:</code></td>
<td style="text-align: center;">:pisces:</td>
<td style="text-align: center;"><code>:ophiuchus:</code></td>
<td style="text-align: center;">:ophiuchus:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:six_pointed_star:</code></td>
<td style="text-align: center;">:six_pointed_star:</td>
<td
style="text-align: center;"><code>:negative_squared_cross_mark:</code></td>
<td style="text-align: center;">:negative_squared_cross_mark:</td>
<td style="text-align: center;"><code>:a:</code></td>
<td style="text-align: center;">:a:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:b:</code></td>
<td style="text-align: center;">:b:</td>
<td style="text-align: center;"><code>:ab:</code></td>
<td style="text-align: center;">:ab:</td>
<td style="text-align: center;"><code>:o2:</code></td>
<td style="text-align: center;">:o2:</td>
</tr>
<tr class="odd">
<td
style="text-align: center;"><code>:diamond_shape_with_a_dot_inside:</code></td>
<td style="text-align: center;">:diamond_shape_with_a_dot_inside:</td>
<td style="text-align: center;"><code>:recycle:</code></td>
<td style="text-align: center;">:recycle:</td>
<td style="text-align: center;"><code>:end:</code></td>
<td style="text-align: center;">:end:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:on:</code></td>
<td style="text-align: center;">:on:</td>
<td style="text-align: center;"><code>:soon:</code></td>
<td style="text-align: center;">:soon:</td>
<td style="text-align: center;"><code>:clock1:</code></td>
<td style="text-align: center;">:clock1:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:clock130:</code></td>
<td style="text-align: center;">:clock130:</td>
<td style="text-align: center;"><code>:clock10:</code></td>
<td style="text-align: center;">:clock10:</td>
<td style="text-align: center;"><code>:clock1030:</code></td>
<td style="text-align: center;">:clock1030:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:clock11:</code></td>
<td style="text-align: center;">:clock11:</td>
<td style="text-align: center;"><code>:clock1130:</code></td>
<td style="text-align: center;">:clock1130:</td>
<td style="text-align: center;"><code>:clock12:</code></td>
<td style="text-align: center;">:clock12:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:clock1230:</code></td>
<td style="text-align: center;">:clock1230:</td>
<td style="text-align: center;"><code>:clock2:</code></td>
<td style="text-align: center;">:clock2:</td>
<td style="text-align: center;"><code>:clock230:</code></td>
<td style="text-align: center;">:clock230:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:clock3:</code></td>
<td style="text-align: center;">:clock3:</td>
<td style="text-align: center;"><code>:clock330:</code></td>
<td style="text-align: center;">:clock330:</td>
<td style="text-align: center;"><code>:clock4:</code></td>
<td style="text-align: center;">:clock4:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:clock430:</code></td>
<td style="text-align: center;">:clock430:</td>
<td style="text-align: center;"><code>:clock5:</code></td>
<td style="text-align: center;">:clock5:</td>
<td style="text-align: center;"><code>:clock530:</code></td>
<td style="text-align: center;">:clock530:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:clock6:</code></td>
<td style="text-align: center;">:clock6:</td>
<td style="text-align: center;"><code>:clock630:</code></td>
<td style="text-align: center;">:clock630:</td>
<td style="text-align: center;"><code>:clock7:</code></td>
<td style="text-align: center;">:clock7:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:clock730:</code></td>
<td style="text-align: center;">:clock730:</td>
<td style="text-align: center;"><code>:clock8:</code></td>
<td style="text-align: center;">:clock8:</td>
<td style="text-align: center;"><code>:clock830:</code></td>
<td style="text-align: center;">:clock830:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:clock9:</code></td>
<td style="text-align: center;">:clock9:</td>
<td style="text-align: center;"><code>:clock930:</code></td>
<td style="text-align: center;">:clock930:</td>
<td style="text-align: center;"><code>:heavy_dollar_sign:</code></td>
<td style="text-align: center;">:heavy_dollar_sign:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:copyright:</code></td>
<td style="text-align: center;">:copyright:</td>
<td style="text-align: center;"><code>:registered:</code></td>
<td style="text-align: center;">:registered:</td>
<td style="text-align: center;"><code>:tm:</code></td>
<td style="text-align: center;">:tm:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:x:</code></td>
<td style="text-align: center;">:x:</td>
<td
style="text-align: center;"><code>:heavy_exclamation_mark:</code></td>
<td style="text-align: center;">:heavy_exclamation_mark:</td>
<td style="text-align: center;"><code>:bangbang:</code></td>
<td style="text-align: center;">:bangbang:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:interrobang:</code></td>
<td style="text-align: center;">:interrobang:</td>
<td style="text-align: center;"><code>:o:</code></td>
<td style="text-align: center;">:o:</td>
<td
style="text-align: center;"><code>:heavy_multiplication_x:</code></td>
<td style="text-align: center;">:heavy_multiplication_x:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:heavy_plus_sign:</code></td>
<td style="text-align: center;">:heavy_plus_sign:</td>
<td style="text-align: center;"><code>:heavy_minus_sign:</code></td>
<td style="text-align: center;">:heavy_minus_sign:</td>
<td style="text-align: center;"><code>:heavy_division_sign:</code></td>
<td style="text-align: center;">:heavy_division_sign:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:white_flower:</code></td>
<td style="text-align: center;">:white_flower:</td>
<td style="text-align: center;"><code>:100:</code></td>
<td style="text-align: center;">:100:</td>
<td style="text-align: center;"><code>:heavy_check_mark:</code></td>
<td style="text-align: center;">:heavy_check_mark:</td>
</tr>
<tr class="even">
<td
style="text-align: center;"><code>:ballot_box_with_check:</code></td>
<td style="text-align: center;">:ballot_box_with_check:</td>
<td style="text-align: center;"><code>:radio_button:</code></td>
<td style="text-align: center;">:radio_button:</td>
<td style="text-align: center;"><code>:link:</code></td>
<td style="text-align: center;">:link:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:curly_loop:</code></td>
<td style="text-align: center;">:curly_loop:</td>
<td style="text-align: center;"><code>:wavy_dash:</code></td>
<td style="text-align: center;">:wavy_dash:</td>
<td
style="text-align: center;"><code>:part_alternation_mark:</code></td>
<td style="text-align: center;">:part_alternation_mark:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:trident:</code></td>
<td style="text-align: center;">:trident:</td>
<td style="text-align: center;"><code>:black_large_square:</code></td>
<td style="text-align: center;">:black_large_square:</td>
<td style="text-align: center;"><code>:white_large_square:</code></td>
<td style="text-align: center;">:white_large_square:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:white_check_mark:</code></td>
<td style="text-align: center;">:white_check_mark:</td>
<td style="text-align: center;"><code>:white_square_button:</code></td>
<td style="text-align: center;">:white_square_button:</td>
<td style="text-align: center;"><code>:black_square_button:</code></td>
<td style="text-align: center;">:black_square_button:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:black_circle:</code></td>
<td style="text-align: center;">:black_circle:</td>
<td style="text-align: center;"><code>:white_circle:</code></td>
<td style="text-align: center;">:white_circle:</td>
<td style="text-align: center;"><code>:red_circle:</code></td>
<td style="text-align: center;">:red_circle:</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>:large_blue_circle:</code></td>
<td style="text-align: center;">:large_blue_circle:</td>
<td style="text-align: center;"><code>:large_blue_diamond:</code></td>
<td style="text-align: center;">:large_blue_diamond:</td>
<td style="text-align: center;"><code>:large_orange_diamond:</code></td>
<td style="text-align: center;">:large_orange_diamond:</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>:small_blue_diamond:</code></td>
<td style="text-align: center;">:small_blue_diamond:</td>
<td style="text-align: center;"><code>:small_orange_diamond:</code></td>
<td style="text-align: center;">:small_orange_diamond:</td>
<td style="text-align: center;"><code>:small_red_triangle:</code></td>
<td style="text-align: center;">:small_red_triangle:</td>
</tr>
<tr class="odd">
<td
style="text-align: center;"><code>:small_red_triangle_down:</code></td>
<td style="text-align: center;">:small_red_triangle_down:</td>
<td style="text-align: center;"><code>:shipit:</code></td>
<td style="text-align: center;">:shipit:</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Emoji</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Q771 Jewels and Stones</title>
    <url>/2019/05/06/2019-05-06-Q771-Jewels-and-Stones/</url>
    <content><![CDATA[<h1 id="jewels-and-stones"><a
href="https://leetcode.com/problems/jewels-and-stones/">Jewels and
Stones</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>You're given strings <code>J</code> representing the types of stones
that are jewels, and <code>S</code> representing the stones you have.
Each character in <code>S</code> is a type of stone you have. You want
to know how many of the stones you have are also jewels.</p>
<p>The letters in <code>J</code> are guaranteed distinct, and all
characters in <code>J</code> and <code>S</code> are letters. Letters are
case sensitive, so <code>"a"</code> is considered a different type of
stone from <code>"A"</code>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: J = "aA", S = "aAAbbbb" Output: 3</p>
</blockquote>
<blockquote>
<p><strong>Example 1</strong>:</p>
<p>Input: J = "z", S = "ZZ" Output: 0</p>
</blockquote>
<blockquote>
<p><strong>Note</strong>:</p>
<p>S and J will consist of letters and have length at most 50. The
characters in J are distinct.</p>
</blockquote>
<h3 id="approach-1-brute-force">Approach 1: Brute Force</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>The brute force approach is simple. Loop through each element <em>i
,j</em> and find if they are equal.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numJewelsInStones</span>(<span class="params">self, J: <span class="built_in">str</span>, S: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        num=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> J:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> S:</span><br><span class="line">                <span class="keyword">if</span> i==j:</span><br><span class="line">                    num+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    J = <span class="string">&quot;aA&quot;</span></span><br><span class="line">    S=<span class="string">&quot;aAAbbbbb&quot;</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.numJewelsInStones(J,S)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 40 ms, faster than 68.64% of Python3 online submissions for
Jewels and Stones.</li>
<li>Memory Usage: 13.3 MB, less than 5.25% of Python3 online submissions
for Jewels and Stones.</li>
</ul>
<hr />
<h3 id="approach-2-hash-table">Approach 2: Hash Table</h3>
<p>In my opinion, the second approach cancels the nested loop which
should be much faster than the first approach. However, it has no effect
at all. :worried:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numJewelsInStones</span>(<span class="params">self, J: <span class="built_in">str</span>, S: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        Hashmap=<span class="built_in">dict</span>()</span><br><span class="line">        num=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 建立Hash Table</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(J)):</span><br><span class="line">            Hashmap[J[i]] = i <span class="comment">#键是数值，值是序号</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> Hashmap:</span><br><span class="line">                num+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 40 ms, faster than 68.64% of Python3 online submissions for
Jewels and Stones.</li>
<li>Memory Usage: 13 MB, less than 5.25% of Python3 online submissions
for Jewels and Stones.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Q938 Range Sum of BST</title>
    <url>/2019/05/09/2019-05-09-Q938-Range%20Sum%20of%20BST/</url>
    <content><![CDATA[<h1 id="range-sum-of-bst"><a
href="https://leetcode.com/problems/range-sum-of-bst/">Range Sum of
BST</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given the <code>root</code> node of a binary search tree, return the
sum of values of all nodes with value between <code>L</code> and
<code>R</code> (inclusive).</p>
<p>The binary search tree is guaranteed to have unique values.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10 Output:
23</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ol type="1">
<li>The number of nodes in the tree is at most <code>10000</code>.</li>
<li>The final answer is guaranteed to be less than
<code>2^31</code>.</li>
</ol>
</blockquote>
<h3 id="approach-1-depth-first-search">Approach 1: Depth First
Search</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>We traverse the tree using a depth first search. If
<code>node.val</code> falls outside the range <code>[L, R]</code>, (for
example <code>node.val &lt; L</code>), then we know that only the right
branch could have nodes with value inside <code>[L, R]</code>.</p>
<p>We showcase two implementations - one using a recursive algorithm,
and one using an iterative one.</p>
<p><strong>Recursive Implementation</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeSumBST</span>(<span class="params">self, root, L, R</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> L &lt;= node.val &lt;= R:</span><br><span class="line">                    self.ans += node.val</span><br><span class="line">                <span class="keyword">if</span> L &lt; node.val:</span><br><span class="line">                    dfs(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.val &lt; R:</span><br><span class="line">                    dfs(node.right)</span><br><span class="line"></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Iterative Implementation</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeSumBST</span>(<span class="params">self, root, L, R</span>):</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> L &lt;= node.val &lt;= R:</span><br><span class="line">                    ans += node.val</span><br><span class="line">                <span class="keyword">if</span> L &lt; node.val:</span><br><span class="line">                    stack.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.val &lt; R:</span><br><span class="line">                    stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Q739 Daily Temperatures</title>
    <url>/2019/05/08/2019-05-08-Q739-Daily-Temperatures/</url>
    <content><![CDATA[<h1 id="daily-temperatures"><a
href="https://leetcode.com/problems/daily-temperatures/">Daily
Temperatures</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a list of daily temperatures <code>T</code>, return a list such
that, for each day in the input, tells you how many days you would have
to wait until a warmer temperature. If there is no future day for which
this is possible, put <code>0</code> instead.</p>
<p>For example, given the list of temperatures
<code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be
<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p>
</blockquote>
<blockquote>
<p><strong>Note</strong>:</p>
<p><code>The length of</code>temperatures<code>will be in the range</code>[1,
30000]<code>. Each temperature will be an integer in the range</code>[30,
100]`.</p>
</blockquote>
<h3 id="approach-1-stack">Approach 1: Stack</h3>
<p><strong>Intuition</strong></p>
<p>Consider trying to find the next warmer occurrence at
<code>T[i]</code>. What information (about <code>T[j]</code> for
<code>j &gt; i</code>) must we remember?</p>
<p>Say we are trying to find <code>T[0]</code>. If we remembered
<code>T[10] = 50</code>, knowing <code>T[20] = 50</code> wouldn't help
us, as any <code>T[i]</code> that has its next warmer ocurrence at
<code>T[20]</code> would have it at <code>T[10]</code> instead. However,
<code>T[20] = 100</code> would help us, since if <code>T[0]</code> were
<code>80</code>, then <code>T[20]</code> might be its next warmest
occurrence, while <code>T[10]</code>couldn't.</p>
<p>Thus, we should remember a list of indices representing a strictly
increasing list of temperatures. For example, <code>[10, 20, 30]</code>
corresponding to temperatures <code>[50, 80, 100]</code>. When we get a
new temperature like <code>T[i] = 90</code>, we will have
<code>[5, 30]</code> as our list of indices (corresponding to
temperatures <code>[90, 100]</code>). The most basic structure that will
satisfy our requirements is a <em>stack</em>, where the top of the stack
is the first value in the list, and so on.</p>
<p><strong>Algorithm</strong></p>
<p>As in <em>Approach #1</em>, process indices <code>i</code> in
descending order. We'll keep a <code>stack</code> of indices such that
<code>T[stack[-1]] &lt; T[stack[-2]] &lt; ...</code>, where
<code>stack[-1]</code> is the top of the stack, <code>stack[-2]</code>
is second from the top, and so on; and where
<code>stack[-1] &gt; stack[-2] &gt; ...</code>; and we will maintain
this invariant as we process each temperature.</p>
<p>After, it is easy to know the next occurrence of a warmer
temperature: it's simply the top index in the stack.</p>
<p>Here is a worked example of the contents of the <code>stack</code> as
we work through <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code> in
reverse order, at the end of the loop (after we add <code>T[i]</code>).
For clarity, <code>stack</code> only contains indices <code>i</code>,
but we will write the value of <code>T[i]</code> beside it in brackets,
such as <code>0 (73)</code>.</p>
<ul>
<li>When <code>i = 7</code>, <code>stack = [7 (73)]</code>.
<code>ans[i] = 0</code>.</li>
<li>When <code>i = 6</code>, <code>stack = [6 (76)]</code>.
<code>ans[i] = 0</code>.</li>
<li>When <code>i = 5</code>, <code>stack = [5 (72), 6 (76)]</code>.
<code>ans[i] = 1</code>.</li>
<li>When <code>i = 4</code>,
<code>stack = [4 (69), 5 (72), 6 (76)]</code>.
<code>ans[i] = 1</code>.</li>
<li>When <code>i = 3</code>,
<code>stack = [3 (71), 5 (72), 6 (76)]</code>.
<code>ans[i] = 2</code>.</li>
<li>When <code>i = 2</code>, <code>stack = [2 (75), 6 (76)]</code>.
<code>ans[i] = 4</code>.</li>
<li>When <code>i = 1</code>,
<code>stack = [1 (74), 2 (75), 6 (76)]</code>.
<code>ans[i] = 1</code>.</li>
<li>When <code>i = 0</code>,
<code>stack = [0 (73), 1 (74), 2 (75), 6 (76)]</code>.
<code>ans[i] = 1</code>.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dailyTemperatures</span>(<span class="params">self, T</span>):</span><br><span class="line">        ans = [<span class="number">0</span>] * <span class="built_in">len</span>(T)</span><br><span class="line">        stack = [] <span class="comment">#从大到小的序号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):<span class="comment"># 从最后一个元素开始</span></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> T[i] &gt;= T[stack[-<span class="number">1</span>]]:</span><br><span class="line">                stack.pop()<span class="comment"># 移除最后一个元素</span></span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                ans[i] = stack[-<span class="number">1</span>] - i</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A =[<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>]<span class="comment"># 73, 74, 75, 71, 69, 72, 76, 73</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.dailyTemperatures(A)</span><br><span class="line">    <span class="built_in">print</span>(results) <span class="comment"># [1, 1, 4, 2, 1, 1, 0, 0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Runtime: 308 ms, faster than 70.55% of Python3 online submissions
for Daily Temperatures.</p></li>
<li><p>Memory Usage: 16.7 MB, less than 9.45% of Python3 online
submissions for Daily Temperatures.</p>
<p>Next challenges:</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Q575 Distribute Candies</title>
    <url>/2019/05/10/2019-05-10-Q575-Distribute-Candies/</url>
    <content><![CDATA[<h1 id="distribute-candies"><a
href="https://leetcode.com/problems/distribute-candies/">Distribute
Candies</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an integer array with <strong>even</strong> length, where
different numbers in this array represent different
<strong>kinds</strong> of candies. Each number means one candy of the
corresponding kind. You need to distribute these candies
<strong>equally</strong> in number to brother and sister. Return the
maximum number of <strong>kinds</strong> of candies the sister could
gain.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: candies = [1,1,2,2,3,3] Output: 3 Explanation: There are three
different kinds of candies (1, 2 and 3), and two candies for each kind.
Optimal distribution: The sister has candies [1,2,3] and the brother has
candies [1,2,3], too. The sister has three different kinds of
candies.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: candies = [1,1,2,3] Output: 2 Explanation: For example, the
sister has candies [2,3] and the brother has candies [1,1]. The sister
has two different kinds of candies, the brother has only one kind of
candies.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ol type="1">
<li>The length of the given array is in range [2, 10,000], and will be
even.</li>
<li>The number in given array is in range [-100,000, 100,000].</li>
</ol>
</blockquote>
<h3 id="approach-1-hash-table">Approach 1: Hash Table</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>First, counting the number of kinds. Then, returning the number of
given kinds.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distributeCandies</span>(<span class="params">self, candies</span>):</span><br><span class="line">        Hash=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(candies)):</span><br><span class="line">            Hash[candies[i]]=i</span><br><span class="line">        kinds=<span class="built_in">len</span>(Hash)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(kinds,<span class="built_in">len</span>(candies)//<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    candies =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.distributeCandies(candies)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 136 ms, faster than 35.19% of Python3 online submissions
for Distribute Candies.</li>
<li>Memory Usage: 14.5 MB, less than 5.88% of Python3 online submissions
for Distribute Candies.</li>
</ul>
<hr />
<h3 id="approach-2-using-set">Approach 2: Using Set</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Another way to find the number of unique elements is to traverse over
all the elements of the given candies array and keep on putting the
elements in a set. By the property of a set, it will contain only unique
elements. At the end, we can count the number of elements in the set,
given by, say count. The value to be returned will again be given by
<span class="math display">\[\text{min}(count, n/2)\]</span>. Here,
<span class="math display">\[n\]</span> refers to the size of the
candies array.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distributeCandies</span>(<span class="params">self, candies</span>):</span><br><span class="line">        candyType = <span class="built_in">set</span>(candies)<span class="comment"># 统计糖果种类数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">len</span>(candyType), <span class="built_in">len</span>(candies) //<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 如果种类数&gt;n/2，则最多给n/2种糖果</span></span><br><span class="line">    <span class="comment"># 如果种类数&lt;n/2，则给所有种类的糖果</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Runtime: 104 ms, faster than <strong><em>99.13%</em></strong> of
Python3 online submissions for Distribute Candies.</p></li>
<li><p>Memory Usage: 14.8 MB, less than 5.88% of Python3 online
submissions for Distribute Candies.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Q347 Top K Frequent Elements</title>
    <url>/2019/05/13/2019-05-13-Q347-Top-K-Frequent-Elements/</url>
    <content><![CDATA[<h1 id="top-k-frequent-elements"><a
href="https://leetcode.com/problems/top-k-frequent-elements/">Top K
Frequent Elements</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a non-empty array of integers, return the <strong>k</strong>
most frequent elements.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums = [1], k = 1 Output: [1]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ol type="1">
<li>You may assume k is always valid, 1 ≤ k ≤ number of unique
elements.</li>
<li>Your algorithm's time complexity must be better than O(n log n),
where n is the array's size.</li>
</ol>
</blockquote>
<h3 id="approach-1-heap">Approach 1: Heap</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>If <code>k = 1</code> the linear-time solution is quite simple. One
could keep the frequency of elements appearance in a hash map and update
the maximum element at each step.</p>
<p>When <code>k &gt; 1</code> we need a data structure that has a fast
access to the elements ordered by their frequencies. The idea here is to
use the heap which is also known as priority queue.</p>
<p>The first step is to build a hash map
<code>element -&gt; its frequency</code>. In Java we could use data
structure <code>HashMap</code> but have to fill it manually. Python
provides us both a dictionary structure for the hash map and a method
<code>Counter</code> in the <code>collections</code> library to build
the hash map we need. This step takes <span
class="math display">\[\mathcal{O}(N)\]</span> time where <code>N</code>
is number of elements in the list.</p>
<p>The second step is to build a heap. The time complexity of adding an
element in a heap is <span
class="math display">\[\mathcal{O}(\log(k))\]</span> and we do it
<code>N</code> times that means <span
class="math display">\[\mathcal{O}(N \log(k))\]</span> time complexity
for this step.</p>
<p>The last step to build an output list has <span
class="math display">\[\mathcal{O}(k \log(k))\]</span> time
complexity.</p>
<p>In Python there is a method <code>nlargest</code> in
<code>heapq</code> library (<a
href="https://hg.python.org/cpython/file/2.7/Lib/heapq.py#l203">check
here the source code</a>) which has the same <span
class="math display">\[\mathcal{O}(k \log(k))​\]</span> time complexity
and combines two last steps in one line.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">topKFrequent</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        count = collections.Counter(nums)</span><br><span class="line">        <span class="keyword">return</span> heapq.nlargest(k, count.keys(), key=count.get)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    k=<span class="number">2</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.topKFrequent(nums,k)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 40 ms, faster than 99.60% of Python3 online submissions for
Top K Frequent Elements.</li>
<li>Memory Usage: 15.8 MB, less than 8.41% of Python3 online submissions
for Top K Frequent Elements.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch tutorial</title>
    <url>/2019/05/15/2019-05-13-Pytorch-Tutorial/</url>
    <content><![CDATA[<h1 id="pytorch-tutorial"><a
href="https://pytorch.org/tutorials/">Pytorch Tutorial</a></h1>
<h2 id="tensors">Tensors</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a 5x3 matrix, uninitialized</span></span><br><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a randomly initialized matrix</span></span><br><span class="line">x = torch.rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a matrix filled zeros and of dtype long</span></span><br><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a tensor directly from data</span></span><br><span class="line">x = torch.tensor([<span class="number">5.5</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># or create a tensor based on an existing tensor. These methods will reuse properties of the input tensor, e.g. dtype, unless new values are provided by user</span></span><br><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double)      <span class="comment"># new_* methods take in sizes</span></span><br><span class="line">x = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>)    <span class="comment"># override dtype!</span></span><br><span class="line"><span class="built_in">print</span>(x)                                      <span class="comment"># result has the same size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get its size:</span></span><br><span class="line"><span class="built_in">print</span>(x.size())</span><br><span class="line"><span class="comment"># &#x27;torch.Size&#x27; is in fact a tuple, so it supports all tuple operations.</span></span><br></pre></td></tr></table></figure>
<h2 id="operations">Operations</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Addition: syntax 1</span></span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Addition: syntax 2</span></span><br><span class="line"><span class="built_in">print</span>(torch.add(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Addition: providing an output tensor as argument</span></span><br><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">torch.add(x, y, out=result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Addition: in-place</span></span><br><span class="line">y.add_(x)<span class="comment"># adds x to y,y=x+y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Any operation that mutates a tensor in-place is post-fixed with an _. For example: x.copy_(y), x.t_(), will change x.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use standard NumPy-like indexing with all bells and whistles!</span></span><br><span class="line"><span class="built_in">print</span>(x[:, <span class="number">1</span>])<span class="comment"># [row , column]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Resizing: If you want to resize/reshape tensor, you can use torch.view:</span></span><br><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)<span class="comment"># remember x is a tapel </span></span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>)  <span class="comment"># the size -1 is inferred from other dimensions</span></span><br><span class="line"><span class="built_in">print</span>(x.size(), y.size(), z.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you have a one element tensor, use .item() to get the value as a Python number</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x.item()) <span class="comment"># !!!!</span></span><br></pre></td></tr></table></figure>
<p><strong>Read later:</strong></p>
<p>100+ Tensor operations, including transposing, indexing, slicing,
mathematical operations, linear algebra, random numbers, etc., are
described <a href="https://pytorch.org/docs/torch">here</a>.</p>
<h2 id="numpy-bridge">NumPy Bridge</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Converting a Torch Tensor to a NumPy array and vice versa is a breeze.</span></span><br><span class="line"><span class="comment"># The Torch Tensor and NumPy array will share their underlying memory locations (if the Torch Tensor is on CPU), and changing one will change the other.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Converting a Torch Tensor to a NumPy Array</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">b = a.numpy()</span><br><span class="line">a.add_(<span class="number">1</span>)<span class="comment"># b will change at the same time </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Converting NumPy Array to Torch Tensor</span></span><br><span class="line"><span class="comment"># See how changing the np array changed the Torch Tensor automatically</span></span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># All the Tensors on the CPU except a CharTensor support converting to NumPy and back.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="cuda-tensors">CUDA Tensors</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tensors can be moved onto any device using the &#x27;.to&#x27; method.</span></span><br><span class="line"><span class="comment"># let us run this cell only if CUDA is available</span></span><br><span class="line"><span class="comment"># We will use ``torch.device`` objects to move tensors in and out of GPU</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span>)          <span class="comment"># a CUDA device object</span></span><br><span class="line">    y = torch.ones_like(x, device=device)  <span class="comment"># directly create a tensor on GPU</span></span><br><span class="line">    x = x.to(device)                       <span class="comment"># or just use strings ``.to(&quot;cuda&quot;)``</span></span><br><span class="line">    z = x + y</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))       <span class="comment"># ``.to`` can also change dtype together!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="autograd-automatic-differentiation">AUTOGRAD: AUTOMATIC
DIFFERENTIATION</h2>
<p>Central to all neural networks in PyTorch is the
<code>autograd</code> package. Let’s first briefly visit this, and we
will then go to training our first neural network.</p>
<p>The <code>autograd</code> package provides automatic differentiation
for all operations on Tensors. It is a define-by-run framework, which
means that your backprop is defined by how your code is run, and that
every single iteration can be different.</p>
<p>Let us see this in more simple terms with some examples.</p>
<h3 id="tensor">Tensor</h3>
<p><code>torch.Tensor</code> is the central class of the package. If you
set its attribute <code>.requires_grad</code> as <code>True</code>, it
starts to track all operations on it. When you finish your computation
you can call <code>.backward()</code> and have all the gradients
computed automatically. The gradient for this tensor will be accumulated
into <code>.grad</code> attribute.</p>
<p>To stop a tensor from tracking history, you can call
<code>.detach()</code> to detach it from the computation history, and to
prevent future computation from being tracked.</p>
<p>To prevent tracking history (and using memory), you can also wrap the
code block in <code>with torch.no_grad():</code>. This can be
particularly helpful when evaluating a model because the model may have
trainable parameters with <code>requires_grad=True</code>, but for which
we don’t need the gradients.</p>
<p>There’s one more class which is very important for autograd
implementation - a <code>Function</code>.</p>
<p><code>Tensor</code> and <code>Function</code> are interconnected and
build up an acyclic graph, that encodes a complete history of
computation. Each tensor has a <code>.grad_fn</code> attribute that
references a <code>Function</code> that has created the
<code>Tensor</code> (except for Tensors created by the user - their
<code>grad_fn isNone</code>).</p>
<p>If you want to compute the derivatives, you can call
<code>.backward()</code> on a <code>Tensor</code>. If
<code>Tensor</code> is a scalar (i.e. it holds a one element data), you
don’t need to specify any arguments to <code>backward()</code>, however
if it has more elements, you need to specify a <code>gradient</code>
argument that is a tensor of matching shape.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y.grad_fn)</span><br><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"><span class="built_in">print</span>(z, out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;.requires_grad_( ... )&#x27; changes an existing Tensor’s requires_grad flag in-place. The input flag defaults to False if not given.</span></span><br><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">a = ((a * <span class="number">3</span>) / (a - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad)</span><br><span class="line">a.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad)</span><br><span class="line">b = (a * a).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(b.grad_fn)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="gradients">Gradients</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Let’s backprop now. Because out contains a single scalar, out.backward() is equivalent to out.backward(torch.tensor(1.)).</span></span><br><span class="line">out.backward()</span><br><span class="line"><span class="comment"># Print gradients d(out)/dx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># let’s take a look at an example of vector-Jacobian product:</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>: <span class="comment"># ||x||_P</span></span><br><span class="line">    y = y * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y) </span><br><span class="line"><span class="comment"># tensor([ 50.3352, -563.2849, 1482.2238], grad_fn=&lt;MulBackward0&gt;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now in this case y is no longer a scalar. torch.autograd could not compute the full Jacobian directly, but if we just want the vector-Jacobian product, simply pass the vector to backward as argument:</span></span><br><span class="line">v = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">y.backward(v)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also stop autograd from tracking history on Tensors with .requires_grad=True by wrapping the code block in with torch.no_grad():</span></span><br><span class="line"><span class="built_in">print</span>(x.requires_grad)</span><br><span class="line"><span class="built_in">print</span>((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():<span class="comment"># introduce a condition</span></span><br><span class="line">    <span class="built_in">print</span>((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable <span class="keyword">as</span> V</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y=x**<span class="number">2</span>*t.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradf</span>(<span class="params">x</span>):</span><br><span class="line">    dx=<span class="number">2</span>*x*t.exp(x)+x**<span class="number">2</span>*t.exp(x)</span><br><span class="line">    <span class="keyword">return</span> dx</span><br><span class="line"></span><br><span class="line">x=V(t.rand(<span class="number">3</span>,<span class="number">4</span>),requires_grad=<span class="literal">True</span>)</span><br><span class="line">y=f(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gradf(x)) <span class="comment"># artificial grad</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">y.backward(t.ones(y.size()))</span><br><span class="line"><span class="built_in">print</span>(x.grad) <span class="comment"># autograd </span></span><br></pre></td></tr></table></figure>
<p><strong>Read Later:</strong> Documentation of autograd and Function
is at https://pytorch.org/docs/autograd</p>
<h2 id="neural-networks">NEURAL NETWORKS</h2>
<p>Neural networks can be constructed using the <code>torch.nn</code>
package.</p>
<p>Now that you had a glimpse of <code>autograd</code>, <code>nn</code>
depends on <code>autograd</code> to define models and differentiate
them. An <code>nn.Module</code> contains layers, and a method
<code>forward(input)</code>that returns the <code>output</code>.</p>
<p>For example, look at this network that classifies digit images:</p>
<h3 id="define-the-network">Define the network</h3>
<p>Let’s define this network:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># kernel</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_flat_features</span>(<span class="params">self, x</span>):</span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>You just have to define the <code>forward</code> function, and the
<code>backward</code> function (where gradients are computed) is
automatically defined for you using <code>autograd</code>. You can use
any of the Tensor operations in the <code>forward</code> function.</p>
<p>The learnable parameters of a model are returned by
<code>net.parameters()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(params))</span><br><span class="line"><span class="built_in">print</span>(params[<span class="number">0</span>].size())  <span class="comment"># conv1&#x27;s .weight</span></span><br></pre></td></tr></table></figure>
<p>Let try a random 32x32 input. Note: expected input size of this net
(LeNet) is 32x32. To use this net on MNIST dataset, please resize the
images from the dataset to 32x32.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure>
<p>Zero the gradient buffers of all parameters and backprops with random
gradients:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Notice:</strong></p>
<p><code>torch.nn</code> only supports mini-batches. The entire
<code>torch.nn</code> package only supports inputs that are a mini-batch
of samples, and not a single sample.</p>
<p>For example, <code>nn.Conv2d</code> will take in a 4D Tensor of
<code>nSamples x nChannels x Height x Width</code>.</p>
<p>If you have a single sample, just use
<strong><code>input.unsqueeze(0)</code> </strong>to add a fake batch
dimension.</p>
</blockquote>
<p>Before proceeding further, let’s recap all the classes you’ve seen so
far.</p>
<p><strong>Recap:</strong></p>
<ul>
<li><code>torch.Tensor</code> - A <em>multi-dimensional array</em> with
support for autograd operations like <code>backward()</code>. Also
<em>holds the gradient</em> w.r.t. the tensor.</li>
<li><code>nn.Module</code> - Neural network module. <em>Convenient way
of encapsulating parameters</em>, with helpers for moving them to GPU,
exporting, loading, etc.</li>
<li><code>nn.Parameter</code> - A kind of Tensor, that is
<em>automatically registered as a parameter when assigned as an
attribute to a</em> <code>Module</code>.</li>
<li><code>autograd.Function</code> - Implements <em>forward and backward
definitions of an autograd operation</em>. Every <code>Tensor</code>
operation creates at least a single <code>Function</code> node that
connects to functions that created a <code>Tensor</code> and <em>encodes
its history</em>.</li>
</ul>
<p><strong>At this point, we covered:</strong></p>
<ul>
<li>Defining a neural network</li>
<li>Processing inputs and calling backward</li>
</ul>
<p><strong>Still Left:</strong></p>
<ul>
<li>Computing the loss</li>
<li>Updating the weights of the network</li>
</ul>
<h3 id="loss-function">Loss Function</h3>
<p>A loss function takes the (output, target) pair of inputs, and
computes a value that estimates how far away the output is from the
target.</p>
<p>There are several different <a
href="https://pytorch.org/docs/nn.html#loss-functions">loss
functions</a> under the nn package. A simple loss is:
<code>nn.MSELoss</code> which computes the mean-squared error between
the input and the target.</p>
<p>For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">target = torch.randn(<span class="number">10</span>)  <span class="comment"># a dummy target, for example</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>)  <span class="comment"># make it the same shape as output</span></span><br><span class="line"><span class="comment"># -1指在不告诉函数有多少列的情况下，根据原tensor数据和batchsize自动分配列数</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br></pre></td></tr></table></figure>
<p>Now, if you follow <code>loss</code> in the backward direction, using
its <code>.grad_fn</code> attribute, you will see a graph of
computations that looks like this:</p>
<blockquote>
<p>input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu
-&gt; maxpool2d -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt;
relu -&gt; linear -&gt; MSELoss -&gt; loss</p>
</blockquote>
<p>So, when we call <code>loss.backward()</code>, the whole graph is
differentiated w.r.t. the loss, and all Tensors in the graph that has
<code>requires_grad=True</code> will have their <code>.grad</code>
Tensor accumulated with the gradient.</p>
<p>For illustration, let us follow a few steps backward:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(loss.grad_fn)  <span class="comment"># MSELoss</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># Linear</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># ReLU</span></span><br></pre></td></tr></table></figure>
<h3 id="backprop">Backprop</h3>
<p>To backpropagate the error all we have to do is to
<code>loss.backward()</code>. You need to clear the existing gradients
though, else gradients will be accumulated to existing gradients.</p>
<p>Now we shall call <code>loss.backward()</code>, and have a look at
conv1’s bias gradients before and after the backward.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.zero_grad()     <span class="comment"># zeroes the gradient buffers of all parameters</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br></pre></td></tr></table></figure>
<p>Now, we have seen how to use loss functions.</p>
<p><strong>Read Later:</strong></p>
<p>The neural network package contains various modules and loss
functions that form the building blocks of deep neural networks. A full
list with documentation is <a
href="https://pytorch.org/docs/nn">here</a>.</p>
<p><strong>The only thing left to learn is:</strong></p>
<p>Updating the weights of the network</p>
<h3 id="update-the-weights">Update the weights</h3>
<p>The simplest update rule used in practice is the Stochastic Gradient
Descent (SGD): <span class="math display">\[
weight = weight - learning \ rate * gradient
\]</span> We can implement this using simple python code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br></pre></td></tr></table></figure>
<p>However, as you use neural networks, you want to use various
different update rules such as SGD, Nesterov-SGD, Adam, RMSProp, etc. To
enable this, we built a small package: <code>torch.optim</code> that
implements all these methods. Using it is very simple:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># create your optimizer</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in your training loop:</span></span><br><span class="line">optimizer.zero_grad()   <span class="comment"># zero the gradient buffers</span></span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">loss.backward()</span><br><span class="line">optimizer.step()    <span class="comment"># Does the update</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Observe how gradient buffers had to be manually set to zero using
<code>optimizer.zero_grad()</code>. This is because gradients are
accumulated as explained in <a
href="https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#backprop">Backprop</a>
section.</p>
</blockquote>
<h2 id="training-a-classifier">TRAINING A CLASSIFIER</h2>
<p>This is it. You have seen how to define neural networks, compute loss
and make updates to the weights of the network.</p>
<p>Now you might be thinking,</p>
<h3 id="what-about-data">What about data?</h3>
<p>Generally, when you have to deal with image, text, audio or video
data, you can use standard python packages that load data into a numpy
array. Then you can convert this array into a
<code>torch.*Tensor</code>.</p>
<ul>
<li>For images, packages such as Pillow, OpenCV are useful</li>
<li>For audio, packages such as scipy and librosa</li>
<li>For text, either raw Python or Cython based loading, or NLTK and
SpaCy are useful</li>
</ul>
<p>Specifically for vision, we have created a package called
<code>torchvision</code>, that has data loaders for common datasets such
as Imagenet, CIFAR10, MNIST, etc. and data transformers for images,
viz., <code>torchvision.datasets</code> and
<code>torch.utils.data.DataLoader</code>.</p>
<p>This provides a huge convenience and avoids writing boilerplate
code.</p>
<p>For this tutorial, we will use the CIFAR10 dataset. It has the
classes: ‘airplane’, ‘automobile’, ‘bird’, ‘cat’, ‘deer’, ‘dog’, ‘frog’,
‘horse’, ‘ship’, ‘truck’. The images in CIFAR-10 are of size 3x32x32,
i.e. 3-channel color images of 32x32 pixels in size.</p>
<h3 id="training-an-image-classifier">Training an image classifier</h3>
<p>We will do the following steps in order:</p>
<ol type="1">
<li>Load and normalizing the CIFAR10 training and test datasets using
<code>torchvision</code></li>
<li>Define a Convolutional Neural Network</li>
<li>Define a loss function</li>
<li>Train the network on the training data</li>
<li>Test the network on the test data</li>
</ol>
<h4 id="loading-and-normalizing-cifar10">1. Loading and normalizing
CIFAR10</h4>
<p>Using <code>torchvision</code>, it’s extremely easy to load
CIFAR10.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br></pre></td></tr></table></figure>
<p>The output of torchvision datasets are PILImage images of range [0,
1]. We transform them to Tensors of normalized range [-1, 1].</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                         shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Let us show some of the training images, for fun.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># functions to show an image</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get some random training images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># show images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># print labels</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<h4 id="define-a-convolutional-neural-network">2. Define a Convolutional
Neural Network</h4>
<p>Copy the neural network from the Neural Networks section before and
modify it to take 3-channel images (instead of 1-channel images as it
was defined).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br></pre></td></tr></table></figure>
<h4 id="define-a-loss-function-and-optimizer">3. Define a Loss function
and optimizer</h4>
<p>Let’s use a Classification Cross-Entropy loss and SGD with
momentum.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<h4 id="train-the-network">4. Train the network</h4>
<p>This is when things start to get interesting. We simply have to loop
over our data iterator, and feed the inputs to the network and
optimize.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line"></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># get the inputs</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># zero the parameter gradients</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># forward + backward + optimize</span></span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print statistics</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> %</span><br><span class="line">                  (epoch + <span class="number">1</span>, i + <span class="number">1</span>, running_loss / <span class="number">2000</span>))</span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="test-the-network-on-the-test-data">5. Test the network on the
test data</h4>
<p>We have trained the network for 2 passes over the training dataset.
But we need to check if the network has learnt anything at all.</p>
<p>We will check this by predicting the class label that the neural
network outputs, and checking it against the ground-truth. If the
prediction is correct, we add the sample to the list of correct
predictions.</p>
<p>Okay, first step. Let us display an image from the test set to get
familiar.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(testloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;GroundTruth: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<p>Okay, now let us see what the neural network thinks these examples
above are:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outputs = net(images)</span><br></pre></td></tr></table></figure>
<p>The outputs are energies for the 10 classes. The higher the energy
for a class, the more the network thinks that the image is of the
particular class. So, let’s get the index of the highest energy:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predicted: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[predicted[j]]</span><br><span class="line">                              <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<p>The results seem pretty good.</p>
<p>Let us look at how the network performs on the whole dataset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total += labels.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy of the network on the 10000 test images: %d %%&#x27;</span> % (</span><br><span class="line">    <span class="number">100</span> * correct / total))</span><br></pre></td></tr></table></figure>
<p>That looks waaay better than chance, which is 10% accuracy (randomly
picking a class out of 10 classes). Seems like the network learnt
something.</p>
<p>Hmmm, what are the classes that performed well, and the classes that
did not perform well:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_correct = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">class_total = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">        c = (predicted == labels).squeeze()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            label = labels[i]</span><br><span class="line">            class_correct[label] += c[i].item()</span><br><span class="line">            class_total[label] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Accuracy of %5s : %2d %%&#x27;</span> % (</span><br><span class="line">        classes[i], <span class="number">100</span> * class_correct[i] / class_total[i]))</span><br></pre></td></tr></table></figure>
<p>Okay, so what next?</p>
<p>How do we run these neural networks on the GPU?</p>
<h3 id="training-on-gpu">Training on GPU</h3>
<p>Just like how you transfer a Tensor onto the GPU, you transfer the
neural net onto the GPU.</p>
<p>Let’s first define our device as the first visible cuda device if we
have CUDA available:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assuming that we are on a CUDA machine, this should print a CUDA device:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>
<p>The rest of this section assumes that <code>device</code> is a CUDA
device.</p>
<p>Then these methods will recursively go over all modules and convert
their parameters and buffers to CUDA tensors:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.to(device)</span><br></pre></td></tr></table></figure>
<p>Remember that you will have to send the inputs and targets at every
step to the GPU too:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputs, labels = inputs.to(device), labels.to(device)</span><br></pre></td></tr></table></figure>
<p>Why don't I notice MASSIVE speedup compared to CPU? Because your
network is really small.</p>
<p><strong>Exercise:</strong> Try increasing the width of your network
(argument 2 of the first <code>nn.Conv2d</code>, and argument 1 of the
second <code>nn.Conv2d</code> – they need to be the same number), see
what kind of speedup you get.</p>
<p><strong>Goals achieved</strong>:</p>
<ul>
<li>Understanding PyTorch’s Tensor library and neural networks at a high
level.</li>
<li>Train a small neural network to classify images</li>
</ul>
<h2 id="training-on-multiple-gpus">Training on multiple GPUs</h2>
<p>If you want to see even more MASSIVE speedup using all of your GPUs,
please check out <a
href="https://pytorch.org/tutorials/beginner/blitz/data_parallel_tutorial.html">Optional:
Data Parallelism</a>.</p>
<h2 id="where-do-i-go-next">Where do I go next?</h2>
<ul>
<li><a
href="https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html">Train
neural nets to play video games</a></li>
<li><a
href="https://github.com/pytorch/examples/tree/master/imagenet">Train a
state-of-the-art ResNet network on imagenet</a></li>
<li><a
href="https://github.com/pytorch/examples/tree/master/dcgan">Train a
face generator using Generative Adversarial Networks</a></li>
<li><a
href="https://github.com/pytorch/examples/tree/master/word_language_model">Train
a word-level language model using Recurrent LSTM networks</a></li>
<li><a href="https://github.com/pytorch/examples">More examples</a></li>
<li><a href="https://github.com/pytorch/tutorials">More
tutorials</a></li>
<li><a href="https://discuss.pytorch.org/">Discuss PyTorch on the
Forums</a></li>
<li><a href="https://pytorch.slack.com/messages/beginner/">Chat with
other users on Slack</a></li>
</ul>
<hr />
<h2 id="save-model"><a
href="https://pytorch.org/tutorials/beginner/saving_loading_models.html">Save
Model</a></h2>
<p>In PyTorch, the learnable parameters (i.e. weights and biases) of an
<code>torch.nn.Module</code> model are contained in the model’s
<em>parameters</em>(accessed with <code>model.parameters()</code>). A
<em>state_dict</em> is simply a Python dictionary object that maps each
layer to its parameter tensor. Note that only layers with learnable
parameters (convolutional layers, linear layers, etc.) and registered
buffers (batchnorm’s running_mean) have entries in the model’s
<em>state_dict</em>. Optimizer objects (<code>torch.optim</code>) also
have a <em>state_dict</em>, which contains information about the
optimizer’s state, as well as the hyperparameters used.</p>
<p>Because <em>state_dict</em> objects are Python dictionaries, they can
be easily saved, updated, altered, and restored, adding a great deal of
modularity to PyTorch models and optimizers.</p>
<p><strong>Example:</strong></p>
<p>Let’s take a look at the <em>state_dict</em> from the simple model
used in the <a
href="https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#sphx-glr-beginner-blitz-cifar10-tutorial-py">Training
a classifier</a> tutorial.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TheModelClass</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TheModelClass, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize model</span></span><br><span class="line">model = TheModelClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize optimizer</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print model&#x27;s state_dict</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Model&#x27;s state_dict:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> param_tensor <span class="keyword">in</span> model.state_dict():</span><br><span class="line">    <span class="built_in">print</span>(param_tensor, <span class="string">&quot;\t&quot;</span>, model.state_dict()[param_tensor].size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print optimizer&#x27;s state_dict</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Optimizer&#x27;s state_dict:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> var_name <span class="keyword">in</span> optimizer.state_dict():</span><br><span class="line">    <span class="built_in">print</span>(var_name, <span class="string">&quot;\t&quot;</span>, optimizer.state_dict()[var_name])</span><br></pre></td></tr></table></figure>
<p><strong>Save:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(model.state_dict(), PATH)</span><br></pre></td></tr></table></figure>
<p><strong>Load:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = TheModelClass(*args, **kwargs)</span><br><span class="line">model.load_state_dict(torch.load(PATH))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure>
<p>When saving a model for inference, it is only necessary to save the
trained model’s learned parameters. Saving the model’s
<em>state_dict</em> with the <code>torch.save()</code> function will
give you the most flexibility for restoring the model later, which is
why it is the recommended method for saving models.</p>
<p>A common PyTorch convention is to save models using either a
<code>.pt</code> or <code>.pth</code> file extension.</p>
<p>Remember that you must call <code>model.eval()</code> to set dropout
and batch normalization layers to evaluation mode before running
inference. Failing to do this will yield inconsistent inference
results.</p>
<p>NOTE</p>
<p>Notice that the <code>load_state_dict()</code> function takes a
dictionary object, NOT a path to a saved object. This means that you
must deserialize the saved <em>state_dict</em> before you pass it to the
<code>load_state_dict()</code> function. For example, you CANNOT load
using<code>model.load_state_dict(PATH)</code>.</p>
<h3 id="saveload-entire-model">Save/Load Entire Model</h3>
<p><strong>Save:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(model, PATH)</span><br></pre></td></tr></table></figure>
<p><strong>Load:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Model class must be defined somewhere</span></span><br><span class="line">model = torch.load(PATH)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure>
<p>This save/load process uses the most intuitive syntax and involves
the least amount of code. Saving a model in this way will save the
entire module using Python’s <a
href="https://docs.python.org/3/library/pickle.html">pickle</a> module.
The disadvantage of this approach is that the serialized data is bound
to the specific classes and the exact directory structure used when the
model is saved. The reason for this is because pickle does not save the
model class itself. Rather, it saves a path to the file containing the
class, which is used during load time. Because of this, your code can
break in various ways when used in other projects or after
refactors.</p>
<p>A common PyTorch convention is to save models using either a
<code>.pt</code> or <code>.pth</code> file extension.</p>
<p>Remember that you must call <code>model.eval()</code> to set dropout
and batch normalization layers to evaluation mode before running
inference. Failing to do this will yield inconsistent inference
results.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Q811 Subdomain Visit Count</title>
    <url>/2019/05/14/2019-05-15-Q811-Subdomain-Visit-Count/</url>
    <content><![CDATA[<h1 id="subdomain-visit-count"><a
href="https://leetcode.com/problems/subdomain-visit-count/">Subdomain
Visit Count</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>A website domain like "discuss.leetcode.com" consists of various
subdomains. At the top level, we have "com", at the next level, we have
"leetcode.com", and at the lowest level, "discuss.leetcode.com". When we
visit a domain like "discuss.leetcode.com", we will also visit the
parent domains "leetcode.com" and "com" implicitly.</p>
<p>Now, call a "count-paired domain" to be a count (representing the
number of visits this domain received), followed by a space, followed by
the address. An example of a count-paired domain might be "9001
discuss.leetcode.com".</p>
<p>We are given a list <code>cpdomains</code> of count-paired domains.
We would like a list of count-paired domains, (in the same format as the
input, and in any order), that explicitly counts the number of visits to
each subdomain.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: ["9001 discuss.leetcode.com"]
Output: ["9001 discuss.leetcode.com", "9001 leetcode.com", "9001 com"]
Explanation: We only have one website domain: "discuss.leetcode.com". As
discussed above, the subdomain "leetcode.com" and "com" will also be
visited. So they will all be visited 9001 times.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: ["900 google.mail.com", "50
yahoo.com", "1 intel.mail.com", "5 wiki.org"] Output: ["901
mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1
intel.mail.com","951 com"] Explanation: We will visit "google.mail.com"
900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5
times. For the subdomains, we will visit "mail.com" 900 + 1 = 901 times,
"com" 900 + 50 + 1 = 951 times, and "org" 5 times.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ol type="1">
<li>You may assume k is always valid, 1 ≤ k ≤ number of unique
elements.</li>
<li>Your algorithm's time complexity must be better than O(n log n),
where n is the array's size.</li>
</ol>
</blockquote>
<h3 id="approach-1-hash-map">Approach 1: Hash map</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>The algorithm is straightforward: we just do what the problem
statement tells us to do.</p>
<p>For an address like <code>a.b.c</code>, we will count
<code>a.b.c</code>, <code>b.c</code>, and <code>c</code>. For an address
like <code>x.y</code>, we will count <code>x.y</code> and
<code>y</code>.</p>
<p>To count these strings, we will use a hash map. To split the strings
into the required pieces, we will use library <code>split</code>
functions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subdomainVisits</span>(<span class="params">self, cpdomains</span>):</span><br><span class="line">        ans = collections.Counter()</span><br><span class="line">        <span class="keyword">for</span> domain <span class="keyword">in</span> cpdomains:</span><br><span class="line">            count, domain = domain.split() <span class="comment"># 用空格分割字符串</span></span><br><span class="line">            count = <span class="built_in">int</span>(count)</span><br><span class="line">            frags = domain.split(<span class="string">&#x27;.&#x27;</span>) <span class="comment"># 用点分割域名</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frags)):</span><br><span class="line">                ans[<span class="string">&quot;.&quot;</span>.join(frags[i:])] += count <span class="comment"># join()连接字符数组 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ct, dom) <span class="keyword">for</span> dom, ct <span class="keyword">in</span> ans.items()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    cpdomains =[<span class="string">&quot;9001 discuss.leetcode.com&quot;</span>]</span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.subdomainVisits(cpdomains)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 52 ms, faster than 99.76% of Python3 online submissions for
Subdomain Visit Count.</li>
<li>Memory Usage: 13.3 MB, less than 7.07% of Python3 online submissions
for Subdomain Visit Count.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q876 Middle of the Linked List</title>
    <url>/2019/05/20/2019-05-20-Q876-Middle-of-the-Linked-List/</url>
    <content><![CDATA[<h1 id="middle-of-the-linked-list"><a
href="https://leetcode.com/problems/middle-of-the-linked-list/">Middle
of the Linked List</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a non-empty, singly linked list with head node
<code>head</code>, return a middle node of linked list.</p>
<p>If there are two middle nodes, return the second middle node.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: [1,2,3,4,5] Output: Node 3 from
this list (Serialization: [3,4,5]) The returned node has value 3. (The
judge's serialization of this node is [3,4,5]). Note that we returned a
ListNode object ans, such that: ans.val = 3, ans.next.val = 4,
ans.next.next.val = 5, and ans.next.next.next = NULL.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: [1,2,3,4,5,6] Output: Node 4 from
this list (Serialization: [4,5,6]) Since the list has two middle nodes
with values 3 and 4, we return the second one.</p>
</blockquote>
<h3 id="approach-1-output-to-array">Approach 1: Output to Array</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Put every node into an array <code>A</code> in order. Then the middle
node is just <code>A[A.length // 2]</code>, since we can retrieve each
node by index.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleNode</span>(<span class="params">self, head</span>):</span><br><span class="line">        A = [head]</span><br><span class="line">        <span class="keyword">while</span> A[-<span class="number">1</span>].<span class="built_in">next</span>:</span><br><span class="line">            A.append(A[-<span class="number">1</span>].<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">return</span> A[<span class="built_in">len</span>(A) // <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    <span class="built_in">print</span>(listNodeToString(Solution().middleNode(head))) <span class="comment"># 输出为[3,4,5]是因为list转换为string自动把后面的[4,5]带出来了，实际上只传了3的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
number of nodes in the given list.</li>
<li>Space Complexity: <em>O</em>(<em>N</em>), the space used by
<code>A</code>.</li>
</ul>
<hr />
<h3 id="approach-2-fast-and-slow-pointer">Approach 2: Fast and Slow
Pointer</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>When traversing the list with a pointer <code>slow</code>, make
another pointer <code>fast</code> that traverses twice as fast. When
<code>fast</code> reaches the end of the list, <code>slow</code> must be
in the middle.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleNode</span>(<span class="params">self, head</span>):</span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
number of nodes in the given list.</p></li>
<li><p>Space Complexity: <em>O</em>(1), the space used by
<code>slow</code> and <code>fast</code>.</p></li>
<li><p>Runtime: 32 ms, faster than 96.73% of Python3 online submissions
forMiddle of the Linked List.</p></li>
<li><p>Memory Usage: 13.2 MB, less than 23.44% of Python3 online
submissions for Middle of the Linked List.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q884 Uncommon Words from Two Sentences</title>
    <url>/2019/05/17/2019-05-17-Q884-Uncommon-Words-from-Two-Sentences/</url>
    <content><![CDATA[<h1 id="uncommon-words-from-two-sentences"><a
href="https://leetcode.com/problems/uncommon-words-from-two-sentences/">Uncommon
Words from Two Sentences</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>We are given two sentences <code>A</code> and <code>B</code>. (A
<em>sentence</em> is a string of space separated words. Each word
consists only of lowercase letters.)</p>
<p>A word is <em>uncommon</em> if it appears exactly once in one of the
sentences, and does not appear in the other sentence.</p>
<p>Return a list of all uncommon words.</p>
<p>You may return the list in any order.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: A = "this apple is sweet", B =
"this apple is sour" Output: ["sweet","sour"]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: A = "apple apple", B = "banana"
Output: ["banana"]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ol type="1">
<li><code>0 &lt;= A.length &lt;= 200</code></li>
<li><code>0 &lt;= B.length &lt;= 200</code></li>
<li><code>A</code> and <code>B</code> both contain only spaces and
lowercase letters.</li>
</ol>
</blockquote>
<h3 id="approach-1-counting">Approach 1: Counting</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Every uncommon word occurs exactly once in total. We can count the
number of occurrences of every word, then return ones that occur exactly
once.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uncommonFromSentences</span>(<span class="params">self, A, B</span>):</span><br><span class="line">        count = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A.split():</span><br><span class="line">            count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="comment"># .get(i,0)意思是如果i在count里不存在，返回默认为0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> B.split():</span><br><span class="line">            count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Alternatively:</span></span><br><span class="line">        <span class="comment">#count = collections.Counter(A.split())</span></span><br><span class="line">        <span class="comment">#count += collections.Counter(B.split())</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [word <span class="keyword">for</span> word <span class="keyword">in</span> count <span class="keyword">if</span> count[word] == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A = <span class="string">&quot;this apple is sweet&quot;</span></span><br><span class="line">    B = <span class="string">&quot;this apple is sour&quot;</span></span><br><span class="line">    answer=Solution()</span><br><span class="line">    results=answer.uncommonFromSentences(A,B)</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 32 ms, faster than 99.14% of Python3 online submissions for
Uncommon Words from Two Sentences.</li>
<li>Memory Usage: 13.3 MB, less than 23.76% of Python3 online
submissions for Uncommon Words from Two Sentences.</li>
</ul>
<hr />
<h3 id="approach-2-counting-original">Approach 2: Counting
(Original)</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Every uncommon word occurs exactly once in total. We can count the
number of occurrences of every word, then return ones that occur exactly
once.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uncommonFromSentences</span>(<span class="params">self, A: <span class="built_in">str</span>, B: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        count = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A.split()+B.split():</span><br><span class="line">            count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> count <span class="keyword">if</span> count[i] == <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Runtime: 36 ms, faster than 92.30% of Python3 online submissions
for Uncommon Words from Two Sentences.</p></li>
<li><p>Memory Usage: 13.1 MB, less than 75.47% of Python3 online
submissions for Uncommon Words from Two Sentences.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q136 Single Number</title>
    <url>/2019/05/16/2019-05-16-Q136-Single-Number/</url>
    <content><![CDATA[<h1 id="single-number"><a
href="https://leetcode.com/problems/single-number/">Single
Number</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a <strong>non-empty</strong> array of integers, every element
appears <em>twice</em> except for one. Find that single one.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: [2,2,1] Output: 1</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: [4,1,2,1,2] Output: 4</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you
implement it without using extra memory?</p>
</blockquote>
<h3 id="approach-1-math">Approach 1: Math</h3>
<p><strong>Concept</strong></p>
<p><span class="math display">\[2 * (a + b + c) - (a + a + b + b + c) =
c\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">sum</span>(<span class="built_in">set</span>(nums)) - <span class="built_in">sum</span>(nums)</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 32 ms, faster than 99.87% of Python3 online submissions for
Single Number.</li>
<li>Memory Usage: 15.1 MB, less than 14.91% of Python3 online
submissions for Single Number.</li>
</ul>
<h3 id="approach-2-hash-table">Approach 2: Hash Table</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums</span>):</span><br><span class="line">        hash_table = &#123;&#125; <span class="comment"># 等同 hash_table=dict()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                hash_table.pop(i) <span class="comment"># 如果字典为空，转入异常状态</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                hash_table[i] = <span class="number">1</span> <span class="comment"># 填充hash表</span></span><br><span class="line">        <span class="keyword">return</span> hash_table.popitem()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime: 44 ms, faster than 68.21% of Python3 online submissions for
Single Number.</li>
<li>Memory Usage: 15.1 MB, less than 12.23% of Python3 online
submissions for Single Number.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Achievements in Weibo Management</title>
    <url>/2019/05/21/2019-05-21-Achievements-in-Weibo-Management/</url>
    <content><![CDATA[<h1 id="achievements-in-weibo-management">Achievements in Weibo
Management</h1>
<ul>
<li><p>科普专业知识点共计111条，包括：计算机视觉、语音识别、深度学习、强化学习等（2019-5-21）</p></li>
<li><p>创建话题：</p>
<ul>
<li>#紫冬物语#：阅读量75.4万，讨论196条 （2019-5-21）</li>
<li>#AI词说#：阅读量89.4万，讨论233条（2019-5-21）</li>
<li>#AI爱新词#：阅读量86.5万，讨论201条（2019-5-21）</li>
</ul></li>
<li><p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/weibo.jpg" /></p>
<center>
<p>From Aug. 2018 to May. 2019（实现1000+新粉丝）</p>
</center></li>
</ul>
]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Q206 Reverse Linked List</title>
    <url>/2019/05/21/2019-05-21-Q206-Reverse-Linked-List/</url>
    <content><![CDATA[<h1 id="reverse-linked-list"><a
href="https://leetcode.com/problems/reverse-linked-list/">Reverse Linked
List</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Reverse a singly linked list.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
</blockquote>
<h3 id="approach-1-iterative">Approach 1: Iterative</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>Assume that we have linked list <code>1 → 2 → 3 → Ø</code>, we would
like to change it to <code>Ø ← 1 ← 2 ← 3</code>.</p>
<p>While you are traversing the list, change the current node's next
pointer to point to its previous element. Since a node does not have
reference to its previous node, you must store its previous element
beforehand. You also need another pointer to store the next node before
changing the reference. Do not forget to return the new head reference
at the end!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head</span>):</span><br><span class="line">        prev_node = <span class="literal">None</span></span><br><span class="line">        curr_node = head</span><br><span class="line">        <span class="keyword">while</span> curr_node:</span><br><span class="line">            next_node = curr_node.<span class="built_in">next</span>  <span class="comment"># Remember next node</span></span><br><span class="line">            curr_node.<span class="built_in">next</span> = prev_node  <span class="comment"># REVERSE! None, first time round.</span></span><br><span class="line">            prev_node = curr_node  <span class="comment"># Used in the next iteration.</span></span><br><span class="line">            curr_node = next_node  <span class="comment"># Move to next node.</span></span><br><span class="line">        head = prev_node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    <span class="built_in">print</span>(listNodeToString(Solution().reverseList(head)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time complexity : <em>O</em>(<em>n</em>). Assume that <em>n</em>
is the list's length, the time complexity is
<em>O</em>(<em>n</em>).</p></li>
<li><p>Space complexity : <em>O</em>(1).</p></li>
<li><p>Runtime: 28 ms, faster than 99.98% of Python3 online submissions
forReverse Linked List.</p></li>
<li><p>Memory Usage: 14.5 MB, less than 50.22% of Python3 online
submissions for Reverse Linked List.</p></li>
</ul>
<hr />
<h3 id="approach-2-recursive">Approach 2: Recursive</h3>
<p><strong>Intuition and Algorithm</strong></p>
<p>The recursive version is slightly trickier and the key is to work
backwards. Assume that the rest of the list had already been reversed,
now how do I reverse the front part? Let's assume the list is: <span
class="math display">\[n_1 \to … \to n_{k-1} \to n_k \to n_{k+1} \to …
\to n_m \to \phi​\]</span></p>
<p>Assume from node <span class="math display">\[n_{k+1}\]</span> to
<span class="math display">\[n_m\]</span> had been reversed and you are
at node <span class="math display">\[n_k\]</span>.</p>
<p><span class="math display">\[n_1 \to … \to n_{k-1} \to n_k \to
n_{k+1} \leftarrow … \leftarrow n_m\]</span></p>
<p>We want <span class="math display">\[n_{k+1}\]</span>’s next node to
point to <span class="math display">\[n_k\]</span>.</p>
<p>So, <span class="math display">\[n_k\]</span>.next.next = <span
class="math display">\[n_k​\]</span>;</p>
<p>Be very careful that <span class="math display">\[n_1\]</span>'s next
must point to <span class="math display">\[\phi​\]</span>. If you forget
about this, your linked list has a cycle in it. This bug could be caught
if you test your code with a linked list of size 2.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head</span>):</span><br><span class="line">        <span class="keyword">if</span> head==<span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span>==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        p=head.<span class="built_in">next</span> <span class="comment"># 设定p是下一个node</span></span><br><span class="line">        p=Solution().reverseList(p)</span><br><span class="line">        head.<span class="built_in">next</span>.<span class="built_in">next</span>=head</span><br><span class="line">        head.<span class="built_in">next</span>=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>
<p><strong>Complexity analysis</strong></p>
<ul>
<li><p>Time complexity : <em>O</em>(<em>n</em>). Assume that <em>n</em>
is the list's length, the time complexity is
<em>O</em>(<em>n</em>).</p></li>
<li><p>Space complexity : <em>O</em>(<em>n</em>). The extra space comes
from implicit stack space due to recursion. The recursion could go up to
<em>n</em> levels deep.</p></li>
<li><p>Runtime: 44 ms, faster than 69.21% of Python3 online submissions
forReverse Linked List.</p></li>
<li><p>Memory Usage: 19.1 MB, less than 11.36% of Python3 online
submissions for Reverse Linked List.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q817 Linked List Components</title>
    <url>/2019/05/22/2019-05-22-Q817-Linked-List-Components/</url>
    <content><![CDATA[<h1 id="linked-list-components"><a
href="https://leetcode.com/problems/linked-list-components/">Linked List
Components</a></h1>
<h2 id="question-it-is-a-wrong-problem-description">Question (It is a
wrong problem description!)</h2>
<blockquote>
<p>We are given <code>head</code>, the head node of a linked list
containing <strong>unique integer values</strong>.</p>
<p>We are also given the list <code>G</code>, a subset of the values in
the linked list.</p>
<p>Return the number of connected components in <code>head</code>, where
two values are connected if they appear consecutively in the linked
list.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: head: 0-&gt;1-&gt;2-&gt;3 G = [0,
1, 3] Output: 2 Explanation: 0 and 1 are connected, so [0, 1] and [3]
are the two connected components.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: head: 0-&gt;1-&gt;2-&gt;3-&gt;4 G
= [0, 3, 1, 4] Output: 2 Explanation: 0 and 1 are connected, 3 and 4 are
connected, so [0, 1] and [3, 4] are the two connected components.</p>
</blockquote>
<h3 id="approach-1-grouping">Approach 1: Grouping</h3>
<blockquote>
<p>Note: There is something wrong in the problem description. The test
cases online are confusing.</p>
<p><strong>Example:</strong></p>
<p>input: [0] and [0]</p>
<p>expected output: [1]</p>
</blockquote>
<p><strong>Intuition</strong></p>
<p>Instead of thinking about connected components in <code>G</code>,
think about them in the linked list. Connected components in
<code>G</code> must occur consecutively in the linked list.</p>
<p><strong>Algorithm</strong></p>
<p>Scanning through the list, if <code>node.val</code> is in
<code>G</code> and <code>node.next.val</code> isn't (including if
<code>node.next</code> is <code>null</code>), then this must be the end
of a connected component.</p>
<p>For example, if the list is
<code>0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7</code>,
and <code>G = [0, 2, 3, 5, 7]</code>, then when scanning through the
list, we fulfill the above condition at <code>0, 3, 5, 7</code>, for a
total answer of <code>4</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numComponents</span>(<span class="params">self, head: ListNode, G</span>):</span><br><span class="line">        Gset = <span class="built_in">set</span>(G)</span><br><span class="line">        cur = head</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> (cur.val <span class="keyword">in</span> Gset <span class="keyword">and</span> <span class="built_in">getattr</span>(cur.<span class="built_in">next</span>, <span class="string">&#x27;val&#x27;</span>, <span class="literal">None</span>) <span class="keyword">not</span> <span class="keyword">in</span> Gset):</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    G=[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(Solution().numComponents(head,G))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time Complexity: <span class="math display">\[O(N +
G\text{.length})\]</span>, where <em>N</em> is the length of the linked
list with root node <code>head</code>.</p></li>
<li><p>Space Complexity: <span
class="math display">\[O(G\text{.length})\]</span>, to store
<code>Gset</code>.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q237 Delete Node in a Linked List</title>
    <url>/2019/05/24/2019-05-24-Q237-Delete-Node-in-a-Linked-List/</url>
    <content><![CDATA[<h1 id="delete-node-in-a-linked-list"><a
href="https://leetcode.com/problems/delete-node-in-a-linked-list/">Delete
Node in a Linked List</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>We are given <code>head</code>, the head node of a linked list
containing <strong>unique integer values</strong>.</p>
<p>We are also given the list <code>G</code>, a subset of the values in
the linked list.</p>
<p>Return the number of connected components in <code>head</code>, where
two values are connected if they appear consecutively in the linked
list.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: head: 0-&gt;1-&gt;2-&gt;3 G = [0,
1, 3] Output: 2 Explanation: 0 and 1 are connected, so [0, 1] and [3]
are the two connected components.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: head: 0-&gt;1-&gt;2-&gt;3-&gt;4 G
= [0, 3, 1, 4] Output: 2 Explanation: 0 and 1 are connected, 3 and 4 are
connected, so [0, 1] and [3, 4] are the two connected components.</p>
</blockquote>
<h3 id="approach-1-grouping">Approach 1: Grouping</h3>
<blockquote>
<p>Note: There is something wrong in the problem description. The test
cases online are confusing.</p>
<p><strong>Example:</strong></p>
<p>input: [0] and [0]</p>
<p>expected output: [1]</p>
</blockquote>
<p><strong>Intuition</strong></p>
<p>Instead of thinking about connected components in <code>G</code>,
think about them in the linked list. Connected components in
<code>G</code> must occur consecutively in the linked list.</p>
<p><strong>Algorithm</strong></p>
<p>Scanning through the list, if <code>node.val</code> is in
<code>G</code> and <code>node.next.val</code> isn't (including if
<code>node.next</code> is <code>null</code>), then this must be the end
of a connected component.</p>
<p>For example, if the list is
<code>0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7</code>,
and <code>G = [0, 2, 3, 5, 7]</code>, then when scanning through the
list, we fulfill the above condition at <code>0, 3, 5, 7</code>, for a
total answer of <code>4</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteNode</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.val = node.<span class="built_in">next</span>.val</span><br><span class="line">            node.<span class="built_in">next</span> = node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    dele=head.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">    Solution().deleteNode(dele)</span><br><span class="line">    <span class="built_in">print</span>(listNodeToString(head))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time and space complexity are both <em>O</em>(1).</p></li>
<li><p>Runtime: 36 ms, faster than 99.70% of Python3 online submissions
forDelete Node in a Linked List.</p></li>
<li><p>Memory Usage: 13.5 MB, less than 55.73% of Python3 online
submissions for Delete Node in a Linked List.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q21 Merge Two Sorted Lists</title>
    <url>/2019/05/27/2019-05-27-Q21-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<h1 id="merge-two-sorted-lists"><a
href="https://leetcode.com/problems/merge-two-sorted-lists/">Merge Two
Sorted Lists</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Merge two sorted linked lists and return it as a new list. The new
list should be made by splicing together the nodes of the first two
lists.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4
Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
</blockquote>
<h3 id="approach-1-dummy-list">Approach 1: dummy list</h3>
<p>This is a straightforward method for our problem. Setting two linked
list newNode and out with the same memory location. Then use them to
note the merged list.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>):</span><br><span class="line">        </span><br><span class="line">        newNode=out=ListNode(<span class="number">0</span>) <span class="comment"># newNode与out节点为起始位置相同</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2: <span class="comment"># 直到两个链表都遍历完</span></span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                newNode.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                newNode.<span class="built_in">next</span> = l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">elif</span> l1.val&lt;=l2.val:</span><br><span class="line">                newNode.<span class="built_in">next</span>=l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newNode.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            newNode=newNode.<span class="built_in">next</span></span><br><span class="line">        newNode.<span class="built_in">next</span> = l1 <span class="keyword">or</span> l2</span><br><span class="line">        <span class="keyword">return</span> out.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    L1=stringToListNode([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    L2=stringToListNode([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    solution=Solution().mergeTwoLists(L1,L2)</span><br><span class="line">    <span class="built_in">print</span>(listNodeToString(solution))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Runtime: 36 ms, faster than 98.96% of Python3 online submissions
forMerge Two Sorted Lists.</li>
<li>Memory Usage: 13.2 MB, less than 41.08% of Python3 online
submissions for Merge Two Sorted Lists.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q83 Remove Duplicates from Sorted List</title>
    <url>/2019/05/28/2019-05-28-Q83-Remove-Duplicates-from-Sorted-List/</url>
    <content><![CDATA[<h1 id="remove-duplicates-from-sorted-list"><a
href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">Remove
Duplicates from Sorted List</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a sorted linked list, delete all duplicates such that each
element appear only <em>once</em>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: 1-&gt;1-&gt;2 Output: 1-&gt;2</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: 1-&gt;1-&gt;2-&gt;3-&gt;3 Output:
1-&gt;2-&gt;3</p>
</blockquote>
<h3 id="approach-1-dummy-list">Approach 1: Dummy List</h3>
<p>This problem is similar to Q21, because they both require traverse a
linked list. In fact, the key point is to set <code>out=mid=head</code>.
<code>out</code> is used in the iterations and <code>mid</code> is used
as an output.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        out=mid=head</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> out.val!=head.val:</span><br><span class="line">                out.<span class="built_in">next</span>=head</span><br><span class="line">                out=out.<span class="built_in">next</span></span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">            out.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    solution=Solution().deleteDuplicates(head)</span><br><span class="line">    <span class="built_in">print</span>(listNodeToString(solution))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Runtime: 48 ms, faster than 87.51% of Python3 online submissions
forRemove Duplicates from Sorted List.</li>
<li>Memory Usage: 13.3 MB, less than 22.63% of Python3 online
submissions for Remove Duplicates from Sorted List.</li>
</ul>
<h3 id="approach-2-straight-forward">Approach 2: Straight-Forward</h3>
<p>This is a simple problem that merely tests your ability to manipulate
list node pointers. Because the input list is sorted, we can determine
if a node is a duplicate by comparing its value to the node
<em>after</em> it in the list. If it is a duplicate, we change the
<code>next</code> pointer of the current node so that it skips the next
node and points directly to the one after the next node.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        out = head</span><br><span class="line">        <span class="keyword">while</span> out <span class="keyword">and</span> out.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> out.val==out.<span class="built_in">next</span>.val:</span><br><span class="line">                out.<span class="built_in">next</span> = out.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                out=out.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time complexity : <em>O</em>(<em>n</em>). Because each node in
the list is checked exactly once to determine if it is a duplicate or
not, the total run time is <em>O</em>(<em>n</em>), where <em>n</em> is
the number of nodes in the list.</p></li>
<li><p>Space complexity : <em>O</em>(1). No additional space is
used.</p></li>
<li><p>Runtime: 48 ms, faster than 87.51% of Python3 online submissions
forRemove Duplicates from Sorted List.</p></li>
<li><p>Memory Usage: 13.3 MB, less than 22.63% of Python3 online
submissions for Remove Duplicates from Sorted List.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q141 Linked List Cycle</title>
    <url>/2019/05/29/2019-05-29-Q141-Linked-List-Cycle/</url>
    <content><![CDATA[<h1 id="linked-list-cycle"><a
href="https://leetcode.com/problems/linked-list-cycle/">Linked List
Cycle</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>To represent a cycle in the given linked list, we use an integer
<code>pos</code> which represents the position (0-indexed) in the linked
list where tail connects to. If <code>pos</code> is <code>-1</code>,
then there is no cycle in the linked list.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: head = [3,2,0,-4], pos = 1 Output:
true Explanation: There is a cycle in the linked list, where tail
connects to the second node.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: head = [1,2], pos = 0 Output: true
Explanation: There is a cycle in the linked list, where tail connects to
the first node.</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: head = [1], pos = -1 Output: false Explanation: There is no
cycle in the linked list.</p>
</blockquote>
<h3 id="approach-1-hash-table">Approach 1: Hash Table</h3>
<p>This problem is similar to Q21, because they both require traverse a
linked list. In fact, the key point is to set <code>out=mid=head</code>.
<code>out</code> is used in the iterations and
<code>mid</code><strong>Intuition</strong></p>
<p>To detect if a list is cyclic, we can check whether a node had been
visited before. A natural way is to use a hash table. is used as an
output.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasCycle</span>(<span class="params">self, head</span>):</span><br><span class="line">        hashmap=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span>(head <span class="keyword">in</span> hashmap):</span><br><span class="line">                hashmap[head]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">1</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    solution=Solution().hasCycle(head)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Runtime: 32 ms, faster than 99.15% of Python online submissions
forLinked List Cycle.</li>
<li>Memory Usage: 19 MB, less than 7.37% of Python online submissions
forLinked List Cycle.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q804 Unique Morse Code Words</title>
    <url>/2019/06/04/2019-06-04-Q804-Unique-Morse-Code-Words/</url>
    <content><![CDATA[<h1 id="unique-morse-code-words"><a
href="https://leetcode.com/problems/unique-morse-code-words/">Unique
Morse Code Words</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>International Morse Code defines a standard encoding where each
letter is mapped to a series of dots and dashes, as follows:
<code>"a"</code> maps to <code>".-"</code>, <code>"b"</code> maps to
<code>"-..."</code>, <code>"c"</code> maps to <code>"-.-."</code>, and
so on.</p>
<p>For convenience, the full table for the 26 letters of the English
alphabet is given below:</p>
<p><code>[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]</code></p>
<p>Now, given a list of words, each word can be written as a
concatenation of the Morse code of each letter. For example, "cba" can
be written as "-.-..--...", (which is the concatenation "-.-." + "-..."
+ ".-"). We'll call such a concatenation, the transformation of a
word.</p>
<p>Return the number of different transformations among all words we
have.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: words = ["gin", "zen", "gig",
"msg"] Output: 2 Explanation: The transformation of each word is: "gin"
-&gt; "--...-." "zen" -&gt; "--...-." "gig" -&gt; "--...--." "msg" -&gt;
"--...--."</p>
<p>There are 2 different transformations, "--...-." and "--...--.".</p>
</blockquote>
<h2 id="approach-1-hash-set">Approach 1: Hash Set</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>We can transform each <code>word</code> into it's Morse Code
representation.</p>
<p>After, we put all transformations into a set <code>seen</code>, and
return the size of the set.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniqueMorseRepresentations</span>(<span class="params">self, words</span>):</span><br><span class="line">        MORSE = [<span class="string">&quot;.-&quot;</span>,<span class="string">&quot;-...&quot;</span>,<span class="string">&quot;-.-.&quot;</span>,<span class="string">&quot;-..&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;..-.&quot;</span>,<span class="string">&quot;--.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;....&quot;</span>,<span class="string">&quot;..&quot;</span>,<span class="string">&quot;.---&quot;</span>,<span class="string">&quot;-.-&quot;</span>,<span class="string">&quot;.-..&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;---&quot;</span>,<span class="string">&quot;.--.&quot;</span>,<span class="string">&quot;--.-&quot;</span>,<span class="string">&quot;.-.&quot;</span>,<span class="string">&quot;...&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;..-&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;...-&quot;</span>,<span class="string">&quot;.--&quot;</span>,<span class="string">&quot;-..-&quot;</span>,<span class="string">&quot;-.--&quot;</span>,<span class="string">&quot;--..&quot;</span>]</span><br><span class="line"></span><br><span class="line">        seen = &#123;<span class="string">&quot;&quot;</span>.join(MORSE[<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] <span class="keyword">for</span> c <span class="keyword">in</span> word)</span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> words&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(seen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Ain=[<span class="string">&quot;gin&quot;</span>, <span class="string">&quot;zen&quot;</span>, <span class="string">&quot;gig&quot;</span>, <span class="string">&quot;msg&quot;</span>]</span><br><span class="line">    solution=Solution().uniqueMorseRepresentations(Ain)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>S</em>), where <em>S</em> is the sum
of the lengths of words in <code>words</code>. We iterate through each
character of each word in <code>words</code>.</li>
<li>Space Complexity: <em>O</em>(<em>S</em>).</li>
<li>Runtime: 20 ms, faster than 95.59% of Python online submissions for
Unique Morse Code Words.</li>
<li>Memory Usage: 11.8 MB, less than 46.42% of Python online submissions
for Unique Morse Code Words.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1019 Next Greater Node In Linked List</title>
    <url>/2019/05/30/2019-05-30-Q1019-Next-Greater-Node-In-Linked-List/</url>
    <content><![CDATA[<h1 id="next-greater-node-in-linked-list"><a
href="https://leetcode.com/problems/next-greater-node-in-linked-list/">Next
Greater Node In Linked List</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>We are given a linked list with <code>head</code> as the first node.
Let's number the nodes in the list:
<code>node_1, node_2, node_3, ...</code> etc.</p>
<p>Each node may have a <em>next larger</em> <strong>value</strong>: for
<code>node_i</code>, <code>next_larger(node_i)</code> is the
<code>node_j.val</code> such that <code>j &gt; i</code>,
<code>node_j.val &gt; node_i.val</code>, and <code>j</code> is the
smallest possible choice. If such a <code>j</code> does not exist, the
next larger value is <code>0</code>.</p>
<p>Return an array of integers <code>answer</code>, where
<code>answer[i] = next_larger(node_&#123;i+1&#125;)</code>.</p>
<p>Note that in the example <strong>inputs</strong> (not outputs) below,
arrays such as <code>[2,1,5]</code> represent the serialization of a
linked list with a head node value of 2, second node value of 1, and
third node value of 5.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: [2,1,5] Output: [5,5,0]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: [2,7,4,3,5] Output:
[7,0,5,5,0]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: [1,7,5,1,9,2,5,1] Output: [7,9,9,9,0,5,0,0]</p>
</blockquote>
<h3 id="approach-1-stack">Approach 1: Stack</h3>
<p>Save &lt;index, value&gt; pair to the stack.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextLargerNodes</span>(<span class="params">self, head</span>):</span><br><span class="line">        res, stack = [], [] <span class="comment"># 建立两个元组</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>][<span class="number">1</span>] &lt; head.val: <span class="comment"># 遍历链表每个元素</span></span><br><span class="line">                res[stack.pop()[<span class="number">0</span>]] = head.val</span><br><span class="line">            stack.append([<span class="built_in">len</span>(res), head.val])</span><br><span class="line">            res.append(<span class="number">0</span>)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head=stringToListNode([<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>])<span class="comment"># 将输入的元组转换为链表</span></span><br><span class="line">    solution=Solution().nextLargerNodes(head)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>O(N) Time, O(N) Space</p></li>
<li><p>Runtime: 356 ms, faster than 76.36% of Python online submissions
for Next Greater Node In Linked List.</p></li>
<li><p>Memory Usage: 21 MB, less than 17.81% of Python online
submissions for Next Greater Node In Linked List.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Stack</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q657 Robot Return to Origin</title>
    <url>/2019/06/05/2019-06-05-Q657-Robot-Return-to-Origin/</url>
    <content><![CDATA[<h1 id="robot-return-to-origin"><a
href="https://leetcode.com/problems/robot-return-to-origin/">Robot
Return to Origin</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>There is a robot starting at position (0, 0), the origin, on a 2D
plane. Given a sequence of its moves, judge if this robot <strong>ends
up at (0, 0)</strong> after it completes its moves.</p>
<p>The move sequence is represented by a string, and the character
moves[i] represents its ith move. Valid moves are R (right), L (left), U
(up), and D (down). If the robot returns to the origin after it finishes
all of its moves, return true. Otherwise, return false.</p>
<p><strong>Note</strong>: The way that the robot is "facing" is
irrelevant. "R" will always make the robot move to the right once, "L"
will always make it move left, etc. Also, assume that the magnitude of
the robot's movement is the same for each move.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: "UD" Output: true Explanation: The robot moves up once, and
then down once. All moves have the same magnitude, so it ended up at the
origin where it started. Therefore, we return true.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: "LL" Output: false Explanation: The robot moves left twice. It
ends up two "moves" to the left of the origin. We return false because
it is not at the origin at the end of its moves.</p>
</blockquote>
<h2 id="approach-1-hash-set">Approach 1: Hash Set</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>We can transform each <code>word</code> into it's Morse Code
representation.</p>
<p>After, we put all transformations into a set <code>seen</code>, and
return the size of the set.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judgeCircle</span>(<span class="params">self, moves</span>):</span><br><span class="line">        Return=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> moves:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">                Return[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                Return[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                Return[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                Return[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span>(<span class="built_in">bool</span>(Return[<span class="number">0</span>]) <span class="keyword">or</span> <span class="built_in">bool</span>(Return[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Action=[<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">    solution=Solution().judgeCircle(Action)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>n</em>), where <em>n</em> is the
amount of the movents in <code>moves</code>.</li>
<li>Space Complexity: <em>O</em>(<em>1</em>).</li>
<li>Runtime: 88 ms, faster than 68.89% of Python online submissions for
Robot Return to Origin.</li>
<li>Memory Usage: 12.1 MB, less than 35.59% of Python online submissions
for Robot Return to Origin.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q977 Squares of a Sorted Array</title>
    <url>/2019/06/03/2019-06-03-Q977-Squares-of-a-Sorted-Array/</url>
    <content><![CDATA[<h1 id="squares-of-a-sorted-array"><a
href="https://leetcode.com/problems/squares-of-a-sorted-array/">Squares
of a Sorted Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array of integers <code>A</code> sorted in non-decreasing
order, return an array of the squares of each number, also in sorted
non-decreasing order.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong> Input: [-4,-1,0,3,10] Output:
[0,1,9,16,100]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong> Input: [-7,-3,2,3,11] Output:
[4,9,9,49,121]</p>
</blockquote>
<h3 id="approach-1-direct-method">Approach 1: Direct Method</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, A</span>):</span><br><span class="line">        B=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(A)):</span><br><span class="line">            B.append(<span class="built_in">int</span>(math.<span class="built_in">pow</span>(A[i],<span class="number">2</span>)))</span><br><span class="line">        B.sort()</span><br><span class="line">        <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Ain=[-<span class="number">4</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">    solution=Solution().sortedSquares(Ain)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Runtime: 220 ms, faster than 33.27% of Python online submissions
forSquares of a Sorted Array.</li>
<li>Memory Usage: 13.9 MB, less than 20.54% of Python online submissions
for Squares of a Sorted Array.</li>
</ul>
<h2 id="approach-2-sort">Approach 2: Sort</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, A</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(x*x <span class="keyword">for</span> x <span class="keyword">in</span> A)</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time Complexity: <em>O</em>(<em>N</em>log<em>N</em>), where
<em>N</em> is the length of <code>A</code>.</p></li>
<li><p>Space Complexity: <em>O</em>(<em>N</em>).</p></li>
<li><p>Runtime: 200 ms, faster than 58.97% of Python online submissions
for Squares of a Sorted Array.</p></li>
<li><p>Memory Usage: 13.9 MB, less than 25.48% of Python online
submissions for Squares of a Sorted Array.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q929 Unique Email Addresses</title>
    <url>/2019/06/06/2019-06-06-Q929-Unique-Email-Addresses/</url>
    <content><![CDATA[<h1 id="unique-email-addresses"><a
href="https://leetcode.com/problems/unique-email-addresses/">Unique
Email Addresses</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Every email consists of a local name and a domain name, separated by
the @ sign.</p>
<p>For example, in <code>alice@leetcode.com</code>, <code>alice</code>
is the local name, and <code>leetcode.com</code> is the domain name.</p>
<p>Besides lowercase letters, these emails may contain <code>'.'</code>s
or <code>'+'</code>s.</p>
<p>If you add periods (<code>'.'</code>) between some characters in the
<strong>local name</strong> part of an email address, mail sent there
will be forwarded to the same address without dots in the local name.
For example, <code>"alice.z@leetcode.com"</code> and
<code>"alicez@leetcode.com"</code> forward to the same email address.
(Note that this rule does not apply for domain names.)</p>
<p>If you add a plus (<code>'+'</code>) in the <strong>local
name</strong>, everything after the first plus sign will be
<strong>ignored</strong>. This allows certain emails to be filtered, for
example <code>m.y+name@email.com</code> will be forwarded to
<code>my@email.com</code>. (Again, this rule does not apply for domain
names.)</p>
<p>It is possible to use both of these rules at the same time.</p>
<p>Given a list of <code>emails</code>, we send one email to each
address in the list. How many different addresses actually receive
mails?</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input:
["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
Output: 2 Explanation: "testemail@leetcode.com" and
"testemail@lee.tcode.com" actually receive mails</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= emails[i].length &lt;= 100</code></li>
<li><code>1 &lt;= emails.length &lt;= 100</code></li>
<li>Each <code>emails[i]</code> contains exactly one <code>'@'</code>
character.</li>
<li>All local and domain names are non-empty.</li>
<li>Local names do not start with a <code>'+'</code> character.</li>
</ul>
</blockquote>
<h2 id="approach-1-split-words-original-method">Approach 1: Split Words
(Original Method)</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Note that <code>split</code> is a useful method.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params">self, s</span>):</span><br><span class="line">        out = []</span><br><span class="line">        singleWord=s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> singleWord:</span><br><span class="line">            <span class="built_in">iter</span>=<span class="built_in">iter</span>[::-<span class="number">1</span>]<span class="comment"># 反向排序数组</span></span><br><span class="line">            out.append(<span class="built_in">iter</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(out) <span class="comment"># 返回字符串，用空格填充out中元素的间隔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s=<span class="string">&quot;Let&#x27;s take LeetCode contest&quot;</span></span><br><span class="line">    solution=Solution().reverseWords(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="simplification">simplification</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join([i[::-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> s.split()])</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>n</em>), where <em>n</em> is the
total words of <code>s</code>.</li>
<li>Space Complexity: <em>O</em>(<em>1</em>).</li>
<li>Runtime: 20 ms, faster than 94.03% of Python online submissions for
Reverse Words in a String III.</li>
<li>Memory Usage: 13 MB, less than 43.54% of Python online submissions
for Reverse Words in a String III.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q557 Reverse Words in a String III</title>
    <url>/2019/06/10/2019-06-10-Q557-Reverse-Words-in-a-String-III/</url>
    <content><![CDATA[<h1 id="reverse-words-in-a-string-iii"><a
href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">Reverse
Words in a String III</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a string, you need to reverse the order of characters in each
word within a sentence while still preserving whitespace and initial
word order.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: "Let's take LeetCode contest" Output: "s'teL ekat edoCteeL
tsetnoc"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<p>In the string, each word is separated by single space and there will
not be any extra space in the string.</p>
</blockquote>
<h2 id="approach-1-canonical-form">Approach 1: Canonical Form</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>For each email address, convert it to the <em>canonical</em> address
that actually receives the mail. This involves a few steps:</p>
<ul>
<li>Separate the email address into a <code>local</code> part and the
<code>rest</code> of the address.</li>
<li>If the <code>local</code> part has a <code>'+'</code> character,
remove it and everything beyond it from the <code>local</code>
part.</li>
<li>Remove all the zeros from the <code>local</code> part.</li>
<li>The canonical address is <code>local + rest</code>.</li>
</ul>
<p>After, we can count the number of unique canonical addresses with a
<code>Set</code> structure.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numUniqueEmails</span>(<span class="params">self, emails</span>):</span><br><span class="line">        seen = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            local, domain = email.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> local:</span><br><span class="line">                local = local[:local.index(<span class="string">&#x27;+&#x27;</span>)]</span><br><span class="line">            seen.add(local.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;@&#x27;</span> + domain)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(seen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Emails=[<span class="string">&quot;test.email+alex@leetcode.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;test.e.mail+bob.cathy@leetcode.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;testemail+david@lee.tcode.com&quot;</span>]</span><br><span class="line">    solution=Solution().numUniqueEmails(Emails)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>n</em>), where <em>n</em> is the
total content of <code>emails</code>.</li>
<li>Space Complexity: <em>O</em>(<em>n</em>).</li>
<li>Runtime: 28 ms, faster than 99.72% of Python online submissions for
Unique Email Addresses.</li>
<li>Memory Usage: 11.7 MB, less than 92.68% of Python online submissions
for Unique Email Addresses.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q824 Goat Latin</title>
    <url>/2019/06/13/2019-06-13-Q824-Goat-Latin/</url>
    <content><![CDATA[<h1 id="goat-latin"><a
href="https://leetcode.com/problems/goat-latin/">Goat Latin</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>A sentence <code>S</code> is given, composed of words separated by
spaces. Each word consists of lowercase and uppercase letters only.</p>
<p>We would like to convert the sentence to "<em>Goat Latin"</em> (a
made-up language similar to Pig Latin.)</p>
<p>The rules of Goat Latin are as follows:</p>
<ul>
<li><p>If a word begins with a vowel (a, e, i, o, or u), append
<code>"ma"</code> to the end of the word. For example, the word 'apple'
becomes 'applema'.</p></li>
<li><p>If a word begins with a consonant (i.e. not a vowel), remove the
first letter and append it to the end, then add <code>"ma"</code>. For
example, the word <code>"goat"</code> becomes
<code>"oatgma"</code>.</p></li>
<li><p>Add one letter <code>'a'</code> to the end of each word per its
word index in the sentence, starting with 1. For example, the first word
gets <code>"a"</code> added to the end, the second word gets
<code>"aa"</code>added to the end and so on.</p></li>
</ul>
<p>Return the final sentence representing the conversion from
<code>S</code> to Goat Latin.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: "I speak Goat Latin" Output: "Imaa peaksmaaa oatGmaaaa
atinLmaaaaa"</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: "The quick brown fox jumped over the lazy dog" Output: "heTmaa
uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa
azylmaaaaaaaaa ogdmaaaaaaaaaa"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>S</code> contains only uppercase, lowercase and spaces.
Exactly one space between each word.</li>
<li><code>1 &lt;= S.length &lt;= 150</code>.</li>
</ul>
</blockquote>
<h2 id="approach-1-direct-solution">Approach 1: Direct Solution</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Here, we use a direct idea to the problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toGoatLatin</span>(<span class="params">self, S</span>):</span><br><span class="line">        out = []</span><br><span class="line">        <span class="keyword">for</span> i, w <span class="keyword">in</span> <span class="built_in">enumerate</span>(S.split(<span class="string">&#x27; &#x27;</span>)): <span class="comment"># 返回序号i和第i个单词</span></span><br><span class="line">            <span class="keyword">if</span> w[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span>(<span class="string">&#x27;aeiouAEIOU&#x27;</span>): <span class="comment"># Smart!</span></span><br><span class="line">                w = w[<span class="number">1</span>:] + w[<span class="number">0</span>]</span><br><span class="line">            out.append(w + <span class="string">&#x27;ma&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(i+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    S=<span class="string">&quot;I speak Goat Latin&quot;</span></span><br><span class="line">    solution=Solution().toGoatLatin(S)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>n</em>), where <em>n</em> is the
total words of <code>S</code>.</li>
<li>Space Complexity: <em>O</em>(<em>1</em>).</li>
<li>Runtime: 28 ms, faster than 16.77% of Python online submissions for
Goat Latin.</li>
<li>Memory Usage: 11.7 MB, less than 85.71% of Python online submissions
for Goat Latin.</li>
</ul>
<h2 id="approach-2-subfunction">Approach 2: Subfunction</h2>
<p><strong>Intuition</strong></p>
<p>We apply the steps given in the problem in a straightforward manner.
The difficulty lies in the implementation.</p>
<p><strong>Algorithm</strong></p>
<p>For each <code>word</code> in the sentence split, if it is a vowel we
consider the word, otherwise we consider the rotation of the word
(either <code>word[1:] + word[:1]</code> in Python, otherwise
<code>word.substring(1) + word.substring(0, 1)</code>in Java).</p>
<p>Afterwards, we add <code>"ma"</code>, the desired number of
<code>"a"</code>'s, and a space character.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toGoatLatin</span>(<span class="params">self, S</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">word</span>):</span><br><span class="line">            <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;aeiouAEIOU&#x27;</span>:</span><br><span class="line">                word = word[<span class="number">1</span>:] + word[:<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> word + <span class="string">&#x27;ma&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(convert(word) + <span class="string">&#x27;a&#x27;</span> * i</span><br><span class="line">                        <span class="keyword">for</span> i, word <span class="keyword">in</span> <span class="built_in">enumerate</span>(S.split(), <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time Complexity: <em>O</em>(<span
class="math display">\[N^2​\]</span>), where <em>N</em> is the length of
<code>S</code>. This represents the complexity of rotating the word and
adding extra <code>"a"</code> characters.</p></li>
<li><p>Space Complexity: <em>O</em>(<span
class="math display">\[N^2\]</span>), the space added to the answer by
adding extra <code>"a"</code> characters.</p></li>
<li><p>Runtime: 20 ms, faster than 71.17% of Python online submissions
for Goat Latin.</p></li>
<li><p>Memory Usage: 11.8 MB, less than 45.09% of Python online
submissions for Goat Latin.</p>
<p>Next challenges:</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q852 Peak Index in a Mountain Array</title>
    <url>/2019/07/09/2019-07-09-Q852-Peak-Index-in-a-Mountain-Array/</url>
    <content><![CDATA[<h1 id="peak-index-in-a-mountain-array"><a
href="https://leetcode.com/problems/peak-index-in-a-mountain-array/">Peak
Index in a Mountain Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Let's call an array <code>A</code> a <em>mountain</em> if the
following properties hold:</p>
<ul>
<li><code>A.length &gt;= 3</code></li>
<li>There exists some <code>0 &lt; i &lt; A.length - 1</code> such that
<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>
</ul>
<p>Given an array that is definitely a mountain, return any
<code>i</code> such that
<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: [0,1,0] Output: 1</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: [0,2,1,0] Output: 1</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>3 &lt;= A.length &lt;= 10000</code></li>
<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>
<li>A is a mountain, as defined above.</li>
</ul>
</blockquote>
<h2 id="approach-1-linear-scan">Approach 1: Linear Scan</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>The mountain increases until it doesn't. The point at which it stops
increasing is the peak.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peakIndexInMountainArray</span>(<span class="params">self, A</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(A)):</span><br><span class="line">            <span class="keyword">if</span> A[i]&gt;A[i+<span class="number">1</span>]: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">    solution=Solution().peakIndexInMountainArray(A)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>A</code>.</li>
<li>Space Complexity: <em>O</em>(1).</li>
<li>Runtime: 56 ms, faster than 95.41% of Python online submissions for
Peak Index in a Mountain Array.</li>
<li>Memory Usage: 12.5 MB, less than 99.37% of Python online submissions
for Peak Index in a Mountain Array.</li>
</ul>
<h2 id="approach-2-binary-search">Approach 2: Binary Search</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>The comparison <code>A[i] &lt; A[i+1]</code> in a mountain array
looks like
<code>[True, True, True, ..., True, False, False, ..., False]</code>: 1
or more boolean <code>True</code>s, followed by 1 or more boolean
<code>False</code>. For example, in the mountain array
<code>[1, 2, 3, 4, 1]</code>, the comparisons
<code>A[i] &lt; A[i+1]</code> would be
<code>True, True, True, False</code>.</p>
<p>We can binary search over this array of comparisons, to find the
largest index <code>i</code> such that <code>A[i] &lt; A[i+1]</code>.
For more on <em>binary search</em>, see the <a
href="https://leetcode.com/explore/learn/card/binary-search/">LeetCode
explore topic here.</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peakIndexInMountainArray</span>(<span class="params">self, A</span>):</span><br><span class="line">        lo, hi = <span class="number">0</span>, <span class="built_in">len</span>(A) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">            mi = (lo + hi) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> A[mi] &lt; A[mi + <span class="number">1</span>]:</span><br><span class="line">                lo = mi + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hi = mi</span><br><span class="line">        <span class="keyword">return</span> lo</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">    solution=Solution().peakIndexInMountainArray(A)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>A</code>.</li>
<li>Space Complexity: <em>O</em>(1).</li>
<li>Runtime: 56 ms, faster than 95.41% of Python online submissions for
Peak Index in a Mountain Array.</li>
<li>Memory Usage: 12.5 MB, less than 99.37% of Python online submissions
for Peak Index in a Mountain Array.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>Q521 Longest Uncommon Subsequence I</title>
    <url>/2019/06/18/2019-06-18-Q521-Longest-Uncommon-Subsequence-I/</url>
    <content><![CDATA[<h1 id="longest-uncommon-subsequence-i"><a
href="https://leetcode.com/problems/longest-uncommon-subsequence-i/">Longest
Uncommon Subsequence I</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a group of two strings, you need to find the longest uncommon
subsequence of this group of two strings. The longest uncommon
subsequence is defined as the longest subsequence of one of these
strings and this subsequence should not be <strong>any</strong>
subsequence of the other strings.</p>
<p>A <strong>subsequence</strong> is a sequence that can be derived from
one sequence by deleting some characters without changing the order of
the remaining elements. Trivially, any string is a subsequence of itself
and an empty string is a subsequence of any string.</p>
<p>The input will be two strings, and the output needs to be the length
of the longest uncommon subsequence. If the longest uncommon subsequence
doesn't exist, return -1.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: "aba", "cdc" Output: 3 Explanation: The longest uncommon
subsequence is "aba" (or "cdc"), because "aba" is a subsequence of
"aba", but not a subsequence of any other strings in the group of two
strings.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Both strings' lengths will not exceed 100.</li>
<li>Only letters from a ~ z will appear in input strings.</li>
</ul>
</blockquote>
<h2 id="approach-1-python-code">Approach 1: Python code</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>“若两字符串不相等，选择较长的字符串返回长度即可。否则返回-1。”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findLUSlength</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a!=b <span class="keyword">and</span> <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)) <span class="keyword">or</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment"># there must something wrong</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a=<span class="string">&quot;aba&quot;</span></span><br><span class="line">    b=<span class="string">&quot;cdc&quot;</span></span><br><span class="line">    solution=Solution().findLUSlength(a,b)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Runtime: 12 ms, faster than 95.02% of Python online submissions for
Longest Uncommon Subsequence I .</li>
<li>Memory Usage: 11.7 MB, less than 47.06% of Python online submissions
for Longest Uncommon Subsequence I .</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q937 Reorder Log Files</title>
    <url>/2019/06/14/2019-06-14-Q937-Reorder-Log-Files/</url>
    <content><![CDATA[<h1 id="reorder-log-files"><a
href="https://leetcode.com/problems/reorder-log-files/">Reorder Log
Files</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>You have an array of <code>logs</code>. Each log is a space delimited
string of words.</p>
<p>For each log, the first word in each log is an alphanumeric
<em>identifier</em>. Then, either:</p>
<ul>
<li>Each word after the identifier will consist only of lowercase
letters, or;</li>
<li>Each word after the identifier will consist only of digits.</li>
</ul>
<p>We will call these two varieties of logs <em>letter-logs</em> and
<em>digit-logs</em>. It is guaranteed that each log has at least one
word after its identifier.</p>
<p>Reorder the logs so that all of the letter-logs come before any
digit-log. The letter-logs are ordered lexicographically ignoring
identifier, with the identifier used in case of ties. The digit-logs
should be put in their original order.</p>
<p>Return the final order of the logs.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act
zoo"] Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3
1","zo4 4 7"]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>0 &lt;= logs.length &lt;= 100</li>
<li>3 &lt;= logs[i].length &lt;= 100</li>
<li>logs[i] is guaranteed to have an identifier, and a word after the
identifier.</li>
</ul>
</blockquote>
<h2 id="approach-1-custom-sort">Approach 1: Custom Sort</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Instead of sorting in the default order, we'll sort in a custom order
we specify.</p>
<p>The rules are:</p>
<ul>
<li>Letter-logs come before digit-logs;</li>
<li>Letter-logs are sorted alphanumerically, by content then
identifier;</li>
<li>Digit-logs remain in the same order.</li>
</ul>
<p>It is straightforward to translate these ideas into code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reorderLogFiles</span>(<span class="params">self, logs</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">log</span>):</span><br><span class="line">            id_, rest = log.split(<span class="string">&quot; &quot;</span>, <span class="number">1</span>) <span class="comment"># 1的意思是按空格阶段分成2段，</span></span><br><span class="line">                                          <span class="comment"># 前面n-1段各自只有1个元素</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, rest, id_) <span class="keyword">if</span> rest[<span class="number">0</span>].isalpha() <span class="keyword">else</span> (<span class="number">1</span>,)</span><br><span class="line">                                          <span class="comment"># 检察rest[0]是不是字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(logs, key = f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    S=<span class="string">&quot;a1 9 2 3 1&quot;</span>,<span class="string">&quot;g1 act car&quot;</span>,<span class="string">&quot;zo4 4 7&quot;</span>,<span class="string">&quot;ab1 off key dog&quot;</span>,<span class="string">&quot;a8 act zoo&quot;</span></span><br><span class="line">    solution=Solution().reorderLogFiles(S)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time Complexity: <span class="math display">\[O(\mathcal{A}\log
\mathcal{A})\]</span>, where <span
class="math display">\[\mathcal{A}\log \mathcal{A}\]</span> is the total
content of <code>logs</code>.</p></li>
<li><p>Space Complexity: <span
class="math display">\[O(\mathcal{A})\]</span>.</p></li>
<li><p>Runtime: 36 ms, faster than 20.01% of Python online submissions
for Reorder Log Files.</p></li>
<li><p>Memory Usage: 12 MB, less than 32.91% of Python online
submissions for Reorder Log Files.</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q917 Reverse Only Letters</title>
    <url>/2019/06/19/2019-06-19-Q917-Reverse-Only-Letters/</url>
    <content><![CDATA[<h1 id="reverse-only-letters"><a
href="https://leetcode.com/problems/reverse-only-letters/">Reverse Only
Letters</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a string <code>S</code>, return the "reversed" string where all
characters that are not a letter stay in the same place, and all letters
reverse their positions.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: "ab-cd" Output: "dc-ba"</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: "a-bC-dEf-ghIj" Output: "j-Ih-gfE-dCba"</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: "Test1ng-Leet=code-Q!" Output: "Qedo1ct-eeLg=ntse-T!"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>S.length &lt;= 100</li>
<li>33 &lt;= S[i].ASCIIcode &lt;= 122</li>
<li>S doesn't contain <code>\</code> or <code>"</code></li>
</ul>
</blockquote>
<h2 id="approach-1-stack-of-letters">Approach 1: Stack of Letters</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Collect the letters of <code>S</code> separately into a stack, so
that popping the stack reverses the letters. (Alternatively, we could
have collected the letters into an array and reversed the array.)</p>
<p>Then, when writing the characters of <code>S</code>, any time we need
a letter, we use the one we have prepared instead.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseOnlyLetters</span>(<span class="params">self, S</span>):</span><br><span class="line">        letters = [c <span class="keyword">for</span> c <span class="keyword">in</span> S <span class="keyword">if</span> c.isalpha()]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> c.isalpha():</span><br><span class="line">                ans.append(letters.pop())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    S=<span class="string">&quot;ab-cd&quot;</span></span><br><span class="line">    solution=Solution().reverseOnlyLetters(S)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity:<em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>S</code>.</li>
<li>Space Complexity: <em>O</em>(<em>N</em>).</li>
<li>Runtime: 16 ms, faster than 92.70% of Python online submissions for
Reverse Only Letters.</li>
<li>Memory Usage: 11.8 MB, less than 51.06% of Python online submissions
for Reverse Only Letters.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Q349 Intersection of Two Arrays</title>
    <url>/2019/07/10/2019-07-10-Q349-Intersection-of-Two-Arrays/</url>
    <content><![CDATA[<h1 id="intersection-of-two-arrays"><a
href="https://leetcode.com/problems/peak-index-in-a-mountain-array/">Intersection
of Two Arrays</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given two arrays, write a function to compute their intersection.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
</blockquote>
<h2 id="approach-1-array">Approach 1: Array</h2>
<p><strong>Intuition and Algorithm</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection</span>(<span class="params">self, nums1, nums2</span>):</span><br><span class="line">        out=[]</span><br><span class="line">        <span class="keyword">for</span> A <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">if</span> A <span class="keyword">in</span> nums2 <span class="keyword">and</span> A <span class="keyword">not</span> <span class="keyword">in</span> out:</span><br><span class="line">                out.append(A)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums1 = [<span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line">    nums2 = [<span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line">    solution=Solution().intersection(nums1,nums2)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>nums1</code>.</li>
<li>Space Complexity: <em>O</em>(1).</li>
<li>Runtime: 52 ms, faster than 23.52% of Python online submissions for
Intersection of Two Arrays.</li>
<li>Memory Usage: 11.8 MB, less than 86.37% of Python online submissions
for Intersection of Two Arrays.</li>
</ul>
<h2 id="approach-2-binary-search">Approach 2: Binary Search</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>The comparison <code>A[i] &lt; A[i+1]</code> in a mountain array
looks like
<code>[True, True, True, ..., True, False, False, ..., False]</code>: 1
or more boolean <code>True</code>s, followed by 1 or more boolean
<code>False</code>. For example, in the mountain array
<code>[1, 2, 3, 4, 1]</code>, the comparisons
<code>A[i] &lt; A[i+1]</code> would be
<code>True, True, True, False</code>.</p>
<p>We can binary search over this array of comparisons, to find the
largest index <code>i</code> such that <code>A[i] &lt; A[i+1]</code>.
For more on <em>binary search</em>, see the <a
href="https://leetcode.com/explore/learn/card/binary-search/">LeetCode
explore topic here.</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection</span>(<span class="params">self, nums1, nums2</span>):</span><br><span class="line">        set1 = <span class="built_in">set</span>(nums1)</span><br><span class="line">        set2 = <span class="built_in">set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(set2 &amp; set1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums1 = [<span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line">    nums2 = [<span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line">    solution=Solution().intersection(nums1,nums2)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <span class="math display">\[\mathcal{O}(n +
m)\]</span> in the average case and <span
class="math display">\[\mathcal{O}(n \times m)\]</span> <a
href="https://wiki.python.org/moin/TimeComplexity#set">in the worst case
when load factor is high enough</a>.</li>
<li>Space complexity : <span class="math display">\[\mathcal{O}(n +
m)\]</span> in the worst case when all elements in the arrays are
different.</li>
<li>Runtime: 28 ms, faster than 93.60% of Python online submissions for
Intersection of Two Arrays.</li>
<li>Memory Usage: 11.9 MB, less than 50.78% of Python online submissions
for Intersection of Two Arrays.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>Q167 Two Sum II - Input array is sorted</title>
    <url>/2019/08/13/2019-08-13-Q167-Two%20Sum%20II%20-%20Input%20array%20is%20sorted/</url>
    <content><![CDATA[<h1 id="two-sum-ii---input-array-is-sorted"><a
href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two
Sum II - Input array is sorted</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array of integers that is already <strong>sorted in
ascending order</strong>, find two numbers such that they add up to a
specific target number.</p>
<p>The function twoSum should return indices of the two numbers such
that they add up to the target, where index1 must be less than
index2.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation:
The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Your returned answers (both index1 and index2) are not
zero-based.</li>
<li>You may assume that each input would have <em>exactly</em> one
solution and you may not use the same element twice.</li>
</ul>
</blockquote>
<h2 id="approach-1-dictionary">Approach 1: Dictionary</h2>
<p><strong>Intuition and Algorithm</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, numbers, target</span>):</span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(numbers): <span class="comment"># 获得编号i(从0开始)和值num</span></span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> [dic[target - num] + <span class="number">1</span>, i + <span class="number">1</span>]</span><br><span class="line">            dic[num] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    numbers = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">    target = <span class="number">9</span></span><br><span class="line">    solution=Solution().twoSum(numbers,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time Complexity: <em>O</em>(<em>N</em>), where <em>N</em> is the
length of <code>numbers</code>.</li>
<li>Space Complexity: <em>O</em>(1).</li>
<li>Runtime: 40 ms, faster than 98.01% of Python online submissions for
Two Sum II - Input array is sorted.</li>
<li>Memory Usage: 12.1 MB, less than 40.00% of Python online submissions
for Two Sum II - Input array is sorted.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>Q704 Binary Search</title>
    <url>/2019/08/14/2019-08-14-Q704-Binary%20Search/</url>
    <content><![CDATA[<h1 id="binary-search"><a
href="https://leetcode.com/problems/binary-search/">Binary
Search</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a <strong>sorted</strong> (in ascending order) integer array
<code>nums</code> of <code>n</code> elements and a <code>target</code>
value, write a function to search <code>target</code> in
<code>nums</code>. If <code>target</code> exists, then return its index,
otherwise return <code>-1</code>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9
exists in nums and its index is 4</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2
does not exist in nums so return -1</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>You may assume that all elements in <code>nums</code> are
unique.</li>
<li><code>n</code> will be in the range <code>[1, 10000]</code>.</li>
<li>The value of each element in <code>nums</code> will be in the range
<code>[-9999, 9999]</code>.s</li>
</ul>
</blockquote>
<h2 id="approach-1-binary-search">Approach 1: Binary Search</h2>
<p><strong>Intuition and Algorithm</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span> <span class="comment"># left和right分别是首末两个元素</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right: <span class="comment"># 不断移动左右边界</span></span><br><span class="line">            pivot = (left + right) // <span class="number">2</span> <span class="comment"># 取中间序号并观察大小</span></span><br><span class="line">            <span class="keyword">if</span> nums[pivot] == target:</span><br><span class="line">                <span class="keyword">return</span> pivot</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> target &lt; nums[pivot]:</span><br><span class="line">                    right = pivot - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = pivot + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>]</span><br><span class="line">    target = <span class="number">9</span></span><br><span class="line">    solution=Solution().search(nums,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <span class="math display">\[\mathcal{O}(\log
N)\]</span>.</li>
<li>Let's compute time complexity with the help of <a
href="https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)">master
theorem</a> <span class="math display">\[T(N) =
aT\left(\frac{N}{b}\right) + \Theta(N^d)\]</span>. The equation
represents dividing the problem up into <span
class="math display">\[a\]</span> subproblems of size <span
class="math display">\[\frac{N}{b}\]</span> in <span
class="math display">\[\Theta(N^d)\]</span> time. Here at step there is
only one subproblem <code>a = 1</code>, its size is a half of the
initial problem <code>b = 2</code>, and all this happens in a constant
time <code>d = 0</code>. That means that <span
class="math display">\[\log_b{a} = d\]</span> and hence we're dealing
with <a
href="https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_2_example">case
2</a> that results in <span
class="math display">\[\mathcal{O}(n^{\log_b{a}} \log^{d + 1} N)=O(\log
N) \]</span>time complexity.</li>
<li>Space complexity : <span
class="math display">\[\mathcal{O}(1)\]</span> since it's a constant
space solution.</li>
<li>Runtime: 236 ms, faster than 11.72% of Python online submissions for
Binary Search.</li>
<li>Memory Usage: 12.8 MB, less than 33.33% of Python online submissions
for Binary Search.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器上配置Anaconda3以及Pytorch-RL环境</title>
    <url>/2019/09/06/2019-09-06-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AEAnaconda3%E4%BB%A5%E5%8F%8APytorch-RL%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1
id="linux服务器上配置anaconda3以pytorch-rl环境">Linux服务器上配置Anaconda3以Pytorch-RL环境</h1>
<p>通过上传安装包的方式在服务器安装Anaconda3只需要在<strong>相应的目录下</strong>执行一句命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-2019.07-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>安装途中会提示安装位置为默认路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/userNAME/anaconda3</span><br></pre></td></tr></table></figure>
<p>等待安装完成后，切换到Anaconda所在目录，打开Anaconda创建新环境：</p>
<p>这里由于我之前进行的配置都是基于Python
3.6.1的，所以这里要求新环境的Python也为3.6.1，但是在安装过程中出现了路径失效的情况（可能老版本的下载通道少一些），新建失败。这里就只要求版本为3.6即可。输入以下指令，新建环境成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name opensim-rl python=3.6</span><br><span class="line">source activate opensim-rl</span><br></pre></td></tr></table></figure>
<p>环境建好后可以通过以下指令进行版本检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">&gt; Python 3.6.9 :: Anaconda, Inc.</span><br></pre></td></tr></table></figure>
<p>接下来激活新建的环境并进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source activate opensim-rl</span><br></pre></td></tr></table></figure>
<p>参考我之前的一篇经验（<a
href="https://zhuanlan.zhihu.com/p/30636305">Anaconda新环境下快速安装多个Python软件包</a>）可以快速在新环境中批量安装软件包：</p>
<p><strong>在新环境中</strong>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install anaconda </span><br></pre></td></tr></table></figure>
<p>等待安装完成。</p>
<p>这里就基本把会调用的包都装上了，接下来开始安装PyTorch。</p>
<hr />
<p>继续呆在<strong>激活的opensim-rl环境</strong>里</p>
<p>由于PyTorch版本的选择和cuda版本有关，虽然因此先检查服务器上的cuda版本号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /usr/local/cuda/version.txt</span><br><span class="line">&gt; CUDA Version 9.0.103</span><br></pre></td></tr></table></figure>
<p>虽然PyTorch目前支持的最低版本是9.2，先选9.2，找到安装指令格式，再把9.2改成9.0（这个升级只有一两个月，自觉上应该是可以这样操作的），尝试安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=9.0 -c pytorch</span><br></pre></td></tr></table></figure>
<p>这里有一点需要注意：anaconda提供的pytorch的url国内不少很稳定，在下载的时候链接经常挂掉。</p>
<p>这里给出几个策略：</p>
<ol type="1">
<li><p>（玄学方法）在早晚下载低谷的时候下，速度会比较快。</p></li>
<li><p><strong>（科学方法1）开VPN下载，会很稳定。</strong></p></li>
<li><p>（科学方法2）添加国内清华、中科大的镜像源，多一些链接路径会增加成功的概率。</p></li>
</ol>
<p>这里我们用了<a
href="http://www.landeng26.info/">Lantern</a>每个月500M的免费流量帮助下载，速度比较快</p>
<hr />
<p>最后开始安装gym</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install gym</span><br></pre></td></tr></table></figure>
<p>搞定！</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>利用syncthing建立Linux服务器与本地Win10的同步文件夹</title>
    <url>/2019/09/07/2019-09-07-%E5%88%A9%E7%94%A8syncthing%E5%BB%BA%E7%AB%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E6%9C%AC%E5%9C%B0Win10%E7%9A%84%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h1
id="利用syncthing建立linux服务器与本地win10的同步文件夹">利用syncthing建立Linux服务器与本地Win10的同步文件夹</h1>
<h2 id="background">Background</h2>
<p>由于最近把本地的试验程序搬到了服务器上（<a
href="https://txing.tk/2019/09/06/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AEAnaconda3%E4%BB%A5Pytorch-RL%E7%8E%AF%E5%A2%83/">Linux服务器上配置Anaconda3以Pytorch-RL环境</a>），现在的试验结果就自然地在运行后保存在了服务器上（图片、数据）。</p>
<p>由于没有配置服务器端的可视化界面，就没法查看结果了。如果利用pscp进行Linux<span
class="math display">\[\to\]</span>windows的文件传输，等结果到了本地再查看，这样每跑一次实验就要单独传输一次，势必非常麻烦。</p>
<p>于是这里就迫切需求一种<strong>及时</strong>、<strong>高效</strong>、<strong>自动</strong>的linux<span
class="math display">\[\to\]</span>windows10的文件传输方案。</p>
<hr />
<p>经过一番调研，目前有这样几种方案备选：</p>
<p><strong>1、在linux服务器端查看图片。</strong>这个方案需要使用到类似SimpleHTTPServer的服务，简单地说就是在通过浏览器在ip:8000口查看图片。这个方案仍然需要在运行完成之后单独再操作一步，虽然实现了查看图片的功能，但如果需要保存图片到本地，还是绕不开pscp的操作。</p>
<p><strong>2、利用VNCserver将服务器端界面图形化。</strong>这是一个非常有吸引力的方案，因为图形化服务器端的意义不仅仅在于查看图片，跟在于今后其它文件操作都可以变得更加具体明确。但初尝试的过程中发现提供VNC服务的第三方软件很多，具体操作和配置看得眼花缭乱，莫衷一是。</p>
<p><strong>3、把服务器的文件传回本地查看。</strong>既然要在服务器上查看图片这么麻烦，我们何不直接把图片传回本地的windows环境呢，到了windows下那还不是为所欲为啊。这一方案主要同样有很多的备选子方案：</p>
<ul>
<li><strong>我们的老朋友pscp</strong>：每次使用都要输入一长串目录路径（本地和服务器的），让人身心俱疲。</li>
<li><strong>rsync</strong>：支持增量备份的优秀镜像备份工具，网上的具体实施方案比较繁琐，依然莫衷一是。</li>
<li><strong>syncthing</strong>：syncthing是个类似rsync的开运啊同步工具，支持windows,
linux, Mac等不同的平台看来是个不错的选择。</li>
</ul>
<hr />
<h2 id="syncthing-a-wise-choice">syncthing: a wise choice</h2>
<p>接下来我们选择syncthing，并尝试安装并配置</p>
<h3 id="windows-10端">windows 10端：</h3>
<ul>
<li>直接在<a
href="https://syncthing.net/">syncthing官网</a>可以下载到windows版本的安装包，直接解压点开exe即可完成安装。</li>
</ul>
<h3 id="linux服务器端">Linux服务器端：</h3>
<ul>
<li><p>第一步：在windows上下载好最新的<a
href="https://github.com/syncthing/syncthing/releases/tag/v1.2.2">安装包</a>（我这里选择的是<a
href="https://github.com/syncthing/syncthing/releases/download/v1.2.2/syncthing-linux-amd64-v1.2.2.tar.gz">syncthing-linux-amd64-v1.2.2.tar.gz</a>）</p></li>
<li><p>第二步：将安装包上传至服务器，具体操作参考<a
href="https://txing.tk/2019/09/06/Windows%E9%80%9A%E8%BF%87SSH%E5%90%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/">Windows通过SSH向Linux服务器上传文件</a></p></li>
<li><p>第三步：解压文件并安装。</p>
<p>在新建的安装包所在目录中执行解压命令，并打开文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf syncthing-linux-amd64-v1.2.2.tar.gz</span><br><span class="line">cd syncthing-linux-amd64-v1.2.2</span><br></pre></td></tr></table></figure>
<p>这里通过ls命令可以看到有一个可执行文件，现在先打开它用来生成我们需要更改的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./syncthing</span><br></pre></td></tr></table></figure>
<p>等到看见类似如下字样的时候，表示启动完成，按Ctrl+c关闭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[QQAFC] 16:59:18 INFO: Detected 1 NAT service</span><br></pre></td></tr></table></figure></li>
<li><p>第四步：配置syncthing。由于syncthing默认是只允许本机访问，这里需要进行设置。大多数教程这里都会使用vim进行编辑，但是我的环境里没有vim，也有有sudo权限安装，因此参考这里的<a
href="https://www.youcl.com/info/10588">某教程</a>里的方法，通过nano进行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.config/syncthing/config.xml</span><br></pre></td></tr></table></figure>
<p>这时会弹出一大片文本，但我们只需要找到下面这一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;gui enabled=&quot;true&quot; tls=&quot;false&quot;&gt;</span><br><span class="line">    &lt;address&gt;127.0.0.1:46554&lt;/address&gt;</span><br><span class="line">&lt;/gui&gt;</span><br></pre></td></tr></table></figure>
<p>再把前4段数字全部变成0，即0.0.0.0:46554（冒号后面的数字不用变）。然后按Ctrl+x退出编辑，在按y保存更改。</p></li>
<li><p>第五步：再次运行syncthing</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./syncthing</span><br></pre></td></tr></table></figure>
<p>在浏览器输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://服务器IP:46554</span><br></pre></td></tr></table></figure>
<p>后面的数字是在第4步修改地址时看到的冒号后的数字，按下回车进行图形化的配置。</p></li>
<li><p>第六步：图形化配置</p>
<p>配置分为两部分：</p>
<ul>
<li>登录<code>http://服务器IP:46554</code>选择服务器端要共享的文件夹及路径。记录服务器端ID。</li>
<li>另一台机器打开syncthing，自动打开桌面端配置页面，配置要共享的文件夹和路径。添加设备，粘贴服务器端ID，在服务器端点击同意，完成连接。</li>
</ul></li>
</ul>
<p>之后的设置比较简单这里给出参考不过多介绍：<a
href="https://blog.curlc.com/archives/333.html">Syncthing同步设置教程</a></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows通过SSH向Linux服务器上传文件</title>
    <url>/2019/09/06/2019-09-06-Windows%E9%80%9A%E8%BF%87SSH%E5%90%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1
id="windows通过ssh向linux服务器上传文件">Windows通过SSH向Linux服务器上传文件</h1>
<p>这里需要使用到PuTTY的pscp工具，因此需要在<a
href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PuTTY官网</a>下载并安装。</p>
<ul>
<li><p><strong>Step 1</strong>: Install PuTTY.</p></li>
<li><p><strong>Step 2</strong>: Open cmd window, and <strong>enter the
path of your PuTTY files</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd ./Program Files (x86)/Putty</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Step 3</strong>: Use 'pscp' order, and wait for
transmission.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pscp D:\download\Anaconda3-2019.07-Linux-x86_64.sh Txing@***.**.**.**.**:/home/Txing/anaconda3/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Q744 Find Smallest Letter Greater Than Target</title>
    <url>/2019/08/19/2019-08-19-Q744-Find%20Smallest%20Letter%20Greater%20Than%20Target/</url>
    <content><![CDATA[<h1 id="find-smallest-letter-greater-than-target"><a
href="https://leetcode.com/problems/find-smallest-letter-greater-than-target/">Find
Smallest Letter Greater Than Target</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a list of sorted characters <code>letters</code> containing
only lowercase letters, and given a target letter <code>target</code>,
find the smallest element in the list that is larger than the given
target.</p>
<p>Letters also wrap around. For example, if the target is
<code>target = 'z'</code> and <code>letters = ['a', 'b']</code>, the
answer is <code>'a'</code>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: letters = ["c", "f", "j"] target = "a" Output: "c"</p>
<p>Input: letters = ["c", "f", "j"] target = "c" Output: "f"</p>
<p>Input: letters = ["c", "f", "j"] target = "d" Output: "f"</p>
<p>Input: letters = ["c", "f", "j"] target = "g" Output: "j"</p>
<p>Input: letters = ["c", "f", "j"] target = "j" Output: "c"</p>
<p>Input: letters = ["c", "f", "j"] target = "k" Output: "c"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>letters</code> has a length in range
<code>[2, 10000]</code>.</li>
<li><code>letters</code> consists of lowercase letters, and contains at
least 2 unique letters.</li>
<li><code>target</code> is a lowercase letter.</li>
</ul>
</blockquote>
<h2 id="approach-1-linear-search">Approach 1: Linear Search</h2>
<p><strong>Intuition and Algorithm</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextGreatestLetter</span>(<span class="params">self, letters, target</span>):</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> letters:</span><br><span class="line">            <span class="keyword">if</span> l &gt; target:</span><br><span class="line">                <span class="keyword">return</span> l</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    letters = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;j&quot;</span>]</span><br><span class="line">    target = <span class="string">&quot;j&quot;</span></span><br><span class="line">    solution=Solution().nextGreatestLetter(letters,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <span
class="math display">\[\mathcal{O}(N)\]</span>.</li>
<li>Space complexity : <span
class="math display">\[\mathcal{O}(1)​\]</span> since it's a constant
space solution.</li>
<li>Runtime: 72 ms, faster than 99.40% of Python online submissions for
Find Smallest Letter Greater Than Target.</li>
<li>Memory Usage: 13.8 MB, less than 33.33% of Python online submissions
for Find Smallest Letter Greater Than Target.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm连接Linux服务器配置方法</title>
    <url>/2019/10/24/2019-10-24-Pycharm%E8%BF%9E%E6%8E%A5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1
id="pycharm连接linux服务器配置方法">Pycharm连接Linux服务器配置方法</h1>
<p>今天手贱在pycharm删除不用的解释器时把几个月前配置的远程解释器删了，查了下资料重新恢复，顺便留个笔记以防万一。</p>
<ul>
<li>Step
1：打开python工程，点击Tool-&gt;Deployment-&gt;Configration</li>
<li>Step
2：填写远程解释器Name（随意命名），在connection页面选择类型为SFTP，填写host，user
name，password等等。最后可以点击test SFTP
connectioin测试一下。转到mapping页面，选择将windows下的代码和服务器上代码相连，填写本地Local
path，服务器path，apply。</li>
<li>Step 3：在菜单栏，File -&gt; Settings… -&gt; Project ×× -&gt;
Project Interpreter，点击Add添加解释器。选择SSH Interpreter。</li>
<li>Step 4：填写服务器的 Host
地址，端口Port，用户名Username，填好后，下一步Next。</li>
<li>Step 5：填写密码 Password，下一步Next。</li>
<li>Step
6：选择服务器上Python解释器的位置，以及服务器上的远程同步文件夹Sync
folders（可设置多个）。服务器上可以使用命令which
python找到当前环境Python的安装位置。如果通过anaconda安装了新的python环境，可以用conda
activate opensim-rl，切换默认的base环境到opensim-rl环境，再用which
python查找位置。输入好路径，点击Finish，配置结束。</li>
</ul>
<p>2019年10月24日</p>
<p>Txing</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX的PDF预览中，无法通过光标正向/反向定位</title>
    <url>/2020/03/10/2020-03-10-LaTeX%E7%9A%84PDF%E9%A2%84%E8%A7%88%E4%B8%AD%EF%BC%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%90%91%E5%8F%8D%E5%90%91%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1
id="latex的pdf预览中无法通过光标正向反向定位">LaTeX的PDF预览中，无法通过光标正向/反向定位</h1>
<p>我一直是在Atom上编辑LaTeX的，觉得正/反向定位这个功能无伤大雅就没去填坑。现在又挺想用这个功能，趁着这个超长假期，打算补上这个坑。</p>
<h3 id="软件环境">软件环境</h3>
<ul>
<li>Windows 10</li>
<li>Atom</li>
<li>CTex</li>
</ul>
<h3 id="问题详情">问题详情</h3>
<p>在Atom上通过Atom-Latex扩展包可以使用基本编辑+预览功能。</p>
<p>可是在PDF窗口，却无法通过Ctrl+鼠标Left实现反向定位，同时报错“ SyncTeX
error ”。</p>
<h3 id="处理过程">处理过程</h3>
<p>实际上报错的时候还报了几行乱码，幸运的，通过这个报错我现在知道关键词是什么了——synctex。</p>
<p>继续挖掘，发现SyncTeX一般是作为TeXLive的一部分，和它捆绑安装的，如果当初安装的是TeXLive，那么一般也就安装了SyncTeX。</p>
<p>进一步挖掘，认识到实际情况还要复杂一些，按层次来说，bug应该出在缺失了MiKTeX下的SyncTeX。</p>
<p>CTeX安装自带了MiKTeX，但是所安装的MiKTeX却没有包含SyncTeX（其它途径安装会包含）。</p>
<p><a
href="https://tex.stackexchange.com/questions/338078/how-to-get-synctex-for-windows-to-allow-atom-pdf-view-to-synch#">Stack
Exchange</a>提供了SyncTeX的链接方便下载，同时还需要下载一个kpathseaXXX.dll文件，因为在执行SyncTeX的时候会调用它。</p>
<hr />
<p>因此，处理办法分为两步：</p>
<ul>
<li><strong>Step 1</strong>：下载<a
href="https://github.com/aminophen/w32tex-build/blob/master/synctex.exe">SyncTeX.exe</a>和<a
href="https://github.com/aminophen/w32tex-build/blob/master/kpathsea623.dll">kpathsea623.dll</a></li>
<li><strong>Step
2</strong>：把两个文件放到MiKTeX的bin文件夹下（eg：C:Files (x86))</li>
</ul>
<p>重新启动Atom再编译文件，就能完成定向了。</p>
<p>（这功能还真好用(ﾉﾟ∀ﾟ)ﾉ ）</p>
<p>2020年3月10日</p>
<p>Txing</p>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>新设备上使用Git连接远程仓库</title>
    <url>/2020/07/11/2020-07-11-%E6%96%B0%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%BD%BF%E7%94%A8Git%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="新设备上使用git连接远程仓库">新设备上使用Git连接远程仓库</h1>
<p>疫情期间，想起来Blog已经很久没更新了。在Freenom上申请的txing.tk免费域名也过期了，重新申请一直确认不了订单，据说是免费域名被滥用，现在不批准.tk的域名了。在阿里云和腾讯上看了看，正常点后缀的域名都好贵（十年期），暂时还是用原始网址吧。</p>
<p>由于此前Blog是基于github
page建立的，一直是使用实验室的电脑更新的远程仓库。现在需要在新设备上更新仓库，按一下方式处理可以尽量避免问题。</p>
<p><strong>Step 1:</strong> 在本地打算放仓库的位置右键，选择Git Bush
Here，然后先把仓库克隆到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/txing-casia/txing-casia.github.io.git </span><br></pre></td></tr></table></figure>
<p>完成后，打开文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd txing-casia.github.io</span><br></pre></td></tr></table></figure>
<p>过程中应该不需要使用git
init。此时可以对文件进行修改，之后是上传步骤。</p>
<p><strong>Step 2: </strong> 上传三连</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;Changes&quot;</span></span><br><span class="line">$ git push origin master</span><br><span class="line"><span class="comment"># 如果失败，最后一行可替换为</span></span><br><span class="line">$ git push origin master:master -f</span><br></pre></td></tr></table></figure>
<p>通过git status查看修改内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>Txing</p>
<p>2020年7月11日</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Deep Deterministic Policy Gradient algorithm (DDPG)</title>
    <url>/2019/09/10/2019-09-10-Reinforcement%20Learning%20-%20Deep%20Deterministic%20Policy%20Gradient%20algorithm%20(DDPG)/</url>
    <content><![CDATA[<h1 id="continuous-control-with-deep-reinforcement-learning">Continuous
Control with Deep Reinforcement Learning</h1>
<p>论文链接：https://arxiv.org/abs/1509.02971v2</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>Reinforcement
Learning是2019年9月新开的专栏企划，旨在为今后RL的学习提供比较广阔的专业视野，同时贡献于New
Idea的产生。</p>
</blockquote>
<h2 id="方法">方法</h2>
<ul>
<li><p><strong>意义：</strong>DDPG诞生于2016年的ICRL，作为Deep
Q-learning的进阶算法，将Q-learning从离散action space拓展到了连续action
space的应用领域，并实现了一个end-to-end ( image to action )
的决策框架。</p></li>
<li><p><strong>难点：</strong>DDPG提供了一个以未处理的高维传感信号作输入，解决复杂任务的算法框架。One
of the primary goals of the field of artificial intelligence is to solve
complex tasks from unprocessed, high-dimensional, sensory
input.</p></li>
<li><p>DQN的缺点：However, while DQN solves problems with
high-dimensional observation spaces, it can only handle discrete and
low-dimensional action spaces.</p></li>
<li><p>面向的应用场景：Many tasks of interest, most notably physical
control tasks, have continuous (real valued) and high dimensional action
spaces.</p></li>
<li><p>如果想把DQN用在连续的action
space中，有一种办法是把action离散化。但是这样会大大增加action的维度，从而带来决策上的困难。例如一个3自由度的机器人，把每个关节角离散为10个角度，那么action
space维度就会变为<span
class="math display">\[10^{3}\]</span>。在需要精确控制的时候，这个问题会更加严重。（the
number of actions increases exponentially with the number of degrees of
freedom）。此外，这种粗略的离散化丢失了action的结构信息，可能会影响到问题的求解。</p></li>
<li><p>DDPG本质：In this work we present a model-free, off-policy
actor-critic algorithm using deep function approximators that can learn
policies in high-dimensional, continuous action spaces.</p></li>
<li><p>DDPG基于DPG算法，DPG由于只是加入了简单的神经网络函数近似，因此算法并不稳定。</p></li>
<li><p>DQN is able to learn value functions using such function
approximators in a stable and robust way due to two innovations:</p>
<ul>
<li>the network is trained off-policy with samples from a <strong>replay
buffer</strong> to minimize correlations between samples;</li>
<li>the network is trained with a <strong>target Q network</strong> to
give consistent targets during temporal difference backups</li>
</ul></li>
<li><p>DDPG在实验中用摄像机的画面提取低维信息（例如：cartesian
coordinates or joint angles
笛卡尔坐标或者关节角），将其作为observation。using both low-dimensional
observations (e.g. joint angles) and directly from pixels.</p></li>
<li><p>Here, we assumed the environment is fully-observed so <span
class="math display">\[s_t = x_t\]</span>.</p></li>
<li><p>replay buffer + soft updates</p></li>
</ul>
<p><strong>DDPG algorithm</strong></p>
<blockquote>
<hr />
<p>Randomly initialize critic network <span
class="math display">\[Q(s,a\mid \theta^Q)\]</span> and actor <span
class="math display">\[\mu(s\mid\theta^{\,u})\]</span> with weights
<span class="math display">\[\theta^Q\]</span> and <span
class="math display">\[\theta^{\mu}\]</span></p>
<p>Initialize target network <span
class="math display">\[Q&#39;\]</span> and <span
class="math display">\[\mu&#39;\]</span> with weights <span
class="math display">\[\theta^{Q&#39;}\leftarrow \theta^{Q}\]</span>,
<span class="math display">\[\theta^{\mu&#39;}\leftarrow
\theta^{\mu}\]</span></p>
<p>Initialize replay buffer <span class="math display">\[R\]</span>
<strong>For</strong> <span class="math display">\[episode = 1\]</span>,
<span class="math display">\[M\]</span> <strong>do</strong></p>
<p>---- Initialize a random process <span
class="math display">\[\mathscr{N}\]</span> for action exploration ----
Receive initial observation state <span
class="math display">\[s_1\]</span></p>
<p>---- <strong>For</strong> <span class="math display">\[t = 1,
T\]</span> <strong>do</strong></p>
<p>---- ---- Select action <span class="math display">\[a_t =
\mu(s_t\mid\theta^{\mu}) + \mathscr{N}_t\]</span> according to the
current policy and exploration noise</p>
<p>---- ---- Execute action at and observe reward <span
class="math display">\[r_t\]</span> and observe new state <span
class="math display">\[s_{t+1}\]</span></p>
<p>---- ---- Store transition <span
class="math display">\[(s_t,a_t,r_t,s_{t+1})\]</span> in <span
class="math display">\[R\]</span></p>
<p>---- ---- Sample a random minibatch of <span
class="math display">\[N\]</span> transitions <span
class="math display">\[(s_t,a_t,r_t,s_{t+1})\]</span> from <span
class="math display">\[R\]</span></p>
<p>---- ---- Set <span class="math display">\[y_i = r_i + \gamma
Q&#39;(s_{i+1},\mu&#39;(s_{i+1}\midθ^{\mu&#39;})\mid \theta
^{Q&#39;})\]</span></p>
<p>---- ---- Update critic by minimizing the loss: <span
class="math display">\[L = \frac{1}{N} \sum_i(y_i - Q(s_i,a_i \mid
\theta^Q))^2\]</span></p>
<p>---- ---- Update the actor policy using the sampled policy
gradient:</p>
<p>---- ---- ---- <span class="math display">\[\triangledown
_{\theta^{\mu}}J \approx \frac{1}{N}\sum\triangledown_a Q(s,a\mid
\theta^Q) \mid _{s=s_i,a=\mu(s_i)}\triangledown_{\theta^{\mu}}\mu(s \mid
\theta^{\mu})\mid_{s_i}\]</span></p>
<p>---- ---- Update the target networks:</p>
<p>---- ---- ---- <span
class="math display">\[\theta^{Q&#39;}\leftarrow\tau\theta^Q+(1-\tau)\theta^{Q&#39;}\]</span>,</p>
<p>---- ---- ---- <span
class="math display">\[\theta^{\mu&#39;}\leftarrow\tau\theta^{\mu}+(1-\tau)\theta^{\mu&#39;}\]</span></p>
<p>---- <strong>end For</strong></p>
<p><strong>end For</strong></p>
</blockquote>
<hr />
<h2 id="总结">总结</h2>
<p>不知道为什么看完之后觉得DDPG并没有想象中的复杂，也没有什么推导过程，架构也比较简单清晰，文章中大量的实验验证了算法的普适性。可能这些点正是一个RL算法的可贵之处吧。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Page无法访问解决办法</title>
    <url>/2020/08/17/2020-08-17-Github%20Page%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="github-page无法访问解决办法">Github Page无法访问解决办法</h1>
<p>###问题描述：</p>
<p>在2020年5月份左右，我的Github
Page打不开了，之前都是刻意正常访问的。</p>
<p>###解决思路：</p>
<ul>
<li>刚开始以为是自己的新上传的修改有问题，做了回调，但是依然打不开。</li>
<li>尝试网上搜索类似情况，有人说是页面从http改为https了。但这个消息是2017年的，所以也不是原因。</li>
<li>以为是我申请的域名过期了，于是设置取消了自定义的域名，但依旧打不开。</li>
<li>以为是Github被墙了，但Github主页和其它仓库都能打开。</li>
<li>有人说是Github在国内功能做了阉割，去掉了Github
Page功能。但是我能打开别的一些Github Page（不能保证都能打开）。</li>
<li>尝试翻墙打开我的Github Page，能够打开。而有些Github
Page不翻墙也能打开。那么应该是我的网络有问题。</li>
<li>尝试修改host，没什么用。</li>
<li>看到有人说是电信的DNS的问题，尝试换成阿里的，成功解决问题。</li>
</ul>
<h3 id="具体步骤">具体步骤：</h3>
<ul>
<li>Step1：修改路由器的自动配置DNS为手动；</li>
<li>Step2：填入阿里的DNS：223.5.5.5和223.6.6.6；</li>
</ul>
<p>Txing</p>
<p>2020年8月17日</p>
]]></content>
      <tags>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title>Q657 机器人能否返回原点</title>
    <url>/2020/08/28/2020-08-28-Q657-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E5%8E%9F%E7%82%B9/</url>
    <content><![CDATA[<h1 id="机器人能否返回原点"><a
href="https://leetcode-cn.com/problems/robot-return-to-origin/">机器人能否返回原点</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>在二维平面上，有一个机器人从原点 (0, 0)
开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0)
处结束。</p>
<p>移动顺序由字符串表示。字符 move[i] 表示其第 i
次移动。机器人的有效动作有 R（右），L（左），U（上）和
D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回
false。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: "UD" 输出: true
解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回
true。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入: "LL" 输出: false
解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动”
的距离。我们返回 false，因为它在移动结束时没有返回原点。</p>
</blockquote>
<blockquote>
<p><strong>Note</strong></p>
<p>机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L”
将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p>
</blockquote>
<h3 id="approach-1-intuitive-solution">Approach 1: Intuitive
Solution</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judgeCircle</span>(<span class="params">self, moves</span>):</span><br><span class="line">        x=y=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> move <span class="keyword">in</span> moves:</span><br><span class="line">            <span class="keyword">if</span> move == <span class="string">&quot;U&quot;</span>: y+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;D&quot;</span>: y-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;L&quot;</span>: x-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> move == <span class="string">&quot;R&quot;</span>: x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (x==y==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    moves = <span class="string">&quot;LL&quot;</span></span><br><span class="line">    solution=Solution().judgeCircle(moves)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度： <span class="math display">\[O(N)\]</span>，其中 <span
class="math display">\[N\]</span> 表示 <span
class="math display">\[moves\]</span>
指令串的长度。我们只需要遍历一遍字符串即可。</li>
<li>空间复杂度： <span
class="math display">\[O(1)\]</span>，我们只需要常数的空间来存放若干变量。</li>
</ul>
<h2 id="approach-2-compact-solution">Approach 2: Compact Solution</h2>
<p>更简洁的实现：判断相对方向的步数是否一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judgeCircle</span>(<span class="params">self, moves</span>):</span><br><span class="line">        <span class="keyword">return</span> moves.count(<span class="string">&#x27;L&#x27;</span>) == moves.count(<span class="string">&#x27;R&#x27;</span>) <span class="keyword">and</span> moves.count(<span class="string">&#x27;U&#x27;</span>) == moves.count(<span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>其实也可以先判断步数是否为偶数，奇数肯定不行，还应该考虑输入为空或者输入有错误字符的情况，但是由于是直接数L、R、U、D的数目，避免了计算错误字符，也能处理空输入的情况，因此可以不用再修改</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Q557 反转字符串中的单词 III</title>
    <url>/2020/08/30/2020-08-30-Q557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%20III/</url>
    <content><![CDATA[<h1 id="反转字符串中的单词-iii"><a
href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">反转字符串中的单词
III</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入："Let's take LeetCode contest" 输出："s'teL ekat edoCteeL
tsetnoc"</p>
</blockquote>
<blockquote>
<p><strong>Note</strong></p>
<p>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</p>
</blockquote>
<h3 id="approach-1-intuitive-solution">Approach 1: Intuitive
Solution</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params">self, s</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(s.split(<span class="string">&#x27; &#x27;</span>)[::-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&quot;Let&#x27;s take LeetCode contest&quot;</span></span><br><span class="line">    solution=Solution().reverseWords(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.split(<span class="string">&#x27; &#x27;</span>) <span class="comment"># 按照分割字符串</span></span><br><span class="line"></span><br><span class="line">s.split(<span class="string">&#x27; &#x27;</span>)[::-<span class="number">1</span>] <span class="comment"># 按照分割字符串，并将单词逆顺序排序</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; &#x27;</span>.join(s.split(<span class="string">&#x27; &#x27;</span>)[::-<span class="number">1</span>]) <span class="comment"># 用‘ ’连接分割出来的单词</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; &#x27;</span>.join(s.split(<span class="string">&#x27; &#x27;</span>)[::-<span class="number">1</span>])[::-<span class="number">1</span>] <span class="comment"># 将新建立的句子（字符串）逆序排列</span></span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度：O(N)，其中 N 为字符串的长度。原字符串中的每个字符都会在
O(1) 的时间内放入新字符串中。</li>
<li>空间复杂度：O(N)，我们开辟了与原字符串等大的空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1561 你可以获得的最大硬币数目-排序</title>
    <url>/2020/08/31/2020-08-31-Q1561-%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%BE%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%A1%AC%E5%B8%81%E6%95%B0%E7%9B%AE-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="你可以获得的最大硬币数目"><a
href="https://leetcode-cn.com/problems/maximum-number-of-coins-you-can-get/">你可以获得的最大硬币数目</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>有 3n 堆数目不一的硬币，你和你的朋友们打算按以下方式分硬币：</p>
<p>每一轮中，你将会选出<strong>任意</strong>3 堆硬币（不一定连续）。
Alice 将会取走硬币数量最多的那一堆。 你将会取走硬币数量第二多的那一堆。
Bob 将会取走最后一堆。 重复这个过程，直到没有更多硬币。 给你一个整数数组
piles ，其中 piles[i] 是第 i 堆中硬币的数目。</p>
<p>返回你可以获得的最大硬币数目。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：piles = [2,4,1,2,7,8] 输出：9 解释：选出 (2, 7, 8) ，Alice 取走
8 枚硬币的那堆，你取走 7 枚硬币的那堆，Bob 取走最后一堆。 选出 (1, 2, 4)
, Alice 取走 4 枚硬币的那堆，你取走 2 枚硬币的那堆，Bob 取走最后一堆。
你可以获得的最大硬币数目：7 + 2 = 9. 考虑另外一种情况，如果选出的是 (1,
2, 8) 和 (2, 4, 7) ，你就只能得到 2 + 4 = 6 枚硬币，这不是最优解。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：piles = [2,4,5] 输出：4</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：piles = [9,8,7,6,5,1,2,3,4] 输出：18</p>
</blockquote>
<blockquote>
<p><strong>Note</strong></p>
<p>3 &lt;= piles.length &lt;= 10^5</p>
<p>piles.length % 3 == 0</p>
<p>1 &lt;= piles[i] &lt;= 10^4</p>
</blockquote>
<h3 id="approach-1-intuitive-solution">Approach 1: Intuitive
Solution</h3>
<p>Bob取走最小的n堆，剩下的2n堆里面，我每次取次小的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxCoins</span>(<span class="params">self, piles</span>):</span><br><span class="line">        piles_sort=<span class="built_in">sorted</span>(piles)</span><br><span class="line">        <span class="built_in">print</span>(piles_sort[<span class="built_in">int</span>(<span class="built_in">len</span>(piles)/<span class="number">3</span>):<span class="built_in">len</span>(piles):<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(piles_sort[<span class="built_in">int</span>(<span class="built_in">len</span>(piles)/<span class="number">3</span>):<span class="built_in">len</span>(piles):<span class="number">2</span>])</span><br><span class="line">    	<span class="comment"># return sum(piles_sort[int(len(piles)/3)::2])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    piles = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">    solution=Solution().maxCoins(piles)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度：O(N)。</li>
<li>空间复杂度：O(N)。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Q486 Predict the Winner-递归 动态规划</title>
    <url>/2020/09/01/2020-09-01-Q486-Predict%20the%20Winner-%E9%80%92%E5%BD%92%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="predict-the-winner"><a
href="https://leetcode-cn.com/problems/predict-the-winner/">Predict the
Winner</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array of scores that are non-negative integers. Player 1
picks one of the numbers from either end of the array followed by the
player 2 and then player 1 and so on. Each time a player picks a number,
that number will not be available for the next player. This continues
until all the scores have been chosen. The player with the maximum score
wins.</p>
<p>Given an array of scores, predict whether player 1 is the winner. You
can assume each player plays to maximize his score.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: [1, 5, 2] Output: False Explanation: Initially, player 1 can
choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose
from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left
with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is
5. Hence, player 1 will never be the winner and you need to return
False.</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>Input: [1, 5, 233, 7] Output: True Explanation: Player 1 first
chooses 1. Then player 2 have to choose between 5 and 7. No matter which
number player 2 choose, player 1 can choose 233. Finally, player 1 has
more score (234) than player 2 (12), so you need to return True
representing player1 can win.</p>
</blockquote>
<blockquote>
<p><strong>constraints</strong></p>
<p>1 &lt;= length of the array &lt;= 20. Any scores in the given array
are non-negative integers and will not exceed 10,000,000. If the scores
of both players are equal, then player 1 is still the winner.</p>
</blockquote>
<h3 id="approach-1-递归">Approach 1: 递归</h3>
<p>为了判断哪个玩家可以获胜，需要计算一个总分，为先手得分与后手得分之差。当数组中的所有数字都被拿取时，如果总分大于或等于
0，则先手获胜，反之则后手获胜。</p>
<p>由于每次只能从数组的任意一端拿取数字，因此可以保证数组中剩下的部分一定是连续的。假设数组当前剩下的部分为下标
<span class="math display">\[\textit{start}\]</span> 到下标 <span
class="math display">\[\textit{end}\]</span>，其中<span
class="math display">\[ 0 \le \textit{start} \le \textit{end} &lt;
\textit{nums}.\text{length}\]</span>。如果 <span
class="math display">\[\textit{start}=\textit{end}\]</span>，则只剩一个数字，当前玩家只能拿取这个数字。如果
<span
class="math display">\[\textit{start}&lt;\textit{end}\]</span>，则当前玩家可以选择
<span class="math display">\[\textit{nums}[\textit{start}]\]</span>或
<span
class="math display">\[\textit{nums}[\textit{end}]\]</span>，然后轮到另一个玩家在数组剩下的部分选取数字。这是一个递归的过程。</p>
<p>计算总分时，需要记录当前玩家是先手还是后手，判断当前玩家的得分应该记为正还是负。当数组中剩下的数字多于
1
个时，当前玩家会选择最优的方案，使得自己的分数最大化，因此对两种方案分别计算当前玩家可以得到的分数，其中的最大值为当前玩家最多可以得到的分数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PredictTheWinner_solution_1</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">start: <span class="built_in">int</span>, end: <span class="built_in">int</span>, turn: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            <span class="keyword">if</span> start == end:</span><br><span class="line">                <span class="keyword">return</span> nums[start] * turn</span><br><span class="line">            scoreStart = nums[start] * turn + total(start + <span class="number">1</span>, end, -turn) <span class="comment"># case 1</span></span><br><span class="line">            scoreEnd = nums[end] * turn + total(start, end - <span class="number">1</span>, -turn)<span class="comment"># case 2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(scoreStart * turn, scoreEnd * turn) * turn</span><br><span class="line">        <span class="keyword">return</span> total(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, <span class="number">1</span>) &gt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">    solution=Solution().PredictTheWinner_solution_1(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度：<span class="math display">\[O(2^n)\]</span>，其中 n
是数组的长度。</li>
<li>空间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是数组的长度。空间复杂度取决于递归使用的栈空间。</li>
</ul>
<h2 id="approach-2-动态规划">Approach 2: 动态规划</h2>
<p>方法一使用递归，存在大量重复计算，因此时间复杂度很高。由于存在重复子问题，因此可以使用动态规划降低时间复杂度。</p>
<p>定义二维数组 <span
class="math display">\[\textit{dp}\]</span>，其行数和列数都等于数组的长度，<span
class="math display">\[\textit{dp}[i][j]\]</span>表示当数组剩下的部分为下标
i 到下标 j
时，当前玩家与另一个玩家的分数之差的最大值，注意当前玩家不一定是先手。</p>
<p>只有当 <span class="math display">\[i \le j\]</span>
时，数组剩下的部分才有意义，因此当 <span
class="math display">\[i&gt;j\]</span> 时，<span
class="math display">\[\textit{dp}[i][j]=0\]</span>。</p>
<p>当 <span class="math display">\[i=j\]</span>
时，只剩一个数字，当前玩家只能拿取这个数字，因此对于所有 <span
class="math display">\[0 \le i &lt;
\textit{nums}.\text{length}\]</span>，都有 <span
class="math display">\[\textit{dp}[i][i]=\textit{nums}[i]\]</span>。</p>
<p>当 <span class="math display">\[i&lt;j\]</span> 时，当前玩家可以选择
<span class="math display">\[\textit{nums}[i]\]</span> 或 <span
class="math display">\[\textit{nums}[j]\]</span>，然后轮到另一个玩家在数组剩下的部分选取数字。在两种方案中，当前玩家会选择最优的方案，使得自己的分数最大化。因此可以得到如下状态转移方程：</p>
<p><span class="math display">\[\textit{dp}[i][j]=\max(\textit{nums}[i]
- \textit{dp}[i + 1][j], \textit{nums}[j] - \textit{dp}[i][j -
1])\]</span></p>
<p>最后判断 <span
class="math display">\[\textit{dp}[0][\textit{nums}.\text{length}-1]\]</span>
的值，如果大于或等于
0，则先手得分大于或等于后手得分，因此先手成为赢家，否则后手成为赢家。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PredictTheWinner_solution_2</span>(<span class="params">self, nums</span>):</span><br><span class="line">	length = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [[<span class="number">0</span>] * length <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        dp[i][i] = num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length):</span><br><span class="line">        	dp[i][j] = <span class="built_in">max</span>(nums[i] - dp[i + <span class="number">1</span>][j], nums[j] - dp[i][j - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][length - <span class="number">1</span>] &gt;= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>上述代码中使用了二维数组 <span
class="math display">\[\textit{dp}\]</span>。分析状态转移方程可以看到，<span
class="math display">\[\textit{dp}[i][j]\]</span> 的值只和 <span
class="math display">\[\textit{dp}[i + 1][j]\]</span> 与 <span
class="math display">\[\textit{dp}[i][j - 1]\]</span> 有关，即在计算
<span class="math display">\[\textit{dp}\]</span> 的第 i
行的值时，只需要使用到 <span class="math display">\[\textit{dp}\]</span>
的第 i 行和第 i+1
行的值，因此可以使用一维数组代替二维数组，对空间进行优化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PredictTheWinner_solution_2_1</span>(<span class="params">self, nums</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [<span class="number">0</span>] * length</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        dp[i] = num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, length):</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(nums[i] - dp[j], nums[j] - dp[j - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> dp[length - <span class="number">1</span>] &gt;= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n^2)\]</span>，其中 n
是数组的长度。需要计算每个子数组对应的 <span
class="math display">\[\textit{dp}\]</span> 的值，共有 <span
class="math display">\[\frac{n(n+1)}{2} \]</span>个子数组。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是数组的长度。空间复杂度取决于额外创建的数组 <span
class="math display">\[\textit{dp}\]</span>，如果不优化空间，则空间复杂度是
<span
class="math display">\[O(n^2)\]</span>，使用一维数组优化之后空间复杂度可以降至
<span class="math display">\[O(n)\]</span>。</p></li>
</ul>
<p>for 循环使用 enumerate：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="built_in">print</span> i, element</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">0</span> one</span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br></pre></td></tr></table></figure>
<h2 id="拓展练习">拓展练习</h2>
<p>读者在做完这道题之后，可以做另一道类似的题：「877.
石子游戏」。和这道题相比，<a
href="https://leetcode-cn.com/problems/stone-game/">第 877
题</a>增加了两个限制条件：</p>
<ul>
<li><p>数组的长度是偶数；</p></li>
<li><p>数组的元素之和是奇数，所以没有平局。</p></li>
</ul>
<p>对于第 877
题，除了使用这道题的解法以外，能否利用上述两个限制条件进行求解？</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer20 表示数值的字符串-确定有限状态自动机</title>
    <url>/2020/09/02/2020-09-02-JZOffer20-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="表示数值的字符串"><a
href="https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">表示数值的字符串</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100"、"5e2"、"-123"、"3.1416"、"-1E-16"、"0123"都表示数值，但"12e"、"1a3.14"、"1.2.3"、"+-5"及"12e+5.4"都不是。</p>
</blockquote>
<h3 id="approach-1-确定有限状态自动机">Approach 1:
确定有限状态自动机</h3>
<p>确定有限状态自动机（以下简称「自动机」）是一类计算模型。它包含一系列状态，这些状态中：</p>
<p>有一个特殊的状态，被称作「初始状态」。
还有一系列状态被称为「接受状态」，它们组成了一个特殊的集合。其中，一个状态可能既是「初始状态」，也是「接受状态」。
起初，这个自动机处于「初始状态」。随后，它顺序地读取字符串中的每一个字符，并根据当前状态和读入的字符，按照某个事先约定好的「转移规则」，从当前状态转移到下一个状态；当状态转移完成后，它就读取下一个字符。当字符串全部读取完毕后，如果自动机处于某个「接受状态」，则判定该字符串「被接受」；否则，判定该字符串「被拒绝」。</p>
<p><strong>注意：</strong>如果输入的过程中某一步转移失败了，即不存在对应的「转移规则」，此时计算将提前中止。在这种情况下我们也判定该字符串「被拒绝」。</p>
<p>一个自动机，总能够回答某种形式的「对于给定的输入字符串
S，判断其是否满足条件 P」的问题。在本题中，条件 P
即为「构成合法的表示数值的字符串」。</p>
<p>自动机驱动的编程，可以被看做一种暴力枚举方法的延伸：它穷尽了在任何一种情况下，对应任何的输入，需要做的事情。</p>
<p>自动机在计算机科学领域有着广泛的应用。在算法领域，它与大名鼎鼎的字符串查找算法「KMP」算法有着密切的关联；在工程领域，它是实现「正则表达式」的基础。</p>
<p>在 C++ 文档
中，描述了一个合法的数值字符串应当具有的格式。具体而言，它包含以下部分：</p>
<ul>
<li>符号位，即 ++、-− 两种符号</li>
<li>整数部分，即由若干字符 0-90−9 组成的字符串</li>
<li>小数点</li>
<li>小数部分，其构成与整数部分相同</li>
<li>指数部分，其中包含开头的字符
e（大写小写均可）、可选的符号位，和整数部分</li>
</ul>
<p>相比于 C++
文档而言，本题还有一点额外的不同，即允许字符串首末两端有一些额外的空格。</p>
<p>在上面描述的五个部分中，每个部分都不是必需的，但也受一些额外规则的制约，如：</p>
<ul>
<li>如果符号位存在，其后面必须跟着数字或小数点。</li>
<li>小数点的前后两侧，至少有一侧是数字。</li>
</ul>
<h3 id="思路与算法">思路与算法</h3>
<p>根据上面的描述，现在可以定义自动机的「状态集合」了。那么怎么挖掘出所有可能的状态呢？一个常用的技巧是，用「当前处理到字符串的哪个部分」当作状态的表述。根据这一技巧，不难挖掘出所有状态：</p>
<ul>
<li>起始的空格</li>
<li>符号位</li>
<li>整数部分</li>
<li>左侧有整数的小数点</li>
<li>左侧无整数的小数点（根据前面的第二条额外规则，需要对左侧有无整数的两种小数点做区分）</li>
<li>小数部分</li>
<li>字符 <span class="math display">\[\text{e}\]</span></li>
<li>指数部分的符号位</li>
<li>指数部分的整数部分</li>
<li>末尾的空格</li>
</ul>
<p>下一步是找出「初始状态」和「接受状态」的集合。根据题意，「初始状态」应当为状态
1，而「接受状态」的集合则为状态 3、状态 4、状态 6、状态 9 以及状态
10。换言之，字符串的末尾要么是空格，要么是数字，要么是小数点，但前提是小数点的前面有数字。</p>
<p>最后，需要定义「转移规则」。结合数值字符串应当具备的格式，将自动机转移的过程以图解的方式表示出来：</p>
<p>比较上图与「预备知识」一节中对自动机的描述，可以看出有一点不同：</p>
<ul>
<li>我们没有单独地考虑每种字符，而是划分为若干类。由于全部 1010
个数字字符彼此之间都等价，因此只需定义一种统一的「数字」类型即可。对于正负号也是同理。</li>
</ul>
<p>在实际代码中，我们需要处理转移失败的情况。例如当位于状态
1（起始空格）时，没有对应字符 <span
class="math display">\[\text{e}\]</span>
的状态。为了处理这种情况，我们可以创建一个特殊的拒绝状态。如果当前状态下没有对应读入字符的「转移规则」，我们就转移到这个特殊的拒绝状态。一旦自动机转移到这个特殊状态，我们就可以立即判定该字符串不「被接受」。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isNumber</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        State = Enum(<span class="string">&quot;State&quot;</span>, [</span><br><span class="line">            <span class="string">&quot;STATE_INITIAL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_INT_SIGN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_INTEGER&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_POINT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_POINT_WITHOUT_INT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_FRACTION&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_EXP&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_EXP_SIGN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_EXP_NUMBER&quot;</span>,</span><br><span class="line">            <span class="string">&quot;STATE_END&quot;</span>,</span><br><span class="line">        ])</span><br><span class="line">        Chartype = Enum(<span class="string">&quot;Chartype&quot;</span>, [</span><br><span class="line">            <span class="string">&quot;CHAR_NUMBER&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CHAR_EXP&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CHAR_POINT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CHAR_SIGN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CHAR_SPACE&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CHAR_ILLEGAL&quot;</span>,</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">toChartype</span>(<span class="params">ch: <span class="built_in">str</span></span>) -&gt; Chartype:</span><br><span class="line">            <span class="keyword">if</span> ch.isdigit(): <span class="comment"># 检测字符串是否只由数字组成</span></span><br><span class="line">                <span class="keyword">return</span> Chartype.CHAR_NUMBER</span><br><span class="line">            <span class="keyword">elif</span> ch.lower() == <span class="string">&quot;e&quot;</span>: <span class="comment"># 字符串转换大写为小写</span></span><br><span class="line">               	<span class="keyword">return</span> Chartype.CHAR_EXP</span><br><span class="line">            <span class="keyword">elif</span> ch == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Chartype.CHAR_POINT</span><br><span class="line">            <span class="keyword">elif</span> ch == <span class="string">&quot;+&quot;</span> <span class="keyword">or</span> ch == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Chartype.CHAR_SIGN</span><br><span class="line">            <span class="keyword">elif</span> ch == <span class="string">&quot; &quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Chartype.CHAR_SPACE</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Chartype.CHAR_ILLEGAL</span><br><span class="line"></span><br><span class="line">        transfer = &#123;</span><br><span class="line">            State.STATE_INITIAL: &#123;</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_INITIAL,</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_INTEGER,</span><br><span class="line">                Chartype.CHAR_POINT: State.STATE_POINT_WITHOUT_INT,</span><br><span class="line">                Chartype.CHAR_SIGN: State.STATE_INT_SIGN,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_INT_SIGN: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_INTEGER,</span><br><span class="line">                Chartype.CHAR_POINT: State.STATE_POINT_WITHOUT_INT,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_INTEGER: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_INTEGER,</span><br><span class="line">                Chartype.CHAR_EXP: State.STATE_EXP,</span><br><span class="line">                Chartype.CHAR_POINT: State.STATE_POINT,</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_END,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_POINT: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_FRACTION,</span><br><span class="line">                Chartype.CHAR_EXP: State.STATE_EXP,</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_END,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_POINT_WITHOUT_INT: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_FRACTION,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_FRACTION: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_FRACTION,</span><br><span class="line">                Chartype.CHAR_EXP: State.STATE_EXP,</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_END,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_EXP: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_EXP_NUMBER,</span><br><span class="line">                Chartype.CHAR_SIGN: State.STATE_EXP_SIGN,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_EXP_SIGN: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_EXP_NUMBER,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_EXP_NUMBER: &#123;</span><br><span class="line">                Chartype.CHAR_NUMBER: State.STATE_EXP_NUMBER,</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_END,</span><br><span class="line">            &#125;,</span><br><span class="line">            State.STATE_END: &#123;</span><br><span class="line">                Chartype.CHAR_SPACE: State.STATE_END,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        st = State.STATE_INITIAL</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            typ = toChartype(ch)</span><br><span class="line">            <span class="keyword">if</span> typ <span class="keyword">not</span> <span class="keyword">in</span> transfer[st]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            st = transfer[st][typ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> st <span class="keyword">in</span> [State.STATE_INTEGER, State.STATE_POINT, State.STATE_FRACTION, State.STATE_EXP_NUMBER,</span><br><span class="line">                      State.STATE_END]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&quot;0&quot;</span></span><br><span class="line">    solution=Solution().isNumber(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li>时间复杂度：O(N)，其中 N
为字符串的长度。我们需要遍历字符串的每个字符，其中状态转移所需的时间复杂度为
O(1)。</li>
<li>空间复杂度：O(1)。只需要创建固定大小的状态转移表。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q51 N皇后-困难-排列枚举</title>
    <url>/2020/09/03/2020-09-03-Q51-N%E7%9A%87%E5%90%8E-%E5%9B%B0%E9%9A%BE-%E6%8E%92%E5%88%97%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h1 id="n皇后"><a
href="https://leetcode-cn.com/problems/n-queens/">N皇后</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p><em>n</em> 皇后问题研究的是如何将 <em>n</em> 个皇后放置在
<em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p>
<p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和
'.' 分别代表了皇后和空位。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：4 输出：[ [".Q..", // 解法 1 "...Q", "Q...", "..Q."],</p>
<p>["..Q.", // 解法 2 "Q...", "...Q", ".Q.."] ] 解释: 4
皇后问题存在两个不同的解法。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<p>皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</p>
</blockquote>
<h3 id="前言">前言</h3>
<p>「N 皇后问题」研究的是如何将 N 个皇后放置在 N×N
的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p>皇后的走法是：可以横直斜走，格数不限。因此要求皇后彼此之间不能相互攻击，等价于要求任何两个皇后都不能在同一行、同一列以及同一条斜线上。</p>
<p>直观的做法是暴力枚举将 NN 个皇后放置在 N NN×N
的棋盘上的所有可能的情况，并对每一种情况判断是否满足皇后彼此之间不相互攻击。暴力枚举的时间复杂度是非常高的，因此必须利用限制条件加以优化。</p>
<p>显然，每个皇后必须位于不同行和不同列，因此将 N 个皇后放置在 N×N
的棋盘上，一定是每一行有且仅有一个皇后，每一列有且仅有一个皇后，且任何两个皇后都不能在同一条斜线上。基于上述发现，可以通过回溯的方式寻找可能的解。</p>
<p>回溯的具体做法是：使用一个数组记录每行放置的皇后的列下标，依次在每一行放置一个皇后。每次新放置的皇后都不能和已经放置的皇后之间有攻击：即新放置的皇后不能和任何一个已经放置的皇后在同一列以及同一条斜线上，并更新数组中的当前行的皇后列下标。当
NN
个皇后都放置完毕，则找到一个可能的解。当找到一个可能的解之后，将数组转换成表示棋盘状态的列表，并将该棋盘状态的列表加入返回列表。</p>
<p>由于每个皇后必须位于不同列，因此已经放置的皇后所在的列不能放置别的皇后。第一个皇后有
N 列可以选择，第二个皇后最多有 N−1 列可以选择，第三个皇后最多有 N−2
列可以选择（如果考虑到不能在同一条斜线上，可能的选择数量更少），因此所有可能的情况不会超过
N! 种，遍历这些情况的时间复杂度是 O(N!)。</p>
<p>为了降低总时间复杂度，每次放置皇后时需要快速判断每个位置是否可以放置皇后，显然，最理想的情况是在
O(1) 的时间内判断该位置所在的列和两条斜线上是否已经有皇后。</p>
<p>以下两种方法分别使用集合和位运算对皇后的放置位置进行判断，都可以在
O(1) 的时间内判断一个位置是否可以放置皇后，算法的总时间复杂度都是
O(N!)。</p>
<h3 id="approach-1-基于集合的回溯">Approach 1: 基于集合的回溯</h3>
<p>为了判断一个位置所在的列和两条斜线上是否已经有皇后，使用三个集合
<span class="math display">\[columns\]</span>、<span
class="math display">\[\textit{diagonals}_1\]</span>和 <span
class="math display">\[\textit{diagonals}_2
\]</span>分别记录每一列以及两个方向的每条斜线上是否有皇后。</p>
<p>列的表示法很直观，一共有 N 列，每一列的下标范围从 0 到
N−1，使用列的下标即可明确表示每一列。</p>
<p>如何表示两个方向的斜线呢？对于每个方向的斜线，需要找到斜线上的每个位置的行下标与列下标之间的关系。</p>
<p>方向一的斜线为从左上到右下方向，同一条斜线上的每个位置满足<strong>行下标与列下标之差相等</strong>，例如
(0,0)和(3,3)
在同一条方向一的斜线上。因此使用行下标与列下标之差即可明确表示每一条方向一的斜线。</p>
<p>方向二的斜线为从右上到左下方向，同一条斜线上的每个位置满足<strong>行下标与列下标之和相等</strong>，例如
(3,0) 和 (1,2)
在同一条方向二的斜线上。因此使用行下标与列下标之和即可明确表示每一条方向二的斜线。</p>
<p>每次放置皇后时，对于每个位置判断其是否在三个集合中，如果三个集合都不包含当前位置，则当前位置是可以放置皇后的位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens1</span>(<span class="params">self, n</span>) :</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generateBoard</span>():</span><br><span class="line">            board = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                row[queens[i]] = <span class="string">&quot;Q&quot;</span></span><br><span class="line">                board.append(<span class="string">&quot;&quot;</span>.join(row)) <span class="comment"># join 连接字符串</span></span><br><span class="line">                row[queens[i]] = <span class="string">&quot;.&quot;</span></span><br><span class="line">            <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">row: <span class="built_in">int</span></span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                board = generateBoard()</span><br><span class="line">                solutions.append(board)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> columns <span class="keyword">or</span> row - i <span class="keyword">in</span> diagonal1 <span class="keyword">or</span> row + i <span class="keyword">in</span> diagonal2:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    queens[row] = i</span><br><span class="line">                    columns.add(i)</span><br><span class="line">                    diagonal1.add(row - i)</span><br><span class="line">                    diagonal2.add(row + i)</span><br><span class="line">                    backtrack(row + <span class="number">1</span>)</span><br><span class="line">                    columns.remove(i)</span><br><span class="line">                    diagonal1.remove(row - i)</span><br><span class="line">                    diagonal2.remove(row + i)</span><br><span class="line">                    </span><br><span class="line">        solutions = <span class="built_in">list</span>()</span><br><span class="line">        queens = [-<span class="number">1</span>] * n</span><br><span class="line">        columns = <span class="built_in">set</span>()</span><br><span class="line">        diagonal1 = <span class="built_in">set</span>()</span><br><span class="line">        diagonal2 = <span class="built_in">set</span>()</span><br><span class="line">        row = [<span class="string">&quot;.&quot;</span>] * n</span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> solutions</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="number">6</span></span><br><span class="line">    solution=Solution().solveNQueens1(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：O(N!)，其中 N 是皇后数量</p></li>
<li><p>空间复杂度：O(N)，其中 N
是皇后数量。空间复杂度主要取决于递归调用层数、记录每行放置的皇后的列下标的数组以及三个集合，递归调用层数不会超过
N，数组的长度为 N，每个集合的元素个数都不会超过 N。</p></li>
</ul>
<h3 id="approach-2-基于位运算的回溯">Approach 2: 基于位运算的回溯</h3>
<p>方法一使用三个集合记录分别记录每一列以及两个方向的每条斜线上是否有皇后，每个集合最多包含
N 个元素，因此集合的空间复杂度是
O(N)。如果利用位运算记录皇后的信息，就可以将记录皇后信息的空间复杂度从
O(N) 降到 O(1)。</p>
<p>具体做法是，使用三个整数 <span
class="math display">\[\textit{columns}\]</span>、<span
class="math display">\[\textit{diagonals}_1\]</span> 和 <span
class="math display">\[\textit{diagonals}_2\]</span>分别记录每一列以及两个方向的每条斜线上是否有皇后，每个整数有
N
个二进制位。棋盘的每一列对应每个整数的二进制表示中的一个数位，其中棋盘的最左列对应每个整数的最低二进制位，最右列对应每个整数的最高二进制位。</p>
<p>那么如何根据每次放置的皇后更新三个整数的值呢？在说具体的计算方法之前，首先说一个例子。</p>
<p>棋盘的边长和皇后的数量
N=8。如果棋盘的前两行分别在（0,2）和（1,4）放置了皇后（下标从 0
开始），则棋盘的前两行如下图所示。</p>
<p>如果要在下一行放置皇后，哪些位置不能放置呢？我们用 0
代表可以放置皇后的位置，1 代表不能放置皇后的位置。</p>
<p>新放置的皇后不能和任何一个已经放置的皇后在同一列，因此不能放置在第 2
列和第 4 列，对应 <span
class="math display">\[\textit{columns}=00010100_{(2)}\]</span> 。</p>
<p>新放置的皇后不能和任何一个已经放置的皇后在同一条方向一（从左上到右下方向）的斜线上，因此不能放置在第
4 列和第 5 列，对应 <span
class="math display">\[\textit{diagonals}_1=00110000_{(2)}\]</span>。其中，第
4 列为其前两行的第 2 列的皇后往右下移动两步的位置，第 5 列为其前一行的第
4 列的皇后往右下移动一步的位置。</p>
<p>新放置的皇后不能和任何一个已经放置的皇后在同一条方向二（从右上到左下方向）的斜线上，因此不能放置在第
0 列和第 3 列，对应 <span
class="math display">\[\textit{diagonals}_2=00001001_{(2)}\]</span>。其中，第
0 列为其前两行的第 2 列的皇后往左下移动两步的位置，第 3 列为其前一行的第
4 列的皇后往左下移动一步的位置。</p>
<p>由此可以得到三个整数的计算方法：</p>
<ul>
<li>初始时，三个整数的值都等于 0，表示没有放置任何皇后；</li>
<li>在当前行放置皇后，如果皇后放置在第 i 列，则将三个整数的第 i
个二进制位（指从低到高的第 i 个二进制位）的值设为 1;</li>
<li>进入下一行时，<span class="math display">\[\textit{columns}\]</span>
的值保持不变，<span class="math display">\[\textit{diagonals}_1\]</span>
左移一位，<span class="math display">\[\textit{diagonals}_2\]</span>
右移一位，由于棋盘的最左列对应每个整数的最低二进制位，即每个整数的最右二进制位，因此对整数的移位操作方向和对棋盘的移位操作方向相反（对棋盘的移位操作方向是
<span
class="math display">\[\textit{diagonals}_1\]</span>右移一位，<span
class="math display">\[\textit{diagonals}_2\]</span>左移一位）。</li>
</ul>
<p>每次放置皇后时，三个整数的按位或运算的结果即为不能放置皇后的位置，其余位置即为可以放置皇后的位置。可以通过
<span class="math display">\[(2^n-1)~\&amp;~(\sim(\textit{columns} |
\textit{diagonals}_1 |
\textit{diagonals}_2))\]</span>得到可以放置皇后的位置（该结果的值为 1
的位置表示可以放置皇后的位置），然后遍历这些位置，尝试放置皇后并得到可能的解。</p>
<p>遍历可以放置皇后的位置时，可以利用以下两个按位与运算的性质：</p>
<ul>
<li><p><span class="math display">\[x~\&amp;~(-x)\]</span>可以获得 x
的二进制表示中的最低位的 1 的位置；</p></li>
<li><p><span class="math display">\[x~\&amp;~(x-1)\]</span> 可以将 x
的二进制表示中的最低位的 1 置成 0。</p></li>
</ul>
<p>具体做法是，每次获得可以放置皇后的位置中的最低位，并将该位的值置成
0，尝试在该位置放置皇后。这样即可遍历每个可以放置皇后的位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens2</span>(<span class="params">self, n</span>) :</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generateBoard</span>():</span><br><span class="line">            board = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                row[queens[i]] = <span class="string">&quot;Q&quot;</span></span><br><span class="line">                board.append(<span class="string">&quot;&quot;</span>.join(row))</span><br><span class="line">                row[queens[i]] = <span class="string">&quot;.&quot;</span></span><br><span class="line">            <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">row: <span class="built_in">int</span>, columns: <span class="built_in">int</span>, diagonals1: <span class="built_in">int</span>, diagonals2: <span class="built_in">int</span></span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                board = generateBoard()</span><br><span class="line">                solutions.append(board)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                availablePositions = ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>) &amp; (~(columns | diagonals1 | diagonals2))</span><br><span class="line">                <span class="keyword">while</span> availablePositions:</span><br><span class="line">                    position = availablePositions &amp; (-availablePositions)</span><br><span class="line">                    availablePositions = availablePositions &amp; (availablePositions - <span class="number">1</span>)</span><br><span class="line">                    column = <span class="built_in">bin</span>(position - <span class="number">1</span>).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    queens[row] = column</span><br><span class="line">                    solve(row + <span class="number">1</span>, columns | position, (diagonals1 | position) &lt;&lt; <span class="number">1</span>, (diagonals2 | position) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        solutions = <span class="built_in">list</span>()</span><br><span class="line">        queens = [-<span class="number">1</span>] * n</span><br><span class="line">        row = [<span class="string">&quot;.&quot;</span>] * n</span><br><span class="line">        solve(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> solutions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="number">6</span></span><br><span class="line">    solution=Solution().solveNQueens2(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1">复杂度分析</h3>
<ul>
<li><p>时间复杂度：O(N!)，其中 N 是皇后数量。</p></li>
<li><p>空间复杂度：O(N)，其中 N
是皇后数量。由于使用位运算表示，因此存储皇后信息的空间复杂度是
O(1)，空间复杂度主要取决于递归调用层数和记录每行放置的皇后的列下标的数组，递归调用层数不会超过
N，数组的长度为 N。</p></li>
</ul>
<h3 id="小结">小结</h3>
<p>回顾这道题，拿到这道题的时候，其实我们很容易看出需要使用枚举的方法来求解这个问题，当我们不知道用什么办法来枚举是最优的时候，可以从下面三个方向考虑：</p>
<ul>
<li><p>子集枚举：可以把问题转化成「从 <span
class="math display">\[n^2\]</span>个格子中选一个子集，使得子集中恰好有
n 个格子，且任意选出两个都不在同行、同列或者同对角线」，这里枚举的规模是
<span class="math display">\[2^{n^2}\]</span>;</p></li>
<li><p>组合枚举：可以把问题转化成「从 <span
class="math display">\[n^2\]</span> 个格子中选择 n
个，且任意选出两个都不在同行、同列或者同对角线」，这里的枚举规模是 <span
class="math display">\[{n^2} \choose {n}\]</span>;</p></li>
<li><p>排列枚举：因为这里每行只能放置一个皇后，而所有行中皇后的列号正好构成一个
1 到 n 的排列，所以我们可以把问题转化为一个排列枚举，规模是
n!。</p></li>
</ul>
<p>带入一些 n
进这三种方法验证，就可以知道哪种方法的枚举规模是最小的，这里我们发现第三种方法的枚举规模最小。这道题给出的两个方法其实和排列枚举的本质是类似的。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hard</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>Q257 Binary Tree Paths-简单-深度/广度优先搜索</title>
    <url>/2020/09/04/2020-09-04-Q257%20Binary%20Tree%20Paths-%E7%AE%80%E5%8D%95-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="binary-tree-paths"><a
href="https://leetcode-cn.com/problems/binary-tree-paths/">Binary Tree
Paths</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a binary tree, return all root-to-leaf paths.</p>
<p>Note: A leaf is a node with no children.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input:</p>
<pre><code>1</code></pre>
<p>/<br />
2 3<br />
5</p>
<p>Output: ["1-&gt;2-&gt;5", "1-&gt;3"]</p>
<p>Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3</p>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>最直观的方法是使用深度优先搜索。在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。</p>
<p>如果当前节点不是叶子节点，则在当前的路径末尾添加该节点，并继续递归遍历该节点的每一个叶子节点。
如果当前节点是叶子节点，则在当前路径末尾添加该节点后我们就得到了一条从根节点到叶子节点的路径，将该路径加入到答案即可。
如此，当遍历完整棵二叉树以后我们就得到了所有从根节点到叶子节点的路径。当然，深度优先搜索也可以使用非递归的方式实现，这里不再赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">binaryTreePaths</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">construct_paths</span>(<span class="params">root, path</span>):</span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                path += <span class="built_in">str</span>(root.val)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:  <span class="comment"># 当前节点是叶子节点</span></span><br><span class="line">                    paths.append(path)  <span class="comment"># 把路径加入到答案中</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path += <span class="string">&#x27;-&gt;&#x27;</span>  <span class="comment"># 当前节点不是叶子节点，继续递归遍历</span></span><br><span class="line">                    construct_paths(root.left, path)</span><br><span class="line">                    construct_paths(root.right, path)</span><br><span class="line"></span><br><span class="line">        paths = []</span><br><span class="line">        construct_paths(root, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(N^2)\]</span>，其中 N
表示节点数目。在深度优先搜索中每个节点会被访问一次且只会被访问一次，每一次会对
path 变量进行拷贝构造，时间代价为 O(N)，故时间复杂度为 <span
class="math display">\[ O(N^2)\]</span>。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(N^2)\]</span>，其中 N
表示节点数目。除答案数组外我们需要考虑递归调用的栈空间。在最坏情况下，当二叉树中每个节点只有一个孩子节点时，即整棵二叉树呈一个链状，此时递归的层数为
N，此时每一层的 path 变量的空间代价的总和为 <span
class="math display">\[O(\sum_{i = 1}^{N} i) = O(N^2)\]</span>
空间复杂度为 <span
class="math display">\[O(N^2)\]</span>。最好情况下，当二叉树为平衡二叉树时，它的高度为
<span class="math display">\[\log N\]</span>，此时空间复杂度为 <span
class="math display">\[O((\log {N})^2)\]</span>。</p></li>
<li><p><strong>平衡二叉树</strong>（Balanced Binary
Tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一
棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p></li>
</ul>
<h3 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h3>
<p>我们也可以用广度优先搜索来实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是叶子节点，则将它对应的路径加入到答案中。如果它不是叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时广度优先搜索结束，我们即能得到答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">binaryTreePaths</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        paths = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> paths</span><br><span class="line"></span><br><span class="line">        node_queue = collections.deque([root])</span><br><span class="line">        path_queue = collections.deque([<span class="built_in">str</span>(root.val)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> node_queue:</span><br><span class="line">            node = node_queue.popleft()</span><br><span class="line">            path = path_queue.popleft()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                paths.append(path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    node_queue.append(node.left)</span><br><span class="line">                    path_queue.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + <span class="built_in">str</span>(node.left.val))</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    node_queue.append(node.right)</span><br><span class="line">                    path_queue.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + <span class="built_in">str</span>(node.right.val))</span><br><span class="line">        <span class="keyword">return</span> paths</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1">复杂度分析</h3>
<ul>
<li>时间复杂度：<span class="math display">\[O(N^2)\]</span>，其中 N
表示节点数目。分析同方法一。</li>
<li>空间复杂度：<span class="math display">\[O(N^2)\]</span>，其中 N
表示节点数目。在最坏情况下，队列中会存在 N
个节点，保存字符串的队列中每个节点的最大长度为 N，故空间复杂度为 <span
class="math display">\[O(N^2)\]</span></li>
</ul>
<h3 id="section"></h3>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Q60 Permutation Sequence-中等</title>
    <url>/2020/09/05/2020-09-05-Q60%20Permutation%20Sequence-%E4%B8%AD%E7%AD%89/</url>
    <content><![CDATA[<h1 id="permutation-sequence"><a
href="https://leetcode-cn.com/problems/permutation-sequence/">Permutation
Sequence</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>The set [1,2,3,...,n] contains a total of n! unique permutations.</p>
<p>By listing and labeling all of the permutations in order, we get the
following sequence for n = 3:</p>
<p>"123" "132" "213" "231" "312" "321" Given n and k, return the kth
permutation sequence.</p>
<p><strong>Note:</strong></p>
<p>Given n will be between 1 and 9 inclusive. Given k will be between 1
and n! inclusive.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: n = 3, k = 3 Output: "213"</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: n = 4, k = 9 Output: "2314"</p>
</blockquote>
<h3 id="approach-1-缩小问题规模">Approach 1: 缩小问题规模</h3>
<p>要想解决本题，首先需要了解一个简单的结论：</p>
<blockquote>
<p>对于 n 个不同的元素（例如数 1, 2, <span
class="math display">\[\cdots\]</span>, n），它们可以组成的排列总数目为
n!。</p>
</blockquote>
<p>对于给定的 n 和 k，我们不妨从左往右确定第 k
个排列中的每一个位置上的元素到底是什么。</p>
<p>我们首先确定排列中的首个元素 <span
class="math display">\[a_1\]</span> 。根据上述的结论，我们可以知道：</p>
<ul>
<li><p>以 1 为 <span class="math display">\[a_1\]</span> 的排列一共有
<span class="math display">\[(n-1)!\]</span> 个；</p></li>
<li><p>以 2 为 <span class="math display">\[a_1\]</span>的排列一共有
<span class="math display">\[(n-1)!\]</span> 个；</p></li>
<li><p>以 n 为 <span class="math display">\[a_1\]</span> 的排列一共有
<span class="math display">\[(n-1)!\]</span> 个。</p></li>
</ul>
<p>由于我们需要求出从小到大的第 k 个排列，因此：</p>
<ul>
<li>如果 <span class="math display">\[k \leq
(n-1)!\]</span>，我们就可以确定排列的首个元素为 1；</li>
<li>如果 <span class="math display">\[(n-1)! &lt; k \leq 2 \cdot
(n-1)!\]</span>，我们就可以确定排列的首个元素为 2；</li>
<li>如果 <span class="math display">\[(n-1) \cdot (n-1)! &lt; k \leq n
\cdot (n-1)!\]</span>，我们就可以确定排列的首个元素为 n。 因此，第 k
个排列的首个元素就是：</li>
</ul>
<p><span class="math display">\[
a_1=\frac{k−1}{(n−1)!}+1
\]</span></p>
<p>当我们确定了 <span class="math display">\[a_1\]</span>
后，如何使用相似的思路，确定下一个元素 <span
class="math display">\[a_2\]</span> 呢？实际上，我们考虑以 <span
class="math display">\[a_1\]</span> 为首个元素的所有排列：</p>
<ul>
<li>以 <span class="math display">\[[1,n] \backslash
a_1\]</span>最小的元素为 <span class="math display">\[a_2\]</span>
的排列一共有 <span class="math display">\[(n-2)!\]</span>个；</li>
<li>以 <span class="math display">\[[1,n] \backslash a_1\]</span>
次小的元素为 <span class="math display">\[a_2\]</span>的排列一共有 <span
class="math display">\[(n-2)!\]</span>个；</li>
<li>以 <span class="math display">\[[1,n] \backslash
a_1\]</span>最大的元素为 <span
class="math display">\[a_2\]</span>的排列一共有 <span
class="math display">\[(n-2)!\]</span> 个；</li>
</ul>
<p>其中 <span class="math display">\[[1,n] \backslash
a_1\]</span>表示包含 <span class="math display">\[1, 2, \cdots
n\]</span>中除去 <span
class="math display">\[a_1\]</span>以外元素的集合。这些排列从编号 <span
class="math display">\[(a_1-1) \cdot (n-1)!\]</span>开始，到 <span
class="math display">\[a_1 \cdot (n-1)!\]</span>结束，总计 <span
class="math display">\[(n-1)!\]</span>个，因此第 k
个排列实际上就对应着这其中的第 <span class="math display">\[
k&#39; = (k-1) \bmod (n-1)! + 1
\]</span> 个排列。这样一来，我们就把原问题转化成了一个完全相同但规模减少
1 的子问题：</p>
<p>求 <span class="math display">\[[1, n] \backslash a_1\]</span>这 n-1
个元素组成的排列中，第 <span class="math display">\[k&#39;\]</span>
小的排列。</p>
<h4 id="算法">算法</h4>
<p>设第 k 个排列为 <span class="math display">\[a_1, a_2, \cdots,
a_n\]</span>，我们从左往右地确定每一个元素 <span
class="math display">\[a_i\]</span>。我们用数组 <span
class="math display">\[\textit{valid}\]</span>记录每一个元素是否被使用过。</p>
<p>我们从小到大枚举 i：</p>
<ul>
<li><p>我们已经使用过了 i-1 个元素，剩余 n-i+1
个元素未使用过，每一个元素作为 a_i 都对应着 (n-i)!个排列，总计 (n-i+1)!
个排列；</p></li>
<li><p>因此在第 k 个排列中，<span class="math display">\[a_i\]</span>
即为剩余未使用过的元素中第 <span class="math display">\[\lfloor
\frac{k-1}{(n-i)!}\rfloor + 1\]</span>小的元素；</p></li>
<li><p>在确定了 <span class="math display">\[a_i\]</span>后，这 <span
class="math display">\[n-i+1\]</span> 个元素的第 k 个排列，就等于 <span
class="math display">\[a_i\]</span>之后跟着剩余 n-i 个元素的第 <span
class="math display">\[(k-1) \bmod (n-i)! + 1\]</span>个排列。</p></li>
</ul>
<p>在实际的代码中，我们可以首先将 k 的值减少
1，这样可以减少运算，降低代码出错的概率。对应上述的后两步，即为：</p>
<ul>
<li><p>因此在第 k 个排列中，<span
class="math display">\[a_i\]</span>即为剩余未使用过的元素中第 <span
class="math display">\[\lfloor \frac{k}{(n-i)!} \rfloor +
1\]</span>小的元素；</p></li>
<li><p>在确定了 <span class="math display">\[a_i\]</span> 后，这 n-i+1
个元素的第 k 个排列，就等于 <span class="math display">\[a_i\]</span>
之后跟着剩余 n-i个元素的第 <span class="math display">\[k \bmod
(n-i)!\]</span>个排列。</p></li>
</ul>
<p>实际上，这相当于我们将所有的排列从 0 开始进行编号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPermutation</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        factorial = [<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            factorial.append(factorial[-<span class="number">1</span>] * i)</span><br><span class="line">        </span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        valid = [<span class="number">1</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            order = k // factorial[n - i] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                order -= valid[j]</span><br><span class="line">                <span class="keyword">if</span> order == <span class="number">0</span>:</span><br><span class="line">                    ans.append(<span class="built_in">str</span>(j))</span><br><span class="line">                    valid[j] = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            k %= factorial[n - i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(ans)</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(n^2)\]</span>。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(n)\]</span>。</p></li>
</ul>
<h3 id="思考题">思考题</h3>
<p>对于给定的排列 <span class="math display">\[a_1, a_2, \cdots,
a_n\]</span> ，你能求出 k 吗？</p>
<p>解答： <span class="math display">\[
k = \left( \sum_{i=1}^n \textit{order}(a_i) \cdot (n-i)! \right) + 1
\]</span> 其中 <span
class="math display">\[\textit{order}(a_i)\]</span>表示 <span
class="math display">\[a_{i+1}, \cdots, a_n\]</span>中小于 <span
class="math display">\[a_i\]</span>的元素个数。</p>
<h3 id="反思">反思</h3>
<p>我在分析这个问题的时候只考虑到了第一项怎么确定，然后就用递归来求解问题，中间忽略了n和k的取值特例。分析不够完备，代码看着比较乱，可读性不强。今后分析的时候还是要把问题分析完整了再编代码，比如推出这道题的通项公式后再写代码。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>ImportError: cannot import name &#39;Optional&#39;</title>
    <url>/2020/09/07/2020-09-07-ImportError%20cannot%20import%20name%20&#39;Optional&#39;/</url>
    <content><![CDATA[<h1 id="importerror-cannot-import-name-optional">ImportError: cannot
import name 'Optional'</h1>
<p>遇到报错：ImportError: cannot import name 'Optional'</p>
<p>已安装所需的库，经查是由于torchvision和pytorch版本不对应导致的。具体对应版本号见<a
href="https://github.com/pytorch/vision">下图</a></p>
<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 30%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><code>torch</code></th>
<th style="text-align: center;"><code>torchvision</code></th>
<th style="text-align: center;"><code>python</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>master</code> /
<code>nightly</code></td>
<td style="text-align: center;"><code>master</code> /
<code>nightly</code></td>
<td style="text-align: center;"><code>&gt;=3.6</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>1.6.0</code></td>
<td style="text-align: center;"><code>0.7.0</code></td>
<td style="text-align: center;"><code>&gt;=3.6</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>1.5.1</code></td>
<td style="text-align: center;"><code>0.6.1</code></td>
<td style="text-align: center;"><code>&gt;=3.5</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>1.5.0</code></td>
<td style="text-align: center;"><code>0.6.0</code></td>
<td style="text-align: center;"><code>&gt;=3.5</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>1.4.0</code></td>
<td style="text-align: center;"><code>0.5.0</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.8</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>1.3.1</code></td>
<td style="text-align: center;"><code>0.4.2</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.7</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>1.3.0</code></td>
<td style="text-align: center;"><code>0.4.1</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.7</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>1.2.0</code></td>
<td style="text-align: center;"><code>0.4.0</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.7</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>1.1.0</code></td>
<td style="text-align: center;"><code>0.3.0</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.7</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;=1.0.1</code></td>
<td style="text-align: center;"><code>0.2.2</code></td>
<td style="text-align: center;"><code>==2.7</code>,
<code>&gt;=3.5</code>, <code>&lt;=3.7</code></td>
</tr>
</tbody>
</table>
<p>更改anaconda中的库的版本也很简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install pytorch = version</span><br></pre></td></tr></table></figure>
<p>将version改为对应的版本号即可（例如1.4）</p>
<p>Txing</p>
<p>2020-09-07</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>ImportError</tag>
      </tags>
  </entry>
  <entry>
    <title>Q104 Maximum Depth of Binary Tree-简单-深度/广度优先搜索</title>
    <url>/2020/09/07/2020-09-07-Q104%20Maximum%20Depth%20of%20Binary-%E7%AE%80%E5%8D%95-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%20Tree/</url>
    <content><![CDATA[<h1 id="maximum-depth-of-binary-tree"><a
href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">Maximum
Depth of Binary Tree</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from
the root node down to the farthest leaf node.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Given binary tree [3,9,20,null,null,15,7],</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>return its depth = 3.</p>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>如果我们知道了左子树和右子树的最大深度 l 和
r，那么该二叉树的最大深度即为<span class="math display">\[\max(l,r) +
1\]</span></p>
<p>而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在
O(1)O(1)
时间内计算出当前二叉树的最大深度。递归在访问到空节点时退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_height = self.maxDepth(root.left)</span><br><span class="line">            right_height = self.maxDepth(root.right)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left_height, right_height) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
为二叉树节点的个数。每个节点在递归中只被遍历一次。</li>
<li>空间复杂度：<span
class="math display">\[O(\textit{height})\]</span>，其中 <span
class="math display">\[\textit{height}\]</span>
表示二叉树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。</li>
</ul>
<h3 id="approach-1-广度优先搜索">Approach 1: 广度优先搜索</h3>
<p>我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索的队列里存放的是「当前层的所有节点」。每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，我们需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展，最后我们用一个变量
<span class="math display">\[\textit{ans}\]</span>
来维护拓展的次数，该二叉树的最大深度即为 <span
class="math display">\[\textit{ans}\]</span>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">maxDepth2</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        queue = [(root, <span class="number">1</span>)]</span><br><span class="line">        max_dep = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node, depth = queue.pop()</span><br><span class="line">            max_dep = <span class="built_in">max</span>(max_dep, depth)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append((node.left, depth +<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append((node.right, depth + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> max_dep</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1">复杂度分析</h3>
<p>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
为二叉树的节点个数。与方法一同样的分析，每个节点只会被访问一次。
空间复杂度：此方法空间的消耗取决于队列存储的元素数量，其在最坏情况下会达到
<span class="math display">\[O(n)\]</span>。</p>
<ul>
<li></li>
</ul>
<h3 id="思考题">思考题</h3>
<p>对于给定的排列 <span class="math display">\[a_1, a_2, \cdots,
a_n\]</span> ，你能求出 k 吗？</p>
<p>解答： <span class="math display">\[
k = \left( \sum_{i=1}^n \textit{order}(a_i) \cdot (n-i)! \right) + 1
\]</span> 其中 <span
class="math display">\[\textit{order}(a_i)\]</span>表示 <span
class="math display">\[a_{i+1}, \cdots, a_n\]</span>中小于 <span
class="math display">\[a_i\]</span>的元素个数。</p>
<h3 id="反思">反思</h3>
<p>我在分析这个问题的时候只考虑到了第一项怎么确定，然后就用递归来求解问题，中间忽略了n和k的取值特例。分析不够完备，代码看着比较乱，可读性不强。今后分析的时候还是要把问题分析完整了再编代码，比如推出这道题的通项公式后再写代码。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | A New Paradigm for Exploring Neural Substrates of Action Execution</title>
    <url>/2020/09/08/2020-09-08-Neuroscience-A%20New%20Paradigm%20for%20Exploring%20Neural%20Substrates%20of%20Action%20Execution/</url>
    <content><![CDATA[<h1
id="exploring-neural-substrates-underlying-the-execution-of-behavior-across-the-whole-brain">Exploring
Neural Substrates Underlying the Execution of Behavior Across the Whole
Brain</h1>
<p>论文链接：https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5563763/</p>
<h2 id="背景">背景</h2>
<p>目前的行为控制机制的研究难以深入进行，一方面是因为生物的运动是一个连续的过程难以准确切分，此外，在行为过程中人脑还可能并行执行其他任务，因此在观测神经元活动的时候可能会出现干扰。另一方面，一些技术手段例如fMRI的分辨率不足以支持在突触层面分析环路机制，因此研究难以深入。</p>
<p>本文推荐了另一项研究工作中使用的实验方案，有望成为一种新的研究运动控制机制的实验范式。</p>
<h2 id="主要工作">主要工作</h2>
<p>实验对象：斑马鱼（体型小，身体透明，可用光学显微镜直接观察神经元）</p>
<p>使用的技术手段比较复杂：</p>
<ul>
<li><p>light-sheet imaging</p></li>
<li><p>two-photon manipulation</p></li>
<li><p>fictive behavioral paradigm in transgenic fish</p></li>
</ul>
<p>分子标记技术的弊端：</p>
<p>However, in many cases, the specific location or molecular markers
were not identified for particular neurons. More importantly, neurons in
the same location or expressing the same molecular marker may play
different roles in the execution of a particular behavior, presenting
major problems in dissecting the neural circuits underlying behaviors
with the widely-applied spatial or genetic targeting strategies.</p>
<p>他们发现zebrafish的前菱脑转向区（anterior rhombencephalic turning
region,
ARTR）与转向运动有关，通过光遗传学手段增强ARTA活性之后，zebrafish的转向获得了加强。</p>
<p>Txing</p>
<p>2020-09-08</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Spontaneous Thought Processes (STPs)</title>
    <url>/2020/09/08/2020-09-08-Neuroscience-Spontaneous%20Thought%20Processes%20(STPs)/</url>
    <content><![CDATA[<h1
id="offline-memory-reprocessing-involvement-of-the-brains-default-network-in-spontaneous-thought-processes">Offline
Memory Reprocessing: Involvement of the Brain's Default Network in
Spontaneous Thought Processes</h1>
<p>论文链接：https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2653727/</p>
<h2 id="背景">背景</h2>
<p>人脑的自发思维活动一直是个谜。比如白日梦（daydream）和心不在焉（mind-wandering）的状态。其特点是切断了外部输入，例如闭眼、冥想，大脑依靠过去的记忆回忆过去或者是期待未来，这种依靠内部记忆的联想机制也叫作离线记忆再处理（Offline
Memory
Reprocessing）。但是这些自发过程的神经机制一直不清楚，本文首次尝试寻找这一过程作用的脑区。</p>
<h2 id="主要工作">主要工作</h2>
<p>利用功能核磁共振成像（functional magnetic resonance imaging,
fMRI）获得全脑的活动状态。结合区域一致性方法（regional homogeneity,
ReHo）评估各个脑区的活跃程度。根据静息状态和记忆再处理状态的活跃程度对比，得到自发思维网络涉及的相应脑区（STPs-network）。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200908-1.png" /></p>
<p>STPs-network 主要涉及的脑区为：</p>
<ul>
<li>the posterior cingulate cortex</li>
<li>the precuneus</li>
<li>the medial prefrontal cortex</li>
<li>bilateral inferior parietal cortex</li>
<li>bilateral dorsal lateral prefrontal cortex</li>
</ul>
<p>文章后面测试了一下自发思维的强度和STPs-network活性的相关性。比较了几个脑区间的连通性。</p>
<h2 id="method">Method</h2>
<ul>
<li>Regional homogeneity (ReHo) Analysis</li>
</ul>
<p><span class="math display">\[
W=\frac{\sum (R_i)^2-n(\overline{R})^2}{\frac{1}{12}k^2(n^3-n)}
\]</span></p>
<p>可以理解为求一个立体区域的平均活跃度，这里不再赘述。</p>
<h2 id="总结">总结</h2>
<p>这篇工作来自昆明动物所徐林老师，研究还是具有一定的启发性的，尤其是提到的大脑外部驱动和内部驱动的切换，挺有意思的。另外自发活动这一点确实还需要继续探索，在神经科学领域也是核心问题。</p>
<p>Txing</p>
<p>2020-09-08</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Q39 Combination Sum-中等-递归 回溯</title>
    <url>/2020/09/09/2020-09-09-Q39%20Combination%20Sum-%E4%B8%AD%E7%AD%89-%E9%80%92%E5%BD%92%20%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="combination-sum"><a
href="https://leetcode-cn.com/problems/combination-sum/">Combination
Sum</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a set of candidate numbers (candidates) (without duplicates)
and a target number (target), find all unique combinations in candidates
where the candidate numbers sums to target.</p>
<p>The same repeated number may be chosen from candidates unlimited
number of times.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: candidates = [2,3,6,7], target = 7, A solution set is: [ [7],
[2,2,3] ]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: candidates = [2,3,5], target = 8, A solution set is: [
[2,2,2,2], [2,3,3], [3,5]]</p>
</blockquote>
<blockquote>
<p><strong>Constraints:</strong></p>
<p>1 &lt;= candidates.length &lt;= 30 1 &lt;= candidates[i] &lt;= 200
Each element of candidate is unique. 1 &lt;= target &lt;= 500</p>
</blockquote>
<h3 id="approach-1-搜索回溯">Approach 1: 搜索回溯</h3>
<h4 id="思路与算法">思路与算法</h4>
<p>对于这类寻找所有可行解的题，我们都可以尝试用「搜索回溯」的方法来解决。</p>
<p>回到本题，我们定义递归函数 dfs(target, combine, idx) 表示当前在
candidates 数组的第 idx 位，还剩 target 要组合，已经组合的列表为
combine。递归的终止条件为 target &lt;= 0 或者 candidates
数组被全部用完。那么在当前的函数中，每次我们可以选择跳过不用第 idx
个数，即执行 dfs(target, combine, idx + 1)。也可以选择使用第 idx
个数，即执行 dfs(target - candidates[idx], combine,
idx)，注意到每个数字可以被无限制重复选取，因此搜索的下标仍为 idx。</p>
<p>更形象化地说，如果我们将整个搜索过程用一个树来表达，即如下图呈现，每次的搜索都会延伸出两个分叉，直到递归的终止条件，这样我们就能不重复且不遗漏地找到所有可行解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        ans=[] <span class="comment"># 汇总可行解</span></span><br><span class="line">        temp=[] <span class="comment"># 存放当前解</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">recursion</span>(<span class="params">idx,<span class="built_in">sum</span></span>):</span><br><span class="line">            <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(candidates) <span class="keyword">or</span> <span class="built_in">sum</span> &gt;= target: <span class="comment"># 判断合法，不合法则检测是否满足target；合法则继续迭代</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">sum</span> - target == <span class="number">0</span>:</span><br><span class="line">                    ans.append(temp[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            temp.append(candidates[idx])</span><br><span class="line">            recursion(idx, <span class="built_in">sum</span> + candidates[idx])</span><br><span class="line">            temp.pop() <span class="comment"># 删除最后一个元素</span></span><br><span class="line">            recursion(idx + <span class="number">1</span>, <span class="built_in">sum</span>)</span><br><span class="line">        recursion(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    candidates = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    target = <span class="number">7</span></span><br><span class="line">    solution=Solution().combinationSum(candidates,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li>时间复杂度：<span class="math display">\[O(S)\]</span>，其中 S
为所有可行解的长度之和。从分析给出的搜索树我们可以看出时间复杂度取决于搜索树所有叶子节点的深度之和，即所有可行解的长度之和。在这题中，我们很难给出一个比较紧的上界，我们知道
<span class="math display">\[O(n \times 2^n)\]</span>
是一个比较松的上界，即在这份代码中，n
个位置每次考虑选或者不选，如果符合条件，就加入答案的时间代价。但是实际运行的时候，因为不可能所有的解都满足条件，递归的时候我们还会用
<span class="math display">\[target - candidates[idx] &gt;= 0\]</span>
进行剪枝，所以实际运行情况是远远小于这个上界的。</li>
<li>空间复杂度：<span
class="math display">\[O(\textit{target})\]</span>。除答案数组外，空间复杂度取决于递归的栈深度，在最差情况下需要递归
<span class="math display">\[O(\textit{target})\]</span> 层。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Q77 Combinations-中等-递归 回溯</title>
    <url>/2020/09/08/2020-09-08-Q77%20Combinations-%E4%B8%AD%E7%AD%89-%E9%80%92%E5%BD%92%20%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="combinations"><a
href="https://leetcode-cn.com/problems/combinations/">Combinations</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given two integers n and k, return all possible combinations of k
numbers out of 1 ... n.</p>
<p>You may return the answer in any order.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: n = 4, k = 2 Output: [ [2,4], [3,4], [2,3], [1,2], [1,3],
[1,4],]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: n = 1, k = 1 Output: [[1]]</p>
</blockquote>
<h3 id="approach-1-递归调用">Approach 1: 递归调用</h3>
<p>把选k个数的任务拆解为选2个数的任务，直到选完了k个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n, k</span>):</span><br><span class="line">        <span class="keyword">if</span> k&gt;n <span class="keyword">or</span> k==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">if</span> k==n:</span><br><span class="line">            <span class="keyword">return</span> [[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)]]</span><br><span class="line">        </span><br><span class="line">        answer=self.combine(n-<span class="number">1</span>,k)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.combine(n-<span class="number">1</span>,k-<span class="number">1</span>):</span><br><span class="line">            item.append(n)</span><br><span class="line">            answer.append(item)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="number">4</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    solution=Solution().combine(n,k)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="approach-2-回溯算法">Approach 2: <a
href="https://leetcode-cn.com/problems/combinations/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-ma-/">回溯算法</a></h3>
<h4 id="重点概括">重点概括：</h4>
<ul>
<li><p>如果解决一个问题有多个步骤，每一个步骤有多种方法，题目又要我们找出所有的方法，可以使用回溯算法；</p></li>
<li><p>回溯算法是在一棵树上的
深度优先遍历（因为要找所有的解，所以需要遍历）；</p></li>
<li><p>组合问题，相对于排列问题而言，不计较一个组合内元素的顺序性（即
[1, 2, 3] 与 [1, 3, 2]
认为是同一个组合），因此很多时候需要按某种顺序展开搜索，这样才能做到不重不漏。</p></li>
</ul>
<p>既然是树形问题上的 深度优先遍历，因此首先画出树形结构。例如输入：n =
4, k = 2，我们可以发现如下递归结构：</p>
<ul>
<li>如果组合里有 1 ，那么需要在 [2, 3, 4] 里再找 11 个数；</li>
<li>如果组合里有 2 ，那么需要在 [3, 4] 里再找 11数。注意：这里不能再考虑
11，因为包含 11 的组合，在第 1 种情况中已经包含。
依次类推（后面部分省略），以上描述体现的 递归 结构是：在以 nn
结尾的候选数组里，选出若干个元素。画出递归结构如下图：</li>
</ul>
<h4 id="说明">说明：</h4>
<p>叶子结点的信息体现在从根结点到叶子结点的路径上，因此需要一个表示路径的变量
path，它是一个列表，特别地，path 是一个栈；
每一个结点递归地在做同样的事情，区别在于搜索起点，因此需要一个变量 start
，表示在区间 [begin, n] 里选出若干个数的组合；
可能有一些分支没有必要执行，我们放在优化中介绍。
友情提示：对于这一类问题，画图帮助分析是非常重要的解题方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">List</span>&lt;<span class="type">List</span>&lt;Integer&gt;&gt; combine(<span class="built_in">int</span> n, <span class="built_in">int</span> k) &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">List</span>&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        // 从 <span class="number">1</span> 开始是题目的设定</span><br><span class="line">        Deque&lt;Integer&gt; path = new ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void dfs(<span class="built_in">int</span> n, <span class="built_in">int</span> k, <span class="built_in">int</span> begin, Deque&lt;Integer&gt; path, <span class="type">List</span>&lt;<span class="type">List</span>&lt;Integer&gt;&gt; res) &#123;</span><br><span class="line">        // 递归终止条件是：path 的长度等于 k</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">            res.add(new ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 遍历可能的搜索起点</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = begin; i &lt;= n; i++) &#123;</span><br><span class="line">            // 向路径变量里添加一个数</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            // 下一轮搜索，设置的搜索起点要加 <span class="number">1</span>，因为组合数理不允许出现重复的元素</span><br><span class="line">            dfs(n, k, i + <span class="number">1</span>, path, res);</span><br><span class="line">            // 重点理解这里：深度优先遍历有回头的过程，因此递归之前做了什么，递归之后需要做相同操作的逆向操作</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="优化">优化</h4>
<p>事实上，如果 n = 7, k = 4，从 55
开始搜索就已经没有意义了，这是因为：即使把 55 选上，后面的数只有 66 和
77，一共就 33 个候选数，凑不出 44
个数的组合。因此，搜索起点有上界，这个上界是多少，可以举几个例子分析。</p>
<p>分析搜索起点的上界，其实是在深度优先遍历的过程中剪枝，剪枝可以避免不必要的遍历，剪枝剪得好，可以大幅度节约算法的执行时间。</p>
<p>下面的图片绿色部分是剪掉的枝叶，当 n
很大的时候，能少遍历很多结点，节约了时间。</p>
<p>（温馨提示：右键，在弹出的下拉列表框中选择「在新标签页中打开图片」，可以查看大图。）</p>
<p>容易知道：搜索起点和当前还需要选几个数有关，而当前还需要选几个数与已经选了几个数有关，即
path 的长度相关。我们举几个例子分析：</p>
<p>例如：n = 6 ，k = 4。</p>
<p>path.size() == 1 的时候，接下来要选择 33 个数，搜索起点最大是
44，最后一个被选的组合是 [4, 5, 6]； path.size() == 2
的时候，接下来要选择 22 个数，搜索起点最大是 55，最后一个被选的组合是
[5, 6]； path.size() == 3 的时候，接下来要选择 11 个数，搜索起点最大是
66，最后一个被选的组合是 [6]；</p>
<p>再如：n = 15 ，k = 4。 path.size() == 1 的时候，接下来要选择 33
个数，搜索起点最大是 1313，最后一个被选的是 [13, 14, 15]； path.size()
== 2 的时候，接下来要选择 22 个数，搜索起点最大是 1414，最后一个被选的是
[14, 15]； path.size() == 3 的时候，接下来要选择 11 个数，搜索起点最大是
1515，最后一个被选的是 [15]；</p>
<p>搜索起点的上界 + 接下来要选择的元素个数 - 1 = n</p>
<p>其中，接下来要选择的元素个数 = k - path.size()，整理得到：</p>
<p>搜索起点的上界 = n - (k - path.size()) + 1
所以，我们的剪枝过程就是：把 i &lt;= n 改成 i &lt;= n - (k - pre.size())
+ 1 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> index, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有这里 i &lt;= n - (k - path.size()) + 1 与参考代码 1 不同</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            dfs(n, k, i + <span class="number">1</span>, path, res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="说明-1">说明：</h4>
<p>一些边界条件比较绕的，用具体的例子分析就不容易出错，主要考察的是细心，没有太多技巧；
为参考代码 3 添加 path 的打印输出语句，可以看到输出语句会更少。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">递归之前 =&gt; [<span class="number">1</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">1</span>]</span><br><span class="line">递归之后 =&gt; []</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">2</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">2</span>]</span><br><span class="line">递归之后 =&gt; []</span><br><span class="line">递归之前 =&gt; [<span class="number">3</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">递归之前 =&gt; [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">递归之后 =&gt; [<span class="number">3</span>]</span><br><span class="line">递归之后 =&gt; []</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | FeUdal Networks (FuN)</title>
    <url>/2020/09/10/2020-09-10-Reinforcement%20Learning-FeUdal%20Networks/</url>
    <content><![CDATA[<h1 id="feudal-networks-for-hierarchical-reinforcement-learning">FeUdal
Networks for Hierarchical Reinforcement learning</h1>
<p>论文链接：https://arxiv.org/abs/1703.01161</p>
<h2 id="背景">背景</h2>
<p>利用分层强化学习将一个复杂任务拆分为不同维度的问题被认为是一种更自然、更类人的模式。例如人在吃饭的时候，人在宏观的维度作出决策要吃哪个菜，然后身体处于低维的层次，调动肌肉产生运动，完成夹菜和吃菜的动作。在这一过程中，高维的我们没有直接考虑调用哪条肌肉，而是做什么事。这一点正是目前的RL所缺乏的能力。</p>
<h2 id="主要工作">主要工作</h2>
<p>FuN是在feudal reinforcement
learning基础上的延展性工作，利用Manger学习子状态空间，设定子目标，将任务进行拆分；然后Worker处理子任务，完成Manger设置的子目标。</p>
<p>其主体框架如下：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200910-1.png" /></p>
<p>其中，Manger和Worker都是RNN，只不过处理问题的时间分辨率不一样。Worker的c步被看做Manger的一步。网络动力学关系如下：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200910-2.png" /></p>
<p><span class="math display">\[x_t\]</span>是图像输入，<span
class="math display">\[z_t\]</span>是提取的特征，<span
class="math display">\[s_t\]</span>是输入给Manger RNN的状态。<span
class="math display">\[h^M\]</span>是Manger网络的内部状态。通过<span
class="math display">\[f^{Mrnn}\]</span>获得子目标<span
class="math display">\[\hat{g}_t\]</span>、归一化子目标<span
class="math display">\[g_t\]</span>。</p>
<p>通过一个线性映射<span class="math display">\[\phi\]</span>将<span
class="math display">\[c\]</span>步的目标映射到嵌入向量<span
class="math display">\[w_t\]</span>中。对于Work RNN，输入是状态<span
class="math display">\[z_t\]</span>和网络内部状态<span
class="math display">\[h^W\]</span>，<span
class="math display">\[U_t\]</span>是输出矩阵。最后通过SoftMax选择最能满足子目标<span
class="math display">\[g_t\]</span>的<span
class="math display">\[U_t\]</span>。</p>
<p>（文章的主体思路就是以上内容，后续部分主要讨论网络更新，reward设定等细节，我打算看了代码之后在做分析）</p>
<h2 id="总结">总结</h2>
<p>文章种在多个游戏中进行了实验对比，均取得了良好的实验效果。但遗憾的是，几乎所有的复现都说性能达不到文章中的水平。可能是实验中还有一些优化并未在文章中说明。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Q216 Combination Sum III-中等-递归 回溯</title>
    <url>/2020/09/11/2020-09-11-Q216%20Combination%20Sum%20III-%E4%B8%AD%E7%AD%89-%E9%80%92%E5%BD%92%20%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="combination-sum-iii"><a
href="https://leetcode-cn.com/problems/combination-sum-iii/">Combination
Sum III</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Find all possible combinations of k numbers that add up to a number
n, given that only numbers from 1 to 9 can be used and each combination
should be a unique set of numbers.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: k = 3, n = 7 Output: [[1,2,4]]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: k = 3, n = 9 Output: [[1,2,6], [1,3,5], [2,3,4]]</p>
</blockquote>
<h3 id="approach-1-递归回溯">Approach 1: 递归回溯</h3>
<p>做了Combination Sum
I-III三道题后，对回溯法寻找合适解的问题逐渐熟悉了起来。dfs函数里面需要用if判断所得解是否合适，合适了就使用append方法，把暂存器temp到答案ans里面并return结束此分支的迭代。如果不合适，即未满足终止条件，继续搜索过程。</p>
<p>这里需要注意的是，如果搜索范围有改变（存在不选重复数字之类的条件），记得用一个for循环在新的范围内执行dfs。如果搜索范围没有改变，就可以不用for循环，减小复杂度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum3</span>(<span class="params">self, k: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">temp,S,k,n</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp)==k <span class="keyword">and</span> n==<span class="number">0</span>:</span><br><span class="line">                ans.append(temp[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(S)):</span><br><span class="line">                temp.append(S[i])</span><br><span class="line">                <span class="comment"># S[i + 1:]实现了剪枝和防止逆序选数，这是关键点</span></span><br><span class="line">                dfs(temp, S[i+<span class="number">1</span>:], k, n-S[i])</span><br><span class="line">                temp.pop()</span><br><span class="line">        ans=[]</span><br><span class="line">        S=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">        <span class="comment"># 暂存数组，可选项，需要k个数，需要和为n</span></span><br><span class="line">        dfs([], S, k, n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    k = <span class="number">3</span></span><br><span class="line">    n = <span class="number">9</span></span><br><span class="line">    solution=Solution().combinationSum3(k,n)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Q40 Combination Sum II-中等-递归 回溯</title>
    <url>/2020/09/10/2020-09-10-Q40%20Combination%20Sum%20II-%E4%B8%AD%E7%AD%89-%E9%80%92%E5%BD%92%20%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="combination-sum-ii"><a
href="https://leetcode-cn.com/problems/combination-sum-ii/">Combination
Sum II</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a collection of candidate numbers (candidates) and a target
number (target), find all unique combinations in candidates where the
candidate numbers sums to target.</p>
<p>Each number in candidates may only be used once in the
combination.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: candidates = [10,1,2,7,6,1,5], target = 8, A solution set is:
[ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6]]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: candidates = [2,5,2,1,2], target = 5, A solution set is: [
[1,2,2], [5] ]</p>
</blockquote>
<h3 id="approach-1-递归回溯">Approach 1: 递归回溯</h3>
<h4 id="思路与算法">思路与算法</h4>
<p>由于我们需要求出所有和为 <span
class="math display">\[\textit{target}\]</span>
的组合，并且每个数只能使用一次，因此我们可以使用递归 +
回溯的方法来解决这个问题：</p>
<ul>
<li><p>我们用 <span class="math display">\[\text{dfs}(\textit{pos},
\textit{rest})\]</span> 表示递归的函数，其中 <span
class="math display">\[\textit{pos}\]</span> 表示我们当前递归到了数组
<span class="math display">\[\textit{candidates}\]</span> 中的第 <span
class="math display">\[\textit{pos}\]</span> 个数，而 <span
class="math display">\[\textit{rest}\]</span> 表示我们还需要选择和为
<span class="math display">\[\textit{rest}\]</span>
的数放入列表作为一个组合；</p></li>
<li><p>对于当前的第 <span class="math display">\[\textit{pos}\]</span>
个数，我们有两种方法：选或者不选。如果我们选了这个数，那么我们调用 <span
class="math display">\[\text{dfs}(\textit{pos}+1, \textit{rest} -
\textit{candidates}[\textit{pos}])\]</span> 进行递归，注意这里必须满足
<span class="math display">\[\textit{rest} \geq
\textit{candidates}[\textit{pos}]\]</span>。如果我们不选这个数，那么我们调用
<span class="math display">\[\text{dfs}(\textit{pos}+1,
\textit{rest})\]</span> 进行递归；</p></li>
<li><p>在某次递归开始前，如果 <span
class="math display">\[\textit{rest}\]</span> 的值为
0，说明我们找到了一个和为 <span
class="math display">\[\textit{target}\]</span>
的组合，将其放入答案中。每次调用递归函数前，如果我们选了那个数，就需要将其放入列表的末尾，该列表中存储了我们选的所有数。在回溯时，如果我们选了那个数，就要将其从列表的末尾删除。</p></li>
</ul>
<p>上述算法就是一个标准的递归 +
回溯算法，但是它并不适用于本题。这是因为题目描述中规定了解集不能包含重复的组合，而上述的算法中并没有去除重复的组合。</p>
<p>例如当 <span class="math display">\[\textit{candidates} = [2,
2]\]</span>，<span class="math display">\[\textit{target} = 2\]</span>
时，上述算法会将列表 [2] 放入答案两次。</p>
<p>因此，我们需要改进上述算法，在求出组合的过程中就进行去重的操作。我们可以考虑将相同的数放在一起进行处理，也就是说，如果数
<span class="math display">\[\textit{x}\]</span> 出现了 y
次，那么在递归时一次性地处理它们，即分别调用选择 <span
class="math display">\[0, 1, \cdots, y\]</span> 次 <span
class="math display">\[x\]</span>
的递归函数。这样我们就不会得到重复的组合。具体地：</p>
<p>我们使用一个哈希映射（HashMap）统计数组 <span
class="math display">\[\textit{candidates}\]</span>
中每个数出现的次数。在统计完成之后，我们将结果放入一个列表 <span
class="math display">\[\textit{freq}\]</span>
中，方便后续的递归使用。</p>
<p>列表 <span class="math display">\[\textit{freq}\]</span>
的长度即为数组 <span class="math display">\[\textit{candidates}\]</span>
中不同数的个数。其中的每一项对应着哈希映射中的一个键值对，即某个数以及它出现的次数。
在递归时，对于当前的第 <span
class="math display">\[\textit{pos}\]</span> 个数，它的值为 <span
class="math display">\[\textit{freq}[\textit{pos}][0]\]</span>，出现的次数为
<span
class="math display">\[\textit{freq}[\textit{pos}][1]\]</span>，那么我们可以调用</p>
<p><span class="math display">\[\text{dfs}(\textit{pos}+1, \textit{rest}
- i \times \textit{freq}[\textit{pos}][0])\]</span></p>
<p>即我们选择了这个数 i 次。这里 i 不能大于这个数出现的次数，并且 <span
class="math display">\[i \times \textit{freq}[\textit{pos}][0]\]</span>
也不能大于 <span
class="math display">\[\textit{rest}\]</span>。同时，我们需要将 i 个
<span class="math display">\[\textit{freq}[\textit{pos}][0]\]</span>
放入列表中。</p>
<p>这样一来，我们就可以不重复地枚举所有的组合了。</p>
<p>我们还可以进行什么优化（剪枝）呢？一种比较常用的优化方法是，我们将
<span class="math display">\[\textit{freq}\]</span>
根据数从小到大排序，这样我们在递归时会先选择小的数，再选择大的数。这样做的好处是，当我们递归到
<span class="math display">\[\text{dfs}(\textit{pos},
\textit{rest})\]</span> 时，如果 <span
class="math display">\[\textit{freq}[\textit{pos}][0]\]</span> 已经大于
<span
class="math display">\[\textit{rest}\]</span>，那么后面还没有递归到的数也都大于
<span
class="math display">\[\textit{rest}\]</span>，这就说明不可能再选择若干个和为
<span class="math display">\[\textit{rest}\]</span>
的数放入列表了。此时，我们就可以直接回溯。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates, target</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">pos: <span class="built_in">int</span>, rest: <span class="built_in">int</span></span>):</span><br><span class="line">            <span class="comment"># nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量</span></span><br><span class="line">            <span class="comment"># sequence 用来暂存序列</span></span><br><span class="line">            <span class="keyword">nonlocal</span> sequence</span><br><span class="line">            <span class="keyword">if</span> rest == <span class="number">0</span>:</span><br><span class="line">                ans.append(sequence[:]) <span class="comment"># 添加答案</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="built_in">len</span>(freq) <span class="keyword">or</span> rest &lt; freq[pos][<span class="number">0</span>]: <span class="comment"># sequence不行，停止</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            dfs(pos + <span class="number">1</span>, rest)</span><br><span class="line"></span><br><span class="line">            most = <span class="built_in">min</span>(rest // freq[pos][<span class="number">0</span>], freq[pos][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, most + <span class="number">1</span>):</span><br><span class="line">                sequence.append(freq[pos][<span class="number">0</span>])</span><br><span class="line">                dfs(pos + <span class="number">1</span>, rest - i * freq[pos][<span class="number">0</span>])</span><br><span class="line">            sequence = sequence[:-most]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为数据出现次数计数[(数据1，出现次数),(数据2，出现次数)]</span></span><br><span class="line">        freq = <span class="built_in">sorted</span>(collections.Counter(candidates).items())</span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        sequence = <span class="built_in">list</span>()</span><br><span class="line">        <span class="comment"># inputs: 序号，剩余的target</span></span><br><span class="line">        dfs(<span class="number">0</span>, target)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    candidates = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    target = <span class="number">7</span></span><br><span class="line">    solution=Solution().combinationSum2(candidates,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(2^n \times
n)\]</span>，其中 n 是数组 <span
class="math display">\[\textit{candidates}\]</span> 的长度。在大部分递归
+
回溯的题目中，我们无法给出一个严格的渐进紧界，故这里只分析一个较为宽松的渐进上界。在最坏的情况下，数组中的每个数都不相同，那么列表
<span class="math display">\[\textit{freq}\]</span> 的长度同样为
n。在递归时，每个位置可以选或不选，如果数组中所有数的和不超过 <span
class="math display">\[\textit{target}\]</span>，那么 <span
class="math display">\[2^n\]</span> 种组合都会被枚举到；在 <span
class="math display">\[\textit{target}\]</span>
小于数组中所有数的和时，我们并不能解析地算出满足题目要求的组合的数量，但我们知道每得到一个满足要求的组合，需要
<span class="math display">\[O(n)\]</span>
的时间将其放入答案中，因此我们将 <span
class="math display">\[O(2^n)\]</span> 与 <span
class="math display">\[O(n)\]</span>
相乘，即可估算出一个宽松的时间复杂度上界。</p>
<p>由于 <span class="math display">\[O(2^n \times n)\]</span>
在渐进意义下大于排序的时间复杂度 <span class="math display">\[O(n \log
n)\]</span>，因此后者可以忽略不计。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(n)\]</span>。除了存储答案的数组外，我们需要
<span class="math display">\[O(n)\]</span> 的空间存储列表 <span
class="math display">\[\textit{freq}\]</span>、递归中存储当前选择的数的列表、以及递归需要的栈。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | HIerarchical Reinforcement learning with Off-policy correction (HIRO)</title>
    <url>/2020/09/13/2020-09-13-Reinforcement%20Learning%20-%20HIerarchical%20Reinforcement%20learning%20with%20Off-policy%20correction%20(HIRO)/</url>
    <content><![CDATA[<h1
id="data-efficient-hierarchical-reinforcement-learning">Data-Efficient
Hierarchical Reinforcement Learning</h1>
<p>论文链接：http://papers.nips.cc/paper/7591-data-efficient-hierarchical-reinforcement-learning.pdf</p>
<h2 id="背景">背景</h2>
<p>HRL是处理复杂任务的有效方式，之前的方法大多需要针对具体任务进行特殊设计，并使用on-policy的方法进行训练，这些因素导致HRL很难被引用到真实的场景中。本文用off-policy的方式训练higher-
and lower-level
controllers，提高了模型的数据利用率，性能超过了之前SOTA的Option-Critic。</p>
<p><strong>Option-Critic</strong>：Pierre-Luc Bacon, Jean Harb, and
Doina Precup. The option-critic architecture. In AAAI, pages 1726–1734,
2017.</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>首先需要明确的是什么是复杂的任务，文中定义的一个复杂任务是perform
exploratory navigaive as well as complex sequences of interaction with
ovjects inthe environment. 作者认为这些任务是unsolvable by
non-HRL，主要是因为奖励稀疏，完成任务需要多个步骤；</p></li>
<li><p>低级/高级策略如何定义并训练？之前的方法用人工设计来解决，因此方法没有一般性。</p></li>
<li><p>Note that 本文只用的是state
observation而不是高维图像输入，这个与FuN是不同的</p></li>
<li><p>本文使用的是off-policy的学习方法（TD3, [<a
href="https://link.zhihu.com/?target=http%3A//proceedings.mlr.press/v80/fujimoto18a/fujimoto18a.pdf">Addressing
Function Approximation Error in Actor-Critic
Methods</a>，它是DDPG的一种变体，同样针对连续的控制），试图提高sample的利用效率，但是这会带来两个问题：</p>
<ul>
<li>off-policy会带来学习上的不稳定，在多重policy的情况下这种影响还会更大。</li>
<li>低级的policy在训练过程中会不断变化，因此之前收集到的samples就不再是valid
experience for training</li>
</ul>
<p>针对这两个问题，本文建立了<strong>off-policy修正模型</strong>，re-label过去的经验，并用高级策略选择可能获得最大奖励的行为。</p></li>
</ul>
<h2 id="方法">方法</h2>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200912-1.png" /></p>
<ul>
<li><p>两层策略：a lower-level policy <span
class="math display">\[\mu^{lo}\]</span> and a higher-level policy <span
class="math display">\[\mu^{hi}\]</span></p></li>
<li><p><span
class="math display">\[\mu^{hi}\]</span>以从环境获取的obs为输入，获得high-level
action (goal) <span class="math display">\[g_t\in
\mathbb{R}^d\]</span>。<span
class="math display">\[g_t\]</span>要么用<span
class="math display">\[\mu^{hi}\]</span>以<span
class="math display">\[c\]</span>步为间隔进行采样<span
class="math display">\[g_t\sim \mu^{hi}\  (when\ t\equiv
0)\]</span>，要么使用一个固定目标的转换函数<span
class="math display">\[g_t=h(s_{t-1},g_{t-1},s_t)\]</span>，获得的奖励为<span
class="math display">\[R(s_t,a_t)\]</span>。</p></li>
<li><p><span class="math display">\[\mu^{lo}\]</span>观测状态<span
class="math display">\[s_t\]</span>和目标<span class="math display">\[
g_t\]</span>，并产生低维的行为<span class="math display">\[a_t\sim
\mu^{lo}(s_t, g_t)\]</span>，获得奖励<span
class="math display">\[r_t=r(s_t,g_t,a_t,s_{t+1})\]</span></p></li>
<li><p>低级策略储存经验<span
class="math display">\[(s_t,g_t,a_t,r_t,s_{t+1},h(s_t,g_t,s_{s+1}))\]</span></p></li>
<li><p>高级策略储存经验<span
class="math display">\[(s_{t:t+c-1},g_{t:t+c-1},a_{t:t+c-1},R_{t:t+c-1},s_{t+c})\]</span></p></li>
</ul>
<h3 id="参数化rewards">参数化Rewards</h3>
<ul>
<li><p>goal transition model <span class="math display">\[h\]</span> is
defined as: <span class="math display">\[h(s_t,g_t,s_{t+1}) = s_t + g_t
- s_{t+1}\]</span></p></li>
<li><p>intrinsic reward: <span class="math display">\[
r(s_t,g_t,a_t,s_{t+1}) = -\parallel s_t + g_t - s_{t+1}\parallel _2
\]</span> ，这里<span
class="math display">\[g_t\]</span>相当于是一个状态增量，学习目标是使得
<span class="math display">\[ s_t + g_t = s_{t+1} \]</span></p></li>
<li><p>实验中<span class="math display">\[g_t\]</span>是期望的坐标<span
class="math display">\[(x,y,z)\]</span>，obs也仅仅包含位置的观测</p></li>
<li><p>高级策略state-action-reward transition <span
class="math display">\[(s_t,g_t,\sum
R_{t:t+c-1},s_{t+c})\]</span></p></li>
<li><p>对于旧的经验，给定<span
class="math display">\[\widetilde{g}_t\]</span>最大化<span
class="math display">\[\mu^{lo}(a_{t:t+c-1}\mid
s_{t:t+c-1},\widetilde{g}_{t:t+c-1})\]</span></p></li>
<li><p>中间目标 <span
class="math display">\[\widetilde{g}_{t+1:t+c-1}\]</span>
用固定目标转移函数<span class="math display">\[h\]</span>生成</p></li>
<li><p>log probability <span class="math display">\[ \log
\mu^{lo}(a_{t:t+c-1}\mid s_{t:t+c-1},\widetilde{g}_{t:t+c-1}) \]</span>
通过下式计算得到</p></li>
</ul>
<p><span class="math display">\[
\log \mu^{lo}(a_{t:t+c-1}\mid
s_{t:t+c-1},\widetilde{g}_{t:t+c-1})\propto
-\frac{1}{2}\sum_{i=t}^{t+c-1}\parallel
a_i-\mu^{lo}(s_i,\widetilde{g}_i)\parallel^2_2+\text{const}
\]</span></p>
<h2 id="总结">总结</h2>
<p>HIRO整体节奏还是很明快的，整体结构基于DDPG和TD3经验修正的地方稍微有些含糊。文中的目标
<span class="math display">\[ g_t \]</span>
就相当于是一个状态增量，修正就是用10个高斯分布在 <span
class="math display">\[ [0,\mid s_{t+1}-s_t\mid] \]</span> 或者 <span
class="math display">\[ [-\mid s_{t+1}-s_t\mid ,0] \]</span>
之间取值目标 <span class="math display">\[ \widetilde{g}_t \]</span>
。至于为什么是10个高斯，怎么取值，这些正文中没有说明，附录里面应该有，细看的时候可以找一找。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Q637 Average of Levels in Binary Tree-简单-深度/广度优先搜索</title>
    <url>/2020/09/12/2020-09-12-Q637%20Average%20of%20Levels%20in%20Binary%20Tree-%E7%AE%80%E5%8D%95-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="average-of-levels-in-binary-tree"><a
href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/">Average
of Levels in Binary Tree</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a non-empty binary tree, return the average value of the nodes
on each level in the form of an array. Example 1: Input:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>Output: [3, 14.5, 11] Explanation: The average value of nodes on
level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3,
14.5, 11].</p>
<p><strong>Note:</strong></p>
<p>The range of node's value is in the range of 32-bit signed
integer.</p>
</blockquote>
<h2 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h2>
<p>使用深度优先搜索计算二叉树的层平均值，需要维护两个数组，<span
class="math display">\[\textit{counts}\]</span>
用于存储二叉树的每一层的节点数，<span
class="math display">\[\textit{sums}\]</span>
用于存储二叉树的每一层的节点值之和。搜索过程中需要记录当前节点所在层，如果访问到的节点在第
i 层，则将 <span class="math display">\[\textit{counts}[i]\]</span>
的值加 1，并将该节点的值加到 <span
class="math display">\[\textit{sums}[i]\]</span>。</p>
<p>遍历结束之后，第 i 层的平均值即为 <span
class="math display">\[\textit{sums}[i] /
\textit{counts}[i]\]</span>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">averageOfLevels_dfs</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root:TreeNode, level</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> level &lt; <span class="built_in">len</span>(totals):</span><br><span class="line">                totals[level] += root.val</span><br><span class="line">                counts[level] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                totals.append(root.val)</span><br><span class="line">                counts.append(<span class="number">1</span>)</span><br><span class="line">            dfs(root.left, level + <span class="number">1</span>)</span><br><span class="line">            dfs(root.right, level + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        counts = <span class="built_in">list</span>()</span><br><span class="line">        totals = <span class="built_in">list</span>()</span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> [total / count <span class="keyword">for</span> total, count <span class="keyword">in</span> <span class="built_in">zip</span>(totals, counts)]</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是二叉树中的节点个数。
深度优先搜索需要对每个节点访问一次，对于每个节点，维护两个数组的时间复杂度都是
<span
class="math display">\[O(1)\]</span>，因此深度优先搜索的时间复杂度是
<span
class="math display">\[O(n)\]</span>。遍历结束之后计算每层的平均值的时间复杂度是
O(h)O(h)，其中 hh 是二叉树的高度，任何情况下都满足 <span
class="math display">\[h \le n\]</span>。因此总时间复杂度是 <span
class="math display">\[O(n)\]</span>。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是二叉树中的节点个数。空间复杂度取决于两个数组的大小和递归调用的层数，两个数组的大小都等于二叉树的高度，递归调用的层数不会超过二叉树的高度，最坏情况下，二叉树的高度等于节点个数。</p></li>
</ul>
<h2 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h2>
<p>也可以使用广度优先搜索计算二叉树的层平均值。从根节点开始搜索，每一轮遍历同一层的全部节点，计算该层的节点数以及该层的节点值之和，然后计算该层的平均值。</p>
<p>如何确保每一轮遍历的是同一层的全部节点呢？我们可以借鉴层次遍历的做法，广度优先搜索使用队列存储待访问节点，只要确保在每一轮遍历时，队列中的节点是同一层的全部节点即可。具体做法如下：</p>
<ul>
<li><p>初始时，将根节点加入队列；</p></li>
<li><p>每一轮遍历时，将队列中的节点全部取出，计算这些节点的数量以及它们的节点值之和，并计算这些节点的平均值，然后将这些节点的全部非空子节点加入队列，重复上述操作直到队列为空，遍历结束。</p></li>
</ul>
<p>由于初始时队列中只有根节点，满足队列中的节点是同一层的全部节点，每一轮遍历时都会将队列中的当前层节点全部取出，并将下一层的全部节点加入队列，因此可以确保每一轮遍历的是同一层的全部节点。</p>
<p>具体实现方面，可以在每一轮遍历之前获得队列中的节点数量 <span
class="math display">\[\textit{size}\]</span>，遍历时只遍历 <span
class="math display">\[size\]</span>
个节点，即可满足每一轮遍历的是同一层的全部节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">averageOfLevels_dfs</span>(<span class="params">self, root</span>):        </span><br><span class="line">        averages = <span class="built_in">list</span>()</span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            total = <span class="number">0</span></span><br><span class="line">            size = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                total += node.val</span><br><span class="line">                left, right = node.left, node.right</span><br><span class="line">                <span class="keyword">if</span> left:</span><br><span class="line">                    queue.append(left)</span><br><span class="line">                <span class="keyword">if</span> right:</span><br><span class="line">                    queue.append(right)</span><br><span class="line">            averages.append(total / size)</span><br><span class="line">        <span class="keyword">return</span> averages</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1">复杂度分析</h3>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是二叉树中的节点个数。广度优先搜索需要对每个节点访问一次，时间复杂度是
<span class="math display">\[O(n)\]</span>。
需要对二叉树的每一层计算平均值，时间复杂度是 <span
class="math display">\[O(h)\]</span>，其中 h
是二叉树的高度，任何情况下都满足 <span class="math display">\[h \le
n\]</span>。因此总时间复杂度是 <span
class="math display">\[O(n)\]</span>。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是二叉树中的节点个数。空间复杂度取决于队列开销，队列中的节点个数不会超过
n。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Vector-based navigation using grid-like representations</title>
    <url>/2020/09/15/2020-09-14-Neuroscience%20-%20Vector-based%20navigation%20using%20grid-like%20representations/</url>
    <content><![CDATA[<h1
id="vector-based-navigation-using-grid-like-representations-in-artificial-agent">Vector-based
navigation using grid-like representations in artificial agent</h1>
<p>论文链接：https://www.nature.com/articles/s41586-018-0102-6/</p>
<h2 id="背景">背景</h2>
<p>RL在许多方面取得了好的成绩，但在哺乳动物的空间行为（mammalian spatial
behaviour）的熟练度上，人工agent的性能仍然不足。
动物的空间感知由网格细胞（grid cell）支持，它提供了一种度量编码空间（a
metric for coding space）的能力。本文模仿grid
cell在DRL的基础上开发一种类哺乳动物的导航能力（mammal-like navigational
abilities）。</p>
<p>被赋予了grid-like
representations的agent在导航任务上性能超过了人类专家in challenging,
unfamiliar, and changeable environments，甚至有走捷径的能力。</p>
<h3 id="概念">概念</h3>
<ul>
<li>路径整合（path
integration）是指巡航者对与自身运动有关的信息进行整合来完成巡航任务的过程。例如agent在地图上绕了一圈到达目标位置，那么第二次出发的时候，能够整合之前的路径信息，得出更直接到达目标位置的路径。（He,
Q., &amp; Mcnamara, T. P. (2018). Spatial Updating Strategy Affects the
Reference Frame in Path Integration. <em>Psychonomic Bulletin &amp;
Review</em>, 25(3), 1073-1079.）</li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>把速度信息作为输入给到一个LSTM循环神经网络，网络更新通过Backpropagation
through
time。LSTM映射位置和方向到一个线性层，在线性层中使用dropout，每个时刻随机50%的神经元被沉默。</p></li>
<li><p>foraging behaviour觅食行为涉及到路径集成能力</p></li>
<li><p>entorhinal network内嗅皮层网络帮助形成稳定的空间活动</p></li>
<li><p>实验效果如下图：</p></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200914-1.png" /></p>
<ul>
<li>vector-based navigation:
内嗅网格细胞产生目标驱动向量度量欧式空间，使得动物能够沿着一条直接路径到达目标。文中利用监督学习来实现这一能力。</li>
<li>grid
network输入是视觉信号，通过一个视觉网络实现。线性层输出是位置信息，相当于agent当前的位置。同时，线性层的信号（goal
grid code）作为输入传入一个Policy
LSTM网络，这个网络也是用于控制agent的行为。</li>
</ul>
<h2 id="方法">方法</h2>
<h3 id="path-integration-supervised-learning-experiments">1 Path
integration: supervised learning experiments</h3>
<h4 id="ground-truth-place-cell-distribution">1.1 Ground truth place
cell distribution</h4>
<ul>
<li>地图直径为<span class="math display">\[L\]</span></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200914-2.png" /></p>
<ul>
<li>符号说明：
<ul>
<li>Place cell激活<span class="math display">\[\overrightarrow{c} \in
[0,1]^N\]</span></li>
<li>位置<span class="math display">\[\overrightarrow{x} \in
R^2\]</span></li>
<li>place cell centres <span
class="math display">\[\overrightarrow{\mu}_i^{(c)} \in
R^2\]</span></li>
<li>place cell scale <span
class="math display">\[\sigma^{(c)}\]</span></li>
</ul></li>
</ul>
<h4 id="ground-truth-head-direction-cell-distribution">1.2 Ground truth
head-direction cell distribution</h4>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200914-3.png" /></p>
<ul>
<li>参数说明：
<ul>
<li>Head-direction cell激活<span
class="math display">\[\overrightarrow{h} \in [0,1]^M\]</span></li>
<li>给定面向角度<span class="math display">\[\varphi\]</span></li>
<li>使用mixture of Von Mises distributions with concentration parameter
<span class="math display">\[k^{(h)}\]</span></li>
</ul></li>
</ul>
<h4 id="supervised-learning-inputs">1.3 Supervised learning inputs</h4>
<ul>
<li>每个时刻传入速度<span class="math display">\[v_t\in
\mathbb{R}\]</span>以及the sine and cosine of its angular velocity <span
class="math display">\[\varphi_t\]</span></li>
</ul>
<h4 id="grid-cell-network-architecture">1.4 Grid cell network
architecture</h4>
<ul>
<li>consists of three layers: <strong>a recurrent layer</strong>(LSTM,
128 hidden units ,with no peephole connections), <strong>a linear
layer</strong>, and <strong>an output layer</strong> (Fig 1a).</li>
<li>Input to the recurrent LSTM layer: <span
class="math display">\[[v_t,\sin(\varphi_t),\cos(\varphi_t)]\]</span></li>
<li>LSTM的初始<strong>细胞状态</strong>和<strong>隐层状态</strong>为
<span class="math display">\[\overrightarrow{l}_0\]</span> and <span
class="math display">\[\overrightarrow{m}_0\]</span></li>
</ul>
<p><span class="math display">\[
\overrightarrow{l}_0=W^{cp}\overrightarrow{c}_0+W^{(cd)}\overrightarrow{h}_0\\
\overrightarrow{m}_0=W^{hp}\overrightarrow{c}_0+W^{(hd)}\overrightarrow{h}_0
\]</span></p>
<p><span
class="math display">\[(W^{cp},W^{cd},W^{hp},W^{hd})\]</span>是两个线性转换器的参数</p>
<ul>
<li>通过线性编码网络的均值，以及LSTM的输出<span
class="math display">\[\overrightarrow{m}_t\]</span>，计算预测的place
cells<span class="math display">\[\overrightarrow{y}_t\]</span>和head
direction cells <span
class="math display">\[\overrightarrow{z}_t\]</span></li>
<li>线性编码网络包含三组权重和偏置。
<ul>
<li>第一组：从LSTM的隐层状态<span
class="math display">\[\overrightarrow{m}_t\]</span>映射到线性激活层<span
class="math display">\[\overrightarrow{g}_t\in
\mathbb{R}^{512}\]</span>的权重和偏置</li>
<li>第二组：从线性激活层<span
class="math display">\[\overrightarrow{g}_t\]</span>映射到预测的头部朝向<span
class="math display">\[\overrightarrow{z}_t\]</span>的权重和偏置通过softmax
functions<br />
</li>
<li>第三组：从线性激活层<span
class="math display">\[\overrightarrow{g}_t\]</span>映射到预测的位置细胞输出<span
class="math display">\[\overrightarrow{y}_t\]</span>的权重和偏置通过softmax
functions</li>
</ul></li>
<li>dropout：线性激活层<span
class="math display">\[\overrightarrow{g}_t\]</span>每个单元的沉默概率是0.5</li>
<li>注意线性编码网络中间没有非线性层</li>
</ul>
<h4 id="supervised-learning-loss">1.5 Supervised learning loss</h4>
<ul>
<li>使用交叉熵损失函数</li>
</ul>
<p><span class="math display">\[
L(\overrightarrow{y},\overrightarrow{z},\overrightarrow{c},\overrightarrow{h})=-\sum_{i=1}^{N}
c_i \log(y_i)-\sum_{j=1}^{M} h_j \log(z_j)
\]</span></p>
<p>监督学习部分的结构:</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200915-1.png" /></p>
<p>Grid cell agent整体结构：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200915-2.png" /></p>
<h2 id="总结">总结</h2>
<p>grid cells的相关生物学研究获得过<a
href="https://link.zhihu.com/?target=https%3A//www.nobelprize.org/nobel_prizes/medicine/laureates/2014/">2014年诺贝尔生理学奖</a>for
their discoveries of cells that constitute a positioning system in the
brain。Deepmind甚至请了这个诺贝尔奖获得者来为本文写<a
href="https://link.zhihu.com/?target=https%3A//f1000.com/prime/733198068%3Fkey%3DnvlnlWetE8dlZTy">序言</a>。</p>
<p>这项工作如果用在导航上是比较有意义的，利用grid
cells的空间信息处理机制，agent可以自动寻路，还可以做路径整合，得到更优化的路径。</p>
<p>当用在机器人运动轨迹的优化上时，由于机器人本体（基坐标）位置并没有发生变动，所以并不能像导航任务中那样自由自在地探索，可以仔细考虑一下其中的差别，制定一个新的实验范式。</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1480 Running Sum of 1d Array-简单</title>
    <url>/2020/09/14/2020-09-14-Q1480%20Running%20Sum%20of%201d%20Array-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h1 id="running-sum-of-1d-array"><a
href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">Running
Sum of 1d Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array nums. We define a running sum of an array as
runningSum[i] = sum(nums[0]…nums[i]).</p>
<p>Return the running sum of nums.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li><code>-10^6 &lt;= nums[i] &lt;= 10^6</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums = [1,2,3,4] Output: [1,3,6,10] Explanation: Running sum
is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums = [1,1,1,1,1] Output: [1,2,3,4,5] Explanation: Running
sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: nums = [3,1,2,10,1] Output: [3,4,6,16,17]</p>
</blockquote>
<h3 id="approach-1">Approach 1:</h3>
<p>开始的时候想建立sum变量来储存前i项和，但这样造成了空间的浪费，可以直接改写input列表，将其作为输出。</p>
<p><strong>Note:</strong>
如果面试遇到这个问题，问清楚面试官，是否可以修改传来的 nums 数组！</p>
<p>约束条件限制了nums非空，因此不用判断这点；限制了元素大小，因此不考虑传入错误字符的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">runningSum</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[i]=nums[i-<span class="number">1</span>]+nums[i]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    solution=Solution().runningSum(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li>时间复杂度O(n)</li>
<li>空间复杂度O(n)</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q226 Invert Binary Tree-简单-递归</title>
    <url>/2020/09/16/2020-09-16-Q226%20Invert%20Binary%20Tree-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h1 id="invert-binary-tree"><a
href="https://leetcode-cn.com/problems/invert-binary-tree/">Invert
Binary Tree</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Invert a binary tree.</p>
<p>Trivia: This problem was inspired by this original tweet by Max
Howell:</p>
<p>Google: 90% of our engineers use the software you wrote (Homebrew),
but you can’t invert a binary tree on a whiteboard so f*** off.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        4</span><br><span class="line">      /   \</span><br><span class="line">    2     7</span><br><span class="line">  / \   / \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        4</span><br><span class="line">      /   \</span><br><span class="line">    7     2</span><br><span class="line">  / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="approach-1-递归">Approach 1: 递归</h3>
<p>这是一道很经典的二叉树问题。显然，我们从根节点开始，递归地对树进行遍历，并从叶子结点先开始翻转。如果当前遍历到的节点
<span class="math display">\[\textit{root}\]</span>
的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以
<span class="math display">\[\textit{root}\]</span>
为根节点的整棵子树的翻转。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data = <span class="number">0</span>,left = <span class="literal">None</span>,right = <span class="literal">None</span></span>):</span><br><span class="line">        self.val = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invertTree</span>(<span class="params">self, root</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="comment"># 找到叶子节点开始反转</span></span><br><span class="line">        left = self.invertTree(root.left)</span><br><span class="line">        right = self.invertTree(root.right)</span><br><span class="line">        root.left, root.right = right, left</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    candies = TreeNode([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">    extraCandies = <span class="number">3</span></span><br><span class="line">    solution=Solution().invertTree(candies)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：O(N)，其中 N
为二叉树节点的数目。我们会遍历二叉树中的每一个节点，对每个节点而言，我们在常数时间内交换其两棵子树。</p></li>
<li><p>空间复杂度：O(N)。使用的空间由递归栈的深度决定，它等于当前节点在二叉树中的高度。在平均情况下，二叉树的高度与节点个数为对数关系，即
<span class="math display">\[O(\log
N)\]</span>。而在最坏情况下，树形成链状，空间复杂度为 O(N)。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1431 Kids With the Greatest Number of Candies-简单-枚举</title>
    <url>/2020/09/15/2020-09-15-Q1431%20Kids%20With%20the%20Greatest%20Number%20of%20Candies-%E7%AE%80%E5%8D%95-%E6%9E%9A%E4%B8%BE%E6%B3%95/</url>
    <content><![CDATA[<h1 id="kids-with-the-greatest-number-of-candies"><a
href="https://leetcode-cn.com/problems/kids-with-the-greatest-number-of-candies/">Kids
With the Greatest Number of Candies</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given the array candies and the integer extraCandies, where
candies[i] represents the number of candies that the ith kid has.</p>
<p>For each kid check if there is a way to distribute extraCandies among
the kids such that he or she can have the greatest number of candies
among them. Notice that multiple kids can have the greatest number of
candies.</p>
<p><strong>Constraints:</strong></p>
<p>2 &lt;= candies.length &lt;= 100 1 &lt;= candies[i] &lt;= 100 1 &lt;=
extraCandies &lt;= 50</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: candies = [2,3,5,1,3], extraCandies = 3 Output:
[true,true,true,false,true] Explanation: Kid 1 has 2 candies and if he
or she receives all extra candies (3) will have 5 candies --- the
greatest number of candies among the kids. Kid 2 has 3 candies and if he
or she receives at least 2 extra candies will have the greatest number
of candies among the kids. Kid 3 has 5 candies and this is already the
greatest number of candies among the kids. Kid 4 has 1 candy and even if
he or she receives all extra candies will only have 4 candies. Kid 5 has
3 candies and if he or she receives at least 2 extra candies will have
the greatest number of candies among the kids.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: candies = [4,2,1,1,2], extraCandies = 1 Output:
[true,false,false,false,false] Explanation: There is only 1 extra candy,
therefore only kid 1 will have the greatest number of candies among the
kids regardless of who takes the extra candy.</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: candies = [12,1,12], extraCandies = 10 Output:
[true,false,true]</p>
</blockquote>
<h3 id="approach-1-枚举法">Approach 1: 枚举法</h3>
<p>这道题目关键点在于判断<em>candies[i] + extraCandies &gt;=
max_candies</em>
，因此需要先找出最大的糖果数，之后在一个for循环中诸葛对比。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kidsWithCandies</span>(<span class="params">self, candies , extraCandies </span>) :</span><br><span class="line">        sort_candies=<span class="built_in">sorted</span>(candies)</span><br><span class="line">        ans=<span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(candies)):</span><br><span class="line">            <span class="keyword">if</span> candies[i]+extraCandies&gt;=sort_candies[-<span class="number">1</span>]:</span><br><span class="line">                ans.append(<span class="built_in">bool</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    candies = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">    extraCandies = <span class="number">3</span></span><br><span class="line">    solution=Solution().kidsWithCandies(candies,extraCandies)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>上面的代码中使用了sorted排序，其实没有必要，因为只需求到最大值。for循环也可以使用简洁形式表达，使代码更加紧凑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kidsWithCandies</span>(<span class="params">self, candies , extraCandies </span>) :</span><br><span class="line">        maxCandies = <span class="built_in">max</span>(candies)</span><br><span class="line">        ret = [candy + extraCandies &gt;= maxCandies <span class="keyword">for</span> candy <span class="keyword">in</span> candies]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：我们首先使用
O(n)的时间预处理出所有小朋友拥有的糖果数目最大值。对于每一个小朋友，我们需要
O(1) 的时间判断这个小朋友是否可以拥有最多的糖果，故渐进时间复杂度为
O(n)。</p></li>
<li><p>空间复杂度：这里只用了常数个变量作为辅助空间，与 n
的规模无关，故渐进空间复杂度为 O(1)。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1470 Shuffle the Array-简单</title>
    <url>/2020/09/17/2020-09-17-Q1470%20Shuffle%20the%20Array-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h1 id="shuffle-the-array"><a
href="https://leetcode-cn.com/problems/shuffle-the-array/">Shuffle the
Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given the array nums consisting of 2n elements in the form
[x1,x2,...,xn,y1,y2,...,yn].</p>
<p>Return the array in the form [x1,y1,x2,y2,...,xn,yn].</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>nums.length == 2n</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums = [2,5,1,3,4,7], n = 3 Output: [2,3,5,4,1,7] Explanation:
Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is
[2,3,5,4,1,7].</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums = [1,2,3,4,4,3,2,1], n = 4 Output: [1,4,2,3,3,2,4,1]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: nums = [1,1,2,2], n = 2 Output: [1,2,1,2]</p>
</blockquote>
<h3 id="approach-1-循环">Approach 1: 循环</h3>
<p>本来打算使用单行FOR循环漂亮地完成这道题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [[nums[i],nums[n+i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br></pre></td></tr></table></figure>
<p>不幸的是这个写法导致结果变成了一个嵌套的两层的列表，为了消除嵌套的括号，尝试了利用zip(*)解压，.replace("[",'')等操作</p>
<ul>
<li>zip(a,b)是合并/压缩，zip(*c)是拆分/解压，并返回一个地址，使用*
zip()和*
zip(*)则返回数据。如果想连续解压两次写成嵌套形式，就有点问题，比如解压a，写为：*zip(**zip(*a))会造成混乱。因此不能实现效果。</li>
<li>replace则会多出引号</li>
</ul>
<p>没办法，常规写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self, nums, n</span>):</span><br><span class="line">        ans=nums[:]</span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            ans[j],ans[j+<span class="number">1</span>]=nums[i],nums[n+i]</span><br><span class="line">            j=j+<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums =[<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>]</span><br><span class="line">    n = <span class="number">3</span></span><br><span class="line">    solution=Solution().shuffle(nums,n)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>列表<strong>赋值的时候是地址传递</strong>，例如ans=nums，修改ans会改变nums</p>
<h3 id="复杂度分析">复杂度分析</h3>
<ul>
<li><p>时间复杂度：O(N)</p></li>
<li><p>空间复杂度：O(N)</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q47 Permutations II-中等-回溯</title>
    <url>/2020/09/18/2020-09-18-Q47%20Permutations%20II-%E4%B8%AD%E7%AD%89-%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="permutations-ii"><a
href="https://leetcode-cn.com/problems/permutations-ii/">Permutations
II</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a collection of numbers that might contain duplicates, return
all possible unique permutations.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: [1,1,2] Output: [ [1,1,2], [1,2,1], [2,1,1]]</p>
</blockquote>
<h3 id="approach-1-循环">Approach 1: 循环</h3>
<p>本来打算使用Hash
table统计一下有哪些元素，以及对应的个数，但后来想了想其实没有必要统计。在写代码的时候找到了一个快速实现字典初始化的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hash=<span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    Hash[nums[i]]=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>可以用下面这句等效替代，节省一个For循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hash.setdefault(nums[i], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>下面正片开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="comment"># 错误输入检测</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">nums, temp_list</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp_list) == n:</span><br><span class="line">                ans.append(temp_list) <span class="comment"># temp_list存满了就放入ans</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]: <span class="comment"># 第一个元素不进行此判断</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dfs(nums[:i]+nums[i+<span class="number">1</span>:], temp_list+[nums[i]])</span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line">        dfs(nums, [])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    solution=Solution().permuteUnique(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>主要利用排序后对列表的切片操作，巧妙地对排列进行剪支</p>
<p>写的非常简洁，值得好好研究</p>
<h2 id="复杂度分析">复杂度分析</h2>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n\times
n!)\]</span></p>
<p>算法的复杂度首先受 backtrack 的调用次数制约，backtrack 的调用次数为
<span class="math display">\[\sum_{k = 1}^{n}{P(n, k)}\]</span>次，其中
<span class="math display">\[P(n, k) = \frac{n!}{(n - k)!} = n (n - 1)
... (n - k + 1)\]</span>，该式被称作 n 的 k - 排列，或者部分排列</p>
<p>这说明 backtrack 的调用次数是 <span
class="math display">\[O(n!)\]</span>的。</p>
<p>而对于 backtrack 调用的每个叶结点（最坏情况下没有重复数字共 <span
class="math display">\[n!\]</span> 个），我们需要将当前答案使用 <span
class="math display">\[O(n)\]</span>
的时间复制到答案数组中，相乘得时间复杂度为 <span
class="math display">\[O(n \times n!)\]</span>。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(n
)\]</span>。递归的时候栈深度会达到
O(n)<em>O</em>(<em>n</em>)，因此总空间复杂度为 O(n +
n)=O(2n)=O(n)<em>O</em>(<em>n</em>+<em>n</em>)=<em>O</em>(2<em>n</em>)=<em>O</em>(<em>n</em>)。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Hierarchical motor control in mammals and machinesd (Nature)</title>
    <url>/2020/09/19/2020-09-19-Reinforcement%20Learning%20-%20Hierarchical%20motor%20control%20in%20mammals%20and%20machinesd%20(Nature)/</url>
    <content><![CDATA[<h1 id="hierarchical-motor-control-in-mammals-and-machines">Hierarchical
motor control in mammals and machines</h1>
<p>论文链接：https://www.nature.com/articles/s41467-019-13239-6</p>
<h2 id="背景">背景</h2>
<p>很多人工智能领域的进展启发了神经科学的研究。多数神经科学的研究都致力于探索单个任务空间的离散任务，而AI研究主要在agent玩复杂的游戏上。近期生物上的“synthetic
motor control”却很少有人讨论。</p>
<p>本文是一篇讨论AI和神经科学关于HRL以及H
control的综述，角度比较好，介绍了大量细分方向的工作，非常值得一读。</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>神经科学启发了机器人中的subsumption
architecture，简单搜了一下类似于层级机构的雏形（1986）。</li>
<li>Optimal feedback control
(OFC)研究如何优化运动，降低优化函数的值，取得最优性能；神经科学研究的是如何理解通过神经系统生成不同的行为动作。</li>
</ul>
<p>下面介绍几个重叠领域的重要工作：</p>
<h3 id="computational-approaches-to-motor-control">1. computational
approaches to motor control</h3>
<ul>
<li>运动控制在animal and artificial system中都是值得关注的问题；</li>
<li>控制通过一个controller或者policy</li>
<li>图1提供了三种控制结构，</li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200917-1.png" /></p>
<ul>
<li><p>生物：内部前向模型Internal forward models are used to predict the
future consequences of
actions。该模型是允许虚拟行为的，可以预测行为后果。</p></li>
<li><p>OFC被用于解释volitional control意志控制</p>
<ul>
<li>Diedrichsen, J., Shadmehr, R. &amp; Ivry, R. B. The coordination of
movement: optimal feedback control and beyond. Trends Cogn. Sci. 14,
31–39 (2010).</li>
<li>Scott, S. H. The computational and neural basis of voluntary motor
control and planning. Trends Cogn, Sci, 16, 541–549 (2012).</li>
</ul></li>
<li><p>OFC几乎可以概括所有的闭环控制算法，一些扩展的OFC主要是考虑了以下三点：</p>
<ul>
<li><p>运动控制目标是最大化一个优化函数；</p></li>
<li><p>利用传感反馈来进行行为选择；</p></li>
<li><p>内部模型帮助弥补传感延迟和执行状态估计；</p></li>
</ul></li>
<li><p>OFC对目标函数的组成结构非常包容，甚至不需要一个直接的目标，但在快速求解上有一点缺陷</p></li>
</ul>
<h3 id="motor-control-of-synthetic-systems">2. Motor control of
synthetic systems</h3>
<ul>
<li><p>这部分内容主要涉及DRL，没提到什么新鲜的内容。</p></li>
<li><p>planning methods:</p>
<ul>
<li>Mordatch, I., Todorov, E. &amp; Popović, Z. Discovery of complex
behaviors through contact-invariant optimization. ACM T, Graphics (TOG)
31, 43 (2012).</li>
<li>Mordatch, I., Wang, J. M., Todorov, E. &amp; Koltun, V. Animating
human lower limbs using contact-invariant optimization. ACM T. Graphic.
32, 203 (2013)</li>
</ul></li>
<li><p>导航任务：Jaderberg, M. et al. Reinforcement learning with
unsupervised auxiliary tasks. In International Conference on Learning
Representations, 2017.</p></li>
<li><p><strong>挑战1：</strong>DRL的优化目标比较狭窄比如走路faster，保持平衡稳定，运动到某个位置等等，很难设计有泛化能力的目标。</p></li>
<li><p><strong>挑战2：</strong>
<strong>处理变化的目标</strong>。通过其他任务的经验生成运动，适应变化的目标。</p></li>
</ul>
<h3 id="core-principles-of-hierarchical-motor-control">3. Core
principles of hierarchical motor control</h3>
<h4 id="information-factorization">3.1 Information factorization</h4>
<ul>
<li>Information factorization
（信息因子分解）：分层系统提供局部或者预处理的信息给其它系统的过程</li>
<li>运动中有一部分模式的通用的，要么high-level behavior是invariant
，要么low-level behavior是invariant</li>
<li>That some goals or tasks can be solved by a multiplicity of
execution details (“motor equivalence”) has long been recognized as
important in movement science and has also been identified as relevant
for robot control.
有些任务可以用等效的运动去完成，这也是机器人控制上的一个问题</li>
</ul>
<h4 id="partial-autonomy">3.2 Partial autonomy</h4>
<ul>
<li>完整的优化一个动作成本很高，但是只要产生出了一次动作，可以训练一个“reactive”
subsystem重复地长生这个运动而不用冗余的规划过程。这个过程涉及到局部自主（partial
autonomy）以及半自主系统（semi-autonomous
subsystem），在算法层面主要是加载之前算出来的解。</li>
<li>self-supervised learning ，生成的轨迹永续训练另外的系统in an
amortized fashion（用分期的方式）</li>
</ul>
<h4 id="modular-objectives">3.3 Modular objectives</h4>
<ul>
<li>很多ANN在用于控制问题时使用end2end的优化，这样就只能设置一个优化目标，并最大化它</li>
<li>使用模块化的子系统需要制定独特的模块化子目标</li>
<li>一种流行的方法是训练控制器解决任务的同事也训练一组内部状态表征（internal
state
representations）来预测未来的传感数据，某种程度上来讲，这也是一种分层的控制系统。</li>
<li>另一个景点的方法同样保持了层级的目标结构，divideand-conquer
strategy。例如高层控制器决定运动的方向，低层控制器去实施，高层控制器的信号也可以作为
a dense teaching signal that the low-level controller learns from as it
assesses how well it stays on the instructed
course。高层口农资器处理更全局的任务。代表工作：（前两篇低层系统优化目标固定，最有一批FuN是学习抽象目标空间）
<ul>
<li>Nachum, O., Gu, S., Lee, H. &amp; Levine, S. <strong>Near-optimal
representation learning for hierarchical reinforcement
learning</strong>. In International Conference on Learning
Representations, 2019.<br />
</li>
<li>Wayne, G. &amp; Abbott, L. F. Hierarchical control using networks
trained with higher-level forward models. Neural Comput. 26, 2163–2193
(2014)<br />
</li>
<li>Vezhnevets, A. S. et al. Feudal networks for hierarchical
reinforcement learning. In Proceedings of the 34th International
Conference on achine Learning, 3540–3549. JMLR. org, 2017.</li>
</ul></li>
</ul>
<h4 id="multi-joint-coordination">3.4 Multi-joint coordination</h4>
<ul>
<li><p>motor synergy concept （Synergies in coordination: a
comprehensive overview of neural, computational, and behavioral
approaches. J. Neurophysiol. 120, 2761–2774 (2018). ）</p></li>
<li><p>在肌肉驱动的系统上，从高层面设计任务显然会更容易，例如reaching
and grasping. This is perhaps most readily apparent in a setting like
reaching and grasping, where random movement of all degrees of freedom
independently will be ineffective, but random movements in the subspace
of hand configurations encountered during grasping will lead to more
effective interactions.</p></li>
<li><p>几个机器人学方面的工作:</p></li>
<li><p>Vukobratović, M. &amp; Borovac, B. Zero-moment point—thirty five
years of its life. Int. J. Hum. Robot. 1, 157–173 (2004).</p></li>
<li><p>Todorov, E., Li, W. &amp; Pan, X. From task parameters to motor
synergies: a hierarchical framework for approximately optimal control of
redundant manipulators. J. Robot. Syst. 22, 691–710 (2005).</p></li>
<li><p>Mordatch, I., De Lasa, M. &amp; Hertzmann, A. Robust
physics-based locomotion using low-dimensional planning. ACM T. Graphic.
29, 71 (2010).</p></li>
<li><p>unsupervised learning (or self-supervised learning) of
sensorimotor primitives in order to produce a learned low-level
controller</p>
<ul>
<li>Todorov, E. <strong>Optimality principles in sensorimotor
control</strong>. Nat. Neurosci. 7, 907 (2004).<br />
</li>
<li>Todorov E. &amp; Ghahramani., Z. Unsupervised learning of
sensory-motor primitives. In Proceedings of the 25th Annual
International Conference of the IEEE Engineering in Medicine and Biology
Society, Vol. 2, 1750–1753. IEEE, 2003.</li>
</ul></li>
</ul>
<h4 id="temporal-abstraction">3.5 Temporal abstraction</h4>
<ul>
<li>通过设置时间间隔简化使得高层控制器更宏观，但会损失控制精度，这需要低层的控制器去完成。</li>
<li>对于机器人操作任务，离散情况下只有时间维度是最好抽象的，在连续控制的问题上，多关节的协同比时间抽象更有决定性的作用。当然长期的行动规划和行为选择是需要时间抽象（Temporal
abstraction）的。</li>
</ul>
<h3 id="neurobiological-hierarchical-motor-control">4. Neurobiological
hierarchical motor control</h3>
<ul>
<li>这部分主要就少神经科学上关于分层控制的研究工作。</li>
<li>神经系统在结构和功能和功能上都有分层（both anatomically and
functionally hierarchical）</li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200918-1.png" /></p>
<h4 id="lower-level-movement-centers">4.1 “Lower-level” movement
centers</h4>
<ul>
<li>脊髓（spine）在没有高层输入的情况下也可以控制躯体运动；脊髓环路能生成多关节的时空协同模式
(spatiotemporal coordination patterns)，通过中心模式生成器（central
pattern generators (CPGs) ）产生虚构的动作（ “fictive”
locomotion）；也可以通过传感信息局部调制关节活动。（CPG）</li>
<li>多关节协同通常需要：cerebellum-derived signals，somatic
feedback（躯体反馈）以及inputs from other sensory
systemts（传感输入）</li>
<li>CPG主要产生节律的运动，比如走路，鱼摆尾等等</li>
</ul>
<h4 id="subcortical-mid-level-movement-regulation">4.2 Subcortical
“mid-level” movement regulation</h4>
<ul>
<li>1）皮层对于运动来说并不是必要的。因为去除了皮层的cat在恢复一段时间后，可以具备避障能力（刚切除时没有）。这反映出层次化控制和局部自治。</li>
<li>2）皮层下的结构可以选择运动协调模式</li>
<li>3）没了皮层后，传感受到损伤。但还可以通过non-cortical的通路接收传感信息。这里体现了信息因子分解。</li>
<li>4）小脑负责运动协调，基底神经节负责行为选择；</li>
</ul>
<h4 id="cortical-high-level-control-of-movement">4.3 Cortical
“high-level” control of movement</h4>
<ul>
<li>具备一些分层结构特征</li>
</ul>
<h3 id="shared-challenges-for-biological-and-synthetic-motor-control">5.
Shared challenges for biological and synthetic motor control</h3>
<ul>
<li>despite significant progress in artificial intelligence research
over the past years, there remain meaningful challenges in dealing with
rich sensation, a broader range of tasks, rapid adaptation or
improvisation, as well as object interaction and tool use.
<ul>
<li>处理多传感融合</li>
<li>处理更普遍的任务</li>
<li>快速适应、即兴创作</li>
<li>物体交互</li>
<li>使用工具</li>
</ul></li>
</ul>
<h4 id="towards-full-scale-body-control">5.1 Towards full-scale body
control</h4>
<ul>
<li>对生物力学、肌肉系统、肌肉骨骼系统的研究</li>
<li>针对这类系统有两个控制思路：
<ul>
<li>训练该系统解决不同的任务</li>
<li>对观测到的行为生成数据驱动的模型</li>
</ul></li>
</ul>
<h4 id="the-structure-of-inter-region-communication">5.2 The structure
of inter-region communication</h4>
<ul>
<li>脑区之间的编码方案(coding
schemes)仍然未知，我们同样不确定分层控制系统中的信息流的形式。</li>
<li>三个问题：
<ul>
<li>一个问题是分层的学习系统层级间的通信不一定需要有明确的可解释性，除非可解释的结构能带来明确的好处</li>
<li>一个系统的输出如何调制另一个系统，对目标的调制应该是线性的还是非线性的？</li>
<li>关于分辨率问题，表示具体行为的抽象目标之间的通讯和对下级系统丰富的指令怎么保持平衡</li>
</ul></li>
<li>生物的角度来看，层次化的系统间一定要有一种语言或者编码，这种上下层级之间的通讯方案是AI和神经科学应该共同讨论的问题。</li>
</ul>
<h4 id="ethological-行为学的-motor-learning-and-imitation">5.3
Ethological （行为学的） motor learning and imitation</h4>
<ul>
<li>self-directed rehearsal: songbird在雏鸟阶段学习唱歌</li>
<li>主动采样策略：Gottlieb J. &amp; Oudeyer, P. Y. <strong>Towards a
neuroscience of active sampling and curiosity</strong>. Nat. Rev.
Neurosci. 19, 758–770 (2018)</li>
</ul>
<h2 id="总结">总结</h2>
<p>这篇综述很好地概括并梳理了在AI和生物神经科学中的零散的工作，总结出了很多子领域和本质问题，这是一篇很好的综述，可以帮助对领域的快速了解。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Principles of Temporal Processing Across the Cortical Hierarchy</title>
    <url>/2020/09/21/2020-09-21-Neuroscience%20-%20Principles%20of%20Temporal%20Processing%20Across%20the%20Cortical%20Hierarchy/</url>
    <content><![CDATA[<h1
id="principles-of-temporal-processing-across-the-cortical-hierarchy">Principles
of Temporal Processing Across the Cortical Hierarchy</h1>
<p>论文链接：https://www.sciencedirect.com/science/article/pii/S0306452218302951?via%3Dihub</p>
<h2 id="背景">背景</h2>
<p>生活中存在着许多的时间和空间的尺度。对于空间结构的表现，在网络中通常是以Pooling，normalization，以及pattern
completion的形式呈现。这些操作可以改变空间上的尺度，形成对空间鲁棒的识别能力。这篇文章回顾了一些列的时间上操作的研究，帮助理解temporal
polling，temporal normalization，以及temporal pattern completion。</p>
<ul>
<li>Pooling：建立高维的表征，形成对输入的鲁棒的缩放和转换</li>
<li>normalization：增强特征选择以及输入的鲁棒性</li>
<li>pattern completion：降低噪声和缺失数据的影响</li>
</ul>
<p>如果空间上的这些操作能够帮助开展高效的不同尺度的分析，那么类似的，时间上的操作应该也能帮助对时间的结构分析。</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>分层的大脑结构是通过语言、听觉、视觉任务来发现的。</p></li>
<li><p>三个问题：</p>
<ul>
<li>如何在功能层面定义时间操作；</li>
<li>操作在皮层中实施的神经基础是什么；</li>
<li>该操作被迭代的运用在多个皮层层级上吗；</li>
</ul></li>
</ul>
<h3 id="时间上的信息处理原则">时间上的信息处理原则</h3>
<h4 id="pooling-in-space-and-time">1.1 Pooling in space and time</h4>
<ul>
<li><p>pooling可以看做是一个"sum" or "max" operation，产生high-level
representations</p></li>
<li><p>方法：</p>
<ul>
<li>定义窗口宽度<span class="math display">\[\tau\]</span></li>
<li>在<span
class="math display">\[[t-\tau,t]\]</span>的时间内发生了激活，则输出激活信号。</li>
</ul></li>
<li><p>允许了精确的输入时间</p></li>
<li><p>生物证据：神经元的兴奋通过突出调节，在数秒至数小时内累积并持续（Kukushkin
NV, Carew TJ (2017) Memory takes time. Neuron 95(2):259–279）</p></li>
</ul>
<h4 id="normalization-in-space-and-time">1.2 Normalization in space and
time</h4>
<ul>
<li>神经系统需要非线性操作来增加刺激的选择性响应和抑制过度激活（A
feedforward architecture accounts for rapid categorization. Proc Natl
Acad Sci 104 (15):6424–642）</li>
<li>空间Normalization是根据其他具有相似选择性的神经元收到的输入重新调整其响应的过程</li>
</ul>
<p><span class="math display">\[
R_j=\gamma \bigg(\frac{D^n_i}{\sigma^n+\sum_k D^n_k}\bigg)
\]</span> 神经元<span class="math display">\[j\]</span>的响应 <span
class="math display">\[R_j\]</span> ，<span
class="math display">\[D_i\]</span> 是输入信号<span
class="math display">\[\gamma\]</span>是乘法尺度系数，<span
class="math display">\[\sigma\]</span>是形状系数，<span
class="math display">\[n\]</span>决定了非线性的程度。这个公式是“winner-take-all”
mechanism: all neuralu units will be normalized to zero, except the unit
thatr eceives the largest input drive.</p>
<ul>
<li><p>Normalization in time</p></li>
<li><p><strong>neuronal adaptation</strong>: the tendency of a neuron to
decrease its response to a stimulus, when that stimulus was previously
presented within some time window.</p></li>
<li><p>temporal normalization can improve <strong>neuronal sensitivity
to sequential patterns</strong>, and make them robust to changes in
input gain .</p></li>
<li><p><strong>pop-out effect</strong>: infrequently presented stimuli
are less adapted and therefore produce larger responses than frequent
stimuli.</p></li>
</ul>
<h4 id="pattern-completion-in-space-and-time">1.3 Pattern completion in
space and time</h4>
<h2 id="总结">总结</h2>
<p>这篇文章讲得不够具体，temporal pool 和 temporal normalization
还行，似乎能和计算模型结合，可是 temporal normalization
有什么好处呢？</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>V-rep中设置完全可控的球状关节   </title>
    <url>/2020/09/22/2020-09-22-V-rep%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%AE%8C%E5%85%A8%E5%8F%AF%E6%8E%A7%E7%9A%84%E7%90%83%E7%8A%B6%E5%85%B3%E8%8A%82/</url>
    <content><![CDATA[<h1
id="v-rep中设置完全可控的球状关节">V-rep中设置完全可控的球状关节</h1>
<h2 id="背景">背景</h2>
<p>V-rep这软件好是好，就是功能太单一，一切都是对照现有工业机器人的功能进行设计的。因此，软件中无法实现可控的球状关节。</p>
<blockquote>
<p>球关节：右键 - add - joint - spherical</p>
</blockquote>
<p>双击关节图标，可以看到设置界面几乎就没有能设置的地方，该关节类型也被锁死，无法控制。</p>
<p>不仅如此，V-rep中，一个物体不能同时连接多余1个旋转关节。而且关节与物体的连接关系只能是<code>物体1--关节1--物体2--关节2</code>因此也几乎堵死想通过三个正交旋转关节构建球关节的想法。</p>
<p>但真的就没有办法了吗？</p>
<h3 id="plan-a-用小中介物体衔接">PLAN A: 用小中介物体衔接</h3>
<p>该方法是利用三个分别平行于空间坐标轴的正交转动关节来构成球关节。尽管关节和关节之间不能直接连接，但我们可以设置比较小的中间介质来衔接不同的关节。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-1.png" /></p>
<p>关节的层级结构如下：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-2.png" /></p>
<p>下图中则是用两个球体衔接了3个关节，基本上实现了球关节的效果。准确地说是实现了一种“椭球”关节。</p>
<p>但次方法还是存在缺点的。如果设置关节匀速转动会发现关节转动的角度和子物体转动的角度不一致（关节角度&gt;物体角度）。还容易造成关节中轴线的偏移等奇怪的情况。因此这个球关节只是“半可控”状态。</p>
<h3 id="plan-b-修改中介物体属性">PLAN B: 修改中介物体属性</h3>
<p>在后续的学习过程中逐渐接触到了关于物体属性的设置，其中有两项吸引力我的注意力。</p>
<p>新建一个object，点开动力学设置，可以看到两个关键属性：Respondable 和
Dynamic。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-3.png" /></p>
<p>其中：</p>
<ul>
<li>Respondable:
指的是该物体是否是可响应的，这个可响应主要是指碰撞和接触，即使设置不响应，也会受到重力和<strong>关节旋转</strong>影响。</li>
<li>Dynamic:
指的是物体是静态还是动态的。如果设置为静态，物体不受重力影响（<strong>可悬浮</strong>），但仍然是可以判定接触和碰撞的，受到<strong>关节旋转</strong>影响的。</li>
</ul>
<p>注意上面标黑的关键字，你是否想到了我想到的东西？</p>
<p><strong>Step 1:</strong>
首先依然是搭建三个正交的转动关节，只不过这一次不用留出中介物体的空隙了。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-4.png" /></p>
<p><strong>Step 2:</strong>
可是这三个关节在功能上并没有连接上，现在我们添加中介物体。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-5.png" /></p>
<p>在分层视图中，将中介物体拖到平行于z轴的关节下，设置物体的动力学为<strong>is
not Respondable</strong>, <strong>Body is Dynamic</strong></p>
<p>这样物体就通过平行于z轴的关节实现了与父物体的连接，并可以实现水平旋转，接下来设置第二个中介物体。</p>
<p><strong>Step 3:</strong>
单击刚才的中介物（这里取名叫中介物1），<code>ctrl + c</code> and
<code>ctrl + v</code> 建立与中介物1重叠的中介物2，设置其动力学<strong>is
not Respondable</strong>, <strong>Body is not Dynamic</strong></p>
<p>相当于新建了一个基座。在层级视图中将中介物2放到中介物1下方。将第二个关节放在中介物2下方。</p>
<p>并在第二个关节下方房子中介物3（依然与之前的中介物是位置重叠的）。设置物体的动力学为<strong>is
not Respondable</strong>, <strong>Body is Dynamic</strong>。</p>
<p>这里解释一下关系：</p>
<p>第一个关节本质上是带动中介物1转动，由于中介物2挂在中介物1下方，尽管中介物2是不可响应的静态物体，但也会受到父物体转动的影响，这相当于基坐标发生了改变。所以中介物2会受到关节1的控制。</p>
<p>但此时中介物2已经不能再被其它关节控制了。我们在介物2所在的空间位置建立中介物3，并用关节2连接中介物2和3，中介物3是直接受到关节2控制的，但也会受中介物2运动的影响。</p>
<p>这样一来，我们就实现了一个复合关节，接下来重复step3，建立好第三个关节，并把连杆放在第三个关节下。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200922-6.png" /></p>
<p>这个关节中有4个中介物，并且是完全重合的，但由于设置了is not
Respondable，因此不会受到碰撞的影响，而且还可以将这个关节放置在物体内部，也不会被排挤。</p>
<p>至此，我们就完成了一个真正意义上的完全可控的球形关节！</p>
<p>ohhhhhhhhhhhhhhhhhhhhhhh</p>
]]></content>
      <tags>
        <tag>V-rep</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1470 Shuffle the Array-简单</title>
    <url>/2020/09/22/2020-09-22-Q1512%20Number%20of%20Good%20Pairs-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h1 id="number-of-good-pairs"><a
href="https://leetcode-cn.com/problems/number-of-good-pairs/">Number of
Good Pairs</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an array of integers nums.</p>
<p>A pair (i,j) is called good if nums[i] == nums[j] and i &lt; j.</p>
<p>Return the number of good pairs.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: nums = [1,2,3,1,1,3] Output: 4 Explanation: There are 4 good
pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: nums = [1,1,1,1] Output: 6 Explanation: Each pair in the array
are good.</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: nums = [1,2,3] Output: 0</p>
</blockquote>
<h3 id="approach-1-循环嵌套">Approach 1: 循环嵌套</h3>
<p>过于简单，直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIdenticalPairs</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n):</span><br><span class="line">                <span class="keyword">if</span> nums[i]==nums[j]:</span><br><span class="line">                    ans+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">    solution=Solution().numIdenticalPairs(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(\frac{N(N+1)}{2})\]</span></p></li>
<li><p>空间复杂度：O(1)</p></li>
</ul>
<h2 id="approach-2-组合计数">Approach 2: 组合计数</h2>
<p>用哈希表统计每个数在序列中出现的次数，假设数字 k 在序列中出现的次数为
v，那么满足题目中所说的 <span class="math display">\[{\rm nums}[i] =
{\rm nums}[j] = k(i &lt; j)\]</span> 的 <span class="math display">\[(i,
j)\]</span> 的数量就是 <span class="math display">\[\frac{v(v - 1)}{2}
\]</span>，即 k 这个数值对答案的贡献是 <span
class="math display">\[\frac{v(v -
1)}{2}\]</span>。我们只需要把所有数值的贡献相加，即可得到答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIdenticalPairs</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m = collections.Counter(nums)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(v * (v - <span class="number">1</span>) // <span class="number">2</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> m.items())</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O<em>(</em>n)。</li>
<li>空间复杂度：O<em>(</em>n)，即哈希表使用到的辅助空间的空间代价。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q617 Merge Two Binary Trees-简单-深度/广度优先搜索</title>
    <url>/2020/09/23/2020-09-23-Q617%20Merge%20Two%20Binary%20Trees-%E7%AE%80%E5%8D%95-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="merge-two-binary-trees"><a
href="https://leetcode-cn.com/problems/merge-two-binary-trees/">Merge
Two Binary Trees</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given two binary trees and imagine that when you put one of them to
cover the other, some nodes of the two trees are overlapped while the
others are not.</p>
<p>You need to merge them into a new binary tree. The merge rule is that
if two nodes overlap, then sum node values up as the new value of the
merged node. Otherwise, the NOT null node will be used as the node of
new tree.</p>
<p><strong>Note:</strong> The merging process must start from the root
nodes of both trees.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">	Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">Output: </span><br><span class="line">Merged tree:</span><br><span class="line">	     3</span><br><span class="line">	    / \</span><br><span class="line">	   4   5</span><br><span class="line">	  / \   \ </span><br><span class="line">	 5   4   7</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="approach-1-dfs">Approach 1: DFS</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTrees</span>(<span class="params">self, t1: TreeNode, t2: TreeNode</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">            <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line">        merged = TreeNode(t1.val + t2.val)</span><br><span class="line">        merged.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">        merged.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">        <span class="keyword">return</span> merged</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(\min(m,n))\]</span>，其中 m 和 n
分别是两个二叉树的节点个数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会对该节点进行显性合并操作，因此被访问到的节点数不会超过较小的二叉树的节点数。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(\min(m,n))\]</span>，其中 m 和 n
分别是两个二叉树的节点个数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数。</p></li>
</ul>
<h2 id="approach-2-bfs">Approach 2: BFS</h2>
<p>也可以使用广度优先搜索合并两个二叉树。首先判断两个二叉树是否为空，如果两个二叉树都为空，则合并后的二叉树也为空，如果只有一个二叉树为空，则合并后的二叉树为另一个非空的二叉树。</p>
<p>如果两个二叉树都不为空，则首先计算合并后的根节点的值，然后从合并后的二叉树与两个原始二叉树的根节点开始广度优先搜索，从根节点开始同时遍历每个二叉树，并将对应的节点进行合并。</p>
<p>使用三个队列分别存储合并后的二叉树的节点以及两个原始二叉树的节点。初始时将每个二叉树的根节点分别加入相应的队列。每次从每个队列中取出一个节点，判断两个原始二叉树的节点的左右子节点是否为空。如果两个原始二叉树的当前节点中至少有一个节点的左子节点不为空，则合并后的二叉树的对应节点的左子节点也不为空。对于右子节点同理。</p>
<p>如果合并后的二叉树的左子节点不为空，则需要根据两个原始二叉树的左子节点计算合并后的二叉树的左子节点以及整个左子树。考虑以下两种情况：</p>
<ul>
<li><p>如果两个原始二叉树的左子节点都不为空，则合并后的二叉树的左子节点的值为两个原始二叉树的左子节点的值之和，在创建合并后的二叉树的左子节点之后，将每个二叉树中的左子节点都加入相应的队列；</p></li>
<li><p>如果两个原始二叉树的左子节点有一个为空，即有一个原始二叉树的左子树为空，则合并后的二叉树的左子树即为另一个原始二叉树的左子树，此时也不需要对非空左子树继续遍历，因此不需要将左子节点加入队列。</p></li>
</ul>
<p>对于右子节点和右子树，处理方法与左子节点和左子树相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTrees</span>(<span class="params">self, t1: TreeNode, t2: TreeNode</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">            <span class="keyword">return</span> t1</span><br><span class="line">        </span><br><span class="line">        merged = TreeNode(t1.val + t2.val)</span><br><span class="line">        queue = collections.deque([merged])</span><br><span class="line">        queue1 = collections.deque([t1])</span><br><span class="line">        queue2 = collections.deque([t2])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue1 <span class="keyword">and</span> queue2:</span><br><span class="line">            node = queue.popleft()</span><br><span class="line">            node1 = queue1.popleft()</span><br><span class="line">            node2 = queue2.popleft()</span><br><span class="line">            left1, right1 = node1.left, node1.right</span><br><span class="line">            left2, right2 = node2.left, node2.right</span><br><span class="line">            <span class="keyword">if</span> left1 <span class="keyword">or</span> left2:</span><br><span class="line">                <span class="keyword">if</span> left1 <span class="keyword">and</span> left2:</span><br><span class="line">                    left = TreeNode(left1.val + left2.val)</span><br><span class="line">                    node.left = left</span><br><span class="line">                    queue.append(left)</span><br><span class="line">                    queue1.append(left1)</span><br><span class="line">                    queue2.append(left2)</span><br><span class="line">                <span class="keyword">elif</span> left1:</span><br><span class="line">                    node.left = left1</span><br><span class="line">                <span class="keyword">elif</span> left2:</span><br><span class="line">                    node.left = left2</span><br><span class="line">            <span class="keyword">if</span> right1 <span class="keyword">or</span> right2:</span><br><span class="line">                <span class="keyword">if</span> right1 <span class="keyword">and</span> right2:</span><br><span class="line">                    right = TreeNode(right1.val + right2.val)</span><br><span class="line">                    node.right = right</span><br><span class="line">                    queue.append(right)</span><br><span class="line">                    queue1.append(right1)</span><br><span class="line">                    queue2.append(right2)</span><br><span class="line">                <span class="keyword">elif</span> right1:</span><br><span class="line">                    node.right = right1</span><br><span class="line">                <span class="keyword">elif</span> right2:</span><br><span class="line">                    node.right = right2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> merged</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(\min(m,n))\]</span>，其中 m 和 n
分别是两个二叉树的节点个数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(\min(m,n))\]</span>，其中 m 和 n
分别是两个二叉树的节点个数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Emergence of abstract rules in the primate brain (Nature)</title>
    <url>/2020/09/24/2020-09-24-Neuroscience%20-%20Emergence%20of%20abstract%20rules%20in%20the%20primate%20brain/</url>
    <content><![CDATA[<h1 id="emergence-of-abstract-rules-in-the-primate-brain">Emergence of
abstract rules in the primate brain</h1>
<p>论文链接：https://www.nature.com/articles/s41583-020-0364-5</p>
<h2 id="背景">背景</h2>
<p>抽象能力帮助学习规则，提升认知和决策能力，帮助避免潜在的环境危险，丰富人的社会行为和互动。</p>
<p>人是如何抽象事物，把经验变成有意义的概念的？本文探索这背后的神经机制。进而揭示前额叶皮质对抽象规则的形成（formation）、维护（maintenance）以及修正（revision）上的作用。</p>
<ul>
<li><p>好处：通过抽象规则，帮助形成adaptive behaviour</p></li>
<li><p>规则的出现是动态多阶段的过程（dynamic multistage processes
），包括rule formation, maintenance and revision</p></li>
<li><p>prefrontal cortex (PFC) is heavily involved in the representation
and implementation of abstract
rules。但只有前额叶皮层的部分区域对学习和实施抽象规则是必要的</p></li>
</ul>
<p><strong>结论：</strong>我们最终提出了一个统一的框架，将抽象规则的形成和执行与认知控制的神经架构联系起来</p>
<p><strong>key words:</strong> rule-guided behaviour</p>
<h2 id="主要工作">主要工作</h2>
<h4 id="rules-definition-and-classification">1 Rules: definition and
classification</h4>
<ul>
<li><p><strong>具体规则</strong>（concrete
rules）描绘了对象、事件与行为之间的简单的时空关系。刺激-响应或者刺激-输出关系。</p>
<p>具体的规则是依赖于经验的，通过大量的积极/消极的尝试逐渐强化形成（The
formation of concrete rules is experience-dependent）</p></li>
<li><p><strong>抽象规则</strong>（abstract
rules）更加复杂和多样。一个特点是他们可以容易地生成新的示例。可能会要求选择性注意力。可以用在不熟悉的环境中的新刺激上。</p>
<p>抽象规则描绘物体、事件和响应的交互和因果关系。用一刺激，目标不同，得到不同的响应。</p></li>
<li><p><strong>Selective attention</strong>: Neural mechanisms involved
in focusing cognitive resources on task-relevant sensoryperceptual
processes and inhibiting goal-irrelevant stimuli to facilitate achieving
goals.</p></li>
</ul>
<h4 id="concrete-and-multifaceted-categories">2 Concrete and
multifaceted categories</h4>
<ul>
<li>对环境刺激分类的能力是天生的或者是依赖经验学习到的experience-dependent
learning<br />
</li>
<li>Multifaceted
categories不取决于单个例子和传感特征，而是使用集成的刺激特征（形状、颜色、声音）。与抽象规则类似，能用于处理新的情况，指导复杂的目标导向的行为</li>
</ul>
<h4 id="abstract-rules-in-primates">3 Abstract rules in primates</h4>
<h4 id="evidence-from-neuronal-recordings">4 Evidence from neuronal
recordings</h4>
<h5 id="matching-and-non-matching-rules">4.1 Matching and non-matching
rules</h5>
<ul>
<li><p>Delayed matching to sample (DMS):
延时匹配规则，给出example和cue，延时一段时间后，选根据cue选择test
picture，要选择更example一致的为正确。</p></li>
<li><p>Delayed non-matching to sample (DNMS):
延时不匹配规则，给出example和cue，延时一段时间后，选根据cue选择test
picture，要选择更example不一致的为正确。</p></li>
<li><p>对猕猴的研究发现抽象规则在DLPFC (dorsolateral prefrontal cortex)
and VLPFC (ventrolateral prefrontal
cortex)被编码，对人的研究发现只在VLPFC</p></li>
</ul>
<h5 id="number-rules">4.2 Number rules</h5>
<ul>
<li><p>让猴子忽略物体的外表，只注意数量的关系</p></li>
<li><p>顶叶皮层的顶内沟编码数字信息 intraparietal sulcus (IPS) of the
parietal cortex encode numerical information</p></li>
</ul>
<h5 id="flexible-shifting-between-rules">4.3 Flexible shifting between
rules</h5>
<ul>
<li>规则上的迁移和变换，以及自己探索未知的规则</li>
</ul>
<h5 id="abstract-response-strategies">4.4 Abstract response
strategies</h5>
<ul>
<li>abstract response strategies<br />
</li>
<li>working memory task（Sakai, K. &amp; Passingham, R. E. Prefrontal
interactions reflect future task operations. Nat. Neurosci. 6, 75–81
(2003). ）</li>
</ul>
<h5 id="interactions-of-rules-and-categories">4.5 Interactions of rules
and categories</h5>
<h5 id="insight-from-neuronal-recordings">4.6Insight from neuronal
recordings</h5>
<ul>
<li>rule-based action selection</li>
</ul>
<h5 id="evidence-from-interventional-studies">4.7 Evidence from
interventional studies</h5>
<h5 id="stages-of-abstract-rule-development">4.8 Stages of abstract rule
development</h5>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200924-1.png" /></p>
<ul>
<li><p><strong>Rule formation</strong></p>
<ul>
<li><p>纹状体调制：</p>
<ul>
<li>Bunge, S. A. &amp; Wallis, J. D. Neuroscience of RuleGuided Behavior
(Oxford Univ. Press, 2008).<br />
</li>
<li>Nieder, A. &amp; Dehaene, S. Representation of number in the brain.
Annu. Rev. Neurosci. 32, 185–208 (2009).<br />
</li>
<li>Sleezer, B. J., Castagno, M. D. &amp; Hayden, B. Y. Rule encoding in
orbitofrontal cortex and striatum guides selection. J. Neurosci. 36,
11223–11237 (2016).</li>
<li>Sleezer, B. J. &amp; Hayden, B. Y. Differential contributions of
ventral and dorsal striatum to early and late phases of cognitive set
reconfiguration. J. Cogn. Neurosci. 28, 1849–1864 (2016).<br />
</li>
<li>Cools, R., Clark, L. &amp; Robbins, T. W. Differential responses in
human striatum and prefrontal cortex to changes in object and rule
relevance. J. Neurosci. 24, 1129–1135 (2004).</li>
</ul></li>
<li><p>海马调制：</p>
<ul>
<li><p>Zeithamova, D. et al. Brain mechanisms of concept learning. J.
Neurosci. 39, 8259–8266 (2019).</p></li>
<li><p>Bowman, C. R. &amp; Zeithamova, D. Abstract memory
representations in the ventromedial prefrontal cortex and hippocampus
support concept generalization. J. Neurosci. 38, 2605–2614
(2018).</p></li>
<li><p>Murray, E. A. &amp; Wise, S. P. Role of the hippocampus plus
subjacent cortex but not amygdala in visuomotor conditional learning in
rhesus monkeys. Behav. Neurosci. 110, 1261–1270 (1996).</p></li>
<li><p>Orbach, J., Milner, B. &amp; Rasmussen, T. Learning and retention
in monkeys after amygdala–hippocampus resection. Arch. Neurol. 3,
230–251 (1960).</p></li>
<li><p>Owen, A. M., Roberts, A. C., Polkey, C. E., Sahakian, B. J. &amp;
Robbins, T. W. Extra-dimensional versus intra-dimensional set shifting
performance following frontal lobe excisions, temporal lobe excisions or
amygdalo-hippocampectomy in man. Neuropsychologia 29, 993–1006
(1991).</p></li>
</ul></li>
<li><p>抽象规则的学习是依赖于海马和底层皮质。一旦学会动作，基于规则的任务随后的表现成为独立的内侧颞叶。PFC区域和纹状体之间的连接被认为形成了几个互补的并行网络，从而促进了通过反复试验学习规则所需的相互信息交换。</p></li>
<li><p>慢的和目标导向的学习是在大FPC完成的，而快的和强化导向的学习发生在纹状体
（Seger, C. A. &amp; Miller, E. K. Category learning in the brain. Annu.
Rev. Neurosci. 33, 203–219 (2010) ）</p></li>
</ul></li>
<li><p><strong>Rule storage and retrieval</strong></p></li>
<li><p><strong>Rule-guided behaviour</strong></p></li>
</ul>
<h2 id="总结">总结</h2>
<p>这是一篇综述文章，介绍的工作比较偏神经科学的研究。本文介绍了与抽象规则相关的背景、定义、神经基础，主要在PFC附近，这部分不熟悉，以后可以继续调研看看。</p>
<p>有几个关键词可以再去检索一下，看看有没有合适的文章。</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Motor Demands Constrain Cognitive Rule Structures</title>
    <url>/2020/09/25/2020-09-25-Neuroscience%20-%20Motor%20Demands%20Constrain%20Cognitive%20Rule%20Structures/</url>
    <content><![CDATA[<h1 id="motor-demands-constrain-cognitive-rule-structures">Motor Demands
Constrain Cognitive Rule Structures</h1>
<p>论文链接：https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004785</p>
<h2 id="背景">背景</h2>
<p>运动需求影响了实施抽象规则选择的结构。</p>
<p>低层、高层认知之间的影响。</p>
<h2 id="主要工作">主要工作</h2>
<p>利用贝叶斯推断做规则结构的聚类。对每个输入维度单独用一个专家判别器判断sample是否属于本规则，输出为0或者1。</p>
<p>最后用加权的形式综合各个专家的观点<span
class="math display">\[\pi(a)=w_C(t)\pi_C(a)+(1-w_C(t))\pi_S(a)\]</span>（两个专家情况）</p>
<p>然后对权重进行更新 <span class="math display">\[
w_C(t+1)=\frac{w_C(t)p(r_t|S_t,a_t,Color)}{w_C(t)p(r_t|S_t,a_t,Color)+(1-w_C(t))p(r_t|S_t,a_t,Shape)}
\]</span></p>
<p>后文还引入了bias，具体公式见原文。</p>
<h2 id="总结">总结</h2>
<p>本文有点单薄，也只是考虑了2个输入维度的情况，有点简单了。</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Reservoir Computing Model of Prefrontal Cortex</title>
    <url>/2020/09/28/2020-09-28-Neuroscience%20-%20Reservoir%20computing%20model%20of%20prefrontal%20cortex/</url>
    <content><![CDATA[<h1
id="reservoir-computing-model-of-prefrontal-cortex-creates-novel-combinations-of-previous-navigation-sequences-from-hippocampal-place-cell-replay-with-spatial-reward-propagation">Reservoir
computing model of prefrontal cortex creates novel combinations of
previous navigation sequences from hippocampal place-cell replay with
spatial reward propagation</h1>
<p>论文链接：https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006624</p>
<h2 id="背景">背景</h2>
<p>小鼠在复杂空间导航的能力与海马体中位置细胞的回放有关。spatial
navigation capacity involves the replay of hippocampal place-cells
during awake states</p>
<p>本文让小鼠学习TSP问题，学会了强化学习中的空间信用分配问题（spatial
credit assignment）</p>
<p>这篇工作基于两篇之前的工作：</p>
<ul>
<li>Gupta AS, van der Meer MA, Touretzky DS, Redish AD. Hippocampal
replay is not a simple function of experience. Neuron. 2010;
65(5):695–705. https://doi.org/10.1016/j.neuron.2010.01.034 PMID:
20223204.<br />
</li>
<li>Liu K, Sibille J, Dragoi G. Generative Predictive Codes by
Multiplexed Hippocampal Neuronal Tuplets. Neuron. 2018; 99(6):1329–41.
e6. https://doi.org/10.1016/j.neuron.2018.07.047 PMID: 30146305</li>
</ul>
<p>使用海马体的序列重放功能，实现对运动序列的优化，最优路径重放的频率会更高。</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>使用RNN模拟PFC，因为皮层连接大部分是局部而复发性的。</li>
<li>解决TSP问题中的两个假设：
<ul>
<li>非最优轨迹（non-optimal
trajectories）里，奖励之间的距离比近最优轨迹（near-optimal
trajectories）中奖励之间的距离大。在重放中持有轨迹出现较少，以此规则获得最优轨迹。</li>
<li>在最近激活的位置细胞重放中，正向和反向轨迹同时被编码。反向的重播允许模型在正方向和反方向上利用信息，但实际运动中，小鼠只会进行正向的运动。</li>
</ul></li>
<li>面对的挑战：
<ul>
<li>从无序的片段路径中学习全局的place cell激活序列</li>
<li>将多个非最优的序列高效连接成一个通往目标位置的路径</li>
<li>正向学习轨迹并反向生成它。</li>
</ul></li>
<li>海马和PFC的连接证据：Shin JD, Jadhav SP. Multiple modes of
hippocampal–prefrontal interactions in memory-guided behavior. Current
opinion in neurobiology. 2016; 40:161–9.
https://doi.org/10.1016/j.conb.2016.07.015 PMID: 27543753</li>
</ul>
<h2 id="方法">方法</h2>
<h3 id="place-cell">Place-cell</h3>
<ul>
<li>基本设置：
<ul>
<li>时间步N</li>
<li>轨迹<span class="math display">\[L(t_1\rightarrow t_N)\]</span></li>
<li>位置<span class="math display">\[S=(x,y)\]</span></li>
<li>2D高斯位置场：<span class="math display">\[f_k(s)=e^{-\frac{\Vert
s-c_k\Vert^2}{w_k}}\]</span> ，<span
class="math display">\[k\]</span>是位置细胞序号，<span
class="math display">\[f_k(s)\]</span>是第k个位置细胞的平均发放率，<span
class="math display">\[w_k=\frac{r_k^2}{-\log(\Theta)}\]</span>是常数，用来约束位置神经元的最高激活大部分包含在以
<span class="math display">\[$c_k\]</span>为中心，<span
class="math display">\[r_k\]</span>为半径的圆中</li>
<li><span class="math display">\[r_k\]</span>是第<span
class="math display">\[k\]</span>个位置场的半径</li>
<li><span
class="math display">\[\Theta\]</span>是控制位置细胞空间选择半径阈值</li>
</ul></li>
<li>通过K个径向基函数来实现定位：<span
class="math display">\[X_{in}(t_n)=\{f_k(L(t_n))\}_{k\in 1
\cdot\cdot\cdot K}\]</span></li>
<li>place cell可以进一步调研，这个跟脑内GPS有关（还有grid cell, head
direction cell）</li>
</ul>
<h3 id="hippocampus-replay">Hippocampus replay</h3>
<ul>
<li><p>参考文献：Carr MF, Jadhav SP, Frank LM. Hippocampal replay in the
awake state: a potential substrate for memory consolidation and
retrieval. Nature neuroscience. 2011; 14(2):147–53.
https://doi.org/10.1038/nn. 2732 PMID: 21270783</p></li>
<li><p>random replay generative model<br />
</p></li>
<li><p>a snippet <span class="math display">\[S(n;s)=X_{in}(t_n
\rightarrow t_{n+s})\]</span></p></li>
</ul>
<h3 id="reward-propagation">Reward propagation</h3>
<ul>
<li>使用TD-<span
class="math display">\[\lambda\]</span>算法更新预测奖励V</li>
</ul>
<h3 id="snippet-generation-during-replay">Snippet generation during
replay</h3>
<p><span class="math display">\[
U_{ffwd}=W_{ffwd}*X_{in}(t_n)\\
U_{rec}=W_{rec}*X_{res}(t_{n-1})\\
S(N;k)=K\frac{1}{\sqrt{N}}\\
U_{res}(t_n)=U_{ffwd}+U_{rec}\\
\tau \frac{\partial P_{res}}{\partial
t}=-P_{res}(t_{n-1})+U_{res}(t_n)\\
P_{res}(t_n)=h*U_{res}(t_n)+(1-h)*P_{res}(t_{n-1})\\
X_{res}(t_n)=\sigma_{res}(P_{res}(t_n);\Theta_{res}),\Theta_{res}=0,\sigma_{res}=\tanh
\]</span></p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200925-1.png" /></p>
<h2 id="结论">结论</h2>
<p>上丘脑到丘脑底部回路superior colliculus–subthalamus (SC–S) pathway
是决定hunting的神经基础</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | A subcortical excitatory circuit for sensory-triggered predatory hunting in mice</title>
    <url>/2020/09/26/2020-09-26-Neuroscience%20-%20A%20subcortical%20excitatory%20circuit%20for%20sensory-triggered%20predatory%20hunting%20in%20mice/</url>
    <content><![CDATA[<h1
id="a-subcortical-excitatory-circuit-for-sensory-triggered-predatory-hunting-in-mice">A
subcortical excitatory circuit for sensory-triggered predatory hunting
in mice</h1>
<p>论文链接：https://www.nature.com/articles/s41593-019-0405-4</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>捕猎是动物生存的基本能力，本文讨论如何将感知线索转换为触发捕猎行为的神经信号转换回路。</li>
<li>上丘脑到丘脑底部回路：该回路激活产生捕猎行为，在时间上与捕猎后的进食无关；该回路失活，捕猎行为抑制，其它能力不受影响。</li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200925-1.png" /></p>
<h2 id="结论">结论</h2>
<p>上丘脑到丘脑底部回路superior colliculus–subthalamus (SC–S) pathway
是决定hunting的神经基础</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Python import报错解决办法</title>
    <url>/2020/10/02/2020-10-02-Python%20import%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="python-import报错解决办法">Python import报错解决办法</h1>
<h2 id="问题描述">问题描述</h2>
<p>import torch报错：</p>
<blockquote>
<p>from torch._C import * ImportError: numpy.core.multiarray failed to
import</p>
</blockquote>
<h2 id="问题分析">问题分析</h2>
<p>这一类报错基本有一下几个原因：</p>
<ul>
<li>所安装的库版本号不对；</li>
<li>说安装的库依赖于另一些未安装的库；</li>
<li>相同库安装了多个版本，产生了冲突；</li>
<li>错误版本的库通过uninstall操作未卸载干净；</li>
</ul>
<h2 id="处理办法">处理办法</h2>
<p>知道了出错的可能原因，接下来只要慢慢排除就能确定准确的病因了。</p>
<ul>
<li><strong>Step 1：</strong></li>
</ul>
<p>在anaconda中打开所用环境，尝试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda uninstall numpy</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">pip uninstall numpy</span><br></pre></td></tr></table></figure>
<p>注意：有时候conda
uninstall会提示你连带删除很多其他的库，如果提示了，尽量就不要删除。使用pip方式，只删除一个库。</p>
<ul>
<li><strong>Step 2：</strong></li>
</ul>
<p>找到anaconda所用环境中各个库的安装文件夹site-packages（D:-rl-packages）</p>
<ul>
<li><strong>Step 3：</strong></li>
</ul>
<p>找到相关库的文件夹（我这里是找numpy），如果发现存在相同库的拨不通版本的文件夹，就可能是出现了重复安装，相互冲突的问题。删除重复安装的库的相关文件夹，如未重复安装，也可以删除并重新安装；</p>
<ul>
<li><strong>Step 4：</strong></li>
</ul>
<p>在anaconda中打开所用环境安装所需库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>
<p>如果需要安装指定的版本号（eg 1.14.5），可通过一下方式实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install numpy==<span class="number">1.14</span><span class="number">.5</span></span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">pip install numpy==<span class="number">1.14</span><span class="number">.5</span></span><br></pre></td></tr></table></figure>
<p>装好之后一般就不会报错了。</p>
<p>今后其它的一些库的报错也可以采用类似的方式进行处理。</p>
<p>2020年10月02日</p>
<p>Txing</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1486 XOR Operation in an Array-简单-位操作</title>
    <url>/2020/09/28/2020-09-28-Q1486%20XOR%20Operation%20in%20an%20Array-%E7%AE%80%E5%8D%95-%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="xor-operation-in-an-array"><a
href="https://leetcode-cn.com/problems/xor-operation-in-an-array/">XOR
Operation in an Array</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an integer n and an integer start.</p>
<p>Define an array nums where nums[i] = start + 2*i (0-indexed) and n ==
nums.length.</p>
<p>Return the bitwise XOR of all elements of nums.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 1000</code></li>
<li><code>0 &lt;= start &lt;= 1000</code></li>
<li><code>n == nums.length</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input: n = 5, start = 0 Output: 8 Explanation: Array nums is equal to
[0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8. Where "^" corresponds to
bitwise XOR operator.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>Input: n = 4, start = 3 Output: 8 Explanation: Array nums is equal to
[3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>Input: n = 1, start = 7 Output: 7</p>
</blockquote>
<h3 id="approach-1-位操作">Approach 1: 位操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xorOperation</span>(<span class="params">self, n: <span class="built_in">int</span>, start: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            nums ^= (start+<span class="number">2</span>*i)</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n=<span class="number">4</span></span><br><span class="line">    start=<span class="number">3</span></span><br><span class="line">    solution=Solution().xorOperation(n,start)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n)\]</span></p></li>
<li><p>空间复杂度：<span class="math display">\[O(1)\]</span></p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q530 Minimum Absolute Difference in BST-简单-中序遍历</title>
    <url>/2020/10/12/2020-10-12-Q530%20Minimum%20Absolute%20Difference%20in%20BST-%E7%AE%80%E5%8D%95-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="minimum-absolute-difference-in-bst"><a
href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">Minimum
Absolute Difference in BST</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Given a binary search tree with non-negative values, find the minimum
absolute difference between values of any two nodes.</p>
<p><strong>Note:</strong></p>
<p>There are at least two nodes in this BST. This question is the same
as 783:
https://leetcode.com/problems/minimum-distance-between-bst-nodes/</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input:</p>
<p>1<br />
3 / 2</p>
<p>Output: 1</p>
<p>Explanation: The minimum absolute difference is 1, which is the
difference between 2 and 1 (or between 2 and 3).</p>
</blockquote>
<h3 id="approach-1-中序遍历">Approach 1: 中序遍历</h3>
<p>考虑对升序数组 a
求任意两个元素之差的绝对值的最小值，答案一定为相邻两个元素之差的最小值，即</p>
<p><span
class="math display">\[\textit{ans}=\min_{i=0}^{n-2}\left\{a[i+1]-a[i]\right\}\]</span></p>
<p>其中 n 为数组 a 的长度。其他任意间隔距离大于等于 2 的下标对 (i,j)
的元素之差一定大于下标对 (i,i+1) 的元素之差，故不需要再被考虑。</p>
<p>回到本题，本题要求二叉搜索树任意两节点差的绝对值的最小值，而我们知道二叉搜索树有个性质为<strong>二叉搜索树中序遍历得到的值序列是递增有序的</strong>，因此我们只要得到中序遍历后的值序列即能用上文提及的方法来解决。</p>
<p>朴素的方法是经过一次中序遍历将值保存在一个数组中再进行遍历求解，我们也可以在中序遍历的过程中用
<span class="math display">\[\textit{pre}\]</span>
变量保存前驱节点的值，这样即能边遍历边更新答案，不再需要显式创建数组来保存，需要注意的是
<span class="math display">\[\textit{pre}\]</span>
的初始值需要设置成任意负数标记开头，下文代码中设置为 -1。</p>
<p>二叉树的中序遍历有多种方式，包括递归、栈、Morris
遍历等，读者可选择自己最擅长的来实现。下文代码提供最普遍的递归方法来实现，其他遍历方法的介绍可以详细看<a
href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">「94.
二叉树的中序遍历」</a>的题解，这里不再赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMinimumDifference</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(root.left)</span><br><span class="line">            nums.append(root.val)</span><br><span class="line">            dfs(root.right)</span><br><span class="line"></span><br><span class="line">        nums = []</span><br><span class="line">        dfs(root)</span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            res = <span class="built_in">min</span>(res, nums[i] - nums[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
为二叉搜索树节点的个数。每个节点在中序遍历中都会被访问一次且只会被访问一次，因此总时间复杂度为
O(n)。</li>
<li>空间复杂度：O(n)。递归函数的空间复杂度取决于递归的栈深度，而栈深度在二叉搜索树为一条链的情况下会达到
O(n) 级别。</li>
</ul>
<h3 id="approach-2-中序遍历空间优化">Approach 2:
中序遍历（空间优化）</h3>
<p>保留前驱结点，滚动式更新结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMinimumDifference</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> res, pre</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            dfs(root.left)</span><br><span class="line">            <span class="keyword">if</span> pre != -<span class="number">1</span>:</span><br><span class="line">                res = <span class="built_in">min</span>(res, root.val-pre)</span><br><span class="line">            pre = root.val</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        </span><br><span class="line">        pre = -<span class="number">1</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Hippocampal place-cell sequences depict future paths to remembered goals</title>
    <url>/2020/11/02/2020-11-02-Neuroscience%20-%20Hippocampal%20place-cell%20sequences%20depict%20future%20paths%20to%20remembered%20goals%20/</url>
    <content><![CDATA[<h1
id="hippocampal-place-cell-sequences-depict-future-paths-to-remembered-goals">Hippocampal
place-cell sequences depict future paths to remembered goals</h1>
<p>论文链接：https://www.nature.com/articles/nature12112#Abs1</p>
<h2 id="背景">背景</h2>
<ul>
<li><p>Hippocampal place cells 在 navigational planning
中起到重要作用</p></li>
<li><p>实验场景是 goal-directed navigation in an open
arena，海马生成brief sequences encoding spatial
trajectories。这种序列能预测未来的行为，即使在新的起点和终点的实验中，也能有效。</p></li>
<li><p>这些现象支持了一个基于replay的goal-directed, trajectory-finding
mechanism（目标导向的轨迹发现机制）</p></li>
<li><p>海马在spatial memory
(空间记忆)、事件记忆灵活地计算路径上有着重要的作用。</p></li>
<li><p>theta sequence是一种对位置的预测，它是由place cell
populations产生的</p></li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>小鼠可以在一段环境探索之后，建立对环境的认知，在replay中构建出新颖的路径，在返回出发点时，会选择最短的新路径返回。</li>
<li>回放于trajectory event有三种情况：
<ul>
<li>home event成功回到Home井</li>
<li>away event路径终点不在Home井</li>
<li>away event路径终点不在Home井但是经过了Home井</li>
</ul></li>
<li>主要说明了海马体对于路径的记忆与预测，预测方式为比较过去路径和未来平均路径、未来实际路径和未来平均路径的相关性，这种相关性体现出了一种预测的能力。（定性比较，没有精确模型）</li>
</ul>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1603 Design Parking System-简单</title>
    <url>/2020/10/06/2020-10-06-Q1603%20Design%20Parking%20System-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h1 id="design-parking-system"><a
href="https://leetcode-cn.com/problems/design-parking-system/">Design
Parking System</a></h1>
<h2 id="question">Question</h2>
<blockquote>
<p>Design a parking system for a parking lot. The parking lot has three
kinds of parking spaces: big, medium, and small, with a fixed number of
slots for each size.</p>
<p>Implement the ParkingSystem class:</p>
<p>ParkingSystem(int big, int medium, int small) Initializes object of
the ParkingSystem class. The number of slots for each parking space are
given as part of the constructor. bool addCar(int carType) Checks
whether there is a parking space of carType for the car that wants to
get into the parking lot. carType can be of three kinds: big, medium, or
small, which are represented by 1, 2, and 3 respectively. A car can only
park in a parking space of its carType. If there is no space available,
return false, else park the car in that size space and return true.</p>
<p><strong>Constraints:</strong></p>
<p>0 &lt;= big, medium, small &lt;= 1000 carType is 1, 2, or 3 At most
1000 calls will be made to addCar</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input ["ParkingSystem", "addCar", "addCar", "addCar", "addCar"] [[1,
1, 0], [1], [2], [3], [1]] Output [null, true, true, false, false]</p>
<p>Explanation ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available
slot for a big car parkingSystem.addCar(2); // return true because there
is 1 available slot for a medium car parkingSystem.addCar(3); // return
false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available
slot for a big car. It is already occupied.</p>
</blockquote>
<h3 id="approach-1-直接处理">Approach 1: 直接处理</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParkingSystem</span>:</span><br><span class="line">    carslots = [<span class="number">0</span>] * <span class="number">4</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, big: <span class="built_in">int</span>, medium: <span class="built_in">int</span>, small: <span class="built_in">int</span></span>):</span><br><span class="line">        self.carslots[<span class="number">1</span>] = big</span><br><span class="line">        self.carslots[<span class="number">2</span>] = medium</span><br><span class="line">        self.carslots[<span class="number">3</span>] = small</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addCar</span>(<span class="params">self, carType: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> self.carslots[carType] &gt; <span class="number">0</span>:</span><br><span class="line">            self.carslots[carType] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># Your ParkingSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = ParkingSystem(big, medium, small)</span></span><br><span class="line"><span class="comment"># param_1 = obj.addCar(carType)</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[ O(n) \]</span></p></li>
<li><p>空间复杂度：<span class="math display">\[ O(1) \]</span></p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | The cognitive map in humans spatial navigation and beyond</title>
    <url>/2020/11/18/2020-11-18-Neuroscience%20-%20The%20cognitive%20map%20in%20humans%20spatial%20navigation%20and%20beyond/</url>
    <content><![CDATA[<h1 id="the-cognitive-map-in-humans-spatial-navigation-and-beyond">The
cognitive map in humans: spatial navigation and beyond</h1>
<p>论文链接：https://www.nature.com/articles/nn.4656#Sec1</p>
<h2 id="背景">背景</h2>
<ul>
<li>认知地图通过海马中的place cells, grid cells, border cells and head
direction cells实现during spatial navigation</li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p><strong>spatial coding</strong>, <strong>landmark
anchoring</strong> and <strong>route planning</strong>:</p>
<ol type="i">
<li><p>人海马和内嗅皮质支持类似地图的空间代码，</p></li>
<li><p>后脑区域（如海马旁和脾后皮质）提供了重要的输入，使认知图可以固定在固定的环境地标上，</p></li>
<li><p>将海马和内在空间代码与额叶机制结合使用，以计划航行期间的路线。</p></li>
</ol></li>
<li><p>The idea of a cognitive map was originally proposed by Tolman, in
an effort to explain navigational behaviors in rodents that could not be
logically reduced to associations between specific stimuli and rewarded
behavioral responses.</p></li>
<li><p>快速切换a roundabout route到直接路径<br />
</p></li>
<li><p>Grieves, R.M. &amp; Jeffery, K.J. The representation of space in
the brain.<em>Behav. Processes</em> 135, 113–131
(2017).这篇文章支持多种细胞共同构建了认知地图：</p>
<ul>
<li><ol type="i">
<li>grid cells in medial entorhinal cortex, which fire in a regular
hexagonal lattice of locations tiling the floor of the environment;</li>
</ol></li>
<li><ol start="2" type="i">
<li>head direction (HD) cells in several cortical and subcortical
structures, which fire on the basis of the orientation of the head in
the navigational plane; and</li>
</ol></li>
<li><ol start="3" type="i">
<li>border cells in entorhinal cortex and boundary cells in subiculum,
which fire when the animal is at set distances from navigational
boundaries at specific directions.</li>
</ol></li>
</ul></li>
<li><p>标定认知地图需要海马、内侧前额叶的参与。导航过程中，可以完全使用路标来进行导航，无需路径集成，这种导航称为landmark-based
piloting. Gallistel, C.R. <em>The Organization of Learning</em> (MIT
Press, 1990).</p></li>
<li><p>基于路标的方法：在途中设计decision
points，点之间用欧氏距离实现最短路径</p></li>
<li><p>到达同一个目标位置可以有多个路径，这就涉及到了路径规划，与前海马和place
cells有关。Wu, X. &amp; Foster, D.J. Hippocampal replay captures the
unique topological structure of a novel environment. <em>J.
Neurosci.</em> <strong>34</strong>, 6459–6469 (2014).</p></li>
<li><p>两篇强化学习相关的路径规划文章，这可能证明解剖神经系统的支持路径规划的有效途径。分层规划涉及背顶额叶区域，与目标的距离无关。在D所示的示例中，分层计划可用于将环境的各个部分组合在一起以减少计划需求：</p>
<ul>
<li>Simon, D.A. &amp; Daw, N.D. Neural correlates of forward planning in
a spatial decision task in humans. <em>J. Neurosci.</em>
<strong>31</strong>, 5526–5539 (2011).</li>
<li>Ribas-Fernandes, J.J. et al. A neural signature of hierarchical
reinforcement learning. <em>Neuron</em> <strong>71</strong>, 370–379
(2011).</li>
</ul></li>
</ul>
<h2 id="总结">总结</h2>
<p>本文介绍了很多认知地图相关的研究，重点从空间编码、地标标定和路径规划三个方向展开调研。</p>
<ul>
<li>在空间编码上使用了grid cells</li>
<li>地标确定和路径规划上使用了place cells（PPA，Parahippocampal Place
Area）</li>
</ul>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience| Principles of sensorimotor learning</title>
    <url>/2020/12/17/2020-12-17-Neuroscience%20-%20Principles%20of%20sensorimotor%20learning/</url>
    <content><![CDATA[<h1 id="principles-of-sensorimotor-learning">Principles of sensorimotor
learning</h1>
<p>论文链接：https://www.nature.com/articles/nrn3112</p>
<h2 id="背景">背景</h2>
<p>运动的多样性和适应性给人留下深刻的印象。这篇综述回顾了运动学习的相关研究，集中讨论了其中涉及的计算机制。</p>
<p>运动学习涉及三个方面：</p>
<ul>
<li>涉及任务相关的传感信息、决策、策略选择、预测以及反应控制机制（predictive
and reactive control mechanisms）；</li>
<li>Decisions and
strategies：涉及不同的学习过程，例如误差和奖励如何驱动学习；</li>
<li>运动学习记忆的神经表征，以及信度分配，新状态（situations）的生成</li>
</ul>
<p>近年来在上述三点的计算过程理解上有了本质的进步</p>
<h2 id="主要工作">主要工作</h2>
<h3 id="components-of-motor-learning">1. Components of motor
learning</h3>
<h4 id="information-extraction">1.1 Information extraction</h4>
<ul>
<li><p>Skilled performance requires the effective and efficient
(有效和高效的) gathering and processing of sensory information relevant
to an action.</p></li>
<li><p>眼动可由自下而上和自上而下两种方式驱动。Studies have shown that
eye movements can be driven both in a bottom-up, task-independent manner
based on low-level features of the visual scene<span
class="math display">\[^1\]</span> (for example, towards moving
high-contrast objects) as well as in a top-down, task-dependent
manner<span class="math display">\[^2\]</span>.</p></li>
<li><ol type="1">
<li>多模态的传感信息流，2. Bayesian inference中对世界的先验知识，3.
结合上述过程与身体内部模型的运动指令到期望的传感输出</li>
</ol></li>
</ul>
<h4 id="decisions-and-strategies">1.2 Decisions and strategies</h4>
<ul>
<li><p>多数的运动任务都涉及了一个序列决策过程。</p></li>
<li><p>决策变量（decision variable）的积累，支持候选的行为决策</p></li>
<li><p>有边界的飘移扩散模型。Choice accuracy and reaction time are then
explained by <strong>a bounded drift-diffusion model</strong> in which
the decision variable reaches a positive or negative bound</p></li>
<li><p>这个漂移扩散模型存在着大量的延时，但实际上收集的传感信息可用来影响运动中的想法<span
class="math display">\[^{20}\]</span></p>
<p>[20]. Resulaj A , Kiani R , Wolpert D M , et al. Changes of mind in
decision-making[J]. Nature, 2009, 461(7261):263-266.</p></li>
<li><p>人在不同的实验条件下都能趋向最优的决策，适应可变性</p>
<p>Trommershäuser, J., Maloney, L. T. &amp; Landy, M. S. Decision
making, movement planning and statistical decision theory. Trends Cogn.
Sci. 12, 291–297 (2008).</p></li>
<li><p>决策是趋向<strong>规避风险</strong>还是<strong>冒风险</strong>（risk
averse or risk seeking），偏好奖励的方差大的还是小的<span
class="math display">\[^{23-25}\]</span></p></li>
</ul>
<p>[23]. Nagengast, A. J., Braun, D. A. &amp; Wolpert, D. M.
Risk-sensitive optimal feedback control accounts for sensorimotor
behavior under uncertainty. PLoS Comput. Biol. 6, e1000857 (2010).</p>
<p>[24]. Braun, D. A., Nagengast, A. J. &amp; Wolpert, D. M.
Risk-sensitivity in sensorimotor control. <em>Front. Hum.
Neurosci.</em>5, 1 (2011).</p>
<p>[25]. Nagengast, A. J., Braun, D. A. &amp; Wolpert, D. M.
Risk-sensitivity and the mean-variance trade-off: decision making in
sensorimotor control. <em>Proc. Biol. Sci.</em> 278, 2325–2332
(2011).</p>
<h4 id="classes-of-control">1.3 Classes of control</h4>
<ul>
<li><p>三类控制都是适应性的并且贡献于运动学习：</p>
<ul>
<li><strong>predictive or feedforward control</strong>, which is
critical given the feedback delays in the sensorimotor system;</li>
<li><strong>reactive control</strong>, which involves the use of sensory
inputs to update ongoing motor commands;</li>
<li><strong>biomechanical control</strong>, which involves modulating
the compliance of the limb.</li>
</ul></li>
<li><p>人在拿东西的时候有预测东西的重量（预测控制），这一点对 smooth and
dexterous manipulation是必要的</p></li>
<li><p>预测控制和反应控制的亲密关系：for example, the tactile afferents.
If a mismatch between predicted and actual sensory information is
detected, the system can launch appropriate, task-protective corrective
actions and can also update the knowledge of object weight to improve
future actions. Thus, through the prediction of sensory consequences,
there is an intimate relationship between predictive and reactive
control mechanisms<span class="math display">\[^{28}\]</span>.</p></li>
<li><p>快速反应反馈回路，快速驱动运动响应，但是很难被修改（有点类似于我的底层控制的意思）。Fast
reactive feedback loops, such as the monosynaptic stretch reflex, can
rapidly drive motor responses but cannot be easily modified even by
extended experience.</p></li>
<li><p>最小干预原则：An important feature of the optimal feedback
control model is the concept of minimum intervention.</p>
<p>分割任务相关空间和任务不相关空间，不相关空间中可以体现运动的可变性</p>
<p>Todorov, E. &amp; Jordan, M. I. Optimal feedback control as a theory
of motor coordination. Nature Neurosci. 5, 1226–1235 (2002)</p></li>
<li><p>生物力学控制：A third form of control can be exerted by
specifying the biomechanical properties of the body and tools with which
we interact. 例如手臂刚度的控制。</p></li>
<li><p>学习初期，误差比较大手臂刚度增加，同时预测模型开始学习；当误差减小了，刚度也降低</p>
<p>Franklin, D. W. et al. CNS learns stable, accurate, and efficient
movements using a simple algorithm. J. Neurosci. 28, 11165–11173
(2008).</p></li>
<li><p>阻抗控制（impedance control ）结合最优控制框架</p></li>
</ul>
<p>Mitrovic, D., Klanke, S., Osu, R., Kawato, M. &amp; Vijayakumar, S. A
computational model of limb impedance control based on principles of
internal model uncertainty. PLoS ONE 5, e13601 (2010).</p>
<h3 id="processes-of-motor-learning">2. Processes of motor learning</h3>
<h4 id="error-based-learning">2.1 Error-based learning</h4>
<ul>
<li>reaching in force fields</li>
</ul>
<p>Shadmehr, R. &amp; Mussa-Ivaldi, F. A. Adaptive representation of
dynamics during learning of a motor task. J. Neurosci. 14, 3208–3224
(1994).</p>
<p>Thoroughman, K. A. &amp; Shadmehr, R. Learning of action through
adaptive combination of motor primitives. Nature 407, 742–747
(2000).</p>
<ul>
<li><p>A common feature across these different task domains is that the
system can — and will — <strong>learn from an error on a single
trial</strong></p></li>
<li><p>把冗余关节空间映射到二维的光标上：</p>
<p>Mosier, K. M., Scheidt, R. A., Acosta, S. &amp; Mussa-Ivaldi, F. A.
Remapping hand movements in a novel geometrical environment. J.
Neurophysiol. 94, 4362–4372 (2005).</p>
<p>Liu, X., Mosier, K. M., Mussa-Ivaldi, F. A., Casadio, M. &amp;
Scheidt, R. A. Reorganization of finger coordination patterns during
adaptation to rotation and scaling of a newly learned sensorimotor
transformation. J. Neurophysiol. 105, 454–473 (2011).</p></li>
</ul>
<h4 id="reinforcement-learning">2.2 Reinforcement learning</h4>
<ul>
<li>多关节手臂的多解问题，可以建立一个解的流形（solution manifold）</li>
</ul>
<p>Vetter, P., Flash, T. &amp; Wolpert, D. M. Planning movements in a
simple redundant task. Curr. Biol. 12, 488–491 (2002).</p>
<ul>
<li><p>skill learning的速度精度权衡函数：A reduction in the variability
for a given movement speed can be considered the hallmark of skill
learning：</p>
<p>Reis, J. et al. Noninvasive cortical stimulation enhances motor skill
acquisition over multiple days through an effect on consolidation. Proc.
Natl Acad. Sci. USA 106, 1590–1595 (2009).</p></li>
<li><p>skillful movement：熟练的运动</p></li>
</ul>
<h4 id="use-dependent-learning">2.3 Use-dependent learning</h4>
<ul>
<li>Use-dependent
learning指的是通过不断重复，即使没有结果信息，就能改变运动效果的现象。</li>
</ul>
<h3 id="representations-in-motor-learning">3. Representations in motor
learning</h3>
<ul>
<li><p>传感运动学习涉及了建立运动与传感变量之间的新映射。这种转换也被称为内部模型。</p>
<p>Such transformations are termed internal models, as they represent
features of the body or the environment, such as the way in which a
hand-held racquet responds to force and torques, or the way in which
prism glasses change the visuomotor alignment.</p></li>
<li><p>但是很多因素会影响这个映射，例如肌肉疲劳或者改变的目标权重。一个成功的运动表现应该是可以适应这些变化的。</p></li>
<li><p>Mechanistic models使用运动基元（ motor primitives）</p></li>
<li><p>Normative models讲究神经系统的最优适应性。它需要两个参数：</p>
<ol type="1">
<li>how different factors, such as tools or levels of fatigue, influence
the motor system — the so-called <strong>generative model</strong>.</li>
<li>how these factors are likely to vary over both space and time — that
is the <strong>prior distribution</strong>.</li>
</ol></li>
</ul>
<h4 id="motor-primitives">3.1 Motor primitives</h4>
<ul>
<li><p>对手臂运动的研究，使用运动基元表征速度和位置，对运动进行近似</p>
<p>Sing, G. C., Joiner, W. M., Nanayakkara, T., Brayanov, J. B. &amp;
Smith, M. A. Primitives for motor adaptation reflect correlated neural
tuning to position and velocity. Neuron 64, 575–589 (2009).</p></li>
</ul>
<h4 id="credit-assignment">3.2 Credit assignment</h4>
<ul>
<li><p>两种信度分配：contextual and temporal credit assignment</p></li>
<li><p>空间信度分配设计两只手或者其他一些特殊情况，似乎与神经科学和行为科学更加相关，这里暂时不详细参考</p></li>
<li><p>误差的时间信度分配中，有个考虑了多时间尺度的学习模型。解释reaching
movement适应不同的扰动。一个快速和一个慢速的系统并行地学习</p>
<p>Smith, M. A., Ghazizadeh, A. &amp; Shadmehr, R. Interacting adaptive
processes with different timescales underlie short-term motor learning.
PLoS Biol. 4, e179 (2006).</p>
<ul>
<li>dual-rate model解释了重学习以及自发回复之前的运动记忆</li>
</ul></li>
<li><p>多时间尺度学习系统：</p>
<p>Lee, J.-Y. &amp; Schweighofer, N. Dual adaptation supports a parallel
architecture of motor memory. J. Neurosci. 29, 10396–10404 (2009).</p>
<p>Kording, K. P., Tenenbaum, J. B. &amp; Shadmehr, R. The dynamics of
memory as a consequence of optimal adaptation to a changing body. Nature
Neurosci. 10, 779–786 (2007).</p>
<p>Huang, V. S. &amp; Shadmehr, R. Persistence of motor memories
reflects statistics of the learning event. J. Neurophysiol. 102, 931–940
(2009).</p></li>
</ul>
<h4 id="structural-learning">3.3 Structural learning</h4>
<ul>
<li><p>通过学习工具、肢体的动力学关系，可以在其他的使用类似工具的任务中再次使用这个动力学结构。已知的结构帮助快速学习。</p></li>
<li><p>对机器人自身结构的学习，帮助在面对意外受损后的运动维持</p>
<p>Bongard, J., Zykov, V. &amp; Lipson, H. Resilient machines through
continuous self-modeling. Science 314, 1118–1121 (2006).</p></li>
<li><p>结构学习，挺有意思的工作：</p>
<p>Braun, D. A., Aertsen, A., Wolpert, D. M. &amp; Mehring, C. Motor
task variation induces structural learning. Curr. Biol. 19, 352–357
(2009).</p>
<p>Braun, D. A., Aertsen, A., Wolpert, D. M. &amp; Mehring, C. Learning
optimal adaptation strategies in unpredictable motor tasks. J. Neurosci.
29, 6472–6478 (2009).</p>
<p>Braun, D. A., Mehring, C. &amp; Wolpert, D. M. Structure learning in
action. Behav. Brain Res. 206, 157–165 (2010).</p>
<p>Braun, D. A., Waldert, S., Aertsen, A., Wolpert, D. M. &amp; Mehring,
C. Structure learning in a sensorimotor association task. PLoS ONE 5,
e8973 (2010)</p></li>
<li><p>有一些通过设置力场来扰乱手臂运动促进结构学习得工作</p></li>
</ul>
<h3 id="conclusions-and-future-directions">4. Conclusions and future
directions</h3>
<ul>
<li><p>From laboratory learning to real-world
learning.虽然简单的任务方便建立模型，但是和实际中的任务有巨大的差别</p></li>
<li><p>From sensorimotor control to robotics and brain–machine
interfaces.</p></li>
<li><p>From models to neuronal implementations</p></li>
</ul>
<h2 id="总结">总结</h2>
<p>又是一篇很好的综述，其中的很多点都可以深挖一下</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Collective Intelligence |  A Constructive Model for Collective Intelligence</title>
    <url>/2020/12/23/2020-12-23-Collective%20Intelligence%20-%20A%20Constructive%20Model%20for%20Collective%20Intelligence/</url>
    <content><![CDATA[<h1 id="a-constructive-model-for-collective-intelligence">A Constructive
Model for Collective Intelligence</h1>
<p>论文地址：https://academic.oup.com/nsr/article/7/8/1273/5831734</p>
<ul>
<li><p>collective intelligence (CI):
在很多社会昆虫中发现了自然地群体智能现象，即单个个体缺少智能，单它们组成的集体表现出很高的智能水平。</p></li>
<li><p>研究现状：</p>
<ul>
<li>不仅仅物理空间中存在CI现象，在网络空间也存在，例如线上合作开源软件开发（unanmous.ai系统），生物医学领域多人在线解决复杂蛋白质结构问题（EteRNA系统）。</li>
<li>主要集中在如何发现、解释、干预这些CI现象。但缺少重要的理论支撑，帮助构建人工的CI系统。</li>
</ul></li>
<li><p>一个建设性的模型：</p>
<ul>
<li>目标：解决基于大规模协作的复杂问题</li>
<li>Exploration-Integration-Feedback Loop (EIFL)
<ul>
<li>Exploration：每个个体自由地探索解决方案空间，并提供一组对解决问题有价值的信息片段</li>
<li>Integration：所有这些信息片段都被集成在一起，形成一组结构良好的，针对该问题的部分解决方案</li>
<li>Feedback：整合的结果会反馈给个体，刺激他们改善他们贡献的信息片段集</li>
</ul></li>
<li>EIFL是增量、迭代、并行的求解过程，关键问题在于：
<ol type="1">
<li><p>信息碎片如何表现</p></li>
<li><p>信息碎片如何集成</p></li>
<li><p>集成的结果如何反馈给群体</p></li>
<li><p>由谁来进行集成和反馈</p></li>
</ol></li>
</ul></li>
<li><p>EIFL过程可以是人工或者半人工的。人类的知识通过书本集成，在各地发行，每个人可以去阅读学习，这就是一个EIFL过程</p></li>
<li><p>三个技术问题：</p>
<ul>
<li>如何定量评估CI现象是否出现，并衡量其CI程度。需要设计目标函数，以指导对EIFL的不同实现方式的探索。</li>
<li>其它领域的模型和机制可以在CI系统中表示，并得到重用（reuse）。</li>
<li>是否可以开发形式化理论来解决基于人类的进化问题。这方面研究可以发现CI系统的局限性，提供效率上的理论保证</li>
</ul></li>
</ul>
<p><img
src="https://github.com/txing-casia/txing-casia.github.io/blob/master/img/20201223-1.png" /></p>
]]></content>
      <tags>
        <tag>Collective Intelligence</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Generative Predictive Codes by Multiplexed Hippocampal Neuronal Tuplets</title>
    <url>/2020/11/19/2020-11-19-Neuroscience%20-%20Generative%20Predictive%20Codes%20by%20Multiplexed%20Hippocampal%20Neuronal%20Tuplets/</url>
    <content><![CDATA[<h1
id="generative-predictive-codes-by-multiplexed-hippocampal-neuronal-tuplets">Generative
Predictive Codes by Multiplexed Hippocampal Neuronal Tuplets</h1>
<p>论文链接：https://www.sciencedirect.com/science/article/pii/S0896627318306457</p>
<h2 id="背景">背景</h2>
<p>利用神经元连音机制（neuronal ensemble mechanisms: high-repeat
sequential neuronal ‘‘tuplets’’
operating），将大的序列拆分，在导航任务中快速学习。</p>
<ul>
<li><p>内部生成的自发神经动力学internally generated spontaneous neuronal
dynamics</p></li>
<li><p>predictive coding theory（数学比较多可以看一看Heeger, D.J.
(2017). Theory of cortical function. Proc. Natl. Acad. Sci. USA 114,
1773–1782.）</p></li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>新的路径表征并非从头学起；Hippocampal Network place
cells接收外部刺激，结合内部生成模型形成对新的连续快速内部表征</li>
<li>将连音作为经验和环境信息存储，实现高效学习和存储</li>
<li>三种路径信息的内部表示存储模式：
<ul>
<li>外部驱动模式：完整存储每一条路径的内部表示（占用的存储空间大，利用效率低）</li>
<li>内部连音模式：将路径表征的子段存储，每段之间可以学习组合（占用的存储空间小，利用效率高）</li>
<li>内部、外部混合模式：有些路径完整存储，有些使用连音模式存储（占用的存储空间很小，利用效率很高）</li>
</ul></li>
</ul>
<h2 id="总结">总结</h2>
<p>有一些启发，可惜模型是给的统计学公式。后面可以尝试将连音机制利用一下</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>ThirdWork reference</title>
    <url>/2021/01/03/2021-01-04-ThirdWork%20Reference/</url>
    <content><![CDATA[<h1 id="运动基元文章相关参考文献">运动基元文章相关参考文献</h1>
<p>2020-01-03进度暂停</p>
<h2 id="实施步骤">实施步骤</h2>
<ul>
<li>Primitives for Motor Adaptation Reflect Correlated Neural Tuning to
Position and Velocity</li>
<li>Spatial Generalization from Learning Dynamics of Reaching
Movements</li>
<li>Learning of action through adaptive combination of motor
primitives</li>
<li>Motor Memory Is Encoded as a Gain-Field Combination of Intrinsic and
Extrinsic Action Representations</li>
<li>The Binding of Learning to Action in Motor Adaptation</li>
<li>A Gain-Field Encoding of Limb Position and Velocity in the Internal
Model of Arm Dynamics</li>
</ul>
]]></content>
      <tags>
        <tag>HRL</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Learning to Utilize Shaping Rewards: A New Approach of Reward Shaping</title>
    <url>/2020/12/31/2020-12-31-Reinforcement%20Learning%20-%20Learning%20to%20Utilize%20Shaping%20Rewards%20A%20New%20Approach%20of%20Reward%20Shaping/</url>
    <content><![CDATA[<h1
id="learning-to-utilize-shaping-rewards-a-new-approach-of-reward-shaping">Learning
to Utilize Shaping Rewards A New Approach of Reward Shaping</h1>
<p>论文链接：NIPS 2020</p>
<h2 id="背景">背景</h2>
<p>人工方式塑造奖励函数有着先天的缺陷，这里提出了一种双层优化（ bi-level
optimization
problem）的方式来自适应的设计奖励函数。实验在sparse-reward的环境中进行验证。</p>
<ul>
<li><p>lower level使用塑造的奖励优化策略；</p></li>
<li><p>upper level优化参数化的塑造权重函数来最大化真实的奖励；</p></li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>Reward Shaping
(RS)：一个常用的提高样本效率的方法是把可能的领域知识迁移到额外的奖励函数中，从而在原始和新的奖励驱使下学习更快更好。</p></li>
<li><p>但是奖励的设计不可避免的涉及了人工的操作，</p></li>
</ul>
<h3 id="parameterized-reward-shaping">3 Parameterized Reward
Shaping</h3>
<h4 id="bi-level-optimization">3.1 Bi-level Optimization</h4>
<ul>
<li>定义参数化奖励塑造函数：</li>
</ul>
<p><span class="math display">\[
\tilde{r}(s,a)=r(s,a)+z_{\phi}(s,a)f(s,a)
\]</span></p>
<p><span
class="math display">\[z_{\phi}(s,a)\]</span>是权重向量，形式是使用参数化函数。<span
class="math display">\[f\]</span>是shaping 奖励函数。</p>
<p><span class="math display">\[
\text{Step 1: }\
\max_{\phi} \mathbb{E}_{s\sim \rho^{\pi},a\sim\pi_{\theta}} [r(s,a)]\\
\text{Step 2: }\
\theta=\arg \max_{\theta&#39;} \mathbb{E}_{s\sim
\rho^{\pi},a\sim\pi_{\theta&#39;}}[r(s,a)+z_{\phi}(s,a)f(s,a)]
\]</span> 通过真实的环境奖励<span
class="math display">\[r(s,a)\]</span>更新<span
class="math display">\[z_{\phi}(s,a)\]</span>，在根据shaping reward
function更新policy。</p>
<h4 id="gradient-computation">3.2 Gradient Computation</h4>
<ul>
<li><p>固定<span
class="math display">\[z_{\phi}\]</span>，计算累计修正奖励<span
class="math display">\[\tilde J\]</span>关于参数<span
class="math display">\[\theta\]</span>的梯度： <span
class="math display">\[
\nabla_{\phi}\tilde J(\pi_{\theta})= \mathbb{E}_{s\sim
\rho^{\pi},a\sim\pi_{\theta}} \big[\nabla_{\theta}\log
\pi_{\theta}(s,a)\tilde Q(s,a)\big]
\]</span></p></li>
<li><p>定理1：目标函数<span
class="math display">\[J(z_{\phi})\]</span>关于参数<span
class="math display">\[\phi\]</span>的梯度为： <span
class="math display">\[
\nabla_{\phi} J(z_{\phi})= \mathbb{E}_{s\sim
\rho^{\pi},a\sim\pi_{\theta}} \big[\nabla_{\theta}\log \pi_{\theta}(s,a)
Q(s,a)\big]
\]</span> 这个定理首先假设了<span
class="math display">\[\pi_{\theta}\]</span>关于<span
class="math display">\[\phi\]</span>的梯度存在，但是即使有了定理1也不能直接计算出这个梯度，因为<span
class="math display">\[\pi_{\theta}\]</span>关于<span
class="math display">\[\phi\]</span>的梯度不能直接计算，下面会讨论如何计算<span
class="math display">\[\nabla_{\phi}\pi_{\theta}(s,a)\]</span></p></li>
</ul>
<h3 id="gradient-approximation">4 Gradient Approximation</h3>
<h4 id="explicit-maping">4.1 Explicit Maping</h4>
<ul>
<li>假设行为输出在<span
class="math display">\[[0,1]\]</span>，构建一个扩展的状态空间（extended
state space）<span
class="math display">\[\mathcal{S}_z=\{(s,z_{\phi}(s))|{\forall}s\in
\mathcal{S} \}\]</span>，根据链式法则，得到<span
class="math display">\[\nabla_{\phi}\pi_{\theta}(s,a,z_{\phi}(s))=\nabla_{z}\pi_{\theta}(s,a,z_{\phi}(s))\nabla_{\phi}z_{\phi}(s)\]</span>，相应的，上级目标函数<span
class="math display">\[J(z_{\phi})\]</span>关于<span
class="math display">\[\phi\]</span>的梯度为： <span
class="math display">\[
\nabla_{\phi}J(z_{\phi})=\mathbb{E}_{s\sim \rho^{\pi},a \sim
\pi_{\theta}}[\nabla_z \log
\pi_{\theta}(s,a,z)|_{z=z_{\phi}(s)}\nabla_{\phi}z_{\phi}(s)Q^{\pi}(s,a)]
\]</span></li>
</ul>
<h4 id="meta-gradient-learning">4.2 Meta-Gradient Learning</h4>
<ul>
<li><p>考虑到参数<span class="math display">\[\theta\]</span>和<span
class="math display">\[\phi\]</span>之间的关系，可以通过计算元梯度（meta-gradient）<span
class="math display">\[\nabla_{\phi}\theta\]</span>的方式计算： <span
class="math display">\[
\nabla_{\phi}\pi_{\theta}(s,a)=\nabla_{\theta}\pi_{\theta}(s,a)\nabla_{\phi}\theta
\]</span></p></li>
<li><p>对<span class="math display">\[\theta\]</span>的更新： <span
class="math display">\[
\theta&#39;=\theta+\alpha\sum_{i=1}^N \nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)\tilde Q(s_i,a_i)
\]</span> 其中<span
class="math display">\[N\]</span>是batch样本数，<span
class="math display">\[\alpha\]</span>是学习率</p></li>
<li><p>meta-gradient<span
class="math display">\[\nabla_{\phi}\theta&#39;\]</span>： <span
class="math display">\[
\nabla_{\phi}\theta&#39;=\nabla_{\phi}(\theta+\alpha\sum_{i=1}^{N}\nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)\tilde Q(s_i,a_i)\\
=\alpha \sum_{i=1}^{N} \nabla_{\theta}\log \pi_{\theta}(s_i,a_i)^{\top}
\nabla_{\phi}\tilde Q(s_i,a_i)\\
\]</span> 这里<span
class="math display">\[\theta\]</span>是一个常数。</p>
<p>在计算过程中，例如采用蒙特卡洛返回，对每一个在buffer中的样本<span
class="math display">\[i\]</span>，定义<span
class="math display">\[\tau_i=(s^0_i,a^0_i,\tilde
r^0_i,s^1_i,a^1_i,\tilde r^1_i,...)\]</span>表示采样的轨迹由于<span
class="math display">\[\tilde
r_i^t=r^t_i+z_{\phi}(s^t_i,a^t_i)f(s^t_i,a^t_i)\]</span>，其中<span
class="math display">\[r^t_i\]</span>是采样的真实奖励。 <span
class="math display">\[
\nabla_{\phi}\theta&#39;=\alpha \sum_{i=1}^{N} \nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)^{\top} \nabla_{\phi}\tilde Q(s_i,a_i)\\
\approx \alpha\sum_{i=1}^N  \nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)^{\top} \nabla_{\phi} \sum_{t=0}^{|\tau_i|-1}
\gamma^t (r^t_i +z_{\phi}(s^t_i,a^t_i)f(s^t_i,a^t_i))\\
=\alpha\sum_{i=1}^N  \nabla_{\theta}\log \pi_{\theta}(s_i,a_i)^{\top}
\sum_{t=0}^{|\tau_i|-1}\gamma^t
f(s^t_i,a^t_i)\nabla_{\phi}z_{\phi}(s^t_i,a^t_i)
\]</span></p></li>
</ul>
<h4 id="incremental-meta-gradient-learning">4.3 Incremental
Meta-Gradient Learning</h4>
<ul>
<li><p>考虑之前假设的策略参数<span
class="math display">\[\theta\]</span>关于<span
class="math display">\[\phi\]</span>是恒定的，实际上，可以看做不是恒定的。</p></li>
<li><p>Incremental Meta-Gradient Learning (IMGL) <span
class="math display">\[
\nabla_{\phi}\theta&#39;=\nabla_{\phi}\theta + \alpha \sum_{i=1}^{N}
\nabla_{\theta}\log \pi_{\theta}(s_i,a_i)^{\top}  \tilde Q(s_i,a_i) +
\alpha \sum_{i=1}^{N} \log
\pi_{\theta}(s_i,a_i)^{\top}  \nabla_{\theta}\tilde Q(s_i,a_i)\\
=\nabla_{\phi}\theta + \alpha \sum_{i=1}^{N} \big(\nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)^{\top}\nabla_{\phi}\theta \big)  \tilde Q(s_i,a_i)
+ \alpha \sum_{i=1}^{N} \log
\pi_{\theta}(s_i,a_i)^{\top}  \nabla_{\theta}\tilde Q(s_i,a_i)\\
=\big( I_n + \alpha \sum_{i=1}^{N} \tilde Q(s_i,a_i)\nabla_{\theta}\log
\pi_{\theta}(s_i,a_i)^{\top}    \big) \nabla_{\phi}\theta+ \alpha
\sum_{i=1}^{N} \log \pi_{\theta}(s_i,a_i)^{\top}  \nabla_{\theta}\tilde
Q(s_i,a_i)\\
\]</span></p></li>
</ul>
<h2 id="总结">总结</h2>
<p>挺有意思的一个工作，提供了三种梯度更新方式，分别对应精确映射，蒙特卡洛更新和TD更新。三个方式有着不同的梯度近似精度。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Reward Shaping</tag>
      </tags>
  </entry>
  <entry>
    <title>在VS Code配置编译LaTeX环境</title>
    <url>/2021/01/03/2021-01-03-%E5%9C%A8VS%20Code%E9%85%8D%E7%BD%AELaTeX%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="在vs-code配置编译latex环境">在VS Code配置编译LaTeX环境</h1>
<h2 id="实施步骤">实施步骤</h2>
<ul>
<li><p>Step 1：下载<a href="https://code.visualstudio.com/">VS
Code</a>，<a
href="https://www.sumatrapdfreader.org/free-pdf-reader.html">SumatraPDF</a>，<a
href="https://mirrors.aliyun.com/CTAN/systems/texlive/Images/">texlive
(阿里云)</a>或者<a
href="https://mirrors.huaweicloud.com/CTAN/systems/texlive/Images/">texlive
(华为云)</a>，texlive只下载texlive.iso文件，安装参考网上教程</p></li>
<li><p>Step 2：VS Code中安装 LaTeX Workshop 插件</p></li>
<li><p>Step 3：修改 user setting</p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;latex-workshop.latex.tools&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            // 编译工具和命令</span><br><span class="line">            &quot;name&quot;: &quot;latexmk&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;latexmk&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-synctex=1&quot;,</span><br><span class="line">                &quot;-interaction=nonstopmode&quot;,</span><br><span class="line">                &quot;-file-line-error&quot;,</span><br><span class="line">                &quot;-pdf&quot;,</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            // 编译工具和命令</span><br><span class="line">            &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-synctex=1&quot;,</span><br><span class="line">                &quot;-interaction=nonstopmode&quot;,</span><br><span class="line">                &quot;-file-line-error&quot;,</span><br><span class="line">                &quot;-pdf&quot;,</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;pdflatex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;pdflatex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-synctex=1&quot;,</span><br><span class="line">                &quot;-interaction=nonstopmode&quot;,</span><br><span class="line">                &quot;-file-line-error&quot;,</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bibtex&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;bibtex&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;%DOCFILE%&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;latex-workshop.latex.recipes&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">                &quot;xelatex&quot;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;pdflatex&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">                &quot;pdflatex&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;xe-&gt;bib-&gt;xe-&gt;xe&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">                &quot;xelatex&quot;,</span><br><span class="line">                &quot;bibtex&quot;,</span><br><span class="line">                &quot;xelatex&quot;,</span><br><span class="line">                &quot;xelatex&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;pdf-&gt;bib-&gt;pdf-&gt;pdf&quot;,</span><br><span class="line">            &quot;tools&quot;: [</span><br><span class="line">                &quot;pdflatex&quot;,</span><br><span class="line">                &quot;bibtex&quot;,</span><br><span class="line">                &quot;pdflatex&quot;,</span><br><span class="line">                &quot;pdflatex&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;latex-workshop.view.pdf.viewer&quot;: &quot;external&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;latex-workshop.view.pdf.external.viewer.command&quot;: &quot;D:/Program Files (x86)/SumatraPDF/SumatraPDF.exe&quot;,</span><br><span class="line">    &quot;latex-workshop.view.pdf.external.viewer.args&quot;: [</span><br><span class="line">        &quot;-forward-search&quot;,</span><br><span class="line">        &quot;%TEX%&quot;,</span><br><span class="line">        &quot;%LINE%&quot;,</span><br><span class="line">        &quot;-reuse-instance&quot;,</span><br><span class="line">        &quot;-inverse-search&quot;,</span><br><span class="line">        &quot;\&quot;D:/Program Files (x86)/Microsoft VS Code/Code.exe\&quot; \&quot;D:/Program Files (x86)/Microsoft VS Code/resources/app/out/cli.js\&quot; -gr \&quot;%f\&quot;:\&quot;%l\&quot;&quot;,</span><br><span class="line">        &quot;%PDF%&quot;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>*<strong>记住修改VS Code位置和SumatraPDF位置</strong></p>
<ul>
<li><p>Step 4：在新建文件夹中，新建.tex文件，输入</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">hello,world</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>Ctrl+S编译，也可以在左侧Tex一栏设置编译方式</p></li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a
href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>小鼠趋利-避害机制的神经基础-曹鹏教授</title>
    <url>/2021/01/21/2021-01-21-%E5%B0%8F%E9%BC%A0%E8%B6%8B%E5%88%A9-%E9%81%BF%E5%AE%B3%E6%9C%BA%E5%88%B6%E7%9A%84%E7%A5%9E%E7%BB%8F%E5%9F%BA%E7%A1%80-%E6%9B%B9%E9%B9%8F%E6%95%99%E6%8E%88/</url>
    <content><![CDATA[<h1
id="小鼠趋利-避害机制的神经基础-曹鹏教授">小鼠趋利-避害机制的神经基础-曹鹏教授</h1>
<h2 id="趋利">1、趋利</h2>
<ul>
<li>最先发现的是一种鸟类的“滚蛋行为”，即把在巢附近的物体（台球，立方块，套娃等）物体用嘴使其滚到自己的巢里，这是他们的<strong>本能行为</strong>。</li>
<li>本能行为的触发上类似于钥匙开锁的模式，给出特征，直接反映出行为，特点是快速。</li>
<li>捕食行为
<ul>
<li>触觉+视觉，信息在上丘整合</li>
</ul></li>
<li>刺激上丘某环路神经元，可触发小鼠捕食行为，促进食欲。可用于治疗抑郁症，但是会明显产生肥胖副作用。</li>
</ul>
<h2 id="避害">2、避害</h2>
<ul>
<li><p>小鼠躲避老鹰的袭击，触发恐惧逃跑反应，主要有两种方式：僵直和逃跑，相关神经环路在上丘。</p></li>
<li><p>本能行为不需要基底神经节参与，该脑区主要参与探索行为</p></li>
</ul>
<h2 id="反抗">3、反抗</h2>
<ul>
<li>小鼠与蛇放在一起的三种表现：
<ul>
<li>逃跑（PMD），初步察觉到危险，尝试离开</li>
<li>僵直（VMHDM），发现无法离开或者已被锁定</li>
<li><strong>进攻</strong>（AHN），被咬住，产生了痛觉，触发反抗行为</li>
</ul></li>
<li>小鼠与伙伴小鼠放在一起，刺激AHN：异性触发性行为，同性触发嗅探。性刺激和暴力受到同一脑区调控。</li>
<li>小鼠与领地入侵者小鼠放在一起，刺激AHN：产生攻击行为。</li>
</ul>
<h2 id="总结">总结</h2>
<p>曹老师的报告挺精彩的，围绕趋利避害的行为表现，研究其神经基础。首先以捕食行为为例，研究了趋利行为；然后将小鼠与天敌放在一起，研究避害行为，发现恐惧逃跑机制；最后研究了在极度危险时，痛觉触发的反抗行为，小鼠甚至会攻击自己的天敌（咬蛇）。</p>
<p>2021年1月22日</p>
]]></content>
      <tags>
        <tag>Report</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1221 分割平衡字符串-简单-括号匹配</title>
    <url>/2021/03/02/2021-03-02-Q1221-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h4 id="分割平衡字符串"><a
href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">1221.
分割平衡字符串</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>在一个 <strong>平衡字符串</strong> 中，'L' 和 'R'
字符的数量是相同的。</p>
<p>给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p>
<p>返回可以通过分割得到的平衡字符串的 <strong>最大数量</strong> 。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：s = "RLRRLLRLRL" 输出：4 解释：s 可以分割为
"RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 'L' 和 'R'
。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：s = "RLLLLRRRLR" 输出：3 解释：s 可以分割为
"RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s[i] = 'L' 或 'R'</code></li>
<li><code>s</code> 是一个平衡字符串</li>
<li>分割得到的每个字符串都必须是平衡字符串。</li>
</ul>
</blockquote>
<h3 id="approach-1-前缀和">Approach 1: 前缀和</h3>
<p>本题目的思路很简单，从以下几点分析：</p>
<ul>
<li>题目只考虑分割，意味着不打乱字母顺序，分割的序列必然上大序列的子序列；</li>
<li>子序列不考虑是否要对称，因此自用考虑子序列内的字符数目相等；</li>
<li>题目限定了字符串s中只包含“L”和“R”，所以不用考虑有意外的符号出现；</li>
</ul>
<p>代码如下，在for循环内考虑L与R个数相等时子序列个数加1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balancedStringSplit</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res,L,R=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] ==<span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                L+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[i]==<span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                R+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> L==R <span class="keyword">and</span> L!=<span class="number">0</span>:</span><br><span class="line">                res+=<span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果s中不限定只包含字符LR，则需置零L和R                 </span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&quot;RLRRLLRLRL&quot;</span></span><br><span class="line">    solution=Solution().balancedStringSplit(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，n是字符数量。</li>
<li>空间复杂度：O(1)，只使用了几个变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer03-数组中重复的数字-简单-Hash Table</title>
    <url>/2021/03/01/2021-03-01-JZOffer03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97-%E7%AE%80%E5%8D%95-Hash%20Table/</url>
    <content><![CDATA[<h4 id="剑指-offer-03.-数组中重复的数字"><a
href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指
Offer 03. 数组中重复的数字</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1
的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入： [2, 3, 1, 0, 2, 5, 3] 输出：2 或 3</p>
</blockquote>
<h3 id="approach-1-hash-table">Approach 1: Hash table</h3>
<p>这道题目最直接的做法当然是在一个For循环中判断是否存在某个数字，将其移除后在判断一次。但是直接这样写会导致时间复杂度比较高，需要对执行判断这部分代码进行优化。</p>
<p>最简单的应该就是使用 hash 表了，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRepeatNumber</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        Hash=<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">not</span> <span class="keyword">in</span> Hash:</span><br><span class="line">                Hash[nums[i]]=i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 另一种方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRepeatNumber</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>: </span><br><span class="line">        temp_set = <span class="built_in">set</span>()</span><br><span class="line">        repeat = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            temp_set.add(nums[i])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp_set) &lt; i + <span class="number">1</span>:</span><br><span class="line">                repeat = nums[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> repeat</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    solution=Solution().findRepeatNumber(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(n)</p>
<p>遍历数组一遍。使用哈希集合（HashSet），添加元素的时间复杂度为
O(1)，故总的时间复杂度是 O(n)。</p></li>
<li><p>空间复杂度：O(n)</p>
<p>不重复的每个元素都可能存入集合，因此占用 O(n) 额外空间。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hash Table</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装库太慢更换国内镜像源的方法</title>
    <url>/2021/02/04/2021-02-04-pip%E5%AE%89%E8%A3%85%E5%BA%93%E5%A4%AA%E6%85%A2%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2
id="pip安装库太慢更换国内镜像源的方法">pip安装库太慢更换国内镜像源的方法</h2>
<p>pip安装虽然方便，但是常常面临下载缓慢的问题。</p>
<p>这里可以更换下载渠道为国内的镜像，加快下载</p>
<p>一些国内镜像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>
<p>更换方法例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gym</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Q303 Range Sum Query(Immutable)-简单-前缀和</title>
    <url>/2021/03/01/2021-03-01-Q303-Range%20Sum%20Query-Immutable-%E7%AE%80%E5%8D%95-%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h4 id="range-sum-query---immutable"><a
href="https://leetcode-cn.com/problems/range-sum-query-immutable/">Range
Sum Query - Immutable</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>Given an integer array nums, find the sum of the elements between
indices i and j (i ≤ j), inclusive.</p>
<p>Implement the NumArray class:</p>
<ul>
<li>NumArray(int[] nums) Initializes the object with the integer array
nums.</li>
<li>int sumRange(int i, int j) Return the sum of the elements of the
nums array in the range [i, j] inclusive (i.e., sum(nums[i], nums[i +
1], ... , nums[j]))</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>Input ["NumArray", "sumRange", "sumRange", "sumRange"] [[[-2, 0, 3,
-5, 2, -1]], [0, 2], [2, 5], [0, 5]] Output [null, 1, -1, -3]</p>
<p>Explanation NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3) numArray.sumRange(2,
5); // return -1 (3 + (-5) + 2 + (-1)) numArray.sumRange(0, 5); //
return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))</p>
</blockquote>
<h3 id="approach-1-前缀和">Approach 1: 前缀和</h3>
<p>这道题题目写得看不出重点，实际想考察的是在大量重复调用的情况下，怎么把时间复杂度降到最小<span
class="math display">\[O(1)\]</span>。因此需要在初始化的时候就对数据进行预处理，计算出前<span
class="math display">\[i\]</span>项和： <span class="math display">\[
\begin{align}
sumRange(i,j)&amp;=\sum_{k=i}^j nums[k]\\
&amp;=\sum_{k=0}^j nums[k]-\sum_{k=0}^{i-1} nums[k]
\end{align}
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        self.sums = [<span class="number">0</span>]</span><br><span class="line">        _sums = self.sums</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            _sums.append(_sums[-<span class="number">1</span>] + num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumRange</span>(<span class="params">self, i: <span class="built_in">int</span>, j: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        _sums = self.sums</span><br><span class="line">        <span class="keyword">return</span> _sums[j + <span class="number">1</span>] - _sums[i]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：初始化 O(n)，每次检索 O(1)，其中 n 是数组 的长度。
初始化需要遍历数组 计算前缀和，时间复杂度是 O(n)。
每次检索只需要得到两个下标处的前缀和，然后计算差值，时间复杂度是
O(1)。</p></li>
<li><p>空间复杂度：O(n)，其中 n 是数组 的长度。需要创建一个长度为 n+1
的前缀和数组。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1528 重新排列字符串-简单-编码排序</title>
    <url>/2021/03/03/2021-03-03-Q1528-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-%E7%BC%96%E7%A0%81%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="重新排列字符串"><a
href="https://leetcode-cn.com/problems/shuffle-string/">1528.
重新排列字符串</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个字符串 s 和一个 <strong>长度相同</strong> 的整数数组 indices
。请你重新排列字符串 s ，其中第 i 个字符需要移动到 indices[i]
指示的位置。返回重新排列后的字符串</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：s = "codeleet", indices = [4,5,6,7,0,2,1,3] 输出："leetcode"
解释：如图所示，"codeleet" 重新排列后变为 "leetcode" 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：s = "aiohn", indices = [3,1,4,2,0] 输出："nihao"</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>s.length == indices.length == n</li>
<li>1 &lt;= n &lt;= 100</li>
<li>s 仅包含小写英文字母。</li>
<li>0 &lt;= indices[i] &lt; n</li>
<li>indices 的所有的值都是唯一的（也就是说，indices 是整数 0 到 n - 1
形成的一组排列）。</li>
</ul>
</blockquote>
<h3 id="approach-1-编码排序">Approach 1: 编码排序</h3>
<p>本题目的容易出现歧义，需要仔细对案例进行分析才能正确理解题目意思。</p>
<p>本题目是先通过一种编码，把输入字符串中的每个字母对应上给定的序号。最后按照序号从小到大对字符串重排序。</p>
<p>理解题目后，就比较简单了，这里尝试一下使用enumerate()，返回s中每个字符的下标和对应字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restoreString</span>(<span class="params">self, s: <span class="built_in">str</span>, indices </span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        result = [<span class="string">&quot;&quot;</span>] * <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            result[indices[i]] = ch</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restoreString1</span>(<span class="params">self, s: <span class="built_in">str</span>, indices </span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        res=[<span class="string">&#x27;&#x27;</span>]*<span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(indices)):</span><br><span class="line">            res[indices[i]]=s[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&quot;codeleet&quot;</span></span><br><span class="line">    indices = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">    solution=Solution().restoreString(s,indices)</span><br><span class="line">    solution=Solution().restoreString1(s,indices)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，n是字符串长度，需要遍历一遍字符串</li>
<li>空间复杂度：O(n)，n是字符串长度，只用申请一个长度为n的res数组。</li>
</ul>
<p>其实也可以尝试不用申请res数组，直接修改原字符串，把空间复杂度降到O(1)。不过Python中要先用
s = list(s) 函数进行转化才能修改字符串。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1769 移动所有球到每个盒子所需的最小操作数-中等-动态规划</title>
    <url>/2021/03/03/2021-03-03-Q1769-%E7%A7%BB%E5%8A%A8%E6%89%80%E6%9C%89%E7%90%83%E5%88%B0%E6%AF%8F%E4%B8%AA%E7%9B%92%E5%AD%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%95%B0-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="移动所有球到每个盒子所需的最小操作数"><a
href="https://leetcode-cn.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/">1769.
移动所有球到每个盒子所需的最小操作数</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>有 n 个盒子。给你一个长度为 n 的二进制字符串 boxes ，其中 boxes[i]
的值为 '0' 表示第 i 个盒子是 空 的，而 boxes[i] 的值为 '1' 表示盒子里有
一个 小球。</p>
<p>在一步操作中，你可以将 一个
小球从某个盒子移动到一个与之相邻的盒子中。第 i 个盒子和第 j
个盒子相邻需满足 abs(i - j) == 1
。注意，操作执行后，某些盒子中可能会存在不止一个小球。</p>
<p>返回一个长度为 n 的数组 answer ，其中 answer[i] 是将所有小球移动到第
i 个盒子所需的 最小 操作数。</p>
<p>每个 answer[i] 都需要根据盒子的 初始状态 进行计算。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：boxes = "110" 输出：[1,1,3]
解释：每个盒子对应的最小操作数如下： 1) 第 1 个盒子：将一个小球从第 2
个盒子移动到第 1 个盒子，需要 1 步操作。 2) 第 2 个盒子：将一个小球从第
1 个盒子移动到第 2 个盒子，需要 1 步操作。 3) 第 3
个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2
步操作。将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3
步操作。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：boxes = "001011" 输出：[11,8,5,4,3,4]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>n == boxes.length</li>
<li>1 &lt;= n &lt;= 2000</li>
<li>boxes[i] 为 '0' 或 '1'</li>
</ul>
</blockquote>
<h3 id="approach-1-暴力方法">Approach 1: 暴力方法</h3>
<p>题目的意思比较容易理解，可以直接求出每个球移动到第 i
个格子的步数，形成一个二维数组，最后对这个数组每行求和获得答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minOperations</span>(<span class="params">self, boxes: <span class="built_in">str</span></span>):</span><br><span class="line">            stepnum = <span class="built_in">len</span>(boxes)</span><br><span class="line">            <span class="comment"># 浅拷贝创建二维数组，在赋值的时候，内存都指向同一位置，在赋值时会有问题</span></span><br><span class="line">            <span class="comment"># steps = [[0]*stepnum]*stepnum </span></span><br><span class="line">            <span class="comment"># 创建二维数组的正确方式</span></span><br><span class="line">            steps = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stepnum)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(stepnum)]</span><br><span class="line">            ans=[]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stepnum): </span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(stepnum):</span><br><span class="line">                    <span class="keyword">if</span> boxes[j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        steps[i][j] = <span class="built_in">abs</span>(j-i)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stepnum):</span><br><span class="line">                ans.append( <span class="built_in">sum</span>(steps[i][:]) ) </span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        s = <span class="string">&quot;codeleet&quot;</span></span><br><span class="line">        boxes = <span class="string">&quot;110&quot;</span></span><br><span class="line">        solution=Solution().minOperations(boxes)</span><br><span class="line">        <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n^2)\]</span>，n是盒子个数，需要有两重循环，在每个盒子都有球的情况下，计算量最大达到这个复杂度。空盒子可以减少复杂度。</li>
<li>空间复杂度：<span
class="math display">\[O(n^2)\]</span>，申请一个长度为nxn的数组。</li>
</ul>
<h2 id="approach-2-动态规划">Approach 2: 动态规划</h2>
<p>方法2很取巧，利用一个for循环先统计第一个box右边有球盒子的个数。并且计算出所有球移动到第一个有球的盒子的移动次数dp[0]；</p>
<p>在第二个for循环中遍历所有盒子，每个盒子所对应的最小移动步数可以通过以下形式计算：
<span class="math display">\[
dp[j]=dp[j-1]-right+left
\]</span>
接下来对右边的相邻盒子，相比刚刚的盒子，右边right个盒子都向左移动了一次（跑近了），总次数和刚刚的盒子相比减少right，左边n个盒子相比也向左移动了一次(跑远了)，总次数比刚刚的盒子增加left，所以这个盒子的操作个数是total-right+left。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minOperations1</span>(<span class="params">self, boxes: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        dp = [<span class="number">0</span>] * <span class="built_in">len</span>(boxes)</span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(boxes)): </span><br><span class="line">            <span class="keyword">if</span> boxes[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                dp[<span class="number">0</span>] += i</span><br><span class="line">                right += <span class="number">1</span>   <span class="comment"># 当前及其右边的 1 的数量</span></span><br><span class="line">        </span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(boxes)):</span><br><span class="line">            <span class="keyword">if</span> boxes[j-<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            dp[j] = dp[j-<span class="number">1</span>] - right + left</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n)\]</span>，n是盒子个数，在只有两个单层循环</li>
<li>空间复杂度：<span
class="math display">\[O(n)\]</span>，dp数组。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q945 使数组唯一的最小增量-中等-排序</title>
    <url>/2021/03/05/2021-03-05-Q945-%E4%BD%BF%E6%95%B0%E7%BB%84%E5%94%AF%E4%B8%80%E7%9A%84%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F-%E4%B8%AD%E7%AD%89-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="使数组唯一的最小增量"><a
href="https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique/">945.
使数组唯一的最小增量</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。</p>
<p>返回使 A 中的每个值都是唯一的最少操作次数。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[1,2,2] 输出：1 解释：经过一次 move 操作，数组将变为 [1, 2,
3]。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：[3,2,1,2,1,7] 输出：6 解释：经过 6 次 move 操作，数组将变为 [3,
4, 1, 2, 5, 7]。 可以看出 5 次或 5 次以下的 move
操作是不能让数组的每个值唯一的。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;= A.length &lt;= 40000</li>
<li>0 &lt;= A[i] &lt; 40000</li>
</ul>
</blockquote>
<h3 id="approach-1-直接方法运行超时">Approach 1:
直接方法（运行超时）</h3>
<p>很明显，把混乱的数组排序后可以方便快速处理。这里是每一步检查元素是否满足<span
class="math display">\[A[i] &gt;= A[i+1]\]</span>，如果是则<span
class="math display">\[A[i+1]+=1\]</span>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minIncrementForUnique</span>(<span class="params">self, A</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        A.sort()</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>( i &lt; <span class="built_in">len</span>(A)-<span class="number">1</span> ):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt;= A[i+<span class="number">1</span>]:</span><br><span class="line">                A[i+<span class="number">1</span>] = A[i+<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]</span><br><span class="line">    solution=Solution().minIncrementForUnique(A)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>算法时间复杂度过大，导致输入数据较大的情况下，运行超时。因此必须对算法进行优化。</p>
<p>由于 <span class="math display">\[A[i]\]</span> 的范围为 <span
class="math display">\[[0,
40000)\]</span>，我们可以用数组统计出每个数出现的次数，然后对于每个重复出现的数，我们暴力地将它递增，直到它增加到一个没有重复出现的数为止。但这样的方法的时间复杂度较大，可以达到
<span class="math display">\[O(N^2)\]</span>，例如数组 A 中所有元素都是
1 的情况。</p>
<p>因此，我们不能对重复出现的数暴力的进行递增，而是用以下的做法：当我们找到一个没有出现过的数的时候，将之前某个重复出现的数增加成这个没有出现过的数。注意，这里
「之前某个重复出现的数」
是可以任意选择的，它并不会影响最终的答案，因为将 P 增加到 X 并且将 Q
增加到 Y，与将 P 增加到 Y 并且将 Q 增加到 X 都需要进行 (X + Y) - (P + Q)
次操作。</p>
<p>例如当数组 A 为 [1, 1, 1, 1, 3, 5] 时，我们发现有 3 个重复的
1，且没有出现过 2，4 和 6，因此一共需要进行 (2 + 4 + 6) - (1 + 1 + 1) =
9 次操作。</p>
<h3 id="approach-2-计数">Approach 2: 计数</h3>
<p><strong>算法</strong></p>
<p>首先统计出每个数出现的次数，然后从小到大遍历每个数 x：</p>
<ul>
<li><p>如果 x
出现了两次以上，就将额外出现的数记录下来（例如保存到一个列表中）；</p></li>
<li><p>如果 x 没有出现过，那么在记录下来的数中选取一个 v，将它增加到
x，需要进行的操作次数为 x - v。</p></li>
</ul>
<p>我们还可以对该算法进行优化，使得我们不需要将额外出现的数记录下来。还是以
[1, 1, 1, 1, 3, 5] 为例，当我们发现有 3 个重复的 1
时，我们先将操作次数减去 1 + 1 + 1。接下来，当我们发现 2，4 和 6
都没有出现过时，我们依次将操作次数增加 2，4 和
6。这种优化方法在方法二中也被使用。</p>
<p><strong>注意事项</strong></p>
<p>虽然 A[i] 的范围为 [0, 40000)，但我们有可能会将数据递增到 40000
的两倍 80000。这是因为在最坏情况下，数组 A 中有 40000 个
40000，这样要使得数组值唯一，需要将其递增为 [40000, 40001, ...,
79999]，因此用来统计的数组需要开到 80000。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minIncrementForUnique1</span>(<span class="params">self, A</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    count = [<span class="number">0</span>] * <span class="number">80000</span></span><br><span class="line">    <span class="comment"># 建立一个 Hash 表，记录每个元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">        count[x] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># taken记录从冗余数中取走了几个</span></span><br><span class="line">    ans = taken = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80000</span>):</span><br><span class="line">        <span class="keyword">if</span> count[x] &gt;= <span class="number">2</span>:</span><br><span class="line">            taken += count[x] - <span class="number">1</span></span><br><span class="line">            ans -= x * (count[x] - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> taken &gt; <span class="number">0</span> <span class="keyword">and</span> count[x] == <span class="number">0</span>:</span><br><span class="line">            taken -= <span class="number">1</span></span><br><span class="line">            ans += x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(L)，其中 L 的数量级是数组 A
的长度加上其数据范围内的最大值，因为在最坏情况下，数组 A
中的所有数都是数据范围内的最大值。</p></li>
<li><p>空间复杂度：O(L)，需要长度 L
的数组统计每个数出现的次数。</p></li>
</ul>
<h3 id="approach-3-排序">Approach 3: 排序</h3>
<p><strong>思路</strong></p>
<p>我们可以将数组先进行排序，再使用方法一中提及的优化方法。</p>
<p><strong>算法</strong></p>
<p>将数组排完序后，我们对数组进行线性扫描，会有两种情况：</p>
<ul>
<li><p>如果 A[i-1] == A[i]，我们将操作次数减去
A[i]，并将重复的数的个数增加 1；</p></li>
<li><p>如果 A[i-1] &lt; A[i]，则区间 <span
class="math display">\[\big[A[i-1] + 1, A[i] - 1\big]
\]</span>里的数都是没有出现过的，所以我们可以将之前重复的数变为这个区间范围内的数。设当前重复的数的个数为
taken，则我们最多可以改变 give = min(taken, A[i] - A[i - 1] - 1)
个数，即区间 <span class="math display">\[\big[A[i - 1] + 1, A[i] -
1\big]\]</span>的长度与 taken
二者的较小值。它们的操作数对答案的贡献为：</p></li>
</ul>
<p><span class="math display">\[
\begin{align}
&amp;A[i-1]*give+\sum^{give}_{k=1}k\\
=&amp; A[i-1]*give+\frac{(give+1)*give}{2}
\end{align}
\]</span></p>
<p>在扫描完数组后，如果仍然有重复的数，即 taken 不为
0，我们可以将这些数变为区间 <span class="math display">\[\big[A[n - 1] +
1, \infty \big)\]</span>中的数，其中 A[n - 1] 是数组 A
中的最后一个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minIncrementForUnique2</span>(<span class="params">self, A</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    A.sort()</span><br><span class="line">    A.append(<span class="number">100000</span>)</span><br><span class="line">    ans = taken = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(A)):</span><br><span class="line">        <span class="keyword">if</span> A[i - <span class="number">1</span>] == A[i]:</span><br><span class="line">            taken += <span class="number">1</span></span><br><span class="line">            ans -= A[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            give = <span class="built_in">min</span>(taken, A[i] - A[i - <span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line">            ans += give * (give + <span class="number">1</span>) // <span class="number">2</span> + give * A[i - <span class="number">1</span>]</span><br><span class="line">            taken -= give</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(N\log
N)\]</span>，其中 N 是数组 A 的长度，即排序的时间复杂度。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(\log
N)\]</span>，排序需要额外 <span class="math display">\[O(\log
N)\]</span> 的栈空间。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q978 最长湍流子数组-中等-动态规划</title>
    <url>/2021/03/04/2021-03-04-Q978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="最长湍流子数组"><a
href="https://leetcode-cn.com/problems/longest-turbulent-subarray/">978.
最长湍流子数组</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>当 A 的子数组 A[i], A[i+1], ..., A[j]
满足下列条件时，我们称其为湍流子数组：</p>
<p>若 i &lt;= k &lt; j，当 k 为奇数时， A[k] &gt; A[k+1]，且当 k
为偶数时，A[k] &lt; A[k+1]； 或 若 i &lt;= k &lt; j，当 k 为偶数时，A[k]
&gt; A[k+1] ，且当 k 为奇数时， A[k] &lt; A[k+1]。
也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。</p>
<p>返回 A 的最大湍流子数组的长度。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[9,4,2,10,7,8,8,1,9] 输出：5 解释：(A[1] &gt; A[2] &lt; A[3]
&gt; A[4] &lt; A[5])</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：[4,8,12,16] 输出：2</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= A.length &lt;= 40000</li>
<li>0 &lt;= A[i] &lt;= 10^9</li>
</ul>
</blockquote>
<h3 id="approach-1-滑动窗口法">Approach 1: 滑动窗口法</h3>
<p>本题目需要仔细考虑清楚集中边界条件的情况：</p>
<ul>
<li>左右边界相等；</li>
<li>右边界元素等于右边界+1元素；</li>
<li>右边界什么时候右移</li>
<li>左边界什么时候右移，移动到哪个位置</li>
</ul>
<p>通过令边界left=right=0，设计一个滑动窗口，</p>
<ul>
<li>当左右边界相等时，此时子数组只包含一个元素，肯定是可以右边界右移的；</li>
<li>当左右边界不相等时，如果右边界-1的元素、右边界元素、右边界+1的元素，三者满足<span
class="math display">\[a&gt;b&lt;c\]</span>或者<span
class="math display">\[a&lt;b&gt;c\]</span>时，右边界右移；</li>
<li>当左右边界不相等时，如果右边界-1的元素、右边界元素、右边界+1的元素，三者不满足<span
class="math display">\[a&gt;b&lt;c\]</span>或者<span
class="math display">\[a&lt;b&gt;c\]</span>，则结束判断，left边界从right边界重新开始判断下一个子数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxTurbulenceSize</span>(<span class="params">self, arr</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        left,right=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(right&lt;n-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> left == right:</span><br><span class="line">                <span class="comment"># 右边界元素等于右边界+1的元素</span></span><br><span class="line">                <span class="keyword">if</span> arr[right] == arr[right+<span class="number">1</span>]:</span><br><span class="line">                    left+=<span class="number">1</span></span><br><span class="line">                right+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 在扩展长度时候，只考虑验证右边界条件即可</span></span><br><span class="line">                <span class="keyword">if</span> (arr[right - <span class="number">1</span>] &lt; arr[right]) <span class="keyword">and</span> (arr[right] &gt; arr[right + <span class="number">1</span>]):</span><br><span class="line">                    right+=<span class="number">1</span>    </span><br><span class="line">                <span class="keyword">elif</span> (arr[right - <span class="number">1</span>] &gt; arr[right]) <span class="keyword">and</span> (arr[right] &lt; arr[right + <span class="number">1</span>]):</span><br><span class="line">                    right+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 右边界不符合条件则验证结束，将left右移，重新验证</span></span><br><span class="line">                    left = right</span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    inputs = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line">    solution=Solution().maxTurbulenceSize(inputs)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n)\]</span>，窗口的左右端点最多各移动 n
次。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>，只需要维护常数额外空间。</li>
</ul>
<h3 id="approach-2-动态规划方法">Approach 2: 动态规划方法</h3>
<p>也可以使用动态规划的方法计算最长湍流子数组的长度。</p>
<p>利用二维数组记录相邻元素的信息：</p>
<p><span
class="math display">\[dp[i][0]\]</span>表示以arr[i]为结尾的，且<span
class="math display">\[arr[i-1]&lt;arr[i]\]</span>的湍流子数组的最大长度。
<span
class="math display">\[dp[i][1]\]</span>表示以arr[i]为结尾的，且<span
class="math display">\[arr[i-1]&lt;arr[i]\]</span>的湍流子数组的最大长度。
每次记录湍流子数组应该从1开始，因为需要包含自身。 - 当<span
class="math display">\[arr[i]&lt;arr[i-1]\]</span>时，湍流子数组长度为<span
class="math display">\[dp[i][0]=dp[i-1][1]+1\]</span>，同时<span
class="math display">\[dp[i][1]=1\]</span> - 当<span
class="math display">\[arr[i]&gt;arr[i-1]\]</span>时，湍流子数组长度为<span
class="math display">\[dp[i][1]=dp[i-1][0]+1\]</span>，同时<span
class="math display">\[dp[i][0]=1\]</span> - 当<span
class="math display">\[arr[i]=arr[i-1]\]</span>时，湍流子数组长度为<span
class="math display">\[dp[i][0]=dp[i][1]=1\]</span> 最终，<span
class="math display">\[dp\]</span>数组的最大值即为所求的答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxTurbulenceSize1</span>(<span class="params">self, arr</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> arr[i-<span class="number">1</span>] &gt; arr[i]:</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[i-<span class="number">1</span>] &lt; arr[i]:</span><br><span class="line">            dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i][<span class="number">0</span>])</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n)\]</span>，遍历一遍数组。</li>
<li>空间复杂度：<span
class="math display">\[O(n)\]</span>，只需要维护dp。</li>
</ul>
<p>其实还可以直接用两个变量<span
class="math display">\[dp0\]</span>和<span
class="math display">\[dp1\]</span>代替二维数组dp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxTurbulenceSize2</span>(<span class="params">self, arr</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    dp0 = dp1 = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 注意要从1开始循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        <span class="keyword">if</span> arr[i-<span class="number">1</span>] &gt; arr[i]:</span><br><span class="line">            dp0 = dp1 + <span class="number">1</span></span><br><span class="line">            dp1 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[i-<span class="number">1</span>] &lt; arr[i]:</span><br><span class="line">            dp1 = dp0 + <span class="number">1</span></span><br><span class="line">            dp0 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp0 = dp1 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        res = <span class="built_in">max</span>(res, dp0)</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n)\]</span>，遍历一遍数组。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>，只需要维护dp0和dp1两个变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer42-连续子数组的最大和-简单-动态规划</title>
    <url>/2021/03/09/2021-03-09-JZOffer42-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C-%E7%AE%80%E5%8D%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="剑指offer-42.-连续子数组的最大和"><a
href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指Offer
42. 连续子数组的最大和</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p>
<p>要求时间复杂度为O(n)。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: nums = [-2,1,-3,4,-1,2,1,-5,4] 输出: 6 解释: 连续子数组
[4,-1,2,1] 的和最大，为 6。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>
<li><code>-100 &lt;= arr[i] &lt;= 100</code></li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>解题思路：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">解法</th>
<th style="text-align: center;">时间复杂度</th>
<th style="text-align: center;">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">暴力搜索</td>
<td style="text-align: center;"><span
class="math display">\[O(N^2)\]</span></td>
<td style="text-align: center;"><span
class="math display">\[O(1)\]</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">分治法</td>
<td style="text-align: center;"><span class="math display">\[O(N\log
N)\]</span></td>
<td style="text-align: center;"><span class="math display">\[O(\log
N)\]</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">动态规划</td>
<td style="text-align: center;"><span
class="math display">\[O(N)\]</span></td>
<td style="text-align: center;"><span
class="math display">\[O(1)\]</span></td>
</tr>
</tbody>
</table>
<p>动态规划是本题的最优解法，以下按照标准流程解题。</p>
<p><strong>动态规划解析：</strong></p>
<ul>
<li><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以元素 nums[i]
为结尾的连续子数组最大和。</p></li>
<li><p>为何定义最大和 dp[i] 中必须包含元素 nums[i] ：保证 dp[i] 递推到
dp[i+1] 的正确性；如果不包含 nums[i] ，递推时则不满足题目的
<strong>连续子数组</strong> 要求。</p></li>
<li><p>转移方程： 若 <span class="math display">\[dp[i-1] \leq
0\]</span> ，说明 <span class="math display">\[dp[i - 1]\]</span> 对
dp[i] 产生负贡献</p>
<ul>
<li><p>当 <span class="math display">\[dp[i - 1] &gt; 0\]</span>
时：执行 <span class="math display">\[dp[i] = dp[i-1] + nums[i]\]</span>
；</p></li>
<li><p>当 <span class="math display">\[dp[i - 1] \leq 0\]</span>
时：执行 <span class="math display">\[dp[i] = nums[i]\]</span>
；</p></li>
</ul></li>
<li><p>初始状态： <span class="math display">\[dp[0] =
nums[0]\]</span>，即以 <span class="math display">\[nums[0]\]</span>
结尾的连续子数组最大和为 <span class="math display">\[nums[0]\]</span>
。</p></li>
<li><p>返回值： 返回 dp 列表中的最大值，代表全局最大值。</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[i] += <span class="built_in">max</span>(nums[i - <span class="number">1</span>], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    solution=Solution().maxSubArray(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>空间复杂度降低： 由于 dp[i] 只与 dp[i-1] 和 nums[i]
有关系，因此可以将原数组 nums 用作 dp 列表，即直接在 nums 上修改即可。
由于省去 dp 列表使用的额外空间，因此空间复杂度从 O(N) 降至 O(1) 。</p>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)O(N) ： 线性遍历数组 nums 即可获得结果，使用 O(N)O(N)
时间。</li>
<li>空间复杂度 O(1)O(1) ： 使用常数大小的额外空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1025 除数博弈-简单-动态规划</title>
    <url>/2021/03/08/2021-03-08-Q1025-%E9%99%A4%E6%95%B0%E5%8D%9A%E5%BC%88-%E7%AE%80%E5%8D%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="除数博弈"><a
href="https://leetcode-cn.com/problems/divisor-game/">1025.
除数博弈</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p>
<p>最初，黑板上有一个数字 N
。在每个玩家的回合，玩家需要执行以下操作：</p>
<p>选出任一 x，满足 0 &lt; x &lt; N 且 N % x == 0 。 用 N - x
替换黑板上的数字 N 。 如果玩家无法执行这些操作，就会输掉游戏。</p>
<p>只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回
False。假设两个玩家都以最佳状态参与游戏。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：2 输出：true 解释：爱丽丝选择 1，鲍勃无法进行操作。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：3 输出：false 解释：爱丽丝选择 1，鲍勃也选择
1，然后爱丽丝无法进行操作。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= N &lt;= 1000</li>
</ul>
</blockquote>
<h3 id="approach-1-归纳法">Approach 1: 归纳法</h3>
<p>博弈类的问题常常让我们摸不着头脑。当我们没有解题思路的时候，不妨试着写几项试试：</p>
<ul>
<li>N=1 的时候，区间 (0, 1) 中没有整数是 n 的因数，所以此时 <span
class="math display">\[\text{Alice}\]</span> 败。</li>
<li>N = 2 的时候，<span class="math display">\[\text{Alice}\]</span>
只能拿 1，N 变成 1，<span class="math display">\[\text{Bob}\]</span>
无法继续操作，故<span class="math display">\[ \text{Alice}\]</span>
胜。</li>
<li>N = 3 的时候，<span class="math display">\[\text{Alice}\]</span>
只能拿 1，N 变成 2 ，根据 N = 2 的结论，我们知道此时 <span
class="math display">\[\text{Bob}\]</span> 会获胜，<span
class="math display">\[\text{Alice}\]</span> 败。</li>
<li>N = 4 的时候，<span class="math display">\[\text{Alice}\]</span>
能拿 1 或 2 ，如果 <span class="math display">\[\text{Alice}\]</span> 拿
1，根据 N=3 的结论，<span class="math display">\[\text{Bob}\]</span>
会失败，<span class="math display">\[\text{Alice}\]</span> 会获胜。</li>
<li>N=5 的时候，<span class="math display">\[\text{Alice}\]</span>
只能拿 1，根据 N=4 的结论，<span
class="math display">\[\text{Alice}\]</span> 会失败。 ......</li>
</ul>
<p>写到这里，也许你有了一些猜想。没关系，请大胆地猜想，在这种情况下大胆地猜想是
AC 的第一步。也许你会发现这样一个现象：N 为奇数的时候 <span
class="math display">\[\text{Alice}\]</span>（先手）必败，N 为偶数的时候
<span class="math display">\[\text{Alice}\]</span> 必胜。
这个猜想是否正确呢？下面我们来想办法证明它。</p>
<p><strong>证明</strong></p>
<ul>
<li><p><span class="math display">\[N = 1\]</span> 和 <span
class="math display">\[N = 2 \]</span>时结论成立。</p></li>
<li><p><span class="math display">\[N &gt; 2\]</span> 时，假设 <span
class="math display">\[N \leq k\]</span> 时该结论成立，则 <span
class="math display">\[N = k + 1\]</span> 时：</p>
<ul>
<li>如果 k 为偶数，则 <span class="math display">\[k + 1\]</span>
为奇数，x 是 <span class="math display">\[k + 1\]</span>
的因数，只可能是奇数，而奇数减去奇数等于偶数，且 <span
class="math display">\[k + 1 - x \leq k\]</span>，故轮到 <span
class="math display">\[\text{Bob}\]</span>
的时候都是偶数。而根据我们的猜想假设 <span class="math display">\[N\leq
k\]</span> 的时候偶数的时候先手必胜，故此时无论 <span
class="math display">\[\text{Alice}\]</span> 拿走什么，<span
class="math display">\[\text{Bob}\]</span> 都会处于必胜态，所以<span
class="math display">\[\text{Alice}\]</span> 处于必败态。</li>
<li>如果 k 为奇数，则 k + 1 为偶数，x 可以是奇数也可以是偶数，若 <span
class="math display">\[\text{Alice}\]</span> 减去一个奇数，那么 <span
class="math display">\[k + 1 - x\]</span> 是一个小于等于 <span
class="math display">\[k\]</span> 的奇数，此时 <span
class="math display">\[\text{Bob}\]</span> 占有它，处于必败态，则 <span
class="math display">\[\text{Alice}\]</span> 处于必胜态。
综上所述，这个猜想是正确的。</li>
</ul></li>
</ul>
<p>下面是代码实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divisorGame</span>(<span class="params">self, N: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> N % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    N = <span class="number">5</span></span><br><span class="line">    solution=Solution().divisorGame(N)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(1)\]</span></p></li>
<li><p>空间复杂度：<span class="math display">\[O(1)\]</span></p></li>
</ul>
<h3 id="approach-2-动态规划">Approach 2: 动态规划</h3>
<p>在「方法一」中，我们写出了前面几项的答案，在这个过程中我们发现，<span
class="math display">\[\text{Alice}\]</span> 处在 <span
class="math display">\[N = k\]</span>
的状态时，他（她）做一步操作，必然使得 Bob 处于 N = m (m &lt; k)
的状态。因此我们只要看是否存在一个 m 是必败的状态，那么 Alice
直接执行对应的操作让当前的数字变成 m，<span
class="math display">\[\text{Alice}\]</span>
就必胜了，如果没有任何一个是必败的状态的话，说明 <span
class="math display">\[\text{Alice}\]</span>
无论怎么进行操作，最后都会让 <span
class="math display">\[\text{Bob}\]</span> 处于必胜的状态，此时 <span
class="math display">\[\text{Alice}\]</span> 是必败的。</p>
<p>结合以上我们定义 <span class="math display">\[f[i]\]</span>
表示当前数字 i 的时候先手是处于必胜态还是必败态，<span
class="math display">\[\texttt{true}\]</span> 表示先手必胜，<span
class="math display">\[\texttt{false}\]</span>
表示先手必败，从前往后递推，根据我们上文的分析，枚举 i 在 (0, i) 中 i
的因数 j ，看是否存在 <span class="math display">\[f[i-j]\]</span>
为必败态即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divisorGame1</span>(<span class="params">self, N: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    f=[<span class="literal">False</span>]*(N+<span class="number">5</span>)</span><br><span class="line">    f[<span class="number">1</span>]=<span class="literal">False</span></span><br><span class="line">    f[<span class="number">2</span>]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">            <span class="keyword">if</span> i%j==<span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span>(f[i-j]):</span><br><span class="line">                f[i]=<span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> f[N]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(n^2)\]</span>。递推的时候一共有 n
个状态要计算，每个状态需要 <span class="math display">\[O(n)\]</span>
的时间枚举因数，因此总时间复杂度为 <span
class="math display">\[O(n^2)\]</span></li>
<li>空间复杂度：<span class="math display">\[O(n)\]</span>。我们需要
<span class="math display">\[O(n)\]</span> 的空间存储递推数组 f
的值。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q121-买卖股票的最佳时机-简单-动态规划</title>
    <url>/2021/03/10/2021-03-10-Q121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-%E7%AE%80%E5%8D%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="买卖股票的最佳时机"><a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121.
买卖股票的最佳时机</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i
天的价格。</p>
<p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子
卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0
。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[7,1,5,3,6,4] 输出：5 解释：在第 2 天（股票价格 =
1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5
。 注意利润不能是 7-1 = 6,
因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：prices = [7,6,4,3,1] 输出：0 解释：在这种情况下, 没有交易完成,
所以最大利润为 0。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= prices.length &lt;= 105</li>
<li>0 &lt;= prices[i] &lt;= 104</li>
</ul>
</blockquote>
<h3 id="approach-1-一次遍历">Approach 1: 一次遍历</h3>
<p>股票问题一共有六道：买卖股票的最佳时机（1，<a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">2</a>，<a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/">3</a>，<a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/">4</a>）、<a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">含冷冻期</a>、<a
href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">含手续费</a>。本题是第一道，属于入门题目。</p>
<p>考虑买入股票是在[0,i-1]天内的最低点买入，只用遍历一次，计算哪天卖出利润最大即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        inf = <span class="built_in">int</span>(<span class="number">1e9</span>)</span><br><span class="line">        minprice = inf</span><br><span class="line">        maxprofit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">            maxprofit = <span class="built_in">max</span>(price - minprice, maxprofit)</span><br><span class="line">            minprice = <span class="built_in">min</span>(price, minprice)</span><br><span class="line">        <span class="keyword">return</span> maxprofit</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">    solution=Solution().maxProfit(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(1)： 使用常数大小的额外空间。</li>
</ul>
<h3 id="approach-2-动态规划">Approach 2: 动态规划</h3>
<p>动态规划一般分为一维、二维、多维（使用状态压缩），对应形式为 <span
class="math display">\[dp(i)\]</span>、<span
class="math display">\[dp(i)(j)\]</span>、二进制<span
class="math display">\[dp(i)(j)\]</span>。</p>
<ol type="1">
<li><strong>动态规划做题步骤</strong></li>
</ol>
<ul>
<li>明确 <span class="math display">\[dp(i)\]</span>
应该表示什么（二维情况：<span
class="math display">\[dp(i)(j)\]</span>）；</li>
<li>根据 <span class="math display">\[dp(i)\]</span> 和 <span
class="math display">\[dp(i-1)\]</span> 的关系得出状态转移方程；</li>
<li>确定初始条件，如 <span class="math display">\[dp(0)\]</span>。</li>
</ul>
<ol start="2" type="1">
<li><strong>本题思路</strong></li>
</ol>
<p>其实方法一的思路不是凭空想象的，而是由动态规划的思想演变而来。这里介绍一维动态规划思想。</p>
<p><span class="math display">\[dp[i]\]</span> 表示前 <span
class="math display">\[i\]</span>
天的最大利润，因为我们始终要使利润最大化，则：</p>
<p><span class="math display">\[
dp[i]=max(dp[i−1],prices[i]−minprice)
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(prices)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># 边界条件</span></span><br><span class="line">        dp = [<span class="number">0</span>] * n</span><br><span class="line">        minprice = prices[<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            minprice = <span class="built_in">min</span>(minprice, prices[i])</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], prices[i] - minprice)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)</li>
<li>空间复杂度 O(N)</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q16-连续数列-简单-动态规划</title>
    <url>/2021/03/11/2021-03-11-Q16-%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%88%97-%E7%AE%80%E5%8D%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="面试题-16.17.-连续数列"><a
href="https://leetcode-cn.com/problems/contiguous-sequence-lcci/">面试题
16.17. 连续数列</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个整数数组，找出总和最大的连续数列，并返回总和。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入： [-2,1,-3,4,-1,2,1,-5,4] 输出： 6 解释： 连续子数组 [4,-1,2,1]
的和最大，为 6。</p>
</blockquote>
<blockquote>
<p><strong>进阶：</strong></p>
<p>如果你已经实现复杂度为 O(<em>n</em>)
的解法，尝试使用更为精妙的分治法求解。</p>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>动态规划问题从这两方面思考：</p>
<ul>
<li>dp[i] 表示什么；</li>
<li>dp[i] 怎么更新（状态转移方程）；</li>
</ul>
<p>这里我用 dp[i] 表示前 i 个元素的子数组和的最大值，更新方式为： <span
class="math display">\[
dp[i] = max( dp[i-1], dp[i-1]+A[i])
\]</span>
注意上面的更新方式是有问题的，只考虑了从第一个元素开始建立子数组，没考虑从其他元素启始建立子数组，正确的更新方式应该是：
<span class="math display">\[
dp[i] = max( A[i], dp[i-1]+A[i])
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        dp = nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>( nums[i], dp[i-<span class="number">1</span>] + nums[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    solution=Solution().maxSubArray(nums)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(N)： 需要建立dp</li>
</ul>
<h3 id="approach-2-滚动数组">Approach 2: 滚动数组</h3>
<p>方法1中需要建立一个长度为n的dp数组，使得空间复杂度为<span
class="math display">\[O(n)\]</span>，实际上可以使用一个滚动数组的概念把空间复杂度降低到<span
class="math display">\[O(1)\]</span>。即把dp[0 :
i-1]中最大的值赋值给一个变量，每次迭代都更新它，最后用这个变量输出结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxSubArray1</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    dp = <span class="number">0</span></span><br><span class="line">    maxA = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        dp = <span class="built_in">max</span>( nums[i], dp + nums[i])</span><br><span class="line">        maxA = <span class="built_in">max</span>( dp, maxA )</span><br><span class="line">    <span class="keyword">return</span> maxA</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(1)： 需要建立常数个变量</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q5-最长回文子串-中等-动态规划</title>
    <url>/2021/03/15/2021-03-15-Q5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="最长回文子串"><a
href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5.
最长回文子串</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个字符串 s，找到 s 中最长的回文子串。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：s = "babad" 输出："bab" 解释："aba"
同样是符合题意的答案。的和最大，为 6 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：s = "cbbd" 输出："bb"</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：s = "ac" 输出："a"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= s.length &lt;= 1000</li>
<li>s 仅由数字和英文字母（大写和/或小写）组成 &lt;= 105`</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>对于一个子串而言，如果它是回文串，并且长度大于
2，那么将它首尾的两个字母去除之后，它仍然是个回文串。例如对于字符串
<span class="math display">\[\textrm{ababa}\]</span>，如果我们已经知道
<span class="math display">\[\textrm{bab}\]</span> 是回文串，那么 <span
class="math display">\[\textrm{ababa}\]</span>
一定是回文串，这是因为它的首尾两个字母都是 <span
class="math display">\[\textrm{a}\]</span>。</p>
<p>根据这样的思路，我们就可以用动态规划的方法解决本题。我们用 <span
class="math display">\[P(i,j)\]</span> 表示字符串 <span
class="math display">\[s\]</span> 的第 <span
class="math display">\[i\]</span> 到 <span
class="math display">\[j\]</span> 个字母组成的串（下文表示成 <span
class="math display">\[s[i:j]\]</span>）是否为回文串：</p>
<p><span class="math display">\[
\begin{align}
P(i,j)=
    \begin{cases}
        True &amp; \text{如果子串S_i...S_j是回文串}\\
        False &amp; \text{其他}
    \end{cases}
\end{align}
\]</span> 这里的「其它情况」包含两种可能性：</p>
<ul>
<li><p>s[i, j] 本身不是一个回文串；</p></li>
<li><p>i &gt; j，此时 s[i, j] 本身不合法。</p></li>
</ul>
<p>那么我们就可以写出动态规划的状态转移方程：</p>
<p><span class="math display">\[
P(i,j)=P(i+1,j−1)\wedge(S_i==S_j)
\]</span> 也就是说，只有 <span
class="math display">\[s[i+1:j-1]\]</span> 是回文串，并且 <span
class="math display">\[s\]</span> 的第 <span
class="math display">\[i\]</span> 和 <span
class="math display">\[j\]</span> 个字母相同时，<span
class="math display">\[s[i:j]\]</span> 才会是回文串。</p>
<p>上文的所有讨论是建立在子串长度大于 2
的前提之上的，我们还需要考虑动态规划中的边界条件，即子串的长度为 1 或
2。对于长度为 1 的子串，它显然是个回文串；对于长度为 2
的子串，只要它的两个字母相同，它就是一个回文串。因此我们就可以写出动态规划的边界条件：</p>
<p><span class="math display">\[
\begin{align}
    \begin{cases}
        P(i,i)=True \\
        P(i,i+1)=(S_i==S_{i+1})
    \end{cases}
\end{align}
\]</span> 根据这个思路，我们就可以完成动态规划了，最终的答案即为所有
<span class="math display">\[P(i, j) = \text{True}\]</span> 中 <span
class="math display">\[j-i+1\]</span>（即子串长度）的最大值。<strong>注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        ans = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 枚举子串的长度 L+1</span></span><br><span class="line">        <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="comment"># 枚举子串的起始位置 i，这样可以通过 j=i+L 得到子串的结束位置</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                j = i + L</span><br><span class="line">                <span class="keyword">if</span> j &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> L == <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> L == <span class="number">1</span>:</span><br><span class="line">                    dp[i][j] = (s[i] == s[j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] <span class="keyword">and</span> s[i] == s[j])</span><br><span class="line">                <span class="keyword">if</span> dp[i][j] <span class="keyword">and</span> L + <span class="number">1</span> &gt; <span class="built_in">len</span>(ans):</span><br><span class="line">                    ans = s[i:j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">    solution=Solution().longestPalindrome(s)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n^2)\]</span>，其中 <span
class="math display">\[n\]</span> 是字符串的长度。动态规划的状态总数为
<span
class="math display">\[O(n^2)\]</span>，对于每个状态，我们需要转移的时间为
<span class="math display">\[O(1)\]</span>。</li>
<li>空间复杂度：<span
class="math display">\[O(n^2)\]</span>，即存储动态规划状态需要的空间。</li>
</ul>
<h3 id="approach-2-中心扩展算法">Approach 2: 中心扩展算法</h3>
<p>我们仔细观察一下方法一中的状态转移方程： <span
class="math display">\[
\begin{align}
    \begin{cases}
        P(i,i)=True \\
        P(i,i+1)=(S_i==S_{i+1})\\
        P(i,j)=P(i+1,j-1)\wedge(S_i==S_j)
    \end{cases}
\end{align}
\]</span> 找出其中的状态转移链： <span class="math display">\[
P(i,j)\leftarrow P(i+1,j−1)\leftarrow P(i+2,j−2)\leftarrow ⋯\leftarrow
\text{某一边界情况}
\]</span>
可以发现，所有的状态在转移的时候的可能性都是唯一的。也就是说，我们可以从每一种边界情况开始「扩展」，也可以得出所有的状态对应的答案。</p>
<p>边界情况即为子串长度为 1 或 2
的情况。我们枚举每一种边界情况，并从对应的子串开始不断地向两边扩展。如果两边的字母相同，我们就可以继续扩展，例如从
P(i+1,j-1) 扩展到
P(i,j)；如果两边的字母不同，我们就可以停止扩展，因为在这之后的子串都不能是回文串了。</p>
<p>聪明的读者此时应该可以发现，「边界情况」对应的子串实际上就是我们「扩展」出的回文串的「回文中心」。方法二的本质即为：我们枚举所有的「回文中心」并尝试「扩展」，直到无法扩展为止，此时的回文串长度即为此「回文中心」下的最长回文串长度。我们对所有的长度求出最大值，即可得到最终的答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expandAroundCenter</span>(<span class="params">self, s, left, right</span>):</span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            left1, right1 = self.expandAroundCenter(s, i, i)</span><br><span class="line">            left2, right2 = self.expandAroundCenter(s, i, i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> right1 - left1 &gt; end - start:</span><br><span class="line">                start, end = left1, right1</span><br><span class="line">            <span class="keyword">if</span> right2 - left2 &gt; end - start:</span><br><span class="line">                start, end = left2, right2</span><br><span class="line">        <span class="keyword">return</span> s[start: end + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>复杂度分析</p>
<p>时间复杂度：<span class="math display">\[O(n^2)\]</span>，其中 n
是字符串的长度。长度为 1 和 2 的回文中心分别有 n 和 n-1
个，每个回文中心最多会向外扩展 <span
class="math display">\[O(n)\]</span> 次。</p></li>
<li><p>空间复杂度：<span class="math display">\[O(1)\]</span>。</p></li>
</ul>
<h3 id="approach-3-manacher-算法">Approach 3: Manacher 算法</h3>
<p>还有一个复杂度为 <span class="math display">\[O(n)\]</span> 的 <span
class="math display">\[\text{Manacher}\]</span>
算法。然而本算法十分复杂，一般不作为面试内容。这里给出，仅供有兴趣的同学挑战自己。</p>
<p>为了表述方便，我们定义一个新概念臂长，表示中心扩展算法向外扩展的长度。如果一个位置的最大回文字符串长度为
2 * length + 1 ，其臂长为 length。</p>
<p>下面的讨论只涉及长度为奇数的回文字符串。长度为偶数的回文字符串我们将会在最后与长度为奇数的情况统一起来。</p>
<p><strong>思路与算法</strong></p>
<p>在中心扩展算法的过程中，我们能够得出每个位置的臂长。那么当我们要得出以下一个位置
i 的臂长时，能不能利用之前得到的信息呢？</p>
<p>答案是肯定的。具体来说，如果位置 j 的臂长为 length，并且有 j + length
&gt; i，</p>
<p>当在位置 i 开始进行中心拓展时，我们可以先找到 i 关于 j 的对称点 2 * j
- i。那么如果点 2 * j - i 的臂长等于 n，我们就可以知道，点 i
的臂长至少为 min(j + length - i, n)。那么我们就可以直接跳过 i 到 i +
min(j + length - i, n) 这部分，从 i + min(j + length - i, n) + 1
开始拓展。</p>
<p>我们只需要在中心扩展法的过程中记录右臂在最右边的回文字符串，将其中心作为
j，在计算过程中就能最大限度地避免重复计算。</p>
<p>那么现在还有一个问题：如何处理长度为偶数的回文字符串呢？</p>
<p>我们可以通过一个特别的操作将奇偶数的情况统一起来：我们向字符串的头尾以及每两个字符中间添加一个特殊字符
#，比如字符串 aaba 处理后会变成
#a#a#b#a#。那么原先长度为偶数的回文字符串 aa
会变成长度为奇数的回文字符串 #a#a#，而长度为奇数的回文字符串 aba
会变成长度仍然为奇数的回文字符串
#a#b#a#，我们就不需要再考虑长度为偶数的回文字符串了。</p>
<p>注意这里的特殊字符不需要是没有出现过的字母，我们可以使用任何一个字符来作为这个特殊字符。这是因为，当我们只考虑长度为奇数的回文字符串时，每次我们比较的两个字符奇偶性一定是相同的，所以原来字符串中的字符不会与插入的特殊字符互相比较，不会因此产生问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expand</span>(<span class="params">self, s, left, right</span>):</span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (right - left - <span class="number">2</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        end, start = -<span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        s = <span class="string">&#x27;#&#x27;</span> + <span class="string">&#x27;#&#x27;</span>.join(<span class="built_in">list</span>(s)) + <span class="string">&#x27;#&#x27;</span></span><br><span class="line">        arm_len = []</span><br><span class="line">        right = -<span class="number">1</span></span><br><span class="line">        j = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> right &gt;= i:</span><br><span class="line">                i_sym = <span class="number">2</span> * j - i</span><br><span class="line">                min_arm_len = <span class="built_in">min</span>(arm_len[i_sym], right - i)</span><br><span class="line">                cur_arm_len = self.expand(s, i - min_arm_len, i + min_arm_len)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_arm_len = self.expand(s, i, i)</span><br><span class="line">            arm_len.append(cur_arm_len)</span><br><span class="line">            <span class="keyword">if</span> i + cur_arm_len &gt; right:</span><br><span class="line">                j = i</span><br><span class="line">                right = i + cur_arm_len</span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span> * cur_arm_len + <span class="number">1</span> &gt; end - start:</span><br><span class="line">                start = i - cur_arm_len</span><br><span class="line">                end = i + cur_arm_len</span><br><span class="line">        <span class="keyword">return</span> s[start+<span class="number">1</span>:end+<span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 <span
class="math display">\[n\]</span>
是字符串的长度。由于对于每个位置，扩展要么从当前的最右侧臂长 right
开始，要么只会进行一步，而 right 最多向前走 <span
class="math display">\[O(n)\]</span> 步，因此算法的复杂度为 <span
class="math display">\[O(n)\]</span>。</li>
<li>空间复杂度：<span class="math display">\[O(n)\]</span>，我们需要
<span class="math display">\[O(n)\]</span>
的空间记录每个位置的臂长。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q53-最大子序和-简单-动态规划</title>
    <url>/2021/03/12/2021-03-12-Q53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C-%E7%AE%80%E5%8D%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="最大子序和"><a
href="https://leetcode-cn.com/problems/maximum-subarray/">53.
最大子序和</a></h4>
<p>本题和Q16是一样的</p>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个整数数组 nums
，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组
[4,-1,2,1] 的和最大，为 6 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：nums = [1] 输出：1</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
</blockquote>
<p><strong>进阶：</strong>如果你已经实现复杂度为 <span
class="math display">\[O(n)\]</span> 的解法，尝试使用更为精妙的
<strong>分治法</strong> 求解。</p>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>老规矩，动态规划问题第一步思考两个问题</p>
<ul>
<li><span class="math display">\[dp[i]\]</span>表示什么；</li>
<li><span class="math display">\[dp[i]\]</span>状态方程怎么更新；</li>
</ul>
<p>这里假设<span class="math display">\[dp[i]\]</span>表示以 i
个元素结尾的子数组的最大和；<span
class="math display">\[dp[i]\]</span>更新方式为： <span
class="math display">\[
dp[i]=\max(dp[i-1]+A[i],A[i])\\
\]</span> <span
class="math display">\[dp[i-1]+A[i]\]</span>表示继续沿用上一次的子数组并更新为第
i 处的子数组最大和。<span
class="math display">\[A[i]\]</span>表示另起一个新组数组作为第 i
处的子数组最大和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [<span class="number">0</span>]*n</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>] + nums[i], nums[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(N)： 需要建立dp</li>
</ul>
<h3 id="approach-2-滚动数组">Approach 2: 滚动数组</h3>
<p>建立一个长度为n的dp数组的确比较浪费空间，我们可以牺牲时间复杂度来换取空间复杂度。建立变量dp和sumA，sumA存储前
i 个元素组成的子数组最大值，每一步都和新的dp比较大小并更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxSubArray1</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    sumA = dp = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">        dp = <span class="built_in">max</span>(dp + nums[i], nums[i])</span><br><span class="line">        sumA = <span class="built_in">max</span>(sumA, dp)</span><br><span class="line">    <span class="keyword">return</span> sumA</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(1)： 需要建立常数个变量</li>
</ul>
<p>方法1中需要建立一个长度为n的dp数组，使得空间复杂度为<span
class="math display">\[O(n)\]</span>，实际上可以使用一个滚动数组的概念把空间复杂度降低到<span
class="math display">\[O(1)\]</span>。即把dp[0 :
i-1]中最大的值赋值给一个变量，每次迭代都更新它，最后用这个变量输出结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxSubArray1</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    dp = <span class="number">0</span></span><br><span class="line">    maxA = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        dp = <span class="built_in">max</span>( nums[i], dp + nums[i])</span><br><span class="line">        maxA = <span class="built_in">max</span>( dp, maxA )</span><br><span class="line">    <span class="keyword">return</span> maxA</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 线性遍历数组 nums</li>
<li>空间复杂度 O(1)： 需要建立常数个变量</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q560-和为K的子数组-中等-动态规划</title>
    <url>/2021/03/16/2021-03-16-Q560-%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="和为k的子数组"><a
href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">560.
和为K的子数组</a></h4>
<p>类似题目：Q1546-和为目标值的最大数目不重叠非空子数组数目</p>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k
的连续的子数组的个数。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入:nums = [1,1,1], k = 2 输出: 2 , [1,1] 与 [1,1]
为两种不同的情况。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>数组的长度为 [1, 20,000]。</li>
<li>数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7,
1e7]。</li>
</ul>
</blockquote>
<h3 id="approach-1-枚举">Approach 1: 枚举</h3>
<p>考虑以 i 结尾和为 k 的连续子数组个数，我们需要统计符合条件的下标 j
的个数，其中 <span class="math display">\[0\leq j\leq i \]</span> 且
<span class="math display">\[[j..i]\]</span> 这个子数组的和恰好为 k
。</p>
<p>我们可以枚举 <span class="math display">\[[0..i]\]</span>
里所有的下标 j
来判断是否符合条件，可能有读者会认为假定我们确定了子数组的开头和结尾，还需要
<span class="math display">\[O(n)\]</span>
的时间复杂度遍历子数组来求和，那样复杂度就将达到 <span
class="math display">\[O(n^3)\]</span>
从而无法通过所有测试用例。但是如果我们知道 <span
class="math display">\[[j,i]\]</span> 子数组的和，就能 <span
class="math display">\[O(1)\]</span> 推出 <span
class="math display">\[[j-1,i]\]</span>
的和，因此这部分的遍历求和是不需要的，我们在枚举下标 j 的时候已经能
<span class="math display">\[O(1)\]</span> 求出 <span
class="math display">\[[j,i]\]</span> 的子数组之和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraySum</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> end <span class="keyword">in</span> <span class="built_in">range</span>(start,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">sum</span>+=nums[end]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">sum</span> == k:</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,-<span class="number">9</span>]</span><br><span class="line">    target = <span class="number">6</span></span><br><span class="line">    solution=Solution().subarraySum(nums,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p><strong>时间复杂度</strong>：<span
class="math display">\[O(n^2)\]</span>，其中 n
为数组的长度。枚举子数组开头和结尾需要 <span
class="math display">\[O(n^2)\]</span>的时间，其中求和需要 <span
class="math display">\[O(1)\]</span> 的时间复杂度，因此总时间复杂度为
<span class="math display">\[O(n^2)\]</span>。</p></li>
<li><p><strong>空间复杂度</strong>：<span
class="math display">\[O(1)\]</span>。只需要常数空间存放若干变量。</p></li>
</ul>
<h3 id="approach-2-前缀和-哈希表优化">Approach 2: 前缀和 +
哈希表优化</h3>
<p>我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个
i，我们需要枚举所有的 j
来判断是否符合条件，这一步是否可以优化呢？答案是可以的。</p>
<p>我们定义 <span class="math display">\[\textit{pre}[i]\]</span> 为
<span class="math display">\[[0..i]\]</span> 里所有数的和，则 <span
class="math display">\[\textit{pre}[i]\]</span> 可以由 <span
class="math display">\[\textit{pre}[i-1]\]</span> 递推而来，即：</p>
<p><span class="math display">\[
pre[i]=pre[i-1]+nums[i]
\]</span> 那么「<span class="math display">\[[j..i]\]</span>
这个子数组和为 <em>k</em> 」这个条件我们可以转化为 <span
class="math display">\[
pre[j-1]==pre[i]-k
\]</span> 所以我们考虑以 i 结尾的和为 k
的连续子数组个数时只要统计有多少个前缀和为 <span
class="math display">\[\textit{pre}[i]-k\]</span> 的 <span
class="math display">\[\textit{pre}[j]\]</span> 即可。我们建立哈希表
<span
class="math display">\[\textit{mp}\]</span>，以和为键，出现次数为对应的值，记录
<span class="math display">\[\textit{pre}[i]\]</span>
出现的次数，从左往右边更新 <span
class="math display">\[\textit{mp}\]</span> 边计算答案，那么以 i
结尾的答案 <span
class="math display">\[\textit{mp}[\textit{pre}[i]-k]\]</span> 即可在
<span class="math display">\[O(1)\]</span>
时间内得到。最后的答案即为所有下标结尾的和为 k 的子数组个数之和。</p>
<p>需要注意的是，从左往右边更新边计算的时候已经保证了<span
class="math display">\[\textit{mp}[\textit{pre}[i]-k]\]</span>
里记录的<span class="math display">\[ \textit{pre}[j]\]</span>
的下标范围是 <span class="math display">\[0\leq j\leq i\]</span>
。同时，由于<span class="math display">\[\textit{pre}[i]\]</span>
的计算只与前一项的答案有关，因此我们可以不用建立 <span
class="math display">\[\textit{pre}\]</span> 数组，直接用 <span
class="math display">\[\textit{pre}\]</span> 变量来记录 <span
class="math display">\[pre[i-1]\]</span> 的答案即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraySum1</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        mp = &#123;<span class="number">0</span>: <span class="number">1</span>&#125;</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            pre+=x</span><br><span class="line">            <span class="keyword">if</span> (pre - k) <span class="keyword">in</span> mp:</span><br><span class="line">                count += mp[pre - k]</span><br><span class="line">            <span class="keyword">if</span> pre <span class="keyword">in</span> mp:</span><br><span class="line">                mp[pre] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mp[pre] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,-<span class="number">9</span>]</span><br><span class="line">    target = <span class="number">6</span></span><br><span class="line">    solution=Solution().subarraySum1(nums,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p><strong>时间复杂度</strong>：<span
class="math display">\[O(n)\]</span>，其中 n
为数组的长度。我们遍历数组的时间复杂度为 <span
class="math display">\[O(n)\]</span>，中间利用哈希表查询删除的复杂度均为
<span class="math display">\[O(1)\]</span>，因此总时间复杂度为 <span
class="math display">\[O(n)\]</span>。</p></li>
<li><p><strong>空间复杂度</strong>：<span
class="math display">\[O(n)\]</span>，其中 n
为数组的长度。哈希表在最坏情况下可能有 n 个不同的键值，因此需要 <span
class="math display">\[O(n)\]</span> 的空间复杂度。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1546-和为目标值的最大数目不重叠非空子数组数目-中等-动态规划</title>
    <url>/2021/03/16/2021-03-16-Q1546-%E5%92%8C%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE%E4%B8%8D%E9%87%8D%E5%8F%A0%E9%9D%9E%E7%A9%BA%E5%AD%90%E6%95%B0%E7%BB%84%E6%95%B0%E7%9B%AE-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="和为目标值的最大数目不重叠非空子数组数目"><a
href="https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/">1546.
和为目标值的最大数目不重叠非空子数组数目</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个数组 nums 和一个整数 target 。</p>
<p>请你返回 非空不重叠 子数组的最大数目，且每个子数组中数字和都为 target
。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：nums = [1,1,1,1,1], target = 2 输出：2 解释：总共有 2
个不重叠子数组（加粗数字表示） [1,1,1,1,1] ，它们的和为目标值 2 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：nums = [-1,3,5,1,4,2,-9], target = 6 输出：2 解释：总共有 3
个子数组和为 6 。 ([5,1], [4,2], [3,5,1,4,2,-9]) 但只有前 2
个是不重叠的。</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：nums = [-2,6,6,3,5,4,1,2,8], target = 10 输出：3</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 10^5</li>
<li>-10^4 &lt;= nums[i] &lt;= 10^4</li>
<li>0 &lt;= target &lt;= 10^6</li>
</ul>
</blockquote>
<h3 id="approach-1-贪心算法">Approach 1: 贪心算法</h3>
<p>由于题目要求所有的子数组互不重叠，因此对于某个满足条件的子数组，如果其右端点是所有满足条件的子数组的右端点中最小的那一个，则该子数组一定会被选择。</p>
<p>故可以使用贪心算法：从左到右遍历数组，一旦发现有某个以当前下标 i
为右端点的子数组和为 <span
class="math display">\[\textit{target}\]</span>，就给计数器的值加
1，并从数组 <span class="math display">\[\textit{nums}\]</span> 的下标
<span class="math display">\[i+1\]</span> 开始，进行下一次寻找。</p>
<p>为了判断是否存在和为 <span
class="math display">\[\textit{target}\]</span>
的子数组，我们在遍历的过程中记录数组的前缀和，并将它们保存在哈希表中。如果位置
i 对应的前缀和为 <span
class="math display">\[\textit{sum}_i\]</span>，而 <span
class="math display">\[\textit{sum}_i-\textit{target}\]</span>
已经存在于哈希表中，就说明找到了一个和为 <span
class="math display">\[\textit{target}\]</span> 的子数组。</p>
<p>如果找到了一个符合条件的子数组，则接下来遍历时需要用一个新的哈希表，而不是使用原有的哈希表，因为要确保每次找到的子数组都与此前找到的不重合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxNonOverlapping</span>(<span class="params">self, nums, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(nums)</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; size:</span><br><span class="line">            s = &#123;<span class="number">0</span>&#125;</span><br><span class="line">            total = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; size:</span><br><span class="line">                total += nums[i]</span><br><span class="line">                <span class="keyword">if</span> total - target <span class="keyword">in</span> s:</span><br><span class="line">                    ret += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    s.add(total)</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nums = [-<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,-<span class="number">9</span>]</span><br><span class="line">    target = <span class="number">6</span></span><br><span class="line">    solution=Solution().maxNonOverlapping(nums,target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N)\]</span>，其中 N
为数组 <span class="math display">\[\textit{nums}\]</span>
的长度。我们要遍历数组的每个元素，其中哈希表的插入和查询都只需要单次
<span class="math display">\[O(1)\]</span> 的时间。</li>
<li>空间复杂度：<span
class="math display">\[O(N)\]</span>，因为哈希表中最多保存 <span
class="math display">\[O(N)\]</span> 个元素。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1233-删除子文件夹-中等-数组</title>
    <url>/2021/03/17/2021-03-17-Q1233-%E5%88%A0%E9%99%A4%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9-%E4%B8%AD%E7%AD%89-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="删除子文件夹"><a
href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem/">1233.
删除子文件夹</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>你是一位系统管理员，手里有一份文件夹列表
folder，你的任务是要删除该列表中的所有<strong>子文件</strong>夹，并以
<strong>任意顺序</strong> 返回剩下的文件夹。</p>
<p>我们这样定义「子文件夹」：</p>
<ul>
<li><p>如果文件夹 folder[i] 位于另一个文件夹 folder[j] 下，那么
folder[i] 就是 folder[j]
的子文件夹。文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：</p></li>
<li><p>/ 后跟一个或者多个小写英文字母。 例如，/leetcode 和
/leetcode/problems 都是有效的路径，而空字符串和 / 不是。</p></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"]
输出：["/a","/c/d","/c/f"] 解释："/a/b/" 是 "/a" 的子文件夹，而 "/c/d/e"
是 "/c/d" 的子文件夹。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：folder = ["/a","/a/b/c","/a/b/d"] 输出：["/a"] 解释：文件夹
"/a/b/c" 和 "/a/b/d/" 都会被删除，因为它们都是 "/a" 的子文件夹。</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：folder = ["/a/b/c","/a/b/d","/a/b/ca"]
输出：["/a/b/c","/a/b/ca","/a/b/d"]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= folder.length &lt;= 4 * 10^4</li>
<li>2 &lt;= folder[i].length &lt;= 100</li>
<li>folder[i] 只包含小写字母和 /</li>
<li>folder[i] 总是以字符 / 起始</li>
<li>每个文件夹名都是唯一的</li>
</ul>
</blockquote>
<h3 id="approach-1-排序文件夹">Approach 1: 排序文件夹</h3>
<p>对folder排序，排序第一个的是最短路，它一定是一个父文件夹，否则会有更短的文件夹在其前面。然后从左到右依次查找后面的文件夹路径是否包含那个父文件夹的路径，如果没有，把路径加入roots；如果有，跳过该路径，检查下一个。</p>
<p>startswith()方法用于检查字符串是否是以指定子字符串开头，如果是则返回
True，否则返回 False。如果参数 beg 和 end
指定值，则在指定范围内检查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeSubfolders</span>(<span class="params">self, folder</span>):</span><br><span class="line">        <span class="comment"># 首先对folder排序，然后把第一个文件夹放入res中。但我们可以理解为，最短的文件夹一定不是一个子文件夹，否则还会有一个更短的父文件夹。然后遍历folder，因为已经排序了，所以每次只和res最后一个比较就可以。如果开头部分不相同，说明当前遍历到了一个新的文件夹目录，加入res。</span></span><br><span class="line">        folder.sort()</span><br><span class="line">        roots = [folder[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(folder)):</span><br><span class="line">            fd = folder[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fd.startswith(roots[-<span class="number">1</span>] + <span class="string">&quot;/&quot;</span>):</span><br><span class="line">                roots.append(fd)</span><br><span class="line">        <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    folder = [<span class="string">&quot;/a&quot;</span>,<span class="string">&quot;/a/b&quot;</span>,<span class="string">&quot;/c/d&quot;</span>,<span class="string">&quot;/c/d/e&quot;</span>,<span class="string">&quot;/c/f&quot;</span>]</span><br><span class="line">    solution=Solution().removeSubfolders(folder)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N)\]</span>，其中 N
为文件夹个数</li>
<li>空间复杂度：<span
class="math display">\[O(N)\]</span>，建立roots数组</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1300-转变数组后最接近目标值的数组和-中等-数组</title>
    <url>/2021/03/18/2021-03-18-Q1300-%E8%BD%AC%E5%8F%98%E6%95%B0%E7%BB%84%E5%90%8E%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C-%E4%B8%AD%E7%AD%89-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="转变数组后最接近目标值的数组和"><a
href="https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/">1300.
转变数组后最接近目标值的数组和</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value
，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近 target
（最接近表示两者之差的绝对值最小）。</p>
<p>如果有多种使得和最接近 target
的方案，请你返回这些整数中的最小值。</p>
<p>请注意，答案不一定是 arr 中的数字。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：arr = [4,9,3], target = 10 输出：3 解释：当选择 value 为 3
时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：arr = [2,3,5], target = 10 输出：5</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：arr = [60864,25176,27249,21296,20204], target = 56803
输出：11361</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= arr.length &lt;= 10^4</li>
<li>1 &lt;= arr[i], target &lt;= 10^5</li>
</ul>
</blockquote>
<h3 id="approach-1-排序文件夹">Approach 1: 排序文件夹</h3>
<p>由于数组 arr 中每个元素值的范围是 [1,<span
class="math display">\[10^5\]</span>]，在可以直接枚举的范围内，因此我们可以对所有可能作为
value 的值进行枚举。</p>
<p>那么 value 值的上下界是多少呢？我们需要进行一些分析：</p>
<ul>
<li><p>value 的下界为 0。这是因为当 value = 0 时，数组的和为 0。由于
target 是正整数，因此当 value
继续减小时，数组的和也会随之减小，且变为负数（这个和等于 value * n，其中
n 是数组 arr 的长度），并不会比 value = 0 时更接近 target。</p></li>
<li><p>value 的上界为数组 arr 中的最大值。这是因为当 value &gt;= arr
时，数组中所有的元素都不变，因为它们均不大于
value。由于我们需要找到最接近 target 的最小 value 值，因此我们只需将数组
arr 中的最大值作为上界即可。</p></li>
</ul>
<p>当我们确定了 value 值的上下界之后，就可以进行枚举了。当枚举到 value =
x 时，我们需要将数组 arr 中所有小于等于 x 的值保持不变，所有大于 x
的值变为 x。要实现这个操作，我们可以将数组 arr
先进行排序，随后进行二分查找，找出数组 arr 中最小的比 x 大的元素
arr[i]。由于将数组 arr 中的等于 x 的值变为 x
并没有改变原来的值，因此上述操作可以改为：</p>
<p><span class="math display">\[
arr[0] + ... + arr[i - 1] + x \times (n - i)
\]</span>
使用该操作是因为很多编程语言自带的二分查找只能返回目标值第一次出现的位置。在此鼓励读者自己实现返回目标值最后一次出现的位置的二分查找。</p>
<p>为了加速求和操作，我们可以预处理出数组 arr
的前缀和，这样数组求和的时间复杂度即能降为 O(1)。我们将和与 target
进行比较，同时更新答案即可。</p>
<p>这里会使用到二分查找的库bisect，几个相关的函数需要熟悉：</p>
<p>bisect.bisect_left(L,x)</p>
<p>bisect.bisect_right(L,x)</p>
<p>bisect.insort_left(L,x)</p>
<p>bisect.insort_right(L,x)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBestValue</span>(<span class="params">self, arr, target</span>):</span><br><span class="line">        arr.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        prefix = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">            prefix.append(prefix[-<span class="number">1</span>] + num)</span><br><span class="line">        </span><br><span class="line">        r, ans, diff = <span class="built_in">max</span>(arr), <span class="number">0</span>, target</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, r + <span class="number">1</span>):</span><br><span class="line">            it = bisect.bisect_left(arr, i)</span><br><span class="line">            cur = prefix[it] + (n - it) * i</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(cur - target) &lt; diff:</span><br><span class="line">                ans, diff = i, <span class="built_in">abs</span>(cur - target)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">    target = <span class="number">10</span></span><br><span class="line">    solution=Solution().findBestValue(arr, target)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O((N + C)\log
N)\]</span>，其中 N 是数组 arr 的长度，C 是一个常数，为数组 arr
中的最大值，不会超过 10^5 。排序需要的时间复杂度为 <span
class="math display">\[O(N \log N)\]</span>，二分查找的单次时间复杂度为
<span class="math display">\[O(\log N)\]</span>，需要进行 C 次。</li>
<li>空间复杂度：<span class="math display">\[O(N)\]</span>，我们需要
O(N)O(N) 的空间用来存储数组 arr 的前缀和，排序需要 <span
class="math display">\[O(\log N)\]</span>
的栈空间，因此最后总空间复杂度为 <span
class="math display">\[O(N)\]</span>。</li>
</ul>
<h3 id="approach-2-双重二分查找">Approach 2: 双重二分查找</h3>
<p>方法一的枚举策略建立在数组 arr 的元素范围不大的条件之上。如果数组 arr
中的元素范围是
[1,10^9]，那么我们将无法直接枚举，有没有更好的解决方法呢？</p>
<p>我们首先考虑题目的一个简化版本：我们需要找到
value，使得数组的和最接近 target 且不大于 target。可以发现，在
[0,(arr)]（即方法一中确定的上下界）的范围之内，随着 value
的增大，数组的和是严格单调递增的。这里「严格」的意思是，不存在两个不同的
value 值，它们对应的数组的和相等。这样一来，一定存在唯一的一个 value
值，使得数组的和最接近且不大于
target。并且由于严格单调递增的性质，我们可以通过二分查找的方法，找到这个
value 值，记为 value_lower。</p>
<p>同样地，我们考虑题目的另一个简化版本：我们需要找到一个
value，使得数组的和最接近 target 且大于
target。我们也可以通过二分查找的方法，找到这个 value 值，记为
value_upper。</p>
<p>显然 value 值就是 value_lower 和 value_upper
中的一个，我们只需要比较这两个值对应的数组的和与 target
的差，就能确定最终的答案。这样一来，我们通过两次二分查找，就可以找出
value
值，在每一次二分查找中，我们使用和方法一中相同的查找方法，快速地求出每个
value
值对应的数组的和。算法从整体上来看，是外层二分查找中嵌套了一个内层二分查找。</p>
<p>那么这个方法还有进一步优化的余地吗？仔细思考一下 value_lower 与
value_upper 的定义，前者最接近且不大于 target，后者最接近且大于
target。由于数组的和随着 value 的增大是严格单调递增的，所以 value_upper
的值一定就是 value_lower + 1。因此我们只需要进行一次外层二分查找得到
value_lower，并直接通过 value_lower + 1 计算出 value_upper
的值就行了。这样我们就减少了一次外层二分查找，虽然时间复杂度没有变化，但降低了常数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBestValue</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        arr.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        prefix = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">            prefix.append(prefix[-<span class="number">1</span>] + num)</span><br><span class="line">        </span><br><span class="line">        l, r, ans = <span class="number">0</span>, <span class="built_in">max</span>(arr), -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            it = bisect.bisect_left(arr, mid)</span><br><span class="line">            cur = prefix[it] + (n - it) * mid</span><br><span class="line">            <span class="keyword">if</span> cur &lt;= target:</span><br><span class="line">                ans = mid</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(x <span class="keyword">if</span> num &gt;= x <span class="keyword">else</span> num <span class="keyword">for</span> num <span class="keyword">in</span> arr)</span><br><span class="line">        </span><br><span class="line">        choose_small = check(ans)</span><br><span class="line">        choose_big = check(ans + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans <span class="keyword">if</span> <span class="built_in">abs</span>(choose_small - target) &lt;= <span class="built_in">abs</span>(choose_big - target) <span class="keyword">else</span> ans + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N\log N)\]</span>，其中 N
是数组 arr 的长度。排序需要的时间复杂度为 <span
class="math display">\[O(N \log N)\]</span>，外层二分查找的时间复杂度为
<span class="math display">\[O(\log
C)\]</span>，内层二分查找的时间复杂度为 <span
class="math display">\[O(\log N)\]</span>，它们的乘积在数量级上小于
<span class="math display">\[O(N \log N)\]</span>。</li>
<li>空间复杂度：<span
class="math display">\[O(N)\]</span>。分析同方法一。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q54-螺旋矩阵-中等-数组</title>
    <url>/2021/03/19/2021-03-19-Q54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-%E4%B8%AD%E7%AD%89-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="螺旋矩阵"><a
href="https://leetcode-cn.com/problems/spiral-matrix/">54.
螺旋矩阵</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序
，返回矩阵中的所有元素。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>m == matrix.length</li>
<li>n == matrix[i].length</li>
<li>1 &lt;= m, n &lt;= 10</li>
<li>-100 &lt;= <span class="math display">\[matrix[i][j]\]</span> &lt;=
100</li>
</ul>
</blockquote>
<h3 id="approach-1-模拟">Approach 1: 模拟</h3>
<p>可以模拟螺旋矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向。</p>
<p>判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵
<span
class="math display">\[\textit{visited}\]</span>，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将
<span class="math display">\[\textit{visited}\]</span>
中的对应位置的元素设为已访问。</p>
<p>如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix</span>):</span><br><span class="line">        <span class="comment"># 判断输入矩阵是否正常</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        visited = [[<span class="literal">False</span>] * columns <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rows)]</span><br><span class="line">        total = rows * columns</span><br><span class="line">        order = [<span class="number">0</span>] * total</span><br><span class="line"></span><br><span class="line">        directions = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">        row, column = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        directionIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total):</span><br><span class="line">            <span class="comment"># 元素逐个加入</span></span><br><span class="line">            order[i] = matrix[row][column]</span><br><span class="line">            visited[row][column] = <span class="literal">True</span></span><br><span class="line">            nextRow, nextColumn = row + directions[directionIndex][<span class="number">0</span>], column + directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= nextRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= nextColumn &lt; columns <span class="keyword">and</span> <span class="keyword">not</span> visited[nextRow][nextColumn]):</span><br><span class="line">                directionIndex = (directionIndex + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            row += directions[directionIndex][<span class="number">0</span>]</span><br><span class="line">            column += directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> order</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">    solution=Solution().spiralOrder(matrix)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m
和 n
分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(mn)\]</span>。需要创建一个大小为 <span
class="math display">\[m \times n\]</span> 的矩阵 <span
class="math display">\[\textit{visited}\]</span>
记录每个位置是否被访问过。</p></li>
</ul>
<h3 id="approach-2-按层模拟">Approach 2: 按层模拟</h3>
<p>可以将矩阵看成若干层，首先输出最外层的元素，其次输出次外层的元素，直到输出最内层的元素。</p>
<p>定义矩阵的第 k 层是到最近边界距离为 k
的所有顶点。例如，下图矩阵最外层元素都是第 1 层，次外层元素都是第 2
层，剩下的元素都是第 3 层。</p>
<blockquote>
<p><code>[[1, 1, 1, 1, 1, 1, 1],</code></p>
<p><code>[1, 2, 2, 2, 2, 2, 1],</code></p>
<p><code>[1, 2, 3, 3, 3, 2, 1],</code></p>
<p><code>[1, 2, 2, 2, 2, 2, 1],</code></p>
<p><code>[1, 1, 1, 1, 1, 1, 1]]</code></p>
</blockquote>
<p>对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于
<span class="math display">\[(\textit{top},
\textit{left})\]</span>，右下角位于 <span
class="math display">\[(\textit{bottom},
\textit{right})\]</span>，按照如下顺序遍历当前层的元素。</p>
<ul>
<li><p>从左到右遍历上侧元素，依次为 <span
class="math display">\[(\textit{top}, \textit{left})\]</span> 到 <span
class="math display">\[(\textit{top},
\textit{right})\]</span>。</p></li>
<li><p>从上到下遍历右侧元素，依次为 <span
class="math display">\[(\textit{top} + 1, \textit{right})\]</span> 到
<span class="math display">\[(\textit{bottom},
\textit{right})\]</span>。</p></li>
<li><p>如果 <span class="math display">\[\textit{left} &lt;
\textit{right}\]</span> 且 <span class="math display">\[\textit{top}
&lt; \textit{bottom}\]</span>，则从右到左遍历下侧元素，依次为 <span
class="math display">\[(\textit{bottom}, \textit{right} - 1)\]</span> 到
<span class="math display">\[(\textit{bottom}, \textit{left} +
1)\]</span>，以及从下到上遍历左侧元素，依次为 <span
class="math display">\[(\textit{bottom}, \textit{left})\]</span> 到
<span class="math display">\[(\textit{top} + 1,
\textit{left})\]</span>。</p></li>
</ul>
<p>遍历完当前层的元素之后，将 <span
class="math display">\[\textit{left}\]</span> 和 <span
class="math display">\[\textit{top}\]</span> 分别增加 1，将 <span
class="math display">\[\textit{right}\]</span> 和 <span
class="math display">\[\textit{bottom}\]</span> 分别减少
1，进入下一层继续遍历，直到遍历完所有元素为止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        order = <span class="built_in">list</span>()</span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, columns - <span class="number">1</span>, <span class="number">0</span>, rows - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[top][column])</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[row][right])</span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[bottom][column])</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[row][left])</span><br><span class="line">            left, right, top, bottom = left + <span class="number">1</span>, right - <span class="number">1</span>, top + <span class="number">1</span>, bottom - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。</li>
<li>空间复杂度：<span
class="math display">\[O(mn)\]</span>。除了输出数组以外，空间复杂度是常数。</li>
</ul>
<h3 id="approach-3-利用zip的简洁代码">Approach 3: 利用zip的简洁代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> matrix:</span><br><span class="line">            <span class="comment"># 移除第一行并返回移除元素</span></span><br><span class="line">            res += matrix.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># zip(*Array) 可理解为解压，返回二维矩阵，把每一列打包</span></span><br><span class="line">            matrix = <span class="built_in">list</span>(<span class="built_in">zip</span>(*matrix))[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N\times p)\]</span>，其中
N 是 m 和 n 中最大值，调用 p 次zip()。因为函数调用时间复杂度是O(N)</li>
<li>空间复杂度：<span
class="math display">\[O(mn)\]</span>。除了输出数组以外，空间复杂度是常数。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q191-位1的个数-简单</title>
    <url>/2021/03/22/2021-03-22-Q191-%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h4 id="位1的个数"><a
href="https://leetcode-cn.com/problems/number-of-1-bits/">191.
位1的个数</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为
'1' 的个数（也被称为<a
href="https://baike.baidu.com/item/汉明重量">汉明重量</a>）。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：00000000000000000000000000001011 输出：3 解释：输入的二进制串
00000000000000000000000000001011 中，共有三位为 '1'。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入：00000000000000000000000010000000 输出：1 解释：输入的二进制串
00000000000000000000000010000000 中，共有一位为 '1'。</p>
</blockquote>
<blockquote>
<p><strong>Example 3：</strong></p>
<p>输入：11111111111111111111111111111101 输出：31 解释：输入的二进制串
11111111111111111111111111111101 中，共有 31 位为 '1'。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>请注意，在某些语言（如
Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>
<li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的
示例 3 中，输入表示有符号整数 -3。</li>
<li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong>
。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>进阶</strong>：</p>
<ul>
<li>如果多次调用这个函数，你将如何优化你的算法？</li>
</ul>
</blockquote>
<h3 id="approach-1-循环检查二进制位">Approach 1: 循环检查二进制位</h3>
<p>我们可以直接循环检查给定整数 n 的二进制位的每一位是否为
1。具体代码中，当检查第 i 位时，我们可以让 n 与 <span
class="math display">\[2^i\]</span> 进行与运算，当且仅当 n 的第 i 位为 1
时，运算结果不为 0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ret = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>) <span class="keyword">if</span> n &amp; (<span class="number">1</span> &lt;&lt; i)) </span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">input</span> = <span class="number">11111111111111111111111111111101</span></span><br><span class="line">    solution=Solution().hammingWeight(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(k)\]</span>，其中 k 是
<span class="math display">\[\text{int}\]</span>
型的二进制位数，k=32。我们需要检查 n 的二进制位的每一位，一共需要检查 32
位。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(1)\]</span>，我们只需要常数的空间保存若干变量。</p></li>
</ul>
<h3 id="approach-2-位运算优化">Approach 2: 位运算优化</h3>
<p>观察这个运算：<span class="math display">\[n~\&amp;~(n -
1)\]</span>，其结果恰为把 n 的二进制位中的最低位的 1 变为 0
之后的结果。</p>
<p>如：<span class="math display">\[6~\&amp;~(6-1) = 4, 6 = (110)_2, 4 =
(100)_2\]</span> ，运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0
之后的结果。</p>
<p>这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的
n 与 n - 1 做与运算，直到 n 变为 0 即可。因为每次运算会使得 n 的最低位的
1 被翻转，因此运算次数就等于 n 的二进制位中 1 的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            n &amp;= n - <span class="number">1</span></span><br><span class="line">            ret += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(\log
n)\]</span>。循环次数等于 n 的二进制位中 1 的个数，最坏情况下 n
的二进制位全部为 1。我们需要循环 <span class="math display">\[\log
n\]</span> 次。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>，我们只需要常数的空间保存若干变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q402-移掉K位数字-中等-贪心算法</title>
    <url>/2021/03/23/2021-03-23-Q402-%E7%A7%BB%E6%8E%89k%E4%BD%8D%E6%95%B0%E5%AD%97-%E4%B8%AD%E7%AD%89-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="移掉k位数字"><a
href="https://leetcode-cn.com/problems/remove-k-digits/">402.
移掉K位数字</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个以字符串表示的非负整数 num，移除这个数中的 k
位数字，使得剩下的数字最小。</p>
<p><strong>注意:</strong></p>
<ul>
<li>num 的长度小于 10002 且 ≥ k。</li>
<li>num 不会包含任何前导零。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: num = "1432219", k = 3 输出: "1219" 解释: 移除掉三个数字 4, 3,
和 2 形成一个新的最小的数字 1219。</p>
</blockquote>
<blockquote>
<p><strong>Example 2：</strong></p>
<p>输入: num = "10200", k = 1 输出: "200" 解释: 移掉首位的 1
剩下的数字为 200. 注意输出不能有任何前导零。</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入: num = "10", k = 2 输出: "0" 解释:
从原数字移除所有的数字，剩余为空就是0。</p>
</blockquote>
<h3 id="approach-1-贪心-单调栈">Approach 1: 贪心 + 单调栈</h3>
<p>对于两个相同长度的数字序列，最左边不同的数字决定了这两个数字的大小，例如，对于
A = 1axxx，B = 1bxxx，如果 a &gt; b 则 A &gt; B。</p>
<p>基于此，我们可以知道，若要使得剩下的数字最小，需要保证靠前的数字尽可能小。</p>
<p>让我们从一个简单的例子开始。给定一个数字序列，例如
425，如果要求我们只删除一个数字，那么从左到右，我们有 4、2 和 5
三个选择。我们将每一个数字和它的左邻居进行比较。从 2 开始，2
小于它的左邻居 4。假设我们保留数字 4，那么所有可能的组合都是以数字 4（即
42，45）开头的。相反，如果移掉 4，留下 2，我们得到的是以 2
开头的组合（即 25），这明显小于任何留下数字 4
的组合。因此我们应该移掉数字 4。如果不移掉数字
4，则之后无论移掉什么数字，都不会得到最小数。</p>
<p>基于上述分析，我们可以得出「删除一个数字」的贪心策略：</p>
<p>给定一个长度为 n 的数字序列 <span
class="math display">\[[D_0D_1D_2D_3\ldots
D_{n-1}]\]</span>，从左往右找到第一个位置 i（i&gt;0）使得 <span
class="math display">\[D_i&lt;D_{i-1}\]</span>，并删去 <span
class="math display">\[D_{i-1}\]</span>；如果不存在，说明整个数字序列单调不降，删去最后一个数字即可。</p>
<p>基于此，我们可以每次对整个数字序列执行一次这个策略；删去一个字符后，剩下的
n−1 长度的数字序列就形成了新的子问题，可以继续使用同样的策略，直至删除 k
次。</p>
<p>然而暴力的实现复杂度最差会达到
O(nk)（考虑整个数字序列是单调不降的），因此我们需要加速这个过程。</p>
<p>考虑从左往右增量的构造最后的答案。我们可以用一个栈维护当前的答案序列，栈中的元素代表截止到当前位置，删除不超过
k 次个数字后，所能得到的最小整数。根据之前的讨论：在使用 k
个删除次数之前，栈中的序列从栈底到栈顶单调不降。</p>
<p>因此，对于每个数字，如果该数字小于栈顶元素，我们就不断地弹出栈顶元素，直到</p>
<ul>
<li>栈为空</li>
<li>或者新的栈顶元素不大于当前数字</li>
<li>或者我们已经删除了 k 位数字</li>
</ul>
<p>上述步骤结束后我们还需要针对一些情况做额外的处理：</p>
<ul>
<li>如果我们删除了 m 个数字且
m&lt;k，这种情况下我们需要从序列尾部删除额外的 k-m 个数字。</li>
<li>如果最终的数字序列存在前导零，我们要删去前导零。</li>
<li>如果最终数字序列为空，我们应该返回 0。</li>
</ul>
<p>最终，从栈底到栈顶的答案序列即为最小数。</p>
<p>考虑到栈的特点是后进先出，如果通过栈实现，则需要将栈内元素依次弹出然后进行翻转才能得到最小数。为了避免翻转操作，可以使用双端队列代替栈的实现。</p>
<p><strong>几个关键函数：</strong></p>
<ul>
<li><code>"".join(finalStack)</code>用双引号内的字符作为连接将finalstack变为字符串。</li>
<li><code>finalStack.lstrip('0')</code>去掉finalStack左边的指定字符<code>0</code>。相对的，<code>finalStack.rstrip('0')</code>去掉finalStack右边的指定字符<code>0</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeKdigits</span>(<span class="params">self, num: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        numStack = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 构建单调递增的数字串</span></span><br><span class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">while</span> k <span class="keyword">and</span> numStack <span class="keyword">and</span> numStack[-<span class="number">1</span>] &gt; digit:</span><br><span class="line">                numStack.pop()</span><br><span class="line">                k -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">            numStack.append(digit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果 K &gt; 0，删除末尾的 K 个字符</span></span><br><span class="line">        finalStack = numStack[:-k] <span class="keyword">if</span> k <span class="keyword">else</span> numStack</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 抹去前导零</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(finalStack).lstrip(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">or</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    num = <span class="string">&quot;1432219&quot;</span></span><br><span class="line">    k = <span class="number">3</span></span><br><span class="line">    solution=Solution().removeKdigits(num,k)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
为字符串的长度。尽管存在嵌套循环，但内部循环最多运行 k 次。由于 <span
class="math display">\[0 &lt; k \le
n\]</span>，主循环的时间复杂度被限制在 2n
以内。对于主循环之外的逻辑，它们的时间复杂度是 O(n)，因此总时间复杂度为
O(n)。</li>
<li>空间复杂度：O(n)。栈存储数字需要线性的空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Learning of action through adaptive combination of motor primitives (Nature)</title>
    <url>/2021/03/23/2021-03-23-Neuroscience%20-%20Learning%20of%20action%20through%20adaptive%20combination%20of%20motor%20primitives/</url>
    <content><![CDATA[<h1
id="learning-of-action-through-adaptive-combination-of-motor-primitives">Learning
of action through adaptive combination of motor primitives</h1>
<p>论文链接：https://www.nature.com/articles/35037588</p>
<h2 id="背景">背景</h2>
<p>理解大脑如何构造运动仍然是神经科学领域的一项基本挑战。</p>
<p>大脑可以通过运动基元灵活组合来控制复杂的运动，其中每个基元都是感觉运动地图中的计算元素，它将所需的肢体轨迹转换为运动命令。</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>人在运动之前，通过预测力或者力矩，构建运动指令。然后不断调整预测，使得形成的轨迹近似期望的路径。</p></li>
<li><p>训练区域外的运动会被训练区域内的训练影响，说明大脑构建了一个状态依赖的近似外部力的<strong>内部模型</strong>（internal
model）</p></li>
<li><p>内部模型的泛化性能通过“抓取实验”来量化验证</p>
<p>Shadmehr, R. &amp; Mussa-Ivaldi, F. A. Adaptive representation of
dynamics during learning of a motor task. J. Neurosci. 14, 3208–3224
(1994).</p>
<p>Ghez, C., Krakauer, J. W., Sainburg, R. L. &amp; Ghilardi, M. F. in
The New Cognitive Neurosciences (ed. Gazzaniga, M. S.) 501–514 (MIT
Press, Cambridge, Massachusetts, 2000).</p></li>
<li><p><strong>本文主要介绍了如何通过灵活地组合运动基元构建内部模型，形成感觉-运动地图（sensorimotor
map），构建从轨迹到运动指令的具有泛化能力的转换。</strong></p></li>
<li><p>学习粘滞力场（viscous forces）<span
class="math display">\[f=B\dot{x}\]</span></p></li>
<li><p>随着场空间频率的增加，对于所有基函数宽度，内部模型的精度都会下降。但是，更广泛的基础的学习能力在较低的频率下崩溃了。这与最近的发现是一致的，即人类在较高的空间频率力场中表现出的适应能力较弱。</p>
<p>Matsouka, Y. Models of generalization in motor control. PhD thesis,
MIT ( 1998).</p></li>
</ul>
<h2 id="总结">总结</h2>
<p>算是运动基元的比较早的也是比较权威的工作（Nature）</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 06-从尾到头打印链表-简单-链表</title>
    <url>/2021/03/24/2021-03-24-JZOffer%2006-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8-%E7%AE%80%E5%8D%95-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="剑指-offer-06.-从尾到头打印链表"><a
href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指
Offer 06. 从尾到头打印链表</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,3,2] 输出：[2,3,1]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;= 链表长度 &lt;= 10000</li>
</ul>
</blockquote>
<h3 id="approach-1-栈">Approach 1: 栈</h3>
<p>栈的特点是后进先出，即最后压入栈的元素最先弹出。考虑到栈的这一特点，使用栈将链表元素顺序倒置。从链表的头节点开始，依次将每个节点压入栈内，然后依次弹出栈内的元素并存储到数组中。</p>
<ul>
<li><p>创建一个栈，用于存储链表的节点</p></li>
<li><p>创建一个指针，初始时指向链表的头节点</p></li>
<li><p>当指针指向的元素非空时，重复下列操作：</p>
<ul>
<li>将指针指向的节点压入栈内</li>
<li>将指针移到当前节点的下一个节点</li>
</ul></li>
<li><p>获得栈的大小 size，创建一个数组 print，其大小为 size</p></li>
<li><p>创建下标并初始化 index = 0</p></li>
<li><p>重复 size 次下列操作：</p>
<ul>
<li><p>从栈内弹出一个节点，将该节点的值存到 print[index]</p></li>
<li><p>将 index 的值加 1</p></li>
</ul></li>
<li><p>返回 print</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reversePrint</span>(<span class="params">self, head: ListNode</span>):</span><br><span class="line">        resList = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            resList.append(head.val)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> resList[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head = stringToListNode([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">    solution=Solution().reversePrint(head)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(n)。正向遍历一遍链表，然后从栈弹出全部节点，等于又反向遍历一遍链表。</p></li>
<li><p>空间复杂度：O(n)。额外使用一个栈存储链表中的每个节点。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | A Gain-Field Encoding of Limb Position and Velocity in the Internal Model of Arm Dynamics</title>
    <url>/2021/03/25/2021-03-25-Neuroscience%20-%20A%20Gain-Field%20Encoding%20of%20Limb%20Position%20and%20Velocity%20in%20the%20Internal%20Model%20of%20Arm%20Dynamics/</url>
    <content><![CDATA[<h1
id="a-gain-field-encoding-of-limb-position-and-velocity-in-the-internal-model-of-arm-dynamics">A
Gain-Field Encoding of Limb Position and Velocity in the Internal Model
of Arm Dynamics</h1>
<p>论文链接：https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025</p>
<h2 id="背景">背景</h2>
<p>reaching任务的适应性取决于大脑中的计算，这种计算将手臂的位置和速度的感觉线索转换为运动指令。</p>
<p>本文提出一种位置-速度增益场来进行这种转换。</p>
<p>增益场中的运动基元由线性的位置编码基元和高斯形的速度编码基元乘法调制。</p>
<p>文章得出两个结论：</p>
<ol type="1">
<li><p>在被训练的空间之外，增益场依然能帮助泛化</p></li>
<li><p>非单调的力模式（nonmonotonic force
patterns）比单调的力模式（monotonic force patterns）更难学习</p></li>
</ol>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>行为（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Shadmehr2">Shadmehr和Mussa-Ivaldi，1994</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Conditt1">Conditt和Mussa-Ivaldi，1999</a>）和神经生理学（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Li1">Li等，2001</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Gribble1">Gribble和Scott，2002）</a>）证据表明，大脑通过高度适应性强的内部模型控制肢体运动，</p></li>
<li><p>神经生理学实验表明运动皮层可能是学习肢体动力学内部模型的神经系统的重要组成部分之一（<a
href="https://www.cell.com/neuron/fulltext/S0896-6273(01)00301-4">Li et
al.
2001</a>）。现在有关于各种运动参数如何变化的重要信息，例如肢体速度（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Moran1">Moran和Schwartz，1999年</a>），手臂方向（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Scott1">Scott和Kalaska，1997年</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Scott2">Scott等，1997年</a>）以及手部姿势（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Caminiti1">Caminiti等，1990年</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Sergio1">Sergio和Kalaska</a>，<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Scott2">1997年</a>）<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Sergio1">1997</a>）由运动皮层中的神经元编码。</p></li>
<li><p>具有反映在神经生理学实验中发现的某些细胞特性的元素的计算模型已尝试解释适应过程中泛化的模式如何与神经表征相关。这些计算模型假设内部模型由“元素”或碱基组成，每个仅编码感觉空间的一部分，并且人口代码在计算感觉运动转换时会结合这些元素（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Georgopoulos2">Georgopoulos等人1986</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Levi1">Levi和Camhi
2000</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Pouget2">Pouget等人2000</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Thoroughman1">Thoroughman和Shadmehr
2000</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Donchin1">Donchin和Shadmehr
2002</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Steinberg1">Steinberg等人2002。</a>）。该图将期望的感觉状态转换为即将到来的力的预测。在这些假设下，错误概括的模式应揭示基本元素的形状。</p></li>
<li><p>我们进行了一组实验，检查了神经元如何同时编码肢体位置和速度。我们表明，运动误差一般用一种模式暗示，该模式表明肢体位置空间的线性或单调编码，并且该编码是通过运动方向的编码进行乘法调制的。我们从泛化模式中得出的肢体位置和速度的增益场编码与运动皮层中这些参数的神经编码非常相似（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Georgopoulos1">Georgopoulos等，1984</a>）</p></li>
<li><p>实验部分：</p>
<ul>
<li><p>每个运动的关节转动角度相同，运动时间相同，因此保证探索相同的关节速度-位置空间</p></li>
<li><p>力场为 <strong>viscous
curl-field</strong>（粘性卷曲力场）</p></li>
<li><p><strong>catch trial</strong> 是不加力场的运动；<strong>field
trial</strong> 是加力场的运动</p></li>
<li><p>左边的轨迹，力场向左推手；</p></li>
<li><p>右边的轨迹，力场向右推手</p></li>
<li><p>中间的轨迹，力场输出为0</p></li>
</ul></li>
<li><p>运动相隔越远，力越能联系它们</p></li>
<li><p>以上结果表明，当不同的力与相同方向但在不同空间位置的两个运动相关联时，泛化会随着它们之间距离的增加而降低。另一方面，较早的结果发现，当在单个位置学习到不同方向的运动时，学习会推广到很远的其他手臂位置（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Ghez1">Ghez等，2000</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Shadmehr1">Shadmehr和Moussavi，2000</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Malfait1">Malfait等，2002</a>）。</p>
<p>The above results demonstrate that when different forces are to be
associated with two movements that are in the same direction but at
different spatial locations, generalization decreases with increased
distance between them. On the other hand, earlier results had found that
when movements to various directions are learned at a single location,
learning generalizes to other arm locations very far away (<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Ghez1">Ghez
et al. 2000</a>; <a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Shadmehr1">Shadmehr
and Moussavi 2000</a>; <a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Malfait1">Malfait
et al. 2002</a>).</p></li>
<li><p>我们同时考虑了位置空间的高斯编码和线性编码。我们首先假设肢体位置空间为高斯编码，并评估基础元素的最佳宽度以适合数据。我们惊讶地发现，每个元素的半峰处最佳全宽约为80厘米（高斯函数的标准偏差，σ=
34厘米）。通过高斯基础元素对位置空间进行非常广泛的调整，在工作空间宽度的三倍的工作空间上形成了一个基本上线性的位置相关的接收场。由于此模型在我们的整个训练空间以及以后的范围内都产生了基本上单调的位置编码，因此我们决定详细研究具有简单线性位置编码的模型。的确，<strong>运动皮层</strong>的研究（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Georgopoulos1">Georgopoulos等人，1984年</a>；<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Sergio1">Sergio和Kalaska（1997</a>），<strong>体感皮质</strong>（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Prudahomme1">Prud'homme和Kalaska
1994</a> ; <a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Tillery1">Tillery等人1996</a>）和<strong>脊髓小脑束</strong>（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Bosco1">Bosco等人1996</a>）发现，这些区域的细胞在全局范围内通常是<strong>线性地编码肢体静态位置</strong>。</p></li>
<li><p><strong>加性编码不能适应作为位置和速度的非线性函数的场</strong>，例如<em>f</em>（<em>x</em>，<em>ẋ</em>）=（<em>x
/ d</em>）·
<em>Bẋ</em>。这是描述我们在上一节中考虑的任务的力场。理论研究表明，要适应这样的非线性场，必须以乘法而不是加法形成组合空间的基函数（<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Pouget1">Pouget和Sejnowski
1997</a>）。我们选择使用位置和速度的乘法组合。</p></li>
<li><p><strong>假设位置和速度通过增益场机制联合编码。</strong>We
hypothesized that position and velocity encoding are combined via a
gain-field mechanism</p></li>
<li><p>图3B是两个基元，线性力场的情况下的基元权重学习过程，曲线越与中间斜率为-1的虚线对齐，表示学习越快越高效。（1/2kd,-1/2kd）是最佳权重。k越大、d越大、b越小，越能出尽快速学习。</p></li>
<li><p>图3B中的简单线性基元示意：</p>
<ul>
<li><span class="math display">\[
f(x)=\frac{x}{d}\\
g_1=kx+b\\
g_2=-kx+b
\]</span></li>
</ul></li>
<li><p>Importantly, when the trained position <em>d</em> is close to the
zero of the coordinate axis, the slope is also close to zero, making the
generalization function flat (i.e., global generalization).</p></li>
<li><p>适应力场并不只是单纯地增加刚度。This was not simply a result of
<strong>increased stiffness</strong> because, when the force field was
removed unexpectedly, the trajectories and endpoint errors were on the
opposite side of those in the early force field, indicating <strong>a
proper internal model</strong>. <a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio-0000025-g004">Figure
4</a>C shows a position-dependent field in this category, and <a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio-0000025-g004">Figure
4</a>D–<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio-0000025-g004">4</a>F
shows movements made by the simulation as it adapts to this field. This
pattern of adaptation is similar to reported values in human data (<a
href="https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0000025#pbio.0000025-Flash1">Flash
and Gurevich 1997</a>).</p></li>
<li><p>图4AB，在L区域训练，然后再R区域测试，在新力场中学习速度变快</p></li>
<li><p>两个模型的预测：</p>
<ol type="1">
<li><p>a change to the pattern of forces can substantially increase the
difficulty of a task; 力场中变化的力模式会大大增加任务难度</p></li>
<li><p>there should be hypergeneralization; i.e., forces expected in an
untrained part of the workspace may be larger than the ones experienced
at a trained
location.超泛化性，在工作空间的未训练部分预期的力可能比在训练位置经历的力大</p></li>
</ol></li>
<li><p>尽管在训练空间上学得很少，但我们在测试空间中发现了明显更大的后效应，即过度概括。我们的模拟表明，这种过度概括不能归因于<strong>肢体惯性</strong>和/或<strong>刚度</strong>随肢体位置的变化而变化。More
importantly, despite this small learning in the training space, we found
significantly bigger aftereffects in the test space, i.e.,
hypergeneralization. Our simulations suggest that this
hypergeneralization could not be due to varying limb inertia and/or
stiffness as a function of limb position.</p></li>
<li><p><strong>增益场定义</strong>：细胞编码中两个独立变量的乘法相互作用称为增益场编码。Multiplicative
interaction of two independent variables in cell encoding is called
gain-field coding.</p></li>
<li><p>位置-速度运动基元：</p></li>
</ul>
<p><span class="math display">\[
\tau=\sum Wg_z\\
g_z(q,\dot{q})=g_p(q)*g_v(\dot{q})\\
g_{p,i}(q)=k_i^T\cdot q+b\\
g_{v,i}(\dot{q})=\exp\bigg(\frac{\parallel\dot{q}-c_i\parallel^2}{2\sigma^2}\bigg)\\
k_i=|k| \cdot
\begin{bmatrix}
\cos(\theta_i)\\
\sin(\theta_i)\\
\end{bmatrix}
\\
b=1.3\\
k=1
\]</span></p>
<h2 id="总结">总结</h2>
<p>很有趣的文章，值得进一步考虑。但是提出的模型比较简单，可以进一步讨论。</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1669-合并两个链表-中等-链表</title>
    <url>/2021/03/25/2021-03-25-Q1669-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="合并两个链表"><a
href="https://leetcode-cn.com/problems/merge-in-between-linked-lists/">1669.
合并两个链表</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你两个链表 list1 和 list2 ，它们包含的元素分别为 n 个和 m
个。请你将 list1 中第 a 个节点到第 b 个节点删除，并将list2
接在被删除节点的位置。请你返回结果链表的头指针。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 =
[1000000,1000001,1000002] 输出：[0,1,2,1000000,1000001,1000002,5]
解释：我们删除 list1 中第三和第四个节点，并将 list2
接在该位置。上图中蓝色的边和节点为答案链表。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 =
[1000000,1000001,1000002,1000003,1000004]
输出：[0,1,1000000,1000001,1000002,1000003,1000004,6]
解释：上图中蓝色的边和节点为答案链表。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>3 &lt;= list1.length &lt;= 10^4</li>
<li>1 &lt;= a &lt;= b &lt; list1.length - 1</li>
<li>1 &lt;= list2.length &lt;= 10^4</li>
</ul>
</blockquote>
<h3 id="approach-1-链表合并">Approach 1: 链表合并</h3>
<p>本题目思路很明确，主要需要注意以下几点：</p>
<ul>
<li>合并过程中只用考虑指针，地址中的值不用转换。</li>
<li>链表不像数组，赋值只管头尾指针，不用每个位置都重新赋值</li>
<li>链表的遍历（计算长度），没有什么好方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeInBetween</span>(<span class="params">self, list1, a: <span class="built_in">int</span>, b: <span class="built_in">int</span>, list2</span>):</span><br><span class="line">        res = list1 <span class="comment"># 存放答案头指针，在list1基础上合并</span></span><br><span class="line">        num = <span class="number">0</span> <span class="comment"># 计数器</span></span><br><span class="line">        <span class="keyword">while</span> list1:</span><br><span class="line">            <span class="comment"># 找到 list1 的 a 处指针放入 start1</span></span><br><span class="line">            <span class="keyword">if</span> num == a-<span class="number">1</span>: </span><br><span class="line">                start1 = list1</span><br><span class="line">            <span class="comment"># 找到 list1 的 b 处指针放入 end1</span></span><br><span class="line">            <span class="keyword">if</span> num == b+<span class="number">1</span>:</span><br><span class="line">                end1 = list1</span><br><span class="line">                <span class="keyword">break</span> <span class="comment"># 之后的长度不用管了</span></span><br><span class="line">            list1 = list1.<span class="built_in">next</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 找到 list2 的 尾部指针放入 end2</span></span><br><span class="line">        start1.<span class="built_in">next</span> = list2</span><br><span class="line">        <span class="keyword">while</span> list2.<span class="built_in">next</span>: </span><br><span class="line">            list2 = list2.<span class="built_in">next</span></span><br><span class="line">        list2.<span class="built_in">next</span> = end1</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    list1 = stringToListNode([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    list2 = stringToListNode([<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>])</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    b = <span class="number">4</span></span><br><span class="line">    solution=Solution().mergeInBetween(list1,a,b,list2)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<em>O(n)</em>。其中<code>n</code>为 <span
class="math display">\[\max(\text{链表1长度}, \text{链表2长度},
b)\]</span>。</p></li>
<li><p>空间复杂度：<em>O(1)</em>。解决问题需要常数大小的辅助空间。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Efficient computation and cue integration with noisy population codes (Nature)</title>
    <url>/2021/03/26/2021-03-26-Neuroscience%20-%20Efficient%20computation%20and%20cue%20integration%20with%20noisy%20population%20codes/</url>
    <content><![CDATA[<h1
id="efficient-computation-and-cue-integration-with-noisy-population-codes-nature">Efficient
computation and cue integration with noisy population codes
(Nature)</h1>
<p>论文链接：https://www.nature.com/articles/nn0801_826</p>
<h2 id="背景">背景</h2>
<ul>
<li><p>单个的神经元活动包含噪声，因此不可靠。但是神经元的集群会体现出极大的可靠性。</p></li>
<li><p>目前有两种关于神经元群体的计算方式：function approximation 和 cue
integration</p></li>
<li><p>多维吸引子的基函数网络可以将有噪声的神经元带入计算 basis function
networks with multidimensional attractors</p></li>
<li><p>Moreover, neurons in the intermediate layers of our model show
response properties similar to those observed in several multimodal
cortical areas (多峰皮层区域)</p></li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>感觉运动转换时非线性的</p>
<p>Pouget, A. &amp; Snyder, L. Computational approaches to sensorimotor
transformations. <em>Nat. Neurosci.</em> 3, 1192–1198 (2000).</p></li>
<li><p>皮层中的神经元主要负责编码这些非线性的感觉-运动转换过程。其中主要涉及钟形调制曲线的神经元。</p></li>
<li><p>我们证明了一种特殊类型的神经网络，即具有<strong>多维吸引子的基函数网络</strong>，可以为有效地实现<strong>非线性变换</strong>和<strong>与噪声神经元的提示集成</strong>提供通用的体系结构。</p></li>
<li><p>网络结构示意：</p></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210326-1.png" /></p>
<h2 id="总结">总结</h2>
<ul>
<li>文章比较早也比较简单，图片挺好，说明了编码的方式，可以使用</li>
</ul>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Neuronal Correlates of Motor Performance and Motor Learning in the Primary Motor Cortex of Monkeys Adapting to an External Force Field</title>
    <url>/2021/03/28/2021-03-28-Neuroscience%20-%20Neuronal%20Correlates%20of%20Motor%20Performance%20and%20Motor%20Learning%20in%20the%20Primary%20Motor%20Cortex%20of%20Monkeys%20Adapting%20to%20an%20External%20Force%20Field/</url>
    <content><![CDATA[<h1
id="neuronal-correlates-of-motor-performance-and-motor-learning-in-the-primary-motor-cortex-of-monkeys-adapting-to-an-external-force-field">Neuronal
Correlates of Motor Performance and Motor Learning in the Primary Motor
Cortex of Monkeys Adapting to an External Force Field</h1>
<p>论文链接：https://www.cell.com/neuron/fulltext/S0896-6273(01)00301-4</p>
<h2 id="背景">背景</h2>
<p>初级运动皮层（M1）在手臂的力场适应任务中的神经活动。</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>存储神经元分为两类：</p>
<ul>
<li>关于优选方向（Pd）的变化，这两个类别在重新适应后彼此互补。</li>
<li>与肌肉相关性：对于整个神经元群体，Pd的变化与肌肉观察到的变化相匹配。</li>
</ul></li>
<li><p>运动轨迹的扰动减小并最终消失，因为对象适应了这些力场。当移除力场时，运动轨迹沿与首次施加力场时观察到的方向相反的方向弯曲。这种<strong>后效应</strong>的存在表明，受试者在适应力场的情况下建立了运动环境动力学的内部模型。（The
existence of this aftereffect suggested that subjects developed an
internal model of the dynamics of the motor environment as they adapted
to the force field）</p></li>
<li><p>The <strong>curl fields</strong> used in the adaptation paradigm
provided <strong>an isotropic (rotation-invariant)
perturbation</strong>, in that the external force was always orthogonal
to the movement for all eight directions</p></li>
<li><p>实验分为三个阶段：</p>
<ul>
<li>基准baseline：直线的点到点运动</li>
<li>力场Force：受到力场干扰，适应新的动力学</li>
<li>恢复washout：去掉力场干扰，重新变成基准状态。</li>
</ul></li>
<li><p>实验中发现了两类记忆细胞，第一类细胞的偏好方向没有发生改变，第二类的偏好方向发生了改变</p></li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>这篇文章可以作为证明皮层参与力场适应实验的生物证据，但实质上没有说明作用。</li>
</ul>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Q24-两两交换链表中的节点-中等-链表</title>
    <url>/2021/03/26/2021-03-26-Q24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="两两交换链表中的节点"><a
href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24.
两两交换链表中的节点</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,2,3,4] 输出：[2,1,4,3]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [] 输出：[]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [1] 输出：[1]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
</ul>
</blockquote>
<h3 id="approach-1-迭代">Approach 1: 迭代</h3>
<p>这道题目的困难主要在于难以凑出一个<strong>可重复调用的子循环</strong>。必须考虑在表头<strong>添加一个结点</strong>，帮助凑出子循环才行。</p>
<p>另一方面，链表指针的赋值应当小心，一些<strong>语句的顺序</strong>不能交换，否则出现<strong>循环</strong>。</p>
<p><strong>思路与算法</strong></p>
<p>也可以通过迭代的方式实现两两交换链表中的节点。</p>
<p>创建哑结点 <code>dummyHead</code>，令
<code>dummyHead.next = head</code>。令 <code>temp</code>
表示当前到达的节点，初始时 <code>temp = dummyHead</code>。每次需要交换
<code>temp</code> 后面的两个节点。</p>
<p>如果 <code>temp</code>
的后面没有节点或者只有一个节点，则没有更多的节点需要交换，因此结束交换。否则，获得
<code>temp</code> 后面的两个节点 <code>node1</code> 和
<code>node2</code>，通过更新节点的指针关系实现两两交换节点。</p>
<p>具体而言，交换之前的节点关系是
<code>temp -&gt; node1 -&gt; node2</code>，交换之后的节点关系要变成
<code>temp -&gt; node2 -&gt; node1</code>，因此需要进行如下操作。</p>
<blockquote>
<p>temp.next = node2</p>
<p>node1.next = node2.next</p>
<p>node2.next = node1</p>
</blockquote>
<p>完成上述操作之后，节点关系即变成
<code>temp -&gt; node2 -&gt; node1</code>。再令
<code>temp = node1</code>，对链表中的其余节点进行两两交换，直到全部节点都被两两交换。</p>
<p>两两交换链表中的节点之后，新的链表的头节点是
<code>dummyHead.next</code>，返回新的链表的头节点即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummyHead.<span class="built_in">next</span> = head</span><br><span class="line">        temp = dummyHead</span><br><span class="line">        <span class="keyword">while</span> temp.<span class="built_in">next</span> <span class="keyword">and</span> temp.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            node1, node2 = temp.<span class="built_in">next</span>, temp.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span> = node2</span><br><span class="line">            <span class="comment"># 下面两行的顺序不能交换，否则出现循环</span></span><br><span class="line">            node1.<span class="built_in">next</span> = node2.<span class="built_in">next</span></span><br><span class="line">            node2.<span class="built_in">next</span> = node1</span><br><span class="line">            temp = node1</span><br><span class="line">        <span class="keyword">return</span> dummyHead.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head = stringToListNode([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    solution=Solution().swapPairs(head)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是链表的节点数量。需要对每个节点进行更新指针的操作。</li>
<li>空间复杂度：O(1)，增加一个结点。</li>
</ul>
<h3 id="approach-2-迭代">Approach 2: 迭代</h3>
<p>迭代的方法比较难看明白</p>
<p><strong>思路与算法</strong></p>
<p>可以通过递归的方式实现两两交换链表中的节点。</p>
<p>递归的终止条件是链表中没有节点，或者链表中只有一个节点，此时无法进行交换。</p>
<p>如果链表中至少有两个节点，则在两两交换链表中的节点之后，原始链表的头节点变成新的链表的第二个节点，原始链表的第二个节点变成新的链表的头节点。链表中的其余节点的两两交换可以递归地实现。在对链表中的其余节点递归地两两交换之后，更新节点之间的指针关系，即可完成整个链表的两两交换。</p>
<p>用 <code>head</code> 表示原始链表的头节点，新的链表的第二个节点，用
<code>newHead</code>
表示新的链表的头节点，原始链表的第二个节点，则原始链表中的其余节点的头节点是
<code>newHead.next</code>。令
<code>head.next = swapPairs(newHead.next)</code>，表示将其余节点进行两两交换，交换后的新的头节点为
<code>head</code> 的下一个节点。然后令
<code>newHead.next = head</code>，即完成了所有节点的交换。最后返回新的链表的头节点
<code>newHead</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        newHead = head.<span class="built_in">next</span></span><br><span class="line">        head.<span class="built_in">next</span> = self.swapPairs(newHead.<span class="built_in">next</span>)</span><br><span class="line">        newHead.<span class="built_in">next</span> = head</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是链表的节点数量。需要对每个节点进行更新指针的操作。</li>
<li>空间复杂度：O(n)，其中 n
是链表的节点数量。空间复杂度主要取决于递归调用的栈空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Motor Memory Is Encoded as a Gain-Field Combination of Intrinsic and Extrinsic Action Representations</title>
    <url>/2021/03/26/2021-03-26-Neuroscience%20-%20Motor%20Memory%20Is%20Encoded%20as%20a%20Gain-Field%20Combination%20of%20Intrinsic%20and%20Extrinsic%20Action%20Representations/</url>
    <content><![CDATA[<h1
id="motor-memory-is-encoded-as-a-gain-field-combination-of-intrinsic-and-extrinsic-action-representations">Motor
Memory Is Encoded as a Gain-Field Combination of Intrinsic and Extrinsic
Action Representations</h1>
<p>论文链接：https://www.jneurosci.org/content/32/43/14951.long</p>
<h2 id="背景">背景</h2>
<p>可以通过人的<strong>内部参考模型</strong>或者<strong>外部参考模型</strong>规划运动。（intrinsic
(body-based) reference frame or an extrinsic (world-based) frame）</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li><p>在增益场中用马氏距离衡量不同动作的相似程度，这些记录显示了运动皮质和顶叶皮层（motor
and parietal cortices）中的内在与外在混合表示</p></li>
<li><p>然而，最近的证据表明，新颖的动力学是通过不完全内在的表征来学习的。例如，对自闭症儿童的研究（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-27">Haswell等，2009</a>）和经颅直流电刺激运动皮层（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-44">Orban
de
Xivry等，2011</a>）已发现，疾病或脑部刺激可导致更大程度的内在泛化。但是，如前所述，如果泛化通常是完全固有的，那么这将是不可能的。最近的另一项研究研究了具有不同复杂度的可视化形式的任务动态表示中使用的坐标系，并得出结论，物理动力学表示为内在和外在之间的坐标系（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-1">Ahmed等，2008</a>）。</p></li>
<li><p>A key issue with previous work is that the sparsity with which
these studies sampled the generalization of learning throughout the
workspace did not allow for this level of investigation.
尽管有越来越多的证据表明内在和外在的坐标系都有助于运动记忆，但人们对其结合方式的了解却很少。先前工作的一个关键问题是，这些研究在整个工作空间中对学习泛化进行<strong>采样的稀疏性</strong>不允许进行此级别的研究。</p></li>
<li><p>重要的是，我们的数据将这种<strong>乘法增益场组合模型</strong>与先前假定的（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-29">Hikosaka等，2002</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-16">Cohen
et al。，2005</a> ; <a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-10">Berniker和Kording，2008年</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-11">Berniker和Kording，2011年</a>）的加法组合模型，对应于将基于内在的学习和基于外在的学习分开的想法。</p></li>
<li><p>我们表明，这种乘法增益场模型是内在的，外在的，共同IE交涉后顶叶皮层（PPC）内的存在是一致的（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-4">Andersen等人，1985</a>，<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-5">1998年</a>，<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-6">2004年</a>;
<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-13">Buneo和安德森，2006年</a>）和一次运动皮层（M1）（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-35">Kalaska等，1989</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-32">Kakei等，1999</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-34">Kalaska，2009</a>）。</p></li>
<li><p>尽管我们研究的用于视觉运动适应的神经底物尚不清楚，但有证据表明小脑（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-41">Morton和Bastian，2004</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-50">Rabe等人，2009</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-21">Galea等人，2011</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-19">Donchin等人，2012</a>），PPC
（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-13">Buneo和Andersen，2006</a>；<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-60">Tanaka等，2009</a>）和M1（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-21">Galea等，2011</a>）参与其中。增益场编码已在PPC中作为组合坐标表示的一种方式进行了广泛的研究。在PPC的区域7a中，物体的空间位置以外部坐标系相对于眼睛和外部世界表示，与肢体姿势和关节构造无关（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-4">Andersen等，1985）</a>）。但是，PPC的其他部分（例如区域5a）也以身体参照（本征）坐标保持对象表示（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-57">Snyder等，1998a</a>，<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-58">b</a>）。最近，在PPC区域5的表层中发现了混合的IE对象表示形式（<a
href="https://www.jneurosci.org/content/32/43/14951.long#ref-13">Buneo和Andersen，2006年</a>），这表明在单个神经元内，多个参考系可用于同时表示单个对象或动作。但是，应该注意的是，尽管以眼睛为中心和以手为中心的表示形式已经明显分离，但这些研究中使用的工作空间有限，因此很难将以手为中心的笛卡尔参考系与基于关节角度或肌肉动作。</p></li>
</ul>
<h2 id="总结">总结</h2>
<p>这篇文章写得相当不清楚，总的来看应该是把笛卡尔坐标系表示的运动看做外部模型；把关节空间表示的运动看做是内部模型，通过将两个模型参数化构造为增益空间。用来表征运动的泛化性能。泛化性通过一个双峰高斯函数表示，可视化的图正好能拟合实验得到的曲线。</p>
<p>可取之处在于：</p>
<ul>
<li>增益场可视化表现形式</li>
<li>提供了大量增益场神经科学的研究背景</li>
</ul>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 35 复杂链表的复制-中等-链表</title>
    <url>/2021/03/29/2021-03-29-JZOffer%2035-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="剑指-offer-35.-复杂链表的复制"><a
href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指
Offer 35. 复杂链表的复制</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>请实现 copyRandomList
函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next
指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者
null。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [[1,1],[2,1]] 输出：[[1,1],[2,1]]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [[3,null],[3,0],[3,null]]
输出：[[3,null],[3,0],[3,null]]</p>
</blockquote>
<blockquote>
<p><strong>Example 4:</strong></p>
<p>输入：head = [] 输出：[] 解释：给定的链表为空（空指针），因此返回
null。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>
<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>
<li>节点数目不超过 1000 。</li>
</ul>
</blockquote>
<blockquote>
<p>本题与主站 138
题相同：https://leetcode-cn.com/problems/copy-list-with-random-pointer/</p>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>图的基本单元是 <strong>顶点</strong>，顶点之间的关联关系称为
<strong>边</strong>，我们可以将此链表看成一个图。由于图的遍历方式有深度优先搜索和广度优先搜索，同样地，对于此链表也可以使用深度优先搜索和广度优先搜索两种方法进行遍历。</p>
<ul>
<li>从头结点 head 开始拷贝；</li>
<li>由于一个结点可能被多个指针指到，因此如果该结点已被拷贝，则不需要重复拷贝；</li>
<li>如果还没拷贝该结点，则创建一个新的结点进行拷贝，并将拷贝过的结点保存在哈希表中；</li>
<li>使用递归拷贝所有的 next 结点，再递归拷贝所有的 random 结点。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head</span>) :</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">head</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span> <span class="comment"># 判断遍历链表结束</span></span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> visited: <span class="comment"># 结点已存在，返回结点避免重复复制</span></span><br><span class="line">                <span class="keyword">return</span> visited[head]</span><br><span class="line">           </span><br><span class="line">            copy = Node(head.val, <span class="literal">None</span>, <span class="literal">None</span>) <span class="comment"># 创建新结点</span></span><br><span class="line">            visited[head] = copy <span class="comment"># hash中增加一个结点</span></span><br><span class="line">            copy.<span class="built_in">next</span> = dfs(head.<span class="built_in">next</span>) </span><br><span class="line">            copy.random = dfs(head.random)</span><br><span class="line">            <span class="keyword">return</span> copy</span><br><span class="line"></span><br><span class="line">        visited = &#123;&#125; <span class="comment"># 创建存放结点的链表</span></span><br><span class="line">        <span class="keyword">return</span> dfs(head) <span class="comment"># 最后返回头指针</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 是链表的节点数量。</li>
<li>空间复杂度：O(n）。</li>
</ul>
<h3 id="approach-2-广度有限搜索">Approach 2: 广度有限搜索</h3>
<ul>
<li>创建哈希表保存已拷贝结点，格式 {原结点：拷贝结点}</li>
<li>创建队列，并将头结点入队；</li>
<li>当队列不为空时，弹出一个结点，如果该结点的 next
结点未被拷贝过，则拷贝 next 结点并加入队列；同理，如果该结点的 random
结点未被拷贝过，则拷贝 random 结点并加入队列；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList1</span>(<span class="params">self, head: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">        visited = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">head</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> head <span class="comment"># 判断遍历链表结束</span></span><br><span class="line">            clone = Node(head.val, <span class="literal">None</span>, <span class="literal">None</span>) <span class="comment"># 创建新结点</span></span><br><span class="line">            queue = collections.deque() <span class="comment"># 双端数列</span></span><br><span class="line">            queue.append(head)</span><br><span class="line">            visited[head] = clone <span class="comment"># 结点存入hash</span></span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                tmp = queue.pop() <span class="comment"># </span></span><br><span class="line">                <span class="keyword">if</span> tmp.<span class="built_in">next</span> <span class="keyword">and</span> tmp.<span class="built_in">next</span> <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># .next结点非空且未复制</span></span><br><span class="line">                    visited[tmp.<span class="built_in">next</span>] = Node(tmp.<span class="built_in">next</span>.val, [], [])</span><br><span class="line">                    queue.append(tmp.<span class="built_in">next</span>)  </span><br><span class="line">                <span class="keyword">if</span> tmp.random <span class="keyword">and</span> tmp.random <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># .random结点非空且未复制</span></span><br><span class="line">                    visited[tmp.random] = Node(tmp.random.val, [], [])</span><br><span class="line">                    queue.append(tmp.random)</span><br><span class="line">                visited[tmp].<span class="built_in">next</span> = visited.get(tmp.<span class="built_in">next</span>) <span class="comment"># 字典get()函数返回指定键的值</span></span><br><span class="line">                visited[tmp].random = visited.get(tmp.random)</span><br><span class="line">            <span class="keyword">return</span> clone <span class="comment"># 返回头指针</span></span><br><span class="line">        <span class="keyword">return</span> bfs(head)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 是链表的节点数量。</li>
<li>空间复杂度：O(n）。</li>
</ul>
<h3 id="approach-3-迭代">Approach 3: 迭代</h3>
<p>该方法的思路比较直接，对于一个结点，分别拷贝此结点、next
指针指向的结点、random 指针指向的结点，
然后进行下一个结点...如果遇到已经出现的结点，那么我们不用拷贝该结点，只需将
next 或 random 指针指向该结点即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> head</span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            new_node = Node(cur.val,<span class="literal">None</span>,<span class="literal">None</span>)   <span class="comment"># 克隆新结点</span></span><br><span class="line">            new_node.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = new_node   <span class="comment"># 克隆新结点在cur 后面</span></span><br><span class="line">            cur = new_node.<span class="built_in">next</span>   <span class="comment"># 移动到下一个要克隆的点</span></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur:  <span class="comment"># 链接random</span></span><br><span class="line">            cur.<span class="built_in">next</span>.random = cur.random.<span class="built_in">next</span> <span class="keyword">if</span> cur.random <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        cur_old_list = head <span class="comment"># 将两个链表分开</span></span><br><span class="line">        cur_new_list = head.<span class="built_in">next</span></span><br><span class="line">        new_head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> cur_old_list:</span><br><span class="line">            cur_old_list.<span class="built_in">next</span> = cur_old_list.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            cur_new_list.<span class="built_in">next</span> = cur_new_list.<span class="built_in">next</span>.<span class="built_in">next</span> <span class="keyword">if</span> cur_new_list.<span class="built_in">next</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            cur_old_list = cur_old_list.<span class="built_in">next</span></span><br><span class="line">            cur_new_list = cur_new_list.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> new_head</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N) 。 空间复杂度：O(1) 。</li>
</ul>
<p><strong>总结</strong>
在对链表进行操作的时候，经常要记得把一个结点的指针域用另一个指针保存起来，这样返回的时候不容易出错。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Memristor‐Based Biologically Plausible Memory Based on Discrete and Continuous Attractor Networks for Neuromorphic Systems</title>
    <url>/2021/03/29/2021-03-29-Memristor%E2%80%90Based%20Biologically%20Plausible%20Memory%20Based%20on%20Discrete%20and%20Continuous%20Attractor%20Networks%20for%20Neuromorphic%20Systems/</url>
    <content><![CDATA[<h1
id="memristorbased-biologically-plausible-memory-based-on-discrete-and-continuous-attractor-networks-for-neuromorphic-systems">Memristor‐Based
Biologically Plausible Memory Based on Discrete and Continuous Attractor
Networks for Neuromorphic Systems</h1>
<p>论文链接：https://onlinelibrary.wiley.com/doi/10.1002/aisy.202000001</p>
<p>## 背景</p>
<ul>
<li><p>神经形态计算是1990年代提出的一个新概念，它表明未来的计算机系统可以通过直接在物理水平上并行处理模拟信号来模仿人脑的操作原理。</p></li>
<li><p>s按个优势：</p>
<ul>
<li>高并行性 high parallelism</li>
<li>低功耗 low power consumption</li>
<li>内存计算 in‐memory computing</li>
</ul></li>
<li><p><strong>忆阻器</strong>可以根据内部状态和外部刺激（例如电压脉冲）来改变其电阻。基于忆阻器的纵横制结构可以通过依赖欧姆定律和基尔霍夫定律直接将向量矩阵乘法（VMM）（一种最密集的计算组件）映射到电参数来加速各种人工神经网络（ANN）</p></li>
<li><p>VMM计算过程直接在原地发生，从而避免了从内存中获取数据而导致的内存墙（<strong>冯·诺伊曼·瓶颈</strong>）</p></li>
<li><p>如果吸引子是离散的，则初始状态将落入最近的吸引子。这是联想记忆的模型，该记忆先前已在忆阻器交叉开关上执行</p></li>
<li><p>然而，这些先前的研究使用称为Hebbian规则的离线学习，这意味着突触的权重已在软件中计算出来，并简单地映射到忆阻器交叉开关上。Hebbian
rule的表现很差，无法支持大规模的吸引网络。</p></li>
<li><p>通过引入平移不变的钟形连接模式，网络吸引子可以奇妙地形成一个平面。这称为<strong>连续吸引子神经网络（CANN）</strong></p></li>
<li><p>在记忆方面，人们认为大脑可以在动态分配过程中暂时记住当前状态，并随后使用此信息进行计算。这称为工作存储器，可以由CANN自然实现。</p></li>
<li><p>通过引入神经元之间的竞争与合作，一种名为<strong>Oja规则</strong>的有效的在线在线学习方法被应用到基于无监督学习的联想记忆中，表明该方法可以将性能提高至少10倍，这将大大减少芯片面积并增强硬件的健壮性。</p></li>
</ul>
<h2 id="工作内容">工作内容</h2>
<h3 id="离散吸引子网络">1. 离散吸引子网络</h3>
<ul>
<li>离散吸引子神经网络，也称为Hopfield神经网络，是完全连接的网络，其中每个神经元与其他神经元都有连接，但没有自连接</li>
</ul>
<p><span class="math display">\[
X_i^{i+1}=sgn\bigg(\sum_j W_{ij}X_i^t+b_i\bigg)
\]</span></p>
<h3 id="oja学习规则">2. Oja学习规则</h3>
<p><span class="math display">\[
Y=X&#39;\times W\\
\Delta W&#39;=\alpha (X-W&#39;\times Y&#39;)\times Y
\]</span></p>
<ul>
<li><p>其中<em>W</em>是权重矩阵，<em>α</em>是学习率</p></li>
<li><p>与以前使用软件计算权重的工作不同，此规则可以在交叉开关中在线训练网络，因此可以显着提高性能。该规则的主要原理是利用神经元之间的竞争，这种竞争也用在局部竞争算法（LCA）中，<a
href="https://onlinelibrary.wiley.com/doi/10.1002/aisy.202000001#aisy202000001-bib-0027">27</a>解释为Winner
Takes All（WTA）。</p></li>
<li><p>Oja规则的存储容量大约是Hebbian规则的10倍，并且由Oja规则训练的神经形态存储系统也具有更好的鲁棒性，这表现为更高的噪声容忍度，显示了整体上显着的性能提升。</p></li>
</ul>
<h3 id="连续吸引子网络">3. 连续吸引子网络</h3>
<p><span class="math display">\[
\tau\frac{\partial U(x,t)}{\partial t}=-U(x,t)+\rho \int_{x&#39;}
J(x,x&#39;)r(x&#39;,t) dx&#39;+I^{ext}(x,t)\\
r(x,t)=\frac{[U(x,t)]^2_+}{1+k\rho\int_{x&#39;}[U(x&#39;,t)]^2_+dx&#39;}
\]</span></p>
<h2 id="总结">总结</h2>
<p>想看看吸引子网络的，但它是Hopfield Neural Networks，激活函数是<span
class="math display">\[sgn()\]</span>，和运动基元、增益场还是不一样的。</p>
<p>基于忆阻器的神经形态系统可以加速吸引子网络的计算效率，而这种计算方式在初级运动皮层和前额叶皮层的感觉-运动映射中都有使用。这为将忆阻器与类脑运动决策算法的结合提供了合理性和理论基础，两者的结合有望大幅提高类脑决策算法的计算效率，在行为层面使机器人表现出强大的动态环境适应能力和运动迁移能力。</p>
<p>相关文章：Motor Memory Is Encoded as a Gain-Field Combination of
Intrinsic and Extrinsic Action Representations</p>
<p>论文链接：https://www.jneurosci.org/content/32/43/14951.long</p>
<p>blog：https://txing-z.gitee.io/txing-casia.github.io/2021/03/26/Neuroscience-Motor-Memory-Is-Encoded-as-a-Gain-Field-Combination-of-Intrinsic-and-Extrinsic-Action-Representations/</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Attractor Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1721-交换链表中的节点-中等-链表</title>
    <url>/2021/03/30/2021-03-30-Q1721-%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="交换链表中的节点"><a
href="https://leetcode-cn.com/problems/swapping-nodes-in-a-linked-list/">1721.
交换链表中的节点</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你链表的头节点 head 和一个整数 k 。</p>
<p>交换 链表正数第 k 个节点和倒数第 k
个节点的值后，返回链表的头节点（链表 从 1 开始索引）。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,2,3,4,5], k = 2 输出：[1,4,3,2,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [7,9,6,6,7,8,3,0,9,5], k = 5
输出：[7,9,6,6,8,7,3,0,9,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [1], k = 1 输出：[1]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目是 n</li>
<li>1 &lt;= k &lt;= n &lt;= 105</li>
<li>0 &lt;= Node.val &lt;= 100</li>
</ul>
</blockquote>
<h3 id="approach-1-遍历搜索超时">Approach 1: 遍历搜索（超时）</h3>
<p>自己思考没想出什么特别的计算手段，就想到遍历链表找到前k和后k个结点，然后进行交换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapNodes</span>(<span class="params">self, head: ListNode, k: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        <span class="comment"># 找前k-1个点</span></span><br><span class="line">        L=head</span><br><span class="line">        num=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> L:</span><br><span class="line">            num+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num == k-<span class="number">1</span>: <span class="comment"># 找到前k-1个结点</span></span><br><span class="line">                FK=L</span><br><span class="line">            L=L.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 找后k+1个结点</span></span><br><span class="line">        k=num-k</span><br><span class="line">        num=<span class="number">0</span></span><br><span class="line">        ans=L=head <span class="comment"># 保证ans和L相同地址</span></span><br><span class="line">        <span class="keyword">while</span> L:</span><br><span class="line">            num+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num == k:</span><br><span class="line">                LK=L</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            L=L.<span class="built_in">next</span> </span><br><span class="line">        <span class="comment"># 交换</span></span><br><span class="line">        FK2=FK.<span class="built_in">next</span></span><br><span class="line">        FK3=FK.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        LK2=LK.<span class="built_in">next</span></span><br><span class="line">        LK3=LK.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        FK.<span class="built_in">next</span>=LK2</span><br><span class="line">        LK2.<span class="built_in">next</span>=FK3</span><br><span class="line">        LK.<span class="built_in">next</span>=FK2</span><br><span class="line">        FK2.<span class="built_in">next</span>=LK3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> listNodeToString(ans)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n+q)，其中 n
是链表的节点数量，p是倒数第k个结点是链表的第p个结点。</li>
<li>空间复杂度：O(1)，增加了常数个指针。</li>
</ul>
<h3 id="approach-2-快慢指针">Approach 2: 快慢指针</h3>
<p>快慢指针用法挺多 1.n等分 2.检测有无环 3.从后数第几个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapNodes1</span>(<span class="params">self, head: ListNode, k: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> k - <span class="number">1</span> != <span class="number">0</span>: <span class="comment"># 1 2 3 4 5 6 7  k=3 往后移2步到3</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        L = fast <span class="comment"># L = 3</span></span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> fast.<span class="built_in">next</span>: <span class="comment"># slow = 5, fast = 7</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">        R = slow <span class="comment"># R = 5</span></span><br><span class="line">        </span><br><span class="line">        L.val,R.val = R.val,L.val <span class="comment">#3 和 5 的val 交换</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<em>O(n)</em>。其中<code>n</code>为链表的长度。</li>
<li>空间复杂度：<em>O(1)</em>。需要额外的常数大小的辅助空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Adaptation to Visuomotor Rotation Through Interaction Between Posterior Parietal and Motor Cortical Areas</title>
    <url>/2021/03/31/2021-03-31-Neuroscience%20-%20Adaptation%20to%20Visuomotor%20Rotation%20Through%20Interaction%20Between%20Posterior/</url>
    <content><![CDATA[<h1
id="adaptation-to-visuomotor-rotation-through-interaction-between-posterior-parietal-and-motor-cortical-areas">Adaptation
to Visuomotor Rotation Through Interaction Between Posterior Parietal
and Motor Cortical Areas</h1>
<p>论文链接：https://journals.physiology.org/doi/full/10.1152/jn.90834.2008</p>
<h2 id="背景">背景</h2>
<ul>
<li>PPC中有高斯调制的神经元，使其成为适应视觉运动旋转的可能部位。Visually
selective neurons with narrow Gaussian tuning curves have been
identified in posterior parietal cortex, making it a possible site of
adaptation to visuomotor rotation.</li>
</ul>
<h2 id="主要工作">主要工作</h2>
<p>没细看，感觉可以引用。</p>
<p>有些公式需要再仔细研究一下</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Sim-to-Real Transfer in Deep Reinforcement Learning for Robotics a Survey</title>
    <url>/2021/03/30/2021-03-30-Reinforcement%20Learning%20-%20Sim-to-Real%20Transfer%20in%20Deep%20Reinforcement%20Learning%20for%20Robotics%20a%20Survey/</url>
    <content><![CDATA[<h1
id="sim-to-real-transfer-in-deep-reinforcement-learning-for-robotics-a-survey">Sim-to-Real
Transfer in Deep Reinforcement Learning for Robotics: a Survey</h1>
<p>论文链接：https://ieeexplore.ieee.org/document/9308468</p>
<h2 id="背景">背景</h2>
<ul>
<li><p>真实的机器人数据难以获得，或者成本代价高，因此需要用仿真环境模拟，降低成本，保证安全性。Owing
to the limitations of gathering real-world data, i.e., sample
inefficiency and the cost of collecting it, simulation environments are
utilized for training the different agents</p></li>
<li><p>问题是仿真和真实之间存在差距。Nonetheless, <strong>the gap
between the simulated and real worlds</strong> degrades the performance
of the policies once the models are transferred into real
robots</p></li>
<li><p>主要研究方向：</p>
<ul>
<li>域随机化 domain randomization</li>
<li>域适应 domain adaptation</li>
<li>模仿学习 imitation learning</li>
<li>元学习 meta-learning</li>
<li>知识蒸馏 knowledge distillation</li>
</ul></li>
<li><p>Moreover, learning with real robots requires the consideration of
<strong>potentially dangerous</strong> or <strong>unexpected behaviors
in safety-critical applications</strong> [4]</p></li>
<li><p><strong>关键问题</strong>：如何通过<strong>转移知识</strong>并相应地<strong>调整策略</strong>，在真实环境中利用基于模拟的训练。how
to exploit simulation-based training in real-world settings by
transferring the knowledge and adapting the policies
accordingly</p></li>
<li><p>仿真的设置与真实设置之间有着固有的不匹配。Simulation-based
training provides data at low-cost, but involves <strong>inherent
mismatches</strong> with real-world settings</p></li>
<li><p>一些基于深度学习的相关算法：</p>
<ul>
<li>adversarial attacks on computer vision algorithms [7].</li>
<li>introduce perturbances in the environment [8]</li>
<li>domain randomization [9]</li>
<li>Another key aspect to take into account is that an agent deployed in
the real world will potentially be exposed to novel experiences that
were not present in the simulations [10]</li>
<li>meta learning [11]</li>
<li>continual learning [12]</li>
<li>更好的仿真引擎 physics engines: Airsim [13], CARLA [14], RotorS
[15], [16], and others [17]</li>
</ul></li>
<li><p>安全的强化学习这也是一个方向 safe reinforcement learning
[4]</p></li>
<li><p>几个方向的关系如下图所示：</p></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210330-1.png" /></p>
<h3 id="a.-deep-reinforcement-learning">A. Deep Reinforcement
Learning</h3>
<ul>
<li>略</li>
</ul>
<h3 id="b.-sim-to-real-transfer">B. Sim-to-Real Transfer</h3>
<ul>
<li>Transferring DRL policies form simulation environments to reality is
a necessary step towards more complex robotic systems that have
DL-defined controllers.</li>
</ul>
<h3 id="c.-transfer-learning-and-domain-adaptation">C. Transfer Learning
and Domain Adaptation</h3>
<ul>
<li><strong>迁移学习</strong>：Transfer learning aims at improving the
performance of target learners on <strong>target domains</strong> by
transferring the knowledge contained in different but related
<strong>source domains</strong> [18]. In this way, transfer learning can
reduce the dependence of target domain data when constructing target
learners.</li>
<li><strong>域适应</strong>：它指定了当我们有足够的源域标记数据和与目标任务相同的单个任务，但没有或很少目标域数据时的情况。It
specifies the situation when we have sufficient source domain labeled
data and the same single task as the target task, but without or very
few target domain data. In sim-to-real robotics, researchers tend to
employ a simulator to train the RL model and then deploy it in the
realistic environment, where we should take advantage of the domain
adaptation techniques in order to transfer the simulation based model
well</li>
</ul>
<h3 id="d.-knowledge-distillation">D. Knowledge Distillation</h3>
<ul>
<li>一般用于大型网络，例如使用视觉图像输入的深层网络</li>
<li>使用网络教另一个网络，这样使得两个网络性能差不多，但是学得更快。In
these set-ups, the two networks are typically called teacher and
student.</li>
</ul>
<h3 id="e.-meta-reinforcement-learning">E. Meta Reinforcement
Learning</h3>
<ul>
<li>通常采用LSTM。MetaRL usually implements an LSTM policy and
incorporates the last reward <span
class="math display">\[r_{t−1}\]</span> and last action <span
class="math display">\[a_{t−1}\]</span> into the current policy
observation</li>
</ul>
<h3 id="f.-robust-rl-and-imitation-learning">F. Robust RL and Imitation
Learning</h3>
<ul>
<li><p>Robust RL [23] was proposed quite early as a new RL paradigm that
explicitly takes into account input disturbances as well as modeling
errors</p></li>
<li><p>It considers a bad, or even adversarial model and tries to
maximize the reward as a optimization problem [24], [25].</p></li>
<li><p><strong>Imitation learning</strong> proposes to employ expert
demonstration or trajectories instead of manually constructing a fixed
reward function to train RL agents.</p>
<ul>
<li><strong>behaviour cloning</strong> where an agent learns a mapping
from observations to actions given demonstrations [26], [27]</li>
<li><strong>inverse reinforcement learning</strong> where an agent
attempts to estimate a reward function that describes the given
demonstrations [28].</li>
</ul></li>
<li><p>机器人导航任务的方法：</p>
<ul>
<li>curriculum learning [37]</li>
<li>incremental environment complexity [39]</li>
<li>continual learning and policy distillation for multiple tasks
[12]</li>
</ul></li>
</ul>
<h2 id="总结">总结</h2>
<p>即时限定在机器人领域，迁移学习也不是一个很具体的范畴。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Transfer Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q92-反转链表 II-中等-链表</title>
    <url>/2021/04/01/2021-04-01-Q92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="反转链表-ii"><a
href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92.
反转链表 II</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;=
right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表
。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,2,3,4,5], left = 2, right = 4 输出：[1,4,3,2,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [5], left = 1, right = 1 输出：[5]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目为 n</li>
<li>1 &lt;= n &lt;= 500</li>
<li>-500 &lt;= Node.val &lt;= 500</li>
<li>1 &lt;= left &lt;= right &lt;= n</li>
</ul>
</blockquote>
<blockquote>
<p><strong>进阶：</strong> 你可以使用一趟扫描完成反转吗？</p>
</blockquote>
<h3 id="approach-1-穿针引线">Approach 1: 穿针引线</h3>
<p>一定要先想清楚思路，并且必要的时候在草稿纸上画图，理清「穿针引线」的先后步骤，然后再编码。</p>
<p>使用<a
href="https://leetcode-cn.com/problems/reverse-linked-list/">「206.
反转链表」</a>的解法，反转 left 到 right
部分以后，再拼接起来。我们还需要记录 left 的前一个节点，和 right
的后一个节点。</p>
<ul>
<li>第 1 步：先将待反转的区域反转；</li>
<li>第 2 步：把 pre 的 next
指针指向反转以后的链表头节点，把反转以后的链表的尾节点的 next 指针指向
succ。</li>
</ul>
<p>说明：编码细节我们不在题解中介绍了，请见下方代码。思路想明白以后，编码不是一件很难的事情。这里要提醒大家的是，链接什么时候切断，什么时候补上去，先后顺序一定要想清楚，如果想不清楚，可以在纸上模拟，让思路清晰。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBetween</span>(<span class="params">self, head: ListNode, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">reverse_linked_list</span>(<span class="params">head: ListNode</span>):</span><br><span class="line">            <span class="comment"># 也可以使用递归反转一个链表</span></span><br><span class="line">            pre = <span class="literal">None</span></span><br><span class="line">            cur = head</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                <span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                cur.<span class="built_in">next</span> = pre</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论</span></span><br><span class="line">        dummy_node = ListNode(-<span class="number">1</span>)</span><br><span class="line">        dummy_node.<span class="built_in">next</span> = head</span><br><span class="line">        pre = dummy_node</span><br><span class="line">        <span class="comment"># 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点</span></span><br><span class="line">        <span class="comment"># 建议写在 for 循环里，语义清晰</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(left - <span class="number">1</span>):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点</span></span><br><span class="line">        right_node = pre</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(right - left + <span class="number">1</span>):</span><br><span class="line">            right_node = right_node.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 第 3 步：切断出一个子链表（截取链表）</span></span><br><span class="line">        left_node = pre.<span class="built_in">next</span></span><br><span class="line">        curr = right_node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注意：切断链接</span></span><br><span class="line">        pre.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        right_node.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第 4 步：同第 206 题，反转链表的子区间</span></span><br><span class="line">        reverse_linked_list(left_node)</span><br><span class="line">        <span class="comment"># 第 5 步：接回到原来的链表中</span></span><br><span class="line">        pre.<span class="built_in">next</span> = right_node</span><br><span class="line">        left_node.<span class="built_in">next</span> = curr</span><br><span class="line">        <span class="keyword">return</span> dummy_node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N)，其中
N是链表总节点数。最坏情况下，需要遍历整个链表。</li>
<li>空间复杂度：O(1)。只使用到常数个变量。</li>
</ul>
<h3 id="approach-2-一次遍历穿针引线反转链表头插法">Approach 2:
一次遍历「穿针引线」反转链表（头插法）</h3>
<p>配图解释：https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/</p>
<p>方法一的缺点是：如果 left 和 right
的区域很大，恰好是链表的头节点和尾节点时，找到 left 和 right
需要遍历一次，反转它们之间的链表还需要遍历一次，虽然总的时间复杂度为
O(N)，但遍历了链表 2
次，可不可以只遍历一次呢？答案是可以的。我们依然画图进行说明。</p>
<p>整体思想是：在需要反转的区间里，每遍历到一个节点，让这个新节点来到反转部分的起始位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBetween</span>(<span class="params">self, head: ListNode, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        <span class="comment"># 设置 dummyNode 是这一类问题的一般做法</span></span><br><span class="line">        dummy_node = ListNode(-<span class="number">1</span>)</span><br><span class="line">        dummy_node.<span class="built_in">next</span> = head</span><br><span class="line">        pre = dummy_node</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(left - <span class="number">1</span>):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        cur = pre.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(right - left):</span><br><span class="line">            <span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = <span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span>.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy_node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N)，其中 N
是链表总节点数。最多只遍历了链表一次，就完成了反转。</li>
<li>空间复杂度：O(1)。只使用到常数个变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | The posterior parietal cortex Sensorimotor interface for the planning and online control of visually guided movements</title>
    <url>/2021/03/31/2021-03-31-Neuroscience%20-%20The%20posterior%20parietal%20cortex%20Sensorimotor%20interface%20for%20the%20planning%20and%20online%20control%20of%20visually%20guided%20movements/</url>
    <content><![CDATA[<h1
id="the-posterior-parietal-cortex-sensorimotor-interface-for-the-planning-and-online-control-of-visually-guided-movements">The
posterior parietal cortex: Sensorimotor interface for the planning and
online control of visually guided movements</h1>
<p>论文链接：https://www.sciencedirect.com/science/article/pii/S0028393205003337?via%3Dihub</p>
<h2 id="背景">背景</h2>
<p>后顶叶皮层（PPC）参与构建感觉运动地图</p>
<h2 id="主要工作">主要工作</h2>
<ul>
<li>即对于手臂运动，PPC不仅在将感官信息转换为运动命令所需的逆变换中起作用，而且在“正向”变换中也发挥作用，即在将感觉输入与先前和正在进行的运动命令相集成以维持对手臂状态的连续估计的过程中用于更新当前和将来的移动计划。</li>
<li>PPC参与了感觉运动的转化（R.A. Andersen, G.K. Essick, R.M. Siegel
Neurons of area 7a activated by both visual stimuli and oculomotor
behavior Experimental Brain Research, 67 (1987), pp. 316-322）</li>
</ul>
<h2 id="总结">总结</h2>
<p>这篇文章主要介绍PPC在眼睛坐标系和手臂坐标系之间转换的作用，以及PPC对感觉运动映射的作用，可以参考</p>
<p>但是图片实在是太难看了</p>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Motor Primitives</tag>
      </tags>
  </entry>
  <entry>
    <title>Q82-删除排序链表中的重复元素 II-中等-链表</title>
    <url>/2021/03/31/2021-03-31-Q82-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="删除排序链表中的重复元素-ii"><a
href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82.
删除排序链表中的重复元素 II</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>存在一个按升序排列的链表，给你这个链表的头节点 head
，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中
没有重复出现 的数字。</p>
<p>返回同样按升序排列的结果链表。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,2,3,3,4,4,5] 输出：[1,2,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [7,9,6,6,7,8,3,0,9,5], k = 5
输出：[7,9,6,6,8,7,3,0,9,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [1,1,1,2,3] 输出：[2,3]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围 [0, 300] 内</li>
<li>-100 &lt;= Node.val &lt;= 100</li>
<li>题目数据保证链表已经按升序排列</li>
</ul>
</blockquote>
<h3 id="approach-1-顺序遍历搜索">Approach 1: 顺序遍历搜索</h3>
<p>由于链表已经排序，因此要找到链表中重复的数字可以只用对比本节点的值和下一个节点的值，而不需使用HASH表。</p>
<p>注意：</p>
<ul>
<li>头节点可能要修改，需要添加哑头节点；</li>
<li>始终对比 cur.next.val 和
cur.next.next.val，避免要寻找上一个节点；</li>
<li>注意 cur 和 dummy 怎么使用；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="comment"># 判断链表非空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 头节点可能要修改，需要添加哑头节点</span></span><br><span class="line">        dummy = ListNode([])</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        cur = dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> <span class="keyword">and</span> cur.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == cur.<span class="built_in">next</span>.<span class="built_in">next</span>.val:</span><br><span class="line">                x = cur.<span class="built_in">next</span>.val</span><br><span class="line">                <span class="keyword">while</span> cur.<span class="built_in">next</span> <span class="keyword">and</span> cur.<span class="built_in">next</span>.val == x:</span><br><span class="line">                    cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    head = stringToListNode([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    solution=Solution().deleteDuplicates(head)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 是链表的节点数量</li>
<li>空间复杂度：O(1)，增加了常数个指针。</li>
</ul>
<h3 id="approach-2-递归">Approach 2: 递归</h3>
<p>递归最基本的是要明白递归函数的定义！</p>
<p>递归函数直接使用题目给出的函数 deleteDuplicates(head)
，它的含义是删除以 head 作为开头的有序链表中，值出现重复的节点。</p>
<p>终止条件就是能想到的基本的、不用继续递归处理的case。</p>
<ul>
<li>如果 head 为空，那么肯定没有值出现重复的节点，直接返回 head；</li>
<li>如果 head.next
为空，那么说明链表中只有一个节点，也没有值出现重复的节点，也直接返回
head。</li>
</ul>
<p>什么时候需要递归呢？我们想一下这两种情况：</p>
<ul>
<li>如果 head.val != head.next.val
，说明头节点的值不等于下一个节点的值，所以当前的 head 节点必须保留；但是
head.next 节点要不要保留呢？我们还不知道，需要对 head.next
进行递归，即对 head.next 作为头节点的链表，去除值重复的节点。所以
head.next = self.deleteDuplicates(head.next).</li>
<li>如果 head.val == head.next.val
，说明头节点的值等于下一个节点的值，所以当前的 head 节点必须删除，并且
head 之后所有与 head.val
相等的节点也都需要删除；删除到哪个节点为止呢？需要用 move
指针一直向后遍历寻找到与 head.val 不等的节点。此时 move
之前的节点都不保留了，因此返回 deleteDuplicates(move);</li>
</ul>
<p>题目让我们返回删除了值重复的节点后剩余的链表，结合上面两种递归调用的情况。</p>
<ul>
<li>如果 head.val != head.next.val ，头结点需要保留，因此返回的是
head；</li>
<li>如果 head.val == head.next.val
，头结点需要删除，需要返回的是deleteDuplicates(move);。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteDuplicates1</span>(<span class="params">self, head</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">if</span> head.val != head.<span class="built_in">next</span>.val:</span><br><span class="line">            head.<span class="built_in">next</span> = self.deleteDuplicates(head.<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            move = head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">while</span> move <span class="keyword">and</span> head.val == move.val:</span><br><span class="line">                move = move.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> self.deleteDuplicates(move)</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(N)，每个节点访问了一次。</li>
<li>空间复杂度：O(N)，递归调用的时候会用到了系统的栈。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q148-排序链表-中等-链表</title>
    <url>/2021/04/02/2021-04-02-Q148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8-%E4%B8%AD%E7%AD%89-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="排序链表"><a
href="https://leetcode-cn.com/problems/sort-list/">148.
排序链表</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你链表的头结点 head ，请将其按 <strong>升序</strong> 排列并返回
排序后的链表 。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [4,2,1,3] 输出：[1,2,3,4]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [-1,5,3,4,0] 输出：[-1,0,3,4,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [] 输出：[]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 [0, 5 * 104] 内</li>
<li>-105 &lt;= Node.val &lt;= 105</li>
</ul>
</blockquote>
<blockquote>
<p><strong>进阶：</strong></p>
<p>你可以在 O(n log n)
时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p>
</blockquote>
<p><strong>前言</strong></p>
<p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">147.
对链表进行插入排序</a>使用插入排序的方法对链表进行排序，插入排序的时间复杂度是
<span class="math display">\[O(n^2)\]</span>，其中 n
是链表的长度。这道题考虑时间复杂度更低的排序算法。题目的进阶问题要求达到
<span class="math display">\[O(n \log n)\]</span>的 时间复杂度和 <span
class="math display">\[O(1)\]</span> 的空间复杂度，时间复杂度是 <span
class="math display">\[O(n \log n)\]</span>
的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是
<span
class="math display">\[O(n^2)\]</span>，其中最适合链表的排序算法是归并排序。</p>
<p>归并排序基于分治算法。最容易想到的实现方式是自顶向下的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是
<span class="math display">\[O(\log n)\]</span>。如果要达到 <span
class="math display">\[O(1)\]</span>
的空间复杂度，则需要使用自底向上的实现方式。</p>
<h3 id="approach-1-自顶向下归并排序">Approach 1: 自顶向下归并排序</h3>
<p>对链表自顶向下归并排序的过程如下。</p>
<ul>
<li><p>找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动
2 步，慢指针每次移动 1
步，当快指针到达链表末尾时，慢指针指向的链表节点即为链表的中点。</p></li>
<li><p>对两个子链表分别排序。</p></li>
<li><p>将两个排序后的子链表合并，得到完整的排序后的链表。可以使用<a
href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21.
合并两个有序链表</a>的做法，将两个有序的子链表进行合并。</p></li>
</ul>
<p>上述过程可以通过递归实现。递归的终止条件是链表的节点个数小于或等于
1，即当链表为空或者链表只包含 1
个节点时，不需要对链表进行拆分和排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sortFunc</span>(<span class="params">head: ListNode, tail: ListNode</span>) -&gt; ListNode:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            <span class="keyword">if</span> head.<span class="built_in">next</span> == tail:</span><br><span class="line">                head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            slow = fast = head</span><br><span class="line">            <span class="keyword">while</span> fast != tail:</span><br><span class="line">                slow = slow.<span class="built_in">next</span></span><br><span class="line">                fast = fast.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">if</span> fast != tail: <span class="comment"># 快指针每次多走一步</span></span><br><span class="line">                    fast = fast.<span class="built_in">next</span></span><br><span class="line">            mid = slow</span><br><span class="line">            <span class="keyword">return</span> merge(sortFunc(head, mid), sortFunc(mid, tail))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">head1: ListNode, head2: ListNode</span>) -&gt; ListNode:</span><br><span class="line">            dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">            temp, temp1, temp2 = dummyHead, head1, head2</span><br><span class="line">            <span class="keyword">while</span> temp1 <span class="keyword">and</span> temp2:</span><br><span class="line">                <span class="keyword">if</span> temp1.val &lt;= temp2.val:</span><br><span class="line">                    temp.<span class="built_in">next</span> = temp1</span><br><span class="line">                    temp1 = temp1.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temp.<span class="built_in">next</span> = temp2</span><br><span class="line">                    temp2 = temp2.<span class="built_in">next</span></span><br><span class="line">                temp = temp.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> temp1:</span><br><span class="line">                temp.<span class="built_in">next</span> = temp1</span><br><span class="line">            <span class="keyword">elif</span> temp2:</span><br><span class="line">                temp.<span class="built_in">next</span> = temp2</span><br><span class="line">            <span class="keyword">return</span> dummyHead.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sortFunc(head, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n \log n)\]</span>，其中
n 是链表的长度。</li>
<li>空间复杂度：<span class="math display">\[O(\log n)\]</span>，其中 n
是链表的长度。空间复杂度主要取决于递归调用的栈空间。</li>
</ul>
<h3 id="approach-2-自底向上归并排序">Approach 2: 自底向上归并排序</h3>
<p>使用自底向上的方法实现归并排序，则可以达到 <span
class="math display">\[O(1)\]</span> 的空间复杂度。</p>
<p>首先求得链表的长度 <span
class="math display">\[\textit{length}\]</span>，然后将链表拆分成子链表进行合并。</p>
<p>具体做法如下。</p>
<ul>
<li><p>用 <span class="math display">\[\textit{subLength}\]</span>
表示每次需要排序的子链表的长度，初始时 <span
class="math display">\[\textit{subLength}=1\]</span>。</p></li>
<li><p>每次将链表拆分成若干个长度为 <span
class="math display">\[\textit{subLength}\]</span>
的子链表（最后一个子链表的长度可以小于 <span
class="math display">\[\textit{subLength}\]</span>，按照每两个子链表一组进行合并，合并后即可得到若干个长度为
<span class="math display">\[\textit{subLength} \times 2\]</span>
的有序子链表（最后一个子链表的长度可以小于 <span
class="math display">\[\textit{subLength} \times
2\]</span>）。合并两个子链表仍然使用<a
href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21.
合并两个有序链表</a>的做法。</p></li>
</ul>
<p>将 <span class="math display">\[\textit{subLength}\]</span>
的值加倍，重复第 2
步，对更长的有序子链表进行合并操作，直到有序子链表的长度大于或等于 <span
class="math display">\[\textit{length}\]</span>，整个链表排序完毕。</p>
<p>如何保证每次合并之后得到的子链表都是有序的呢？可以通过数学归纳法证明。</p>
<ul>
<li><p>初始时 <span
class="math display">\[\textit{subLength}=1\]</span>，每个长度为 1
的子链表都是有序的。</p></li>
<li><p>如果每个长度为 <span
class="math display">\[\textit{subLength}\]</span>
的子链表已经有序，合并两个长度为 <span
class="math display">\[\textit{subLength}\]</span>
的有序子链表，得到长度为 <span class="math display">\[\textit{subLength}
\times 2\]</span> 的子链表，一定也是有序的。</p></li>
<li><p>当最后一个子链表的长度小于 <span
class="math display">\[\textit{subLength}\]</span>
时，该子链表也是有序的，合并两个有序子链表之后得到的子链表一定也是有序的。</p></li>
</ul>
<p>因此可以保证最后得到的链表是有序的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">head1: ListNode, head2: ListNode</span>) -&gt; ListNode:</span><br><span class="line">            dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">            temp, temp1, temp2 = dummyHead, head1, head2</span><br><span class="line">            <span class="keyword">while</span> temp1 <span class="keyword">and</span> temp2:</span><br><span class="line">                <span class="keyword">if</span> temp1.val &lt;= temp2.val:</span><br><span class="line">                    temp.<span class="built_in">next</span> = temp1</span><br><span class="line">                    temp1 = temp1.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temp.<span class="built_in">next</span> = temp2</span><br><span class="line">                    temp2 = temp2.<span class="built_in">next</span></span><br><span class="line">                temp = temp.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> temp1:</span><br><span class="line">                temp.<span class="built_in">next</span> = temp1</span><br><span class="line">            <span class="keyword">elif</span> temp2:</span><br><span class="line">                temp.<span class="built_in">next</span> = temp2</span><br><span class="line">            <span class="keyword">return</span> dummyHead.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        dummyHead = ListNode(<span class="number">0</span>, head)</span><br><span class="line">        subLength = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> subLength &lt; length:</span><br><span class="line">            prev, curr = dummyHead, dummyHead.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">while</span> curr:</span><br><span class="line">                head1 = curr</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, subLength):</span><br><span class="line">                    <span class="keyword">if</span> curr.<span class="built_in">next</span>:</span><br><span class="line">                        curr = curr.<span class="built_in">next</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                head2 = curr.<span class="built_in">next</span></span><br><span class="line">                curr.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                curr = head2</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, subLength):</span><br><span class="line">                    <span class="keyword">if</span> curr <span class="keyword">and</span> curr.<span class="built_in">next</span>:</span><br><span class="line">                        curr = curr.<span class="built_in">next</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                succ = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> curr:</span><br><span class="line">                    succ = curr.<span class="built_in">next</span></span><br><span class="line">                    curr.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                </span><br><span class="line">                merged = merge(head1, head2)</span><br><span class="line">                prev.<span class="built_in">next</span> = merged</span><br><span class="line">                <span class="keyword">while</span> prev.<span class="built_in">next</span>:</span><br><span class="line">                    prev = prev.<span class="built_in">next</span></span><br><span class="line">                curr = succ</span><br><span class="line">            subLength &lt;&lt;= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummyHead.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n \log n)\]</span>，其中
n 是链表的长度。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Q25-K 个一组翻转链表-困难-链表</title>
    <url>/2021/04/06/2021-04-06-Q25-K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8-%E5%9B%B0%E9%9A%BE-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="k-个一组翻转链表"><a
href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. K
个一组翻转链表</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p>
<p>k 是一个正整数，它的值小于或等于链表的长度。</p>
<p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p><strong>进阶：</strong></p>
<p>你可以设计一个只使用常数额外空间的算法来解决此问题吗？
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：head = [1,2,3,4,5], k = 2 输出：[2,1,4,3,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：head = [1,2,3,4,5], k = 3 输出：[3,2,1,4,5]</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：head = [1,2,3,4,5], k = 1 输出：[1,2,3,4,5]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>列表中节点的数量在范围 sz 内</li>
<li>1 &lt;= sz &lt;= 5000</li>
<li>0 &lt;= Node.val &lt;= 1000</li>
<li>1 &lt;= k &lt;= sz</li>
</ul>
</blockquote>
<h3 id="approach-1-自顶向下归并排序">Approach 1: 自顶向下归并排序</h3>
<p>思路与算法</p>
<p>本题的目标非常清晰易懂，不涉及复杂的算法，但是实现过程中需要考虑的细节比较多，容易写出冗长的代码。主要考查面试者设计的能力。</p>
<p>我们需要把链表节点按照 k 个一组分组，所以可以使用一个指针 head
依次指向每组的头节点。这个指针每次向前移动 k
步，直至链表结尾。对于每个分组，我们先判断它的长度是否大于等于
k。若是，我们就翻转这部分链表，否则不需要翻转。</p>
<p>接下来的问题就是如何翻转一个分组内的子链表。翻转一个链表并不难，过程可以参考「206.
反转链表」。但是对于一个子链表，除了翻转其本身之外，还需要将子链表的头部与上一个子链表连接，以及子链表的尾部与下一个子链表连接。</p>
<p>因此，在翻转子链表的时候，我们不仅需要子链表头节点 head，还需要有
head 的上一个节点 pre，以便翻转完后把子链表再接回 pre。</p>
<p>但是对于第一个子链表，它的头节点 head 前面是没有节点 pre
的。太麻烦了！难道只能特判了吗？答案是否定的。没有条件，我们就创造条件；没有节点，我们就创建一个节点。我们新建一个节点，把它接到链表的头部，让它作为
pre 的初始值，这样 head
前面就有了一个节点，我们就可以避开链表头部的边界条件。这么做还有一个好处，下面我们会看到。</p>
<p>反复移动指针 head 与 pre，对 head
所指向的子链表进行翻转，直到结尾，我们就得到了答案。下面我们该返回函数值了。</p>
<p>有的同学可能发现这又是一件麻烦事：链表翻转之后，链表的头节点发生了变化，那么应该返回哪个节点呢？照理来说，前
k 个节点翻转之后，链表的头节点应该是第 k
个节点。那么要在遍历过程中记录第 k 个节点吗？但是如果链表里面没有 k
个节点，答案又还是原来的头节点。我们又多了一大堆循环和判断要写，太崩溃了！</p>
<p>等等！还记得我们创建了节点 pre
吗？这个节点一开始被连接到了头节点的前面，而无论之后链表有没有翻转，它的
next
指针都会指向正确的头节点。那么我们只要返回它的下一个节点就好了。至此，问题解决。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 翻转一个子链表，并且返回新的头与尾</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, head: ListNode, tail: ListNode</span>):</span><br><span class="line">        prev = tail.<span class="built_in">next</span></span><br><span class="line">        p = head</span><br><span class="line">        <span class="keyword">while</span> prev != tail:</span><br><span class="line">            nex = p.<span class="built_in">next</span></span><br><span class="line">            p.<span class="built_in">next</span> = prev</span><br><span class="line">            prev = p</span><br><span class="line">            p = nex</span><br><span class="line">        <span class="keyword">return</span> tail, head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head: ListNode, k: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        hair = ListNode(<span class="number">0</span>)</span><br><span class="line">        hair.<span class="built_in">next</span> = head</span><br><span class="line">        pre = hair</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            tail = pre</span><br><span class="line">            <span class="comment"># 查看剩余部分长度是否大于等于 k</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                tail = tail.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> tail:</span><br><span class="line">                    <span class="keyword">return</span> hair.<span class="built_in">next</span></span><br><span class="line">            nex = tail.<span class="built_in">next</span></span><br><span class="line">            head, tail = self.reverse(head, tail)</span><br><span class="line">            <span class="comment"># 把子链表重新接回原链表</span></span><br><span class="line">            pre.<span class="built_in">next</span> = head</span><br><span class="line">            tail.<span class="built_in">next</span> = nex</span><br><span class="line">            pre = tail</span><br><span class="line">            head = tail.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hair.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(n)，其中 n 为链表的长度。head 指针会在 <span
class="math display">\[O(\lfloor \frac{n}{k}
\rfloor)\]</span>个节点上停留，每次停留需要进行一次 O(k)
的翻转操作。</p>
<p>空间复杂度：O(1)，我们只需要建立常数个变量。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Linked List</tag>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>Q145-二叉树的后序遍历-中等-树</title>
    <url>/2021/04/08/2021-04-08-Q145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="二叉树的后序遍历"><a
href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145.
二叉树的后序遍历</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: [1,null,2,3]</p>
<p>1<br />
2 / 3</p>
<p>输出: [3,2,1]</p>
</blockquote>
<blockquote>
<p><strong>进阶：</strong>
递归算法很简单，你可以通过迭代算法完成吗？</p>
</blockquote>
<h3 id="approach-1-递归">Approach 1: 递归</h3>
<p>思路与算法</p>
<p>首先我们需要了解什么是二叉树的后序遍历：按照访问左子树——右子树——根节点的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。</p>
<p>定义 postorder(root) 表示当前遍历到 root
节点的答案。按照定义，我们只要递归调用 postorder(root-&gt;left) 来遍历
root 节点的左子树，然后递归调用 postorder(root-&gt;right) 来遍历 root
节点的右子树，最后将 root
节点的值加入答案即可，递归终止的条件为碰到空节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            postorder(root.left)</span><br><span class="line">            postorder(root.right)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">        </span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        postorder(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(n)，其中 n
是二叉搜索树的节点数。每一个节点恰好被遍历一次。</p></li>
<li><p>空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 <span
class="math display">\[O(\log n)\]</span>，最坏情况下树呈现链状，为
O(n)。</p></li>
</ul>
<h3 id="approach-2-迭代">Approach 2: 迭代</h3>
<p>我们也可以用迭代的方式实现方法一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        stack = <span class="built_in">list</span>()</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> root <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.right <span class="keyword">or</span> root.right == prev:</span><br><span class="line">                res.append(root.val)</span><br><span class="line">                prev = root</span><br><span class="line">                root = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是二叉树的节点数。每一个节点恰好被遍历一次。</li>
<li>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为
O(logn)，最坏情况下树呈现链状，为 O(n)。</li>
</ul>
<h3 id="approach-3-morris-遍历">Approach 3: Morris 遍历</h3>
<p>有一种巧妙的方法可以在线性时间内，只占用常数空间来实现后序遍历。这种方法由
J. H. Morris 在 1979 年的论文「Traversing Binary Trees Simply and
Cheaply」中首次提出，因此被称为 Morris 遍历。</p>
<p>Morris
遍历的核心思想是利用树的大量空闲指针，实现空间开销的极限缩减。其后序遍历规则总结如下：</p>
<ul>
<li>新建临时节点，令该节点为 root；</li>
<li>如果当前节点的左子节点为空，则遍历当前节点的右子节点；</li>
<li>如果当前节点的左子节点不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点；
<ul>
<li>如果前驱节点的右子节点为空，将前驱节点的右子节点设置为当前节点，当前节点更新为当前节点的左子节点。</li>
<li>如果前驱节点的右子节点为当前节点，将它的右子节点重新设为空。倒序输出从当前节点的左子节点到该前驱节点这条路径上的所有节点。当前节点更新为当前节点的右子节点。</li>
</ul></li>
<li>重复步骤 2 和步骤 3，直到遍历结束。</li>
</ul>
<p>这样我们利用 Morris
遍历的方法，后序遍历该二叉搜索树，即可实现线性时间与常数空间的遍历。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">addPath</span>(<span class="params">node: TreeNode</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                res.append(node.val)</span><br><span class="line">                node = node.right</span><br><span class="line">            i, j = <span class="built_in">len</span>(res) - count, <span class="built_in">len</span>(res) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                res[i], res[j] = res[j], res[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        p1 = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p1:</span><br><span class="line">            p2 = p1.left</span><br><span class="line">            <span class="keyword">if</span> p2:</span><br><span class="line">                <span class="keyword">while</span> p2.right <span class="keyword">and</span> p2.right != p1:</span><br><span class="line">                    p2 = p2.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p2.right:</span><br><span class="line">                    p2.right = p1</span><br><span class="line">                    p1 = p1.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p2.right = <span class="literal">None</span></span><br><span class="line">                    addPath(p1.left)</span><br><span class="line">            p1 = p1.right</span><br><span class="line">        </span><br><span class="line">        addPath(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是二叉树的节点数。没有左子树的节点只被访问一次，有左子树的节点被访问两次。</li>
<li>空间复杂度：O(1)。只操作已经存在的指针（树的空闲指针），因此只需要常数的额外空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 55-二叉树的深度-I-简单-树</title>
    <url>/2021/04/09/2021-04-09-JZOffer%2055-I-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6-%E7%AE%80%E5%8D%95-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="剑指-offer-55---i.-二叉树的深度"><a
href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/">剑指
Offer 55 - I. 二叉树的深度</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>
<p>例如：</p>
<p>给定二叉树 [3,9,20,null,null,15,7]，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 3</span><br><span class="line">/ \</span><br><span class="line">9  20</span><br><span class="line"> /  \</span><br><span class="line">15   7</span><br></pre></td></tr></table></figure>
<p>返回它的最大深度 3 。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>节点总数 &lt;= 10000</code></li>
</ul>
</blockquote>
<p>注意：本题与主站 104
题相同：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</p>
<h3 id="section"></h3>
<p>树的遍历方式总体分为两类：深度优先搜索（DFS）、广度优先搜索（BFS）；</p>
<ul>
<li>常见的 DFS ： 先序遍历、中序遍历、后序遍历；</li>
<li>常见的 BFS ： 层序遍历（即按层遍历）。</li>
</ul>
<p>求树的深度需要遍历树的所有节点，本文将介绍基于
<strong>后序遍历（DFS）</strong> 和 <strong>层序遍历（BFS）</strong>
的两种解法。</p>
<h2 id="approach-1-后序遍历dfs">Approach 1: 后序遍历（DFS）</h2>
<ul>
<li>树的后序遍历 / 深度优先搜索往往利用 递归 或 栈
实现，本文使用递归实现。</li>
<li>关键点：
此树的深度和其左（右）子树的深度之间的关系。显然，此树的深度 等于
左子树的深度 与 右子树的深度 中的 最大值 +1+1 。</li>
</ul>
<p>算法解析：</p>
<ul>
<li>终止条件： 当 root 为空，说明已越过叶节点，因此返回 深度 00 。</li>
<li>递推工作： 本质上是对树做后序遍历。
<ul>
<li>计算节点 root 的 左子树的深度 ，即调用 maxDepth(root.left)；</li>
<li>计算节点 root 的 右子树的深度 ，即调用 maxDepth(root.right)；</li>
</ul></li>
<li>返回值： 返回 此树的深度 ，即 max(maxDepth(root.left),
maxDepth(root.right)) + 1。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(self.maxDepth(root.left), self.maxDepth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： N
为树的节点数量，计算树的深度需要遍历所有节点。</li>
<li>空间复杂度 O(N) ： 最差情况下（当树退化为链表时），递归深度可达到 N
。</li>
</ul>
<h2 id="方法二层序遍历bfs">方法二：层序遍历（BFS）</h2>
<ul>
<li><p>树的层序遍历 / 广度优先搜索往往利用 队列 实现。</p></li>
<li><p>关键点： 每遍历一层，则计数器 +1+1
，直到遍历完成，则可得到树的深度。</p></li>
</ul>
<p><strong>算法解析：</strong></p>
<ul>
<li><strong>特例处理</strong>： 当 root 为空，直接返回 深度 00 。</li>
<li><strong>初始化</strong>： 队列 queue （加入根节点 root ），计数器
res = 0。</li>
<li><strong>循环遍历</strong>： 当 queue 为空时跳出。
<ul>
<li>初始化一个空列表 tmp ，用于临时存储下一层节点；</li>
<li>遍历队列： 遍历 queue 中的各节点 node ，并将其左子节点和右子节点加入
tmp；</li>
<li>更新队列： 执行 queue = tmp ，将下一层节点赋值给 queue；</li>
<li>统计层数： 执行 res += 1 ，代表层数加 1；</li>
</ul></li>
<li><strong>返回值</strong>： 返回 res 即可。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        queue, res = [root], <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> queue:</span><br><span class="line">                <span class="keyword">if</span> node.left: tmp.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right: tmp.append(node.right)</span><br><span class="line">            queue = tmp</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N) ： N
为树的节点数量，计算树的深度需要遍历所有节点。</li>
<li>空间复杂度 O(N) ： 最差情况下（当树平衡时），队列 queue 同时存储 N/2
个节点。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Q144-二叉树的前序遍历-中等-树</title>
    <url>/2021/04/07/2021-04-07-Q144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="二叉树的前序遍历"><a
href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144.
二叉树的前序遍历</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你二叉树的根节点 <code>root</code> ，返回它节点值的
<strong>前序</strong> 遍历。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：root = [1,null,2,3] 输出：[1,2,3]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：root = [] 输出：[]</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 [0, 100] 内</li>
<li>-100 &lt;= Node.val &lt;= 100</li>
</ul>
</blockquote>
<blockquote>
<p><strong>进阶：</strong>
递归算法很简单，你可以通过迭代算法完成吗？</p>
</blockquote>
<h3 id="approach-1-递归">Approach 1: 递归</h3>
<p><strong>思路与算法</strong></p>
<p>首先我们需要了解什么是二叉树的前序遍历：按照访问根节点——左子树——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。</p>
<p>定义 preorder(root) 表示当前遍历到 root
节点的答案。按照定义，我们只要首先将 root 节点的值加入答案，然后递归调用
preorder(root.left) 来遍历 root 节点的左子树，最后递归调用
preorder(root.right) 来遍历 root
节点的右子树即可，递归终止的条件为碰到空节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            res.append(root.val)</span><br><span class="line">            preorder(root.left)</span><br><span class="line">            preorder(root.right)</span><br><span class="line">        </span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        preorder(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 n
是二叉树的节点数。每一个节点恰好被遍历一次。</li>
<li>空间复杂度：<span
class="math display">\[O(n)\]</span>，为递归过程中栈的开销，平均情况下为
<span class="math display">\[O(\log
n)\]</span>，最坏情况下树呈现链状，为 <span
class="math display">\[O(n)\]</span>。</li>
</ul>
<h3 id="approach-2-迭代">Approach 2: 迭代</h3>
<p>我们也可以用迭代的方式实现方法一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是二叉树的节点数。每一个节点恰好被遍历一次。</li>
<li>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为
O(logn)，最坏情况下树呈现链状，为 O(n)。</li>
</ul>
<h3 id="approach-3-morris-遍历">Approach 3: Morris 遍历</h3>
<p>有一种巧妙的方法可以在线性时间内，只占用常数空间来实现前序遍历。这种方法由
J. H. Morris 在 1979 年的论文「Traversing Binary Trees Simply and
Cheaply」中首次提出，因此被称为 Morris 遍历。</p>
<p>Morris
遍历的核心思想是利用树的大量空闲指针，实现空间开销的极限缩减。其前序遍历规则总结如下：</p>
<ul>
<li><p>新建临时节点，令该节点为 root；</p></li>
<li><p>如果当前节点的左子节点为空，将当前节点加入答案，并遍历当前节点的右子节点；</p></li>
<li><p>如果当前节点的左子节点不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点：</p>
<ul>
<li>如果前驱节点的右子节点为空，将前驱节点的右子节点设置为当前节点。然后将当前节点加入答案，并将前驱节点的右子节点更新为当前节点。当前节点更新为当前节点的左子节点。</li>
<li>如果前驱节点的右子节点为当前节点，将它的右子节点重新设为空。当前节点更新为当前节点的右子节点。</li>
</ul></li>
<li><p>重复步骤 2 和步骤 3，直到遍历结束。</p></li>
</ul>
<p>这样我们利用 Morris
遍历的方法，前序遍历该二叉树，即可实现线性时间与常数空间的遍历。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        p1 = root</span><br><span class="line">        <span class="keyword">while</span> p1:</span><br><span class="line">            p2 = p1.left</span><br><span class="line">            <span class="keyword">if</span> p2:</span><br><span class="line">                <span class="keyword">while</span> p2.right <span class="keyword">and</span> p2.right != p1:</span><br><span class="line">                    p2 = p2.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p2.right:</span><br><span class="line">                    res.append(p1.val)</span><br><span class="line">                    p2.right = p1</span><br><span class="line">                    p1 = p1.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p2.right = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(p1.val)</span><br><span class="line">            p1 = p1.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
是二叉树的节点数。没有左子树的节点只被访问一次，有左子树的节点被访问两次。</li>
<li>空间复杂度：O(1)。只操作已经存在的指针（树的空闲指针），因此只需要常数的额外空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 55-平衡二叉树-II-简单-树</title>
    <url>/2021/04/14/2021-04-14-JZOffer%2055-II-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%AE%80%E5%8D%95-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="剑指-offer-55---ii.-平衡二叉树"><a
href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">剑指
Offer 55 - II. 平衡二叉树</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">/ \</span><br><span class="line">9  20</span><br><span class="line"> /  \</span><br><span class="line">15   7</span><br></pre></td></tr></table></figure>
<p>返回 <code>true</code> 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      1</span><br><span class="line">     / \</span><br><span class="line">    2   2</span><br><span class="line">   / \</span><br><span class="line">  3   3</span><br><span class="line"> / \</span><br><span class="line">4   4</span><br></pre></td></tr></table></figure>
<p>返回 <code>false</code> 。</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= 树的结点个数 &lt;= 10000</code></li>
</ul>
</blockquote>
<p>注意：本题与主站 110
题相同：https://leetcode-cn.com/problems/balanced-binary-tree/</p>
<p>以下两种方法均基于以下性质推出： <strong>此树的深度</strong> 等于
<strong>左子树的深度</strong> 与 <strong>右子树的深度</strong> 中的
<strong>最大值</strong> +1+1 。</p>
<h2 id="approach-1-后序遍历-剪枝-从底至顶">Approach 1: 后序遍历 + 剪枝
（从底至顶）</h2>
<blockquote>
<p>此方法为本题的最优解法，但剪枝的方法不易第一时间想到。</p>
</blockquote>
<p>思路是对二叉树做后序遍历，从底至顶返回子树深度，若判定某子树不是平衡树则
“剪枝” ，直接向上返回。</p>
<p><strong>算法流程：</strong> recur(root) 函数：</p>
<ul>
<li><p><strong>返回值：</strong></p>
<ul>
<li>当节点root 左 / 右子树的深度差 <span class="math display">\[\leq
1\]</span> ：则返回当前子树的深度，即节点 root 的左 / 右子树的深度最大值
+1 （ max(left, right) + 1 ）；</li>
<li>当节点root 左 / 右子树的深度差 &gt; 2 ：则返回 -1 ，代表
此子树不是平衡树 。</li>
</ul></li>
<li><p><strong>终止条件：</strong></p>
<ul>
<li><p>当 root 为空：说明越过叶节点，因此返回高度 0 ；</p></li>
<li><p>当左（右）子树深度为 -1 ：代表此树的
左（右）子树不是平衡树，因此剪枝，直接返回 -1 ；</p></li>
</ul></li>
</ul>
<p>isBalanced(root) 函数：</p>
<ul>
<li><strong>返回值</strong>： 若 recur(root) != -1
，则说明此树平衡，返回 true ； 否则返回 false 。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isBalanced</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            left = recur(root.left)</span><br><span class="line">            <span class="keyword">if</span> left == -<span class="number">1</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            right = recur(root.right)</span><br><span class="line">            <span class="keyword">if</span> right == -<span class="number">1</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span> <span class="keyword">if</span> <span class="built_in">abs</span>(left - right) &lt;= <span class="number">1</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> recur(root) != -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： N
为树的节点数；最差情况下，需要递归遍历树的所有节点。</li>
<li>空间复杂度 O(N)： 最差情况下（树退化为链表时），系统递归需要使用
O(N) 的栈空间。</li>
</ul>
<h2 id="方法二先序遍历-判断深度-从顶至底">方法二：先序遍历 + 判断深度
（从顶至底）</h2>
<blockquote>
<p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p>
</blockquote>
<p>思路是构造一个获取当前子树的深度的函数 depth(root) （即 <a
href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/solution/mian-shi-ti-55-i-er-cha-shu-de-shen-du-xian-xu-bia/">面试题55
- I. 二叉树的深度</a>），通过比较某子树的左右子树的深度差
abs(depth(root.left) - depth(root.right)) &lt;= 1
是否成立，来判断某子树是否是二叉平衡树。若所有子树都平衡，则此树平衡。</p>
<p><strong>算法流程</strong>： isBalanced(root) 函数： 判断树 root
是否平衡</p>
<ul>
<li><strong>特例处理</strong>： 若树根节点 root 为空，则直接返回
truetrue ；</li>
<li><strong>返回值</strong>：
所有子树都需要满足平衡树性质，因此以下三者使用与逻辑
&amp;&amp;&amp;&amp; 连接;
<ul>
<li>abs(self.depth(root.left) - self.depth(root.right)) &lt;= 1 ：判断
当前子树 是否是平衡树；</li>
<li>self.isBalanced(root.left) ： 先序遍历递归，判断 当前子树的左子树
是否是平衡树；</li>
<li>self.isBalanced(root.right) ： 先序遍历递归，判断 当前子树的右子树
是否是平衡树；</li>
</ul></li>
</ul>
<p>depth(root) 函数： 计算树 root 的深度</p>
<ul>
<li><strong>终止条件</strong>： 当 root 为空，即越过叶子节点，则返回高度
0 ；</li>
<li><strong>返回值</strong>： 返回左 / 右子树的深度的最大值 +1 。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isBalanced</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(self.depth(root.left) - self.depth(root.right)) &lt;= <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(self.depth(root.left), self.depth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度 O(N) ：O(NlogN)： 最差情况下（为 “满二叉树” 时），
isBalanced(root) 遍历树所有节点，判断每个节点的深度 depth(root) 需要遍历
各子树的所有节点 。</p>
<ul>
<li><p>满二叉树高度的复杂度 O(log N) ，将满二叉树按层分为 log (N+1) 层；
通过调用 depth(root)
，判断二叉树各层的节点的对应子树的深度，需遍历节点数量为 <span
class="math display">\[N \times 1, \frac{N-1}{2} \times 2, \frac{N-3}{4}
\times 4, \frac{N-7}{8} \times 8, ..., 1 \times
\frac{N+1}{2}\]</span>。因此各层执行 depth(root) 的时间复杂度为
O(N)（每层开始，最多遍历 N 个节点，最少遍历 ￥￥<span
class="math display">\[\frac{N+1}{2} \]</span> 个节点）。</p></li>
<li><blockquote>
<p>其中，<span class="math display">\[\frac{N-3}{4} \times 4 \]</span>
代表从此层开始总共需遍历 N-3 个节点，此层共有 44
个节点，因此每个子树需遍历 <span class="math display">\[\frac{N-3}{4}
\]</span>个节点。</p>
</blockquote>
<p>因此，总体时间复杂度 = 每层执行复杂度 <span
class="math display">\[\times\]</span> 层数复杂度 = <span
class="math display">\[O(N \times log N)\]</span>。</p></li>
</ul></li>
<li><p>空间复杂度 O(N)：最差情况下（树退化为链表时），系统递归需要使用
O<em>(</em>N*) 的栈空间。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 28-对称的二叉树-简单-树</title>
    <url>/2021/04/15/2021-04-15-JZOffer%2028-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%AE%80%E5%8D%95-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="剑指-offer-28.-对称的二叉树"><a
href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指
Offer 28. 对称的二叉树</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>
</blockquote>
<blockquote>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>
<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：root = [1,2,2,3,4,4,3] 输出：true</p>
</blockquote>
<blockquote>
<p>Example 2:</p>
<p>输入：root = [1,2,2,null,3,null,3] 输出：false</p>
</blockquote>
<blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;= 节点个数 &lt;= 1000</li>
</ul>
</blockquote>
<p>注意：本题与主站 101
题相同：https://leetcode-cn.com/problems/symmetric-tree/</p>
<h2 id="approach-1-遍历">Approach 1: 遍历</h2>
<ul>
<li><p>对称二叉树定义： 对于树中 任意两个对称节点 LL 和 RR
，一定有：</p>
<ul>
<li>L.val = R.val：即此两对称节点值相等。</li>
<li>L.left.val = R.right.val ：即 LL 的 左子节点 和 RR 的 右子节点
对称；</li>
<li>L.right.val = R.left.val ：即 LL 的 右子节点 和 RR 的 左子节点
对称。</li>
</ul></li>
<li><p>根据以上规律，考虑从顶至底递归，判断每对节点是否对称，从而判断树是否为对称二叉树。</p></li>
<li><p>算法流程： isSymmetric(root) ：</p>
<ul>
<li><strong>特例处理</strong>： 若根节点 root 为空，则直接返回 true
。</li>
<li><strong>返回值</strong>： 即 recur(root.left, root.right) ;</li>
</ul></li>
</ul>
<p>recur(L, R) ：</p>
<ul>
<li><strong>终止条件</strong>：
<ul>
<li>当 L 和 R 同时越过叶节点： 此树从顶至底的节点都对称，因此返回 true
；</li>
<li>当 L 或 R 中只有一个越过叶节点： 此树不对称，因此返回 false ；</li>
<li>当节点 L 值 <span class="math display">\[\ne \]</span> 节点 R 值：
此树不对称，因此返回 false ；</li>
</ul></li>
<li><strong>递推工作</strong>：
<ul>
<li>判断两节点 L.left 和 R.right 是否对称，即 recur(L.left, R.right)
；</li>
<li>判断两节点 L.right 和 R.left 是否对称，即 recur(L.right, R.left)
；</li>
</ul></li>
<li><strong>返回值</strong>：
两对节点都对称时，才是对称树，因此用与逻辑符 &amp;&amp; 连接。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSymmetric</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">L, R</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> L <span class="keyword">and</span> <span class="keyword">not</span> R: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> L <span class="keyword">or</span> <span class="keyword">not</span> R <span class="keyword">or</span> L.val != R.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> recur(L.left, R.right) <span class="keyword">and</span> recur(L.right, R.left)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> recur(root.left, root.right) <span class="keyword">if</span> root <span class="keyword">else</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N)： 其中 N 为二叉树的节点数量，每次执行 recur()
可以判断一对节点是否对称，因此最多调用 N/2次 recur() 方法。</li>
<li>空间复杂度 O(N) ： 最差情况下（见下图），二叉树退化为链表，系统使用
O(N)大小的栈空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Q94-二叉树的中序遍历-中等-树</title>
    <url>/2021/04/19/2021-04-19-Q94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="二叉树的中序遍历"><a
href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94.
二叉树的中序遍历</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个二叉树的根节点 <code>root</code> ，返回它的
<strong>中序</strong> 遍历。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：root = [1,null,2,3] 输出：[1,3,2]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：root = [1,null,2] 输出：[1,2]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
</blockquote>
<blockquote>
<p><strong>进阶：</strong>
递归算法很简单，你可以通过迭代算法完成吗？</p>
</blockquote>
<h3 id="approach-1-递归">Approach 1: 递归</h3>
<p>思路与算法</p>
<p>首先我们需要了解什么是二叉树的中序遍历：按照访问左子树——根节点——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。</p>
<p>定义 inorder(root) 表示当前遍历到 <span
class="math display">\[\textit{root}\]</span>节点的答案，那么按照定义，我们只要递归调用
inorder(root.left) 来遍历 <span
class="math display">\[\textit{root}\]</span> 节点的左子树，然后将 <span
class="math display">\[\textit{root}\]</span>
节点的值加入答案，再递归调用inorder(root.right) 来遍历 <span
class="math display">\[\textit{root}\]</span>
节点的右子树即可，递归终止的条件为碰到空节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            inorder(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            inorder(root.right)</span><br><span class="line">        res=<span class="built_in">list</span>()</span><br><span class="line">        inorder(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次</li>
<li>空间复杂度：O(n)。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到
O(n) 的级别。</li>
<li></li>
</ul>
<h3 id="approach-2-迭代">Approach 2: 迭代</h3>
<p>思路与算法</p>
<p>方法一的递归函数我们也可以用迭代的方式实现，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其他都相同，具体实现可以看下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        p1 = root</span><br><span class="line">        <span class="keyword">while</span> p1:</span><br><span class="line">            p2 = p1.left</span><br><span class="line">            <span class="keyword">if</span> p2:</span><br><span class="line">                <span class="keyword">while</span> p2.right <span class="keyword">and</span> p2.right != p1:</span><br><span class="line">                    p2 = p2.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p2.right:</span><br><span class="line">                    p2.right = p1</span><br><span class="line">                    p1 = p1.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append(p1.val)</span><br><span class="line">                    p2.right = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(p1.val)</span><br><span class="line">            p1 = p1.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n
为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</li>
<li>空间复杂度：O(n)。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到
O(n) 的级别。</li>
</ul>
<h3 id="approach-3-morris-遍历">Approach 3: Morris 遍历</h3>
<p>思路与算法</p>
<p>Morris
遍历算法是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为
O(1)。</p>
<p>Morris 遍历算法整体步骤如下（假设当前遍历到的节点为 x）：</p>
<ul>
<li>如果 x 无左孩子，先将 x 的值加入答案数组，再访问 x 的右孩子，即
<span class="math display">\[x = x.\textit{right}\]</span>。</li>
<li>如果 x 有左孩子，则找到 x
左子树上最右的节点（即左子树中序遍历的最后一个节点，x
在中序遍历中的前驱节点），我们记为 <span
class="math display">\[p2\]</span>。根据 <span
class="math display">\[\textit{p2}\]</span>
的右孩子是否为空，进行如下操作。
<ul>
<li>如果 <span class="math display">\[\textit{p2}\]</span>
的右孩子为空，则将其右孩子指向 x，然后访问 x 的左孩子，即 <span
class="math display">\[x = x.\textit{left}\]</span></li>
<li>如果 <span class="math display">\[\textit{p2}\]</span>
的右孩子不为空，则此时其右孩子指向 x，说明我们已经遍历完 x
的左子树，我们将 <span class="math display">\[\textit{p2}\]</span>
的右孩子置空，将 x 的值加入答案数组，然后访问 x 的右孩子，即 <span
class="math display">\[x = x.\textit{right}\]</span>。</li>
</ul></li>
<li>重复上述操作，直至访问完整棵树。</li>
</ul>
<p>其实整个过程我们就多做一步：假设当前遍历到的节点为 x，将 x
的左子树中最右边的节点的右孩子指向
x，这样在左子树遍历完成后我们通过这个指向走回了
x，且能通过这个指向知晓我们已经遍历完成了左子树，而不用再通过栈来维护，省去了栈的空间复杂度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        p1 = root</span><br><span class="line">        <span class="keyword">while</span> p1:</span><br><span class="line">            p2 = p1.left</span><br><span class="line">            <span class="keyword">if</span> p2:</span><br><span class="line">                <span class="keyword">while</span> p2.right <span class="keyword">and</span> p2.right != p1:</span><br><span class="line">                    p2 = p2.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p2.right:</span><br><span class="line">                    </span><br><span class="line">                    p2.right = p1</span><br><span class="line">                    p1 = p1.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append(p1.val)</span><br><span class="line">                    p2.right = <span class="literal">None</span></span><br><span class="line">                    p1 = p1.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(p1.val)</span><br><span class="line">                p1 = p1.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 nn 为二叉搜索树的节点个数。Morris
遍历中每个节点会被访问两次，因此总时间复杂度为 <span
class="math display">\[O(2n)=O(n)\]</span>。</li>
<li>空间复杂度：O(1)。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Q236-二叉树的最近公共祖先-中等-树</title>
    <url>/2021/04/20/2021-04-20-Q236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="二叉树的最近公共祖先"><a
href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236.
二叉树的最近公共祖先</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点
p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x
的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 输出：5
解释：节点 5 和节点 4 的最近公共祖先是节点 5
。因为根据定义最近公共祖先节点可以为节点本身。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>树中节点数目在范围 [2, 105] 内。</li>
<li>-109 &lt;= Node.val &lt;= 109</li>
<li>所有 Node.val 互不相同 。</li>
<li>p != q</li>
<li>p 和 q 均存在于给定的二叉树中。</li>
</ul>
</blockquote>
<h3 id="apporach-1-直接递归方法">Apporach 1: 直接递归方法</h3>
<p>对每个结点的 left / right 两个子节点递归判断是否包含 p 和 q</p>
<ul>
<li>当 left 和 right 同时为空 ：说明 root 的左 / 右子树中都不包含 p,q
，返回 null ；</li>
<li>当 left 和 right 同时不为空 ：说明 p, q 分列在 root 的 异侧 （分别在
左 / 右子树），因此 root 为最近公共祖先，返回 root ；</li>
<li>当 left 为空 ，right 不为空 ：p,q 都不在 root 的左子树中，直接返回
right 。具体可分为两种情况：
<ul>
<li>p,q 其中一个在 root 的 右子树 中，此时 right 指向 p（假设为 p
）；</li>
<li>p,q 两节点都在 root 的 右子树 中，此时的 right 指向 最近公共祖先节点
；</li>
</ul></li>
<li>当 left 不为空 ， right 为空 ：与情况 3. 同理；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; <span class="string">&#x27;TreeNode&#x27;</span>:     </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root == p <span class="keyword">or</span> root == q: <span class="keyword">return</span> root</span><br><span class="line">        left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left: <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right: <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N) ： 其中 N
为二叉树节点数；最差情况下，需要递归遍历树的所有节点.</li>
<li>空间复杂度 O(N) ： 最差情况下，递归深度达到 N，系统使用 O(N)
大小的额外空间。</li>
</ul>
<h3 id="approach-2-递归">Approach 2: 递归</h3>
<p>我们递归遍历整棵二叉树，定义 <span
class="math display">\[f_x\]</span> 表示 x 节点的子树中是否包含 p 节点或
q 节点，如果包含为 true，否则为 false。那么符合条件的最近公共祖先 x
一定满足如下条件：</p>
<p><span class="math display">\[(f_{\text{lson}}\ \&amp;\&amp;\
f_{\text{rson}})\ ||\ ((x\ =\ p\ ||\ x\ =\ q)\ \&amp;\&amp;\
(f_{\text{lson}}\ ||\ f_{\text{rson}}))\]</span> 其中 <span
class="math display">\[\text{lson}\]</span> 和 <span
class="math display">\[\text{rson}\]</span> 分别代表 x
节点的左孩子和右孩子。初看可能会感觉条件判断有点复杂，我们来一条条看，<span
class="math display">\[f_{\text{lson}}\ \&amp;\&amp;\
f_{\text{rson}}\]</span> 说明左子树和右子树均包含 p 节点或 q
节点，如果左子树包含的是 p 节点，那么右子树只能包含 q
节点，反之亦然，因为 p 节点和 q
节点都是不同且唯一的节点，因此如果满足这个判断条件即可说明 x
就是我们要找的最近公共祖先。再来看第二条判断条件，这个判断条件即是考虑了
x 恰好是 p 节点或 q
节点且它的左子树或右子树有一个包含了另一个节点的情况，因此如果满足这个判断条件亦可说明
xx 就是我们要找的最近公共祖先。</p>
<p>你可能会疑惑这样找出来的公共祖先深度是否是最大的。其实是最大的，因为我们是自底向上从叶子节点开始更新的，所以在所有满足条件的公共祖先中一定是深度最大的祖先先被访问到，且由于
<span
class="math display">\[f_x\]</span>本身的定义很巧妙，在找到最近公共祖先
x 以后，<span class="math display">\[f_x\]</span> 按定义被设置为 true
，即假定了这个子树中只有一个 p 节点或 q
节点，因此其他公共祖先不会再被判断为符合条件。</p>
<p>下图展示了一个示例，搜索树中两个节点 9 和 11 的最近公共祖先。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* ans;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> lson = <span class="built_in">dfs</span>(root-&gt;left, p, q);</span><br><span class="line">        <span class="type">bool</span> rson = <span class="built_in">dfs</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span> ((lson &amp;&amp; rson) || ((root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) &amp;&amp; (lson || rson))) &#123;</span><br><span class="line">            ans = root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> lson || rson || (root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;        </span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(N)，其中 N
是二叉树的节点数。二叉树的所有节点有且只会被访问一次，因此时间复杂度为
O(N)。</p></li>
<li><p>空间复杂度：O(N) ，其中 N
是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为
N，因此空间复杂度为 O(N)。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 34-二叉树中和为某一值的路径-中等-树</title>
    <url>/2021/04/21/2021-04-21-JZOffer%2034-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="jzoffer-34.-二叉树中和为某一值的路径"><a
href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">JZOffer
34. 二叉树中和为某一值的路径</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：给定如下二叉树，以及目标和 <code>target = 22</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     / \</span><br><span class="line">    4   8</span><br><span class="line">   /   / \</span><br><span class="line">  11  13  4</span><br><span class="line"> /  \    / \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>节点总数 &lt;= 10000</code></li>
<li>注意：本题与主站 113
题相同：https://leetcode-cn.com/problems/path-sum-ii/</li>
</ul>
</blockquote>
<h3 id="approach-1-先序遍历">Approach 1: 先序遍历</h3>
<p>本问题是典型的二叉树方案搜索问题，使用回溯法解决，其包含
<strong>先序遍历 + 路径记录</strong> 两部分。</p>
<p><strong>算法流程：</strong> pathSum(root, sum) 函数：</p>
<ul>
<li>初始化： 结果列表 res ，路径列表 path 。</li>
<li>返回值： 返回 res 即可。</li>
</ul>
<p>recur(root, tar) 函数：</p>
<ul>
<li>递推参数： 当前节点 root ，当前目标值 tar 。</li>
<li>终止条件： 若节点 root 为空，则直接返回。</li>
<li>递推工作：
<ul>
<li>路径更新： 将当前节点值 root.val 加入路径 path ；</li>
<li>目标值更新： tar = tar - root.val（即目标值 tar 从 sum 减至 00
）；</li>
<li>路径记录： 当 ① root 为叶节点 且 ② 路径和等于目标值 ，则将此路径
path 加入 res 。</li>
<li>先序遍历： 递归左 / 右子节点。</li>
<li>路径恢复： 向上回溯前，需要将当前节点从路径 path 中删除，即执行
path.pop() 。</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pathSum</span>(<span class="params">self, root: TreeNode, <span class="built_in">sum</span>: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        res, path = [], []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">root, tar</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">            path.append(root.val)</span><br><span class="line">            tar -= root.val</span><br><span class="line">            <span class="keyword">if</span> tar == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                res.append(<span class="built_in">list</span>(path))</span><br><span class="line">            recur(root.left, tar)</span><br><span class="line">            recur(root.right, tar)</span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line">        recur(root, <span class="built_in">sum</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度 O(N) ： N
为二叉树的节点数，先序遍历需要遍历所有节点。</li>
<li>空间复杂度 O(N) ： 最差情况下，即树退化为链表时，path
存储所有树节点，使用 O(N) 额外空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Q938-二叉搜索树的范围和-简单-树</title>
    <url>/2021/04/27/2021-04-27-Q938-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C-%E7%AE%80%E5%8D%95-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="二叉搜索树的范围和"><a
href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.
二叉搜索树的范围和</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定二叉搜索树的根结点 <code>root</code>，返回值位于范围
<em><code>[low, high]</code></em> 之间的所有结点的值的和。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：root = [10,5,15,3,7,null,18], low = 7, high = 15 输出：32</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
输出：23</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>树中节点数目在范围 [1, 2 * 104] 内</li>
<li>1 &lt;= Node.val &lt;= 10^5</li>
<li>1 &lt;= low &lt;= high &lt;= 10^5</li>
<li>所有 Node.val 互不相同</li>
</ul>
</blockquote>
<h3 id="apporach-1-深度优先搜索">Apporach 1: 深度优先搜索</h3>
<ul>
<li><p>按深度优先搜索的顺序计算范围和。记当前子树根节点为
root，分以下四种情况讨论：</p>
<ul>
<li><p><span class="math display">\[\textit{root}\]</span> 节点为空</p>
<p>返回 0。</p></li>
<li><p><span class="math display">\[\textit{root}\]</span> 节点的值大于
<span class="math display">\[\textit{high}\]</span></p>
<p>由于二叉搜索树右子树上所有节点的值均大于根节点的值，即均大于 <span
class="math display">\[\textit{high}\]</span>，故无需考虑右子树，返回左子树的范围和。</p></li>
<li><p><span class="math display">\[\textit{root}\]</span>
节点的值小于<span class="math display">\[ \textit{low}\]</span></p>
<p>由于二叉搜索树左子树上所有节点的值均小于根节点的值，即均小于 <span
class="math display">\[\textit{low}\]</span>，故无需考虑左子树，返回右子树的范围和。</p></li>
<li><p><span class="math display">\[\textit{root}\]</span> 节点的值在
<span class="math display">\[[\textit{low},\textit{high}]\]</span>
范围内</p>
<p>此时应返回 <span class="math display">\[\textit{root}\]</span>
节点的值、左子树的范围和、右子树的范围和这三者之和。</p></li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeSumBST</span>(<span class="params">self, root: TreeNode, low: <span class="built_in">int</span>, high: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.val &gt; high:</span><br><span class="line">            <span class="keyword">return</span> self.rangeSumBST(root.left, low, high)</span><br><span class="line">        <span class="keyword">if</span> root.val &lt; low:</span><br><span class="line">            <span class="keyword">return</span> self.rangeSumBST(root.right, low, high)</span><br><span class="line">        <span class="keyword">return</span> root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n<em>n</em> 是二叉搜索树的节点数。</li>
<li>空间复杂度：O(n)。空间复杂度主要取决于栈空间的开销。</li>
</ul>
<h3 id="apporach-2-广度优先搜索">Apporach 2: 广度优先搜索</h3>
<p>使用广度优先搜索的方法，用一个队列 q
存储需要计算的节点。每次取出队首节点时，若节点为空则跳过该节点，否则按方法一中给出的大小关系来决定加入队列的子节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeSumBST</span>(<span class="params">self, root: TreeNode, low: <span class="built_in">int</span>, high: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        q = collections.deque([root])</span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            node = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> node.val &gt; high:</span><br><span class="line">                q.append(node.left)</span><br><span class="line">            <span class="keyword">elif</span> node.val &lt; low:</span><br><span class="line">                q.append(node.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += node.val</span><br><span class="line">                q.append(node.left)</span><br><span class="line">                q.append(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n<em>n</em> 是二叉搜索树的节点数。</li>
<li>空间复杂度：O(n)。空间复杂度主要取决于队列的空间。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 32-I-从上到下打印二叉树-中等-树</title>
    <url>/2021/04/22/2021-04-22-JZOffer%2032-I-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91-%E4%B8%AD%E7%AD%89-%E6%A0%91/</url>
    <content><![CDATA[<h4 id="jzoffer-32---i.-从上到下打印二叉树"><a
href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">JZOffer
32 - I. 从上到下打印二叉树</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;[3,9,20,15,7]</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>节点总数 &lt;= 1000</code></li>
</ul>
</blockquote>
<h3 id="approach-1-广度优先搜索bfs">Approach 1:
<strong>广度优先搜索</strong>（BFS）</h3>
<ul>
<li>BFS 通常借助 <strong>队列</strong> 的先入先出特性来实现。</li>
</ul>
<p><strong>算法流程</strong>：</p>
<ul>
<li>特例处理： 当树的根节点为空，则直接返回空列表 [] ；</li>
<li>初始化： 打印结果列表 res = [] ，包含根节点的队列 queue = [root]
；</li>
<li>BFS 循环： 当队列 queue 为空时跳出；
<ul>
<li>出队： 队首元素出队，记为 node；</li>
<li>打印： 将 node.val 添加至列表 tmp 尾部；</li>
<li>添加子节点： 若 node
的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；</li>
</ul></li>
<li>返回值： 返回打印结果列表 res 即可。</li>
</ul>
<blockquote>
<p>Python 中使用 collections 中的双端队列 deque() ，其 popleft()
方法可达到 O(1)O(1) 时间复杂度；列表 list 的 pop(0) 方法时间复杂度为
O(N)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        res, queue = [], collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.popleft()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left: queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right: queue.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度 O(N) ： N 为二叉树的节点数量，即 BFS 需循环 N
次。</p></li>
<li><p>空间复杂度 O(N) ： 最差情况下，即当树为平衡二叉树时，最多有 N/2
个树节点同时在 queue 中，使用 O(N)大小的额外空间。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1029-两地调度-中等-贪心</title>
    <url>/2021/04/29/2021-04-29-Q1029.%20%E4%B8%A4%E5%9C%B0%E8%B0%83%E5%BA%A6-%E4%B8%AD%E7%AD%89-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h4 id="两地调度"><a
href="https://leetcode-cn.com/problems/two-city-scheduling/">1029.
两地调度</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>公司计划面试 2N 人。第 i 人飞往 A 市的费用为 <span
class="math display">\[costs[i][0]\]</span>，飞往 B 市的费用为 <span
class="math display">\[costs[i][1]\]</span>。</p>
<p>返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[[10,20],[30,200],[400,50],[30,20]] 输出：110 解释： 第一个人去
A 市，费用为 10。 第二个人去 A 市，费用为 30。 第三个人去 B 市，费用为
50。 第四个人去 B 市，费用为 20。</p>
<p>最低总费用为 10 + 30 + 50 + 20 =
110，每个城市都有一半的人在面试。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= costs.length &lt;= 100</code></li>
<li><code>costs.length</code> 为偶数</li>
<li><code>1 &lt;= costs[i][0], costs[i][1] &lt;= 1000</code></li>
</ul>
</blockquote>
<h3 id="apporach-1-贪心">Apporach 1: 贪心</h3>
<p>我们这样来看这个问题，公司首先将这 2N 个人全都安排飞往 B 市，再选出 N
个人改变它们的行程，让他们飞往 A
市。如果选择改变一个人的行程，那么公司将会额外付出 price_A - price_B
的费用，这个费用可正可负。</p>
<p>因此最优的方案是，选出 price_A - price_B 最小的 N 个人，让他们飞往 A
市，其余人飞往 B 市。</p>
<p>算法</p>
<ul>
<li>按照 price_A - price_B 从小到大排序；</li>
<li>将前 N 个人飞往 A 市，其余人飞往 B 市，并计算出总费用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoCitySchedCost</span>(<span class="params">self, costs: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># Sort by a gain which company has </span></span><br><span class="line">        <span class="comment"># by sending a person to city A and not to city B</span></span><br><span class="line">        costs.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">0</span>] - x[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        n = <span class="built_in">len</span>(costs) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># To optimize the company expenses,</span></span><br><span class="line">        <span class="comment"># send the first n persons to the city A</span></span><br><span class="line">        <span class="comment"># and the others to the city B</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            total += costs[i][<span class="number">0</span>] + costs[i + n][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoCitySchedCost</span>(<span class="params">self, costs</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        N=<span class="built_in">len</span>(costs)</span><br><span class="line">        deltacost=[]</span><br><span class="line">        COSTAB=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):<span class="comment"># 改派i去A城，花费变动deltacost[i]</span></span><br><span class="line">            deltacost.append(costs[i][<span class="number">0</span>]-costs[i][<span class="number">1</span>])</span><br><span class="line">            COSTAB=COSTAB+costs[i][<span class="number">1</span>]</span><br><span class="line">        deltacost=<span class="built_in">sorted</span>(deltacost)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>(N/<span class="number">2</span>)):</span><br><span class="line">            COSTAB=COSTAB+deltacost[i]</span><br><span class="line">        <span class="keyword">return</span> COSTAB</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(NlogN)\]</span>，需要对
<code>price_A - price_B</code> 进行排序。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1685-有序数组中差绝对值之和-中等-贪心</title>
    <url>/2021/05/07/2021-05-07-Q1685-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%B7%AE%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B9%8B%E5%92%8C-%E4%B8%AD%E7%AD%89-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h4 id="有序数组中差绝对值之和"><a
href="https://leetcode-cn.com/problems/sum-of-absolute-differences-in-a-sorted-array/">1685.
有序数组中差绝对值之和</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个 非递减 有序整数数组 nums 。</p>
<p>请你建立并返回一个整数数组 result，它跟 nums 长度相同，且result[i]
等于 nums[i] 与数组中所有其他元素差的绝对值之和。</p>
<p>换句话说， result[i] 等于 sum(|nums[i]-nums[j]|) ，其中 0 &lt;= j
&lt; nums.length 且 j != i （下标从 0 开始）。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：nums = [2,3,5] 输出：[4,3,5] 解释：假设数组下标从 0 开始，那么
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4， result[1] = |3-2| +
|3-3| + |3-5| = 1 + 0 + 2 = 3， result[2] = |5-2| + |5-3| + |5-5| = 3 +
2 + 0 = 5。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：nums = [1,4,6,8,10] 输出：[24,15,13,15,21]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= nums[i + 1] &lt;= 10^4</code></li>
</ul>
</blockquote>
<h3 id="approach-1-贪心">Approach 1: 贪心</h3>
<p>直接思路是在一层循环中遍历每个元素sum[i]，第二层循环计算它与其他元素差值的绝对值，并且求和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSumAbsoluteDifferences</span>(<span class="params">self, nums</span>):</span><br><span class="line">        N = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            dif = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="keyword">if</span> i != j:</span><br><span class="line">                    dif += <span class="built_in">abs</span>(nums[i] - nums[j])</span><br><span class="line">            ans.append(dif)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>这样做的时间复杂度是O(n^2)，提示超出了时间限制，于是我们摄像能不能减少时间复杂度。</p>
<p>利用非递减数组的性质，可以提前计算前i项和 prefixSum[i]
，将后续的计算简化为：</p>
<p>对 sums[i] 左边的元素，单项差值为 <span
class="math display">\[sums[i]-sums[j], (N \geq i&gt;j)\]</span>，前 i
项求和为 <span
class="math display">\[i*sums[i]-sum(sums[j])\]</span></p>
<p>对 sums[i] 右边的元素，单项差值为 <span
class="math display">\[sums[j]-sums[i],(N\geq j&gt;i)\]</span>，前 i
项求和为 <span
class="math display">\[sum(sums[j])-(N-i-1)*sums[i]\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSumAbsoluteDifferences</span>(<span class="params">self, nums</span>):</span><br><span class="line">        N = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        output = []</span><br><span class="line">        prefixSum =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="built_in">sum</span> += nums[i]</span><br><span class="line">            prefixSum.append(<span class="built_in">sum</span>) <span class="comment"># 前i项和</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            output.append((i+<span class="number">1</span>)*nums[i]-prefixSum[i] + prefixSum[N-<span class="number">1</span>]-prefixSum[i]-nums[i]*(N-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(N)\]</span>，N是序列长度。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>。常数个变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q376-摆动序列-中等-贪心</title>
    <url>/2021/05/06/2021-05-06-Q376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97-%E4%B8%AD%E7%AD%89-%E8%B4%AA%E5%BF%83%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="摆动序列"><a
href="https://leetcode-cn.com/problems/wiggle-subsequence/">376.
摆动序列</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为
<strong>摆动序列</strong>
。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p>
<ul>
<li><p>例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5,
-7, 3) 是正负交替出现的。</p></li>
<li><p>相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5]
不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p></li>
</ul>
<p>子序列
可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p>
<p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度
。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：nums = [1,7,4,9,2,5] 输出：6
解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：nums = [1,17,5,10,13,15,10,5,16,8] 输出：7
解释：这个序列包含几个长度为 7 摆动序列。 其中一个是 [1, 17, 10, 13, 10,
16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
</blockquote>
<h3 id="approach-1-贪心">Approach 1: 贪心</h3>
<p>一开始没看到可以删减元素，打算使用双循环，遍历每个元素作为开头的子序列，计算最长的摇摆子序列。但是跑例子2的时候处了问题。</p>
<p>后来发现可以删除元素，所以考虑第二层循环里面不同加break了，可以继续计数，同时考虑了几个特殊情况，例如<span
class="math display">\[[0,0,0]\]</span> 输出 1, <span
class="math display">\[[1,2,3,4,5]\]</span> 输出 2 等。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        N = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span> <span class="keyword">or</span> (N == <span class="number">2</span> <span class="keyword">and</span> nums[<span class="number">0</span>] == nums[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N-<span class="number">1</span>):</span><br><span class="line">            dif_old = nums[i] - nums[i-<span class="number">1</span>]</span><br><span class="line">            length = <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,N):</span><br><span class="line">                dif_new = nums[j] - nums[j-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> dif_old * dif_new &lt; <span class="number">0</span>:</span><br><span class="line">                    length += <span class="number">1</span></span><br><span class="line">                    ans = <span class="built_in">max</span>(length,ans) </span><br><span class="line">                    dif_old = dif_new</span><br><span class="line">                <span class="keyword">elif</span> dif_new != <span class="number">0</span>:</span><br><span class="line">                    ans = <span class="built_in">max</span>(length,ans) </span><br><span class="line">                    dif_old = dif_new</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>进一步补考虑，实际上由于删除机制，最长的子序列一定是从头开始计数的，所以可以去掉第一层循环，减小时间复杂度从O(n^2)到O(n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        N = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span> <span class="keyword">or</span> (N == <span class="number">2</span> <span class="keyword">and</span> nums[<span class="number">0</span>] == nums[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">       </span><br><span class="line">        dif_old = nums[<span class="number">1</span>] - nums[<span class="number">0</span>]</span><br><span class="line">        length = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">            dif_new = nums[j] - nums[j-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> dif_old * dif_new &lt; <span class="number">0</span>:</span><br><span class="line">                length += <span class="number">1</span></span><br><span class="line">                ans = <span class="built_in">max</span>(length,ans) </span><br><span class="line">                dif_old = dif_new</span><br><span class="line">            <span class="keyword">elif</span> dif_new != <span class="number">0</span>:</span><br><span class="line">                ans = <span class="built_in">max</span>(length,ans) </span><br><span class="line">                dif_old = dif_new</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(N)\]</span>，N是序列长度。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>。常数个变量。</li>
</ul>
<h3 id="approach-2-动态规划">Approach 2: 动态规划</h3>
<p>每当我们选择一个元素作为摆动序列的一部分时，这个元素要么是上升的，要么是下降的，这取决于前一个元素的大小。那么列出状态表达式为：</p>
<ul>
<li><p><span class="math display">\[up[i]\]</span> 表示以前 i
个元素中的某一个为结尾的最长的「上升摆动序列」的长度。</p></li>
<li><p><span class="math display">\[\textit{down}[i]\]</span> 表示以前 i
个元素中的某一个为结尾的最长的「下降摆动序列」的长度。</p></li>
</ul>
<p>下面以 up[i] 为例，说明其状态转移规则：</p>
<ul>
<li>当 <span class="math display">\[\textit{nums}[i] \leq
\textit{nums}[i - 1]\]</span>
时，我们无法选出更长的「上升摆动序列」的方案。因为对于任何以 <span
class="math display">\[\textit{nums}[i]\]</span>
结尾的「上升摆动序列」，我们都可以将 <span
class="math display">\[\textit{nums}[i]\]</span> 替换为 <span
class="math display">\[\textit{nums}[i - 1]\]</span>，使其成为以 <span
class="math display">\[\textit{nums}[i - 1]\]</span>
结尾的「上升摆动序列」。</li>
<li>当 <span class="math display">\[\textit{nums}[i] &gt;
\textit{nums}[i - 1]\]</span> 时，我们既可以从 <span
class="math display">\[up[i - 1]\]</span> 进行转移，也可以从 <span
class="math display">\[\textit{down}[i - 1]\]</span>
进行转移。下面我们证明从 <span class="math display">\[\textit{down}[i -
1]\]</span> 转移是必然合法的，即必然存在一个 <span
class="math display">\[\textit{down}[i - 1]\]</span>
对应的最长的「下降摆动序列」的末尾元素小于 <span
class="math display">\[\textit{nums}[i]\]</span>。
<ul>
<li>我们记这个末尾元素在原序列中的下标为 j，假设从 j
往前的第一个「谷」为 nums[k]，我们总可以让 j 移动到
k，使得这个最长的「下降摆动序列」的末尾元素为「谷」。</li>
<li>然后我们可以证明在这个末尾元素为「谷」的情况下，这个末尾元素必然是从
nums[i]
往前的第一个「谷」。证明非常简单，我们使用反证法，如果这个末尾元素不是从
nums[i] 往前的第一个「谷」，那么我们总可以在末尾元素和 nums[i]
之间取得一对「峰」与「谷」，接在这个「下降摆动序列」后，使其更长。</li>
<li>这样我们知道必然存在一个 down[i−1]
对应的最长的「下降摆动序列」的末尾元素为 nums[i]
往前的第一个「谷」。这个「谷」必然小于 nums[i]。证毕。</li>
</ul></li>
</ul>
<p>这样我们可以用同样的方法说明 down[i]
的状态转移规则，最终的状态转移方程为： <span class="math display">\[
up[i]=
\begin{cases}
up[i-1] &amp; nums[i]≤nums[i−1]\\
max(up[i-1],down[i-1]+1) &amp; nums[i]&gt;nums[i−1]
\end{cases}
\]</span></p>
<p><span class="math display">\[
down[i]=
\begin{cases}
down[i-1] &amp; nums[i] \geq nums[i−1]\\
max(up[i-1]+1,down[i-1]) &amp; nums[i]&lt;nums[i−1]
\end{cases}
\]</span></p>
<p>最终的答案即为 up[n−1] 和 down[n−1] 中的较大值，其中 n
是序列的长度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        </span><br><span class="line">        up = [<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>)</span><br><span class="line">        down = [<span class="number">1</span>] + [<span class="number">0</span>] * (n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                up[i] = <span class="built_in">max</span>(up[i - <span class="number">1</span>], down[i - <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">                down[i] = down[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> nums[i] &lt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                up[i] = up[i - <span class="number">1</span>]</span><br><span class="line">                down[i] = <span class="built_in">max</span>(up[i - <span class="number">1</span>] + <span class="number">1</span>, down[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                up[i] = up[i - <span class="number">1</span>]</span><br><span class="line">                down[i] = down[i - <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(up[n - <span class="number">1</span>], down[n - <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(n)，其中 n
是序列的长度。我们只需要遍历该序列一次。</p></li>
<li><p>空间复杂度：O(n)，其中 n 是序列的长度。我们需要开辟两个长度为 n
的数组。</p></li>
</ul>
<h4 id="approach-3-优化的动态规划">Approach 3: 优化的动态规划</h4>
<p><strong>思路及解法</strong></p>
<p>注意到方法一中，我们仅需要前一个状态来进行转移，所以我们维护两个变量即可。这样我们可以写出如下的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        </span><br><span class="line">        up = down = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                up = <span class="built_in">max</span>(up, down + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> nums[i] &lt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                down = <span class="built_in">max</span>(up + <span class="number">1</span>, down)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(up, down)</span><br></pre></td></tr></table></figure>
<p>注意到每有一个「峰」到「谷」的下降趋势，<span
class="math display">\[\textit{down}\]</span>
值才会增加，每有一个「谷」到「峰」的上升趋势，<span
class="math display">\[\textit{up}\]</span> 值才会增加。且过程中 <span
class="math display">\[\textit{down}\]</span> 与 <span
class="math display">\[\textit{up}\]</span> 的差的绝对值值恒不大于 1，即
<span class="math display">\[\textit{up} \leq \textit{down} + 1\]</span>
且 <span class="math display">\[\textit{down} \leq \textit{up} +
1\]</span>，于是有 <span class="math display">\[\max(\textit{up},
\textit{down} + 1) = \textit{down} + 1\]</span> 且 <span
class="math display">\[\max(\textit{up} + 1, \textit{down}) =
\textit{up} + 1\]</span>。这样我们可以省去不必要的比较大小的过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        </span><br><span class="line">        up = down = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                up = down + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] &lt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                down = up + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(up, down)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n)，其中 n 是序列的长度。我们只需要遍历该序列一次。</p>
<p>空间复杂度：O(1)。我们只需要常数空间来存放若干变量。</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Atari环境报错缺少ale_c.dll解决办法</title>
    <url>/2021/05/20/2021-05-20-%E5%AE%89%E8%A3%85Atari%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2
id="安装atari环境报错缺少ale_c.dll解决办法">安装Atari环境报错缺少ale_c.dll解决办法</h2>
<h3 id="背景"><strong>背景：</strong></h3>
<p>在Atari游戏环境中做RL测试。通过anaconda新建了环境，配置好torch，numpy，gym等环境。运行中报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FileNotFoundError: Could not find module &#x27;D:\Anaconda3\envs\PPOenv\lib\site-packages\atari_py\ale_interface\ale_c.dll&#x27; (or one of its dependencies). Try using the full path with constructor syntax.</span><br></pre></td></tr></table></figure>
<p>意思是所显示路径下缺少ale_c.dll</p>
<h3 id="处理方法"><strong>处理方法：</strong></h3>
<h4
id="方法1对我情况无效但点赞很多">方法1（对我情况无效，但点赞很多）</h4>
<p>首先检索到了这个方案（作者@razzzu）</p>
<p>https://github.com/openai/gym/issues/1726</p>
<p><strong>Step1:</strong> 卸载相关库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall atari-py</span><br><span class="line">pip uninstall gym[atari]</span><br></pre></td></tr></table></figure>
<p><strong>Step2:</strong> 安装 VS build tools工具</p>
<p>Download VS build tools here:
https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=16</p>
<p>运行后勾选左侧“C++ build tools”以及右侧的</p>
<ul>
<li>MSVC v142-VS 2019 C++ x64/x86 build tools</li>
<li>windows 10 SDK</li>
<li>C++ CMaKer</li>
<li>Testing tools core features - build tools</li>
</ul>
<p><strong>Step3:</strong> 重启电脑</p>
<p><strong>Step4:</strong> 重新安装库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install cmake, atari-py and gym</span><br><span class="line">pip install cmake</span><br><span class="line">pip install atari-py</span><br><span class="line">pip install gym[atari]</span><br></pre></td></tr></table></figure>
<p>Step5: 运行测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Now run the following code:</span><br><span class="line"><span class="keyword">import</span> atari_py</span><br><span class="line"><span class="built_in">print</span>(atari_py.list_games())</span><br></pre></td></tr></table></figure>
<p>and if everything worked then it should return a list of all games as
shown below</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;adventure&#x27;</span>, <span class="string">&#x27;air_raid&#x27;</span>, <span class="string">&#x27;alien&#x27;</span>, <span class="string">&#x27;amidar&#x27;</span>, <span class="string">&#x27;assault&#x27;</span>, <span class="string">&#x27;asterix&#x27;</span>, <span class="string">&#x27;asteroids&#x27;</span>, <span class="string">&#x27;atlantis&#x27;</span>, <span class="string">&#x27;bank_heist&#x27;</span>, <span class="string">&#x27;battle_zone&#x27;</span>, <span class="string">&#x27;beam_rider&#x27;</span>, <span class="string">&#x27;berzerk&#x27;</span>, <span class="string">&#x27;bowling&#x27;</span>, <span class="string">&#x27;boxing&#x27;</span>, <span class="string">&#x27;breakout&#x27;</span>, <span class="string">&#x27;carnival&#x27;</span>, <span class="string">&#x27;centipede&#x27;</span>, <span class="string">&#x27;chopper_command&#x27;</span>, <span class="string">&#x27;crazy_climber&#x27;</span>, <span class="string">&#x27;defender&#x27;</span>, <span class="string">&#x27;demon_attack&#x27;</span>, <span class="string">&#x27;double_dunk&#x27;</span>, <span class="string">&#x27;elevator_action&#x27;</span>, <span class="string">&#x27;enduro&#x27;</span>, <span class="string">&#x27;fishing_derby&#x27;</span>, <span class="string">&#x27;freeway&#x27;</span>, <span class="string">&#x27;frostbite&#x27;</span>, <span class="string">&#x27;gopher&#x27;</span>, <span class="string">&#x27;gravitar&#x27;</span>, <span class="string">&#x27;hero&#x27;</span>, <span class="string">&#x27;ice_hockey&#x27;</span>, <span class="string">&#x27;jamesbond&#x27;</span>, <span class="string">&#x27;journey_escape&#x27;</span>, <span class="string">&#x27;kaboom&#x27;</span>, <span class="string">&#x27;kangaroo&#x27;</span>, <span class="string">&#x27;krull&#x27;</span>, <span class="string">&#x27;kung_fu_master&#x27;</span>, <span class="string">&#x27;montezuma_revenge&#x27;</span>, <span class="string">&#x27;ms_pacman&#x27;</span>, <span class="string">&#x27;name_this_game&#x27;</span>, <span class="string">&#x27;phoenix&#x27;</span>, <span class="string">&#x27;pitfall&#x27;</span>, <span class="string">&#x27;pong&#x27;</span>, <span class="string">&#x27;pooyan&#x27;</span>, <span class="string">&#x27;private_eye&#x27;</span>, <span class="string">&#x27;qbert&#x27;</span>, <span class="string">&#x27;riverraid&#x27;</span>, <span class="string">&#x27;road_runner&#x27;</span>, <span class="string">&#x27;robotank&#x27;</span>, <span class="string">&#x27;seaquest&#x27;</span>, <span class="string">&#x27;skiing&#x27;</span>, <span class="string">&#x27;solaris&#x27;</span>, <span class="string">&#x27;space_invaders&#x27;</span>, <span class="string">&#x27;star_gunner&#x27;</span>, <span class="string">&#x27;tennis&#x27;</span>, <span class="string">&#x27;time_pilot&#x27;</span>, <span class="string">&#x27;tutankham&#x27;</span>, <span class="string">&#x27;up_n_down&#x27;</span>, <span class="string">&#x27;venture&#x27;</span>, <span class="string">&#x27;video_pinball&#x27;</span>, <span class="string">&#x27;wizard_of_wor&#x27;</span>, <span class="string">&#x27;yars_revenge&#x27;</span>, <span class="string">&#x27;zaxxon&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>我在完成上述步骤后发现还是缺少ale_c.dll，于是打算直接下载一个ale_c.dll</p>
<h4 id="方法2-有效">方法2 （有效）</h4>
<p>根据<a
href="https://stackoverflow.com/questions/63080326/could-not-find-module-atari-py-ale-interface-ale-c-dll-or-one-of-its-dependenc/64104353#64104353">stackoverflow上的方法</a></p>
<p><strong>Step1:</strong> Download ale_c.dll from <a
href="https://drive.google.com/file/d/1WQrEBliYbASwNDyyVIlPFSZHRwAa7sPp/view?usp=sharing">here</a>.(下载需要梯子，我在博客img中放了文件备份)
<strong>Step2:</strong> Copy it in C:Raval-packages_py_interface (Your
path can be different).</p>
<p>成功解决问题！</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Proximal Policy Optimization Algorithms</title>
    <url>/2021/06/29/2021-06-28-Reinforcement%20Learning%20-%20Proximal%20Policy%20Optimization%20Algorithms/</url>
    <content><![CDATA[<h1 id="proximal-policy-optimization-algorithms">Proximal Policy
Optimization Algorithms</h1>
<p>论文链接：https://arxiv.org/pdf/1707.06347.pdf</p>
<h2 id="背景">背景</h2>
<p>基于策略梯度和 trust region policy optimization
(TRPO)方法，提出multiple epochs of minibatch updates的方式，解决了Policy
Gradient算法中步长难以确定的问题。而一般策略梯度方法 perform one
gradient update per data sample。</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li>目的是实现数据高效和鲁棒性（data efficient, and robust）</li>
<li>使用 first-order optimization</li>
<li>PPO有两种主要变体：PPO-penalty和PPO-clip。
<ul>
<li>PPO-Penalty
近似解决了像TRPO这样的受KL约束的更新，但是对目标函数中的KL偏离进行了惩罚，而不是使其成为硬约束，并且在训练过程中自动调整了惩罚系数，以便对其进行适当缩放。</li>
<li>PPO-Clip 在目标中没有KL散度项，也没有任何约束。
取而代之的是依靠对目标函数的专门裁剪来消除新政策消除旧政策的激励。</li>
</ul></li>
</ul>
<p><span class="math display">\[
L(s,a,\theta_k,\theta)=\min
\Bigg(\frac{\pi_{\theta}(a|s)}{\pi_{\theta_k}(a|s)}A^{\pi_k}(s,a),
\text{clip}\bigg(\frac{\pi_{\theta}(a|s)}{\pi_{\theta_k}(a|s)},1-\epsilon,1+\epsilon
\bigg)A^{\pi_k}(s,a) \Bigg)
\]</span></p>
<h2 id="总结">总结</h2>
<p>相比于TRPO，PPO缺失比较简单、直接，特别是PPO2（PPO-Clip），通过裁减损失哈数的方式保证了更新的稳定。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Hierarchical Deep Reinforcement Learning for Continuous Action Control</title>
    <url>/2021/07/01/2021-07-01-Reinforcement%20Learning%20-%20Hierarchical%20Deep%20Reinforcement%20Learning%20for%20Continuous%20Action%20Control/</url>
    <content><![CDATA[<h1
id="hierarchical-deep-reinforcement-learning-for-continuous-action-control">Hierarchical
Deep Reinforcement Learning for Continuous Action Control</h1>
<p>论文链接：https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=8310962&amp;tag=1</p>
<h2 id="背景">背景</h2>
<p>机器人连续行为空间的控制是一个难题，尤其是在应对复合任务的时候。</p>
<ul>
<li>In addition, many works introduced linear function approximations to
enhance the generalization ability of algorithms [5], [6] to handle more
complex environments.</li>
<li>Moreover, learning agents also need to consider many physical
factors to keep the robot moving smoothly</li>
</ul>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>hierarchical-deep deterministic policy gradient (h-DDPG)</p></li>
<li><p>第一层使用多个actor网络学习基本技能，第二层学习复合的技能。</p></li>
<li><p>Results show that the proposed algorithm can successfully learn
high performance basic skills and compound skills simultaneously.
Results also show that its performance in solving compound tasks in the
three scenarios outperform discrete action deep reinforcement learning
algorithm.</p></li>
<li><p>Contributions:</p>
<ul>
<li><ol type="1">
<li>learn multiple basic skills at the same time;</li>
</ol></li>
<li><ol start="2" type="1">
<li>learn compound skills to solve compound tasks by reusing basic
skills;</li>
</ol></li>
<li><ol start="3" type="1">
<li>handle the above two kinds of skill learning within the same process
and time scale.</li>
</ol></li>
</ul></li>
<li><p>一些方法：</p>
<ul>
<li>deterministic policy gradients [18], [26], [27]</li>
<li>stochastic policy gradients [28], [29]</li>
<li>trust region policy optimization [30]</li>
<li>Some work has also been done to integrate modelbased methods to
accelerate learning in continuous action spaces [31]</li>
</ul></li>
<li><p>分层强化学习：</p>
<ul>
<li>Various works on hierarchical reinforcement learning exist [33],
[34]</li>
<li>including work considering deep architectures [35], [36]</li>
<li>Work in <strong>[36]</strong> is focuses on finding the best
hierarchical structure of the tasks with clustering methods, and is
mainly concerned with how to decompose tasks</li>
</ul></li>
<li><p>Most recent work on deep hierarchical reinforcement learning can
be found in [37] and [38].</p></li>
<li><p>针对图像输入的DDPG，更改了conv网络的激活函数，思想来自the mlpconv
layer。可以减少网络参数数量</p></li>
<li><p>基本能力的定义：Basic tasks are fundamentally nontask specific
and rather are tied to the physical capabilities of the robot, such as
rotating a wheel or bending a joint to a specific direction.</p></li>
<li><p>符合任务定义：Conversely, compound tasks are defined to be tasks
that can only be achieved by combining different patterns.</p></li>
</ul>
<h2 id="总结">总结</h2>
<p>这篇文章讲述并不是很清晰，也缺少理论证明，感觉最大的贡献就是使用了多个actor网络学习基础技能，但这个也是比较典型的分层强化学习思路，和option类似。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>HJ26 字符串排序-中等-字符串</title>
    <url>/2021/07/05/2021-07-05-HJ26%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F-%E4%B8%AD%E7%AD%89-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="hj26-字符串排序"><a
href="https://www.nowcoder.com/practice/5190a1db6f4f4ddb92fd9c365c944584?tpId=37&amp;&amp;tqId=21249&amp;rp=1&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking">HJ26
字符串排序</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p><strong>规则 1</strong> ：英文字母从 A 到 Z 排列，不区分大小写。</p>
<p>如，输入： Type 输出： epTy</p>
<p><strong>规则 2</strong>
：同一个英文字母的大小写同时存在时，按照输入顺序排列。</p>
<p>如，输入： BabA 输出： aABb</p>
<p><strong>规则 3</strong> ：非英文字母的其它字符保持原来的位置。</p>
<p>如，输入： By?e 输出： Be?y</p>
<p>注意有多组测试数据，即输入有多行，每一行单独处理（换行符隔开的表示不同行）</p>
<p>输入描述： - 输入字符串</p>
<p>输出描述： - 输出字符串</p>
<p>示例1 输入：A Famous Saying: Much Ado About Nothing (2012/8). 输出：A
aaAAbc dFgghh: iimM nNn oooos Sttuuuy (2012/8).</p>
</blockquote>
<h3 id="approach">Approach</h3>
<ul>
<li>sorted(iterable,str.upper)就可以实现：
<ul>
<li>1）字符由A到Z的排序</li>
<li>2）能够实现同字母（A与a算同字母），由输入先后书序排列。</li>
</ul></li>
<li>str.isalpha实现的是如果字符串至少有一个字符并且所有字符都是字母则返回
True，否则返回 False。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i.isalpha():</span><br><span class="line">                a += i</span><br><span class="line">        b = <span class="built_in">sorted</span>(a, key=<span class="built_in">str</span>.upper)</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        d = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i].isalpha():</span><br><span class="line">                d += b[index]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d += s[i]</span><br><span class="line">        <span class="built_in">print</span>(d)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span
class="math display">\[O(N)\]</span>，N是序列长度。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>。常数个变量。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>String</tag>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM数据格式处理python方法总结</title>
    <url>/2021/07/05/2021-07-05-ACM%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%A4%84%E7%90%86python%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1
id="acm数据格式处理python方法总结">ACM数据格式处理python方法总结</h1>
<h2 id="oj在线编程常见输入输出练习场">OJ在线编程常见输入输出练习场</h2>
<p>在线测试网址：https://ac.nowcoder.com/acm/contest/5652#question</p>
<p>华为机考模拟试题：https://www.nowcoder.com/ta/huawei</p>
<h3 id="总结">总结：</h3>
<ul>
<li><p>数据行数具体是多少不重要，可通过while来解决，每行数据长度是否已知也无所谓。</p></li>
<li><p>熟悉sys，map，try-except的具体使用框架和方式</p></li>
<li><p>熟悉split()，strip()函数的使用方式</p></li>
<li><p>一些字符相关的函数：</p>
<ul>
<li>字符转化为asc-ii码函数（ord('a')）可以用来判断是否大小写/数字</li>
</ul></li>
<li><p>字符串.isalnum() 所有字符都是数字或者字母，为真返回
Ture，否则返回 False。</p>
<ul>
<li>字符串.isalpha() 所有字符都是字母，为真返回 Ture，否则返回
False。</li>
<li>字符串.isdigit() 所有字符都是数字，为真返回 Ture，否则返回
False。</li>
<li>字符串.islower() 所有字符都是小写，为真返回 Ture，否则返回
False。</li>
<li>字符串.isupper() 所有字符都是大写，为真返回 Ture，否则返回
False。</li>
<li>字符串.istitle() 所有单词都是首字母大写，为真返回 Ture，否则返回
False。</li>
<li>字符串.isspace() 所有字符都是空白字符，为真返回 Ture，否则返回
False。</li>
</ul></li>
<li><p>进制转换：</p>
<ul>
<li>16进制转为10进制：int(num,16)</li>
<li>2进制转为10进制：int(num,2)</li>
<li>8进制转为10进制：int(num,8)</li>
<li>10进制转为16进制：hex(num)</li>
<li>10进制转2进制：bin(num)</li>
<li>10进制转8进制：oct(num)</li>
</ul></li>
<li><p>输出分割方式：</p>
<ul>
<li>按照空格分割：print(a, end=' ')</li>
<li>按照行分割：print(a) or print(a, end='')</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入多行字符串转换为二维矩阵</span></span><br><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment"># 创建已知大小的二维矩阵</span></span><br><span class="line">T = [[<span class="number">0</span>]*num <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">	<span class="comment"># 字符串分割！！！</span></span><br><span class="line">    T[i][:]=<span class="built_in">list</span>(<span class="string">&#x27;&#x27;</span>.join(line.strip().split()))</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>读入一个二维矩阵：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取字符举证</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin: </span><br><span class="line">    a.append(line.split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数字矩阵</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin: </span><br><span class="line">    a.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,line.split())))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">input</span>()</span><br><span class="line"><span class="comment"># print(&#x27; &#x27;.join(sorted(input().split())))</span></span><br><span class="line"><span class="comment"># 连续的数字不被拆开</span></span><br><span class="line"><span class="comment"># a= list(input().split()) # 可以不加list()</span></span><br><span class="line">a = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="comment"># 去除字符串数组中多余的括号</span></span><br><span class="line">a[<span class="number">0</span>]=a[<span class="number">0</span>].replace(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">a[-<span class="number">1</span>]=a[-<span class="number">1</span>].replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>已知数据行数，已知每行长度</strong>：外加循环或者判断条件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>未知数据行数，未知每行长度</strong>：使用sys库提取每行数据，结合strip()（去除
）和split()（分割函数，方便提取元素）函数实现数组建立</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">sorted</span>(line.strip().split())))</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>已知行数，未知每行长度</strong>：行数可以不储存不使用，每行未知长度数据，可以用下面语句直接变成一个数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="comment"># a直接就是整数数组</span></span><br></pre></td></tr></table></figure>
<p>下面给出了几个输入输出案例（包括<strong>数字</strong>和<strong>字符串</strong>部分）：</p>
<h3 id="ab1">1. A+B(1)</h3>
<p>输入包括两个正整数a,b(1 &lt;= a, b &lt;= 10^9),输入数据包括多组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">        <span class="comment"># a,b = map(int,input().split())</span></span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span> </span><br></pre></td></tr></table></figure>
<h3 id="ab2">2. A+B(2)</h3>
<p>输入第一行包括一个数据组数t(1 &lt;= t &lt;= 100)
接下来每行包括两个正整数a,b(1 &lt;= a, b &lt;= 10^9)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># num = int(sys.stdin.readline().strip()) # 读取一整行输入，strip()去掉末尾空行或空格，int()转换为整数形式</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        a , b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.split())))</span><br></pre></td></tr></table></figure>
<h3 id="ab3">3. A+B(3)</h3>
<p>输入包括两个正整数a,b(1 &lt;= a, b &lt;= 10^9),输入数据有多组,
如果输入为0 0则结束输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a , b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> a != <span class="number">0</span> <span class="keyword">and</span> b != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(a + b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="ab4">4. A+B(4)</h3>
<p>输入数据包括多组。 每组数据一行,每行的第一个整数为整数的个数n(1 &lt;=
n &lt;= 100), n为0的时候结束输入。
接下来n个正整数,即需要求和的每个正整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>) <span class="comment"># a是字符数组</span></span><br><span class="line">        <span class="comment"># a = sys.stdin.readline().split(&#x27; &#x27;)</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a[<span class="number">0</span>]) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">                <span class="built_in">sum</span> += <span class="built_in">int</span>(a[i])</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="comment"># a直接就是整数数组</span></span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">sum</span>(a[<span class="number">1</span>:]))</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>使用sys库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.strip().split()))[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.strip().split()[<span class="number">1</span>:])))</span><br></pre></td></tr></table></figure>
<h3 id="ab5">5. A+B(5)</h3>
<p>输入的第一行包括一个正整数t(1 &lt;= t &lt;= 100), 表示数据组数。
接下来t行, 每行一组数据。 每行的第一个整数为整数的个数n(1 &lt;= n &lt;=
100)。 接下来n个正整数, 即需要求和的每个正整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    nums = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">        a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>(a[<span class="number">1</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>一个更简洁的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        numlist = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().strip().split()))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(numlist) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">sum</span>(numlist[<span class="number">1</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="ab6">6. A+B(6)</h3>
<p>输入数据有多组, 每行表示一组输入数据。
每行的第一个整数为整数的个数n(1 &lt;= n &lt;= 100)。 接下来n个正整数,
即需要求和的每个正整数。 每组数据输出求和的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.strip().split()[<span class="number">1</span>:])))</span><br></pre></td></tr></table></figure>
<h3 id="ab7">7. A+B(7)</h3>
<p>输入数据有多组, 每行表示一组输入数据。
每行不定有n个整数，空格隔开。(1 &lt;= n &lt;= 100)。
每组数据输出求和的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.strip().split())))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().strip().split()))))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串排序1">8. 字符串排序(1)</h3>
<p>输入有两行，第一行n 第二行是n个空格隔开的字符串
输出一行排序后的字符串，空格隔开，无结尾空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">sorted</span>(<span class="built_in">input</span>().split())))</span><br><span class="line"><span class="comment"># sorted(num,reverse=Ture) # 逆序排序</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串排序2">9. 字符串排序(2)</h3>
<p>多个测试用例，每个测试用例一行。 每行通过空格隔开，有n个字符，n＜100
对于每组测试用例，输出一行排序过的字符串，每个字符串通过空格隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">sorted</span>(line.strip().split())))</span><br></pre></td></tr></table></figure>
<h3 id="字符串排序3">10. 字符串排序(3)</h3>
<p>多个测试用例，每个测试用例一行。 每行通过,隔开，有n个字符，n＜100
对于每组用例输出一行排序后的字符串，用','隔开，无结尾空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">sorted</span>(line.strip().split(<span class="string">&#x27;,&#x27;</span>))))</span><br></pre></td></tr></table></figure>
<h3 id="自测本地通过但是提交为0">11. 自测本地通过，但是提交为0</h3>
<p>每年前几场在线笔试编程题的时候，总有同学询问为什么我本地测试通过，自测也通过，提交代码系统却返回通过率0。
打开以下链接可以查看正确的代码
https://ac.nowcoder.com/acm/contest/5657#question
这不是系统的错，可能是因为</p>
<ol type="1">
<li>你对题目理解错了，你的代码只过了样例或你自己的数据</li>
<li>你的代码逻辑有问题，你的代码只过了样例或你自己的数据</li>
</ol>
<p>总之就是你的代码只是过了样例和自测数据，后台的测试数据你根本不可见，要多自己思考。</p>
<p>这个题目如果你提交后通过率为0，又觉得自己代码是正确的，可以 点击查看
通过的代码</p>
<p>谨记：
当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!</p>
<p>请帮忙把这个练习专题发给你的朋友同学吧，感谢感谢</p>
]]></content>
      <tags>
        <tag>Code Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Option-critic Architecture</title>
    <url>/2021/07/08/2021-07-08-Reinforcement%20Learning%20-%20Option-critic%20architecture/</url>
    <content><![CDATA[<h1 id="option-critic-architecture">Option-critic Architecture</h1>
<p>论文链接：www.aaai.org/ocs/index.php/AAAI/AAAI17/paper/download/14858/14328</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>分层强化学习自动学习时间抽象是很重要的</p></li>
<li><p>设计了基于策略梯度理论的option-critic方法来学习内部策略和option的终点约束。We
derive policy gradient theorems for options and propose a new
option-critic architecture capable of learning both the internal
policies and the termination conditions of options</p></li>
<li><p>在离散和连续的任务中都取得了好的表现。 discrete and continuous
environments</p></li>
<li><p>时间抽象允许表示关于发生在不同时间尺度上的行动过程的知识。Temporal
abstraction allows representing knowledge about courses of action that
take place at different time scales.</p></li>
<li><p>Discovering temporal abstractions autonomously
成为了一个持续了15年的研究主题</p></li>
<li><p>大部分的工作致力于发现子目标，并在后续的策略学习中实现它们。这个其实就是分层结构，并且和肌肉骨骼的运动控制很像。The
majority of the existing work has focused on finding subgoals (useful
states that an agent should reach) and subsequently learning policies to
achieve them</p></li>
<li><p>问题在于求解子目标时的探索时间和计算开销非常大。Additionally,
learning policies associated with subgoals can be expensive in terms of
data and computation time; in the worst case, it can be as expensive as
solving the entire task.</p></li>
<li><p>本文的方法模糊了发现option和学习option的界限，</p></li>
<li><p>In contrast, we show that our approach is capable of successfully
learning options within a single task without incurring any slowdown and
while still providing benefits for <strong>transfer
learning</strong>.（看着有点像我的Speed-accuracy
Trade-off那篇文章，但它的是直接说在抢一学习上有好处的）</p></li>
<li><p>core ideas：the <strong>intra-option policy</strong> and
<strong>termination gradient theorems</strong></p></li>
<li><p>方法需要的特殊条件少。As opposed to other methods, we only need
to specify <strong>the number of desired options</strong>; it is
<strong>not</strong> necessary to have <strong>subgoals</strong>,
<strong>extra rewards</strong>, <strong>demonstrations</strong>,
<strong>multiple problems</strong> or any other <strong>special
accommodations</strong> (however, the approach can take advantage of
pseudo-reward functions if desired)</p></li>
</ul>
<h3 id="option-framework">Option Framework</h3>
<ul>
<li>option框架假设对于option <span class="math display">\[\omega\in
\Omega\]</span> 由三元组 <span
class="math display">\[(I_{\omega},\pi_{\omega},\beta_{\omega})\]</span>
组成。
<ul>
<li><span class="math display">\[I_{\omega} \subseteq S\]</span>
是初始的状态集合</li>
<li><span class="math display">\[\pi_{\omega}\]</span>
是intra-option策略</li>
<li><span class="math display">\[\beta_{\omega}: S \rightarrow
[0,1]\]</span> 是终止函数</li>
</ul></li>
<li>当使用option框架时， MDP就变成了Semi-MDP，它有相应的最优值函数<span
class="math display">\[V_{\Omega}(s)\]</span> 和option-value函数 <span
class="math display">\[Q_{\Omega}(s,\omega)\]</span>
。所谓的Semi-MDP就是指从状态s到下一个状态s‘要经过 <span
class="math display">\[\tau\]</span>
步的MDP，大致就是状态之间存在时间上的不连续。</li>
<li>通过一些针对MDP的算法实现多个option并行地学习，这就是
<strong>intra-option learning</strong> 的主要思路</li>
<li>接下来就是要实现两个关键任务：learning <strong>option
policies</strong> and <strong>termination functions</strong></li>
<li>算法流程：一个外部的策略 <span
class="math display">\[\pi_{\Omega}\]</span> 选择option来执行控制，
intra-option policy <span class="math display">\[\pi_{\omega}\]</span>
开始执行，直到终点（用终点函数来判断停止执行）</li>
<li>定义option-value function can be written as:</li>
</ul>
<p><span class="math display">\[
Q_{\Omega}(s,\omega)=\sum_a \pi_{\omega,\theta}(a \mid
s)Q_{U}(s,\omega,a)
\]</span></p>
<p>其中 <span class="math display">\[Q_{U}(s,\omega,a)\]</span>
是在state-option对下执行行为的评估值。</p>
<p><span class="math display">\[
Q_{U}(s,\omega,a)=r(s,a)+\gamma\sum_{s&#39;}P(s&#39; \mid
s,a)U(\omega,s&#39;)
\]</span></p>
<p>注意 <span class="math display">\[(s,\omega)\]</span>
组导致了一个扩张的状态空间 an augmented state space, cf. (Levy and
Shimkin 2011)</p>
<p><span class="math display">\[U: \Omega \times S\rightarrow
\mathbb{R}\]</span> 是 the option-value function upon arrival，The value
of executing <span class="math display">\[\omega\]</span> upon entering
a state <span class="math display">\[s&#39;\]</span> is given by:</p>
<p><span class="math display">\[
U(\omega,s&#39;)=(1-\beta_{\omega,\vartheta}(s&#39;))Q_{\Omega}(s&#39;,\omega)+\beta_{\omega,\vartheta}(s&#39;)V_{\Omega}(s&#39;)
\]</span></p>
<p>如果option <span class="math display">\[\omega_t\]</span> 在时刻 t
被初始化并被执行，此时状态为 <span class="math display">\[s_t\]</span>
，然后在1步之后，状态转移到 <span
class="math display">\[(s_{t+1},\omega_{t+1})\]</span> 的概率是：</p>
<p><span class="math display">\[
P(s_{t+1},\omega_{t+1} \mid s_t,\omega_t)=\sum_a
\pi_{\omega_t,\theta}(a|s_t)P(s_{t+1} \mid s_t,a)\\
\big((1-\beta_{\omega_t,\vartheta}(s_{t+1}))1_{\omega_t=\omega_{t+1}}+\beta_{\omega_t,\vartheta}(s_{t+1})\pi_{\Omega}(\omega_{t+1}
\mid s_{t+1})\big)
\]</span></p>
<p>显然，给出计算过程是均匀的。在温和的条件下，由于选项到处可用，它实际上是遍历的，并且在
state-option 对上存在唯一的平稳分布。</p>
<p>接下来计算期望累积回报关于intra-option策略的参数 <span
class="math display">\[\theta\]</span>
的梯度，假设它是随机的可微分的，我们得到</p>
<p><span class="math display">\[
\frac{\partial Q_{\Omega}(s,\omega)}{\partial \theta}=\Bigg(\sum_a
\frac{\partial \pi_{\omega,\theta}(a \mid s)}{\partial
\theta}Q_{U}(s,\omega,a)\Bigg)\\
+\sum_a\pi_{\omega,\theta}(a \mid s)\sum_{s&#39;} \gamma
P(s&#39;|s,a)\frac{\partial U(\omega,s&#39;)}{\partial \theta}
\]</span></p>
<p><strong>Theorem 1</strong> (<strong>Intra-Option Policy Gradient
Theorem</strong>). Given a set of Markov options with stochastic
intra-option policies differentiable in their parameters <span
class="math display">\[\theta\]</span>, the gradient of the expected
discounted return with respect to <span
class="math display">\[\theta\]</span> and initial condition <span
class="math display">\[(s_0,\omega_0)\]</span> is:</p>
<p><span class="math display">\[
\sum_{s,\omega} \mu_{\Omega}(s,\omega \mid s_0,\omega_0)\sum_a
\frac{\partial \pi_{\omega,\theta}(a \mid s)}{\partial \theta}
Q_U(s,\omega,a)
\]</span></p>
<p>其中 <span class="math display">\[\mu_{\Omega}\]</span>
是状态-选项对的折扣权重</p>
<p><span class="math display">\[
\mu_{\Omega}(s,\omega \mid s_0,\omega_0)=\sum_{t=0}^{\infty}\gamma^t
P(s_t=s,\omega_t=\omega \mid s_0,\omega_0)
\]</span></p>
<p>下面计算终点函数的梯度，假设时间是随机化的并且可微的关于参数 <span
class="math display">\[\vartheta\]</span></p>
<p><span class="math display">\[
\frac{\partial Q_{\Omega}(s,\omega)}{\partial \vartheta} = \sum_a
\pi_{\omega,\theta}(a \mid s)\sum_{s&#39;}\gamma P(s&#39; \mid s,a)
\frac{\partial U(\omega,s&#39;)}{\partial \vartheta}
\]</span></p>
<p>关于 <span class="math display">\[U\]</span> 的梯度，可以结合又是函数
<span class="math display">\[A_{\Omega}\]</span> 来计算：</p>
<p><span class="math display">\[
\begin{align}
\frac{\partial U(\omega,s&#39;)}{\partial \vartheta} =&amp;
-\frac{\partial \beta_{\omega,\vartheta}(s&#39;)}{\partial \vartheta}
A_{\Omega}(s&#39;,\omega) \\
&amp;+ \gamma\sum_{\omega&#39;} \sum_{s&#39;&#39;}
P(s&#39;&#39;,\omega&#39; \mid s&#39;,\omega)\frac{\partial
U(\omega&#39;,s&#39;&#39;)}{\partial \vartheta}
\end{align}
\]</span></p>
<p>其中，优势函数 <span class="math display">\[A_{\Omega}(s&#39;,\omega)
= Q_{\Omega}(s&#39;,\omega)-V_{\Omega}(s&#39;)\]</span> .</p>
<p><strong>Theorem 2</strong> (<strong>Termination Gradient
Theorem</strong>). Given a set of Markov options with stochastic
termination functions differentiable in their parameters <span
class="math display">\[\vartheta\]</span>, the gradient of the expected
discounted return objective with respect to <span
class="math display">\[\vartheta\]</span> and the initial condition
<span class="math display">\[(s_1, \omega_0)\]</span> is:</p>
<p><span class="math display">\[
-\sum_{s&#39;,\omega}\mu_{\Omega}(s&#39;,\omega \mid
s_1,\omega_0)\frac{\partial \beta_{\omega,\vartheta}(s&#39;)}{\partial
\vartheta}A_{\Omega}(s&#39;,\omega)
\]</span></p>
<p>其中 <span class="math display">\[\mu_{\Omega}(s&#39;,\omega \mid
s_1,\omega_0)\]</span> 是状态-选项对 <span
class="math display">\[(s_1,\omega_0)\]</span> 的折扣权重</p>
<p><span class="math display">\[
\mu_{\Omega}(s,\omega \mid s_1,\omega_0)=\sum_{t=0}^{\infty} \gamma^t
P(s_{t+1}=s,\omega_t=\omega|s_1,\omega_0)
\]</span></p>
<ul>
<li>算法结构：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210709-1.png"
alt="算法结构" />
<figcaption aria-hidden="true">算法结构</figcaption>
</figure>
<ul>
<li>算法伪代码：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210709-2.png"
alt="算法伪代码" />
<figcaption aria-hidden="true">算法伪代码</figcaption>
</figure>
<ul>
<li>算法的问题：假设了所有的options适用于所有的地方。Perhaps the biggest
remaining limitation of our work is the assumption that all options
apply everywhere.</li>
</ul>
<h2 id="总结">总结</h2>
<p>option-critic算法框架是典型的HRL实现方式之一，上下两层都使用策略梯度优化的证明过程看着还是很不错的。具体公式和推导可以参考原文以及附件。相关代码可以在paper
with code找出来看看，估计会比FuN的结构的HRL更容易复现吧。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Q130-被围绕的区域-中等-DFS/BFS</title>
    <url>/2021/07/13/2021-07-13-Q130-%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F-%E4%B8%AD%E7%AD%89-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="被围绕的区域"><a
href="https://leetcode-cn.com/problems/surrounded-regions/">130.
被围绕的区域</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符
<code>'X'</code> 和 <code>'O'</code> ，找到所有被 <code>'X'</code>
围绕的区域，并将这些区域里所有的 <code>'O'</code> 用 <code>'X'</code>
填充。</p>
<p>x x x x <span class="math display">\[\rightarrow\]</span> x x x x</p>
<p>x 0 0 x <span class="math display">\[\rightarrow\]</span> x x x x</p>
<p>x x 0 x <span class="math display">\[\rightarrow\]</span> x x x x</p>
<p>x 0 x x <span class="math display">\[\rightarrow\]</span> x 0 x x</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：board =
[["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
输出：[["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O'
都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O'
最终都会被填充为
'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：board = [["X"]] 输出：[["X"]]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>m == board.length</code></li>
<li><code>n == board[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>board[i][j]</code> 为 <code>'X'</code> 或
<code>'O'</code></li>
</ul>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>写在前面 本题给定的矩阵中有三种元素：</p>
<ul>
<li><p>字母 X；</p></li>
<li><p>被字母 X 包围的字母 O；</p></li>
<li><p>没有被字母 X 包围的字母 O。</p></li>
</ul>
<p>本题要求将所有被字母 X 包围的字母 O都变为字母 X ，但很难判断哪些 O
是被包围的，哪些 O 不是被包围的。</p>
<p>注意到题目解释中提到：任何边界上的 O 都不会被填充为 X。
我们可以想到，所有的不被包围的 O 都直接或间接与边界上的 O
相连。我们可以利用这个性质判断 O 是否在边界上，具体地说：</p>
<ul>
<li>对于每一个边界上的
O，我们以它为起点，标记所有与它直接或间接相连的字母 O；</li>
<li>最后我们遍历这个矩阵，对于每一个字母：
<ul>
<li>如果该字母被标记过，则该字母为没有被字母 X 包围的字母
O，我们将其还原为字母 O；</li>
<li>如果该字母没有被标记过，则该字母为被字母 X 包围的字母
O，我们将其修改为字母 X。</li>
</ul></li>
</ul>
<p><strong>深度优先搜索：</strong></p>
<p>我们可以使用深度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母
<code>O</code> 修改为字母 <code>A</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, board</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        n, m = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">            <span class="comment"># 如果board[x][y]不是位于矩阵边框，且字符为&#x27;x&#x27;，则返回为空</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= x &lt; n <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= y &lt; m <span class="keyword">or</span> board[x][y] != <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 对于位于矩阵边框，且字符为&#x27;0&#x27;的元素</span></span><br><span class="line">            board[x][y] = <span class="string">&quot;A&quot;</span></span><br><span class="line">            dfs(x + <span class="number">1</span>, y)</span><br><span class="line">            dfs(x - <span class="number">1</span>, y)</span><br><span class="line">            dfs(x, y + <span class="number">1</span>)</span><br><span class="line">            dfs(x, y - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检测边框</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dfs(i, <span class="number">0</span>)</span><br><span class="line">            dfs(i, m - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 检测边框</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):</span><br><span class="line">            dfs(<span class="number">0</span>, i)</span><br><span class="line">            dfs(n - <span class="number">1</span>, i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&quot;O&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&quot;X&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># [[&quot;X&quot;]] </span></span><br><span class="line">    <span class="comment"># [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]</span></span><br><span class="line">    board = [[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>],[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;X&quot;</span>],[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;X&quot;</span>],[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>]]</span><br><span class="line">    solution=Solution().solve(board)</span><br><span class="line">    <span class="built_in">print</span>(board)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><strong>时间复杂度</strong>：<span class="math display">\[O(n \times
m)\]</span>，其中 n 和 m
分别为矩阵的行数和列数。深度优先搜索过程中，每一个点至多只会被标记一次。</li>
<li><strong>空间复杂度</strong>：<span class="math display">\[O(n \times
m)\]</span>，其中 n 和 m
分别为矩阵的行数和列数。主要为深度优先搜索的栈的开销。</li>
</ul>
<h3 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h3>
<p>我们可以使用广度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母
<code>O</code> 修改为字母 <code>A</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve_BFS</span>(<span class="params">self, board </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        n, m = <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 边框有&#x27;0&#x27;就放入队列</span></span><br><span class="line">        que = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> board[i][<span class="number">0</span>] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                que.append((i, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">if</span> board[i][m - <span class="number">1</span>] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                que.append((i, m - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> board[<span class="number">0</span>][i] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                que.append((<span class="number">0</span>, i))</span><br><span class="line">            <span class="keyword">if</span> board[n - <span class="number">1</span>][i] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                que.append((n - <span class="number">1</span>, i))</span><br><span class="line">        <span class="comment"># 队列中的每个元素标记为&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> que:</span><br><span class="line">            x, y = que.popleft()</span><br><span class="line">            board[x][y] = <span class="string">&quot;A&quot;</span></span><br><span class="line">        <span class="comment"># 检测周围的4个点是否为非边框，且值为&#x27;0&#x27;，如果是，则加入队列</span></span><br><span class="line">            <span class="keyword">for</span> mx, my <span class="keyword">in</span> [(x - <span class="number">1</span>, y), (x + <span class="number">1</span>, y), (x, y - <span class="number">1</span>), (x, y + <span class="number">1</span>)]:</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= mx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= my &lt; m <span class="keyword">and</span> board[mx][my] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                    que.append((mx, my))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&quot;O&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                    board[i][j] = <span class="string">&quot;X&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><strong>时间复杂度</strong>：<span class="math display">\[O(n \times
m)\]</span>，其中 n 和
分别为矩阵的行数和列数。广度优先搜索过程中，每一个点至多只会被标记一次。</li>
<li><strong>空间复杂度</strong>：<span class="math display">\[O(n \times
m)\]</span>，其中 n 和 m
分别为矩阵的行数和列数。主要为广度优先搜索的队列的开销。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Option Discovery in Hierarchical Reinforcement Learning using Spatio-Temporal Clustering</title>
    <url>/2021/07/06/2021-07-06-Reinforcement%20Learning%20-%20Option%20Discovery%20in%20Hierarchical%20Reinforcement%20Learning%20using%20Spatio-Temporal%20Clustering%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1
id="option-discovery-in-hierarchical-reinforcement-learning-using-spatio-temporal-clustering">Option
Discovery in Hierarchical Reinforcement Learning using Spatio-Temporal
Clustering</h1>
<p>论文链接：https://arxiv.org/pdf/1605.05359v3.pdf</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>本文旨在提出一个自动的技能获取框架，可以分层描述任务，对状态抽象以及在抽象状态之间拓展行为。这样的分层结构可以加速学习过程</p></li>
<li><p>使用动态系统中寻找状态空间中亚稳态区域和抽象状态的思想。We use
ideas from dynamical systems to find metastable regions in the state
space and associate them with abstract states</p></li>
<li><p>使用空间聚类算法PCCA+，做状态抽象，形成抽象的状态量</p></li>
<li><p>These skills are independent of the learning task and can be
efficiently reused across a variety of tasks defined over the same
model</p></li>
<li><p>The core idea of hierarchical reinforcement learning is to break
down the reinforcement learning problem into subtasks through a
hierarchy of abstractions.</p></li>
<li><p>自动发现不同的技能，这是一个小领域。Our focus in this paper is to
present our framework on automated discovery of skills</p>
<ul>
<li>定义状态空间中的瓶颈状态，这些状态被划分为集合，两组罕见状态之间的转换会在这种转换的相应点引入瓶颈状态。达到这种瓶颈状态的策略被缓存为选项
(McGovern and Barto 2001).</li>
<li>使用因式分解来表示状态空间中存在的结构，识别很少变化的动作序列，并把这些序列作为选项被缓存起来
(Hengst 2004)</li>
<li>使用智能体与环境交互的图表征，并使用中间中心性度量来识别子任务</li>
<li>使用聚类方法(光谱或其他方法)分离出MDP的不同强关联成分，并识别连接不同聚类的瓶颈
(Menache, Mannor, and Shimkin 2002).</li>
</ul></li>
<li><p>文章的目标是在没有任何先验知识的情况下获得技能和发现抽象</p></li>
<li><p>使用SMDP Q-Learning，Intra Option Q-Learning</p></li>
<li><p>主要贡献：</p>
<ul>
<li>使用PCCA+抽象MDP的state</li>
<li>设计一种组合option的方式</li>
<li>大状态空间下，不好使用，设计一种聚合的状态空间</li>
</ul></li>
<li><p>Option框架：The option framework is one of the formalisations
used to represent hierarchies in RL (Sutton, Precup, and Singh 1999).
Formally, an option is a tuple <span class="math inline">\(O = (I, \mu,
\beta)\)</span> here:</p>
<ul>
<li><span class="math inline">\(I\)</span> is the initiation set: a set
of states from which the action can be activated</li>
<li><span class="math inline">\(\mu\)</span> is a policy function where
µ(s, a) represents the preference value given to action a in state s
following option O.</li>
<li><span class="math inline">\(\beta\)</span> is the termination
function: When an agent enters a state s while following option O, the
option could be terminated with a probability <span
class="math inline">\(\beta(s)\)</span>.</li>
</ul></li>
<li><p>Semi-Markov Decision Process (SMDP)</p></li>
</ul>
<p><span class="math display">\[
Q(s,o)\leftarrow Q(s,o)+\alpha[r+\gamma^k \max_{a\in O} Q(s,a)-Q(s,o)]
\]</span></p>
<ul>
<li><p>SMDP学习方法的一个主要缺点是，在了解其结果之前，选项需要完全执行到终止。</p></li>
<li><p>Perron Cluster Analysis (PCCA+)</p></li>
</ul>
<h2 id="总结">总结</h2>
<p>主要工作是利用一个谱聚类算法自动地寻找option，算是options类算法的变体。option可以赋予策略语义特征，可以看看原始文章。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | DRN: A Deep Reinforcement Learning Framework for News Recommendation</title>
    <url>/2021/07/12/2021-07-12-Reinforcement%20Learning%20-%20DRN-A%20Deep%20Reinforcement%20Learning%20Framework%20for%20News%20Recommendation/</url>
    <content><![CDATA[<h1
id="drn-a-deep-reinforcement-learning-framework-for-news-recommendation">DRN:
A Deep Reinforcement Learning Framework for News Recommendation</h1>
<p>论文链接：http://www.personal.psu.edu/~gjz5038/paper/www2018_reinforceRec/www2018_reinforceRec.pdf</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>针对新闻和用户动态特征的问题，目前的方法主要存在三个问题：</p>
<ul>
<li>模型<strong>只考虑当前奖励</strong>（例如CTR，点击转化率）</li>
<li>很少有模型考虑<strong>使用用户的反馈</strong>而不是点击/不点击的标签（例如用户反馈频率）</li>
<li>模型总是<strong>推荐相似的东西</strong>，会使得用户感到无聊</li>
</ul></li>
<li><p>一些典型方法：</p>
<ul>
<li>content based methods [19, 22, 33],</li>
<li>collaborative filtering based methods [11, 28, 34]</li>
<li>hybrid methods [12, 24, 25].</li>
<li>deep learning models [8, 45, 52]</li>
</ul></li>
<li><p>三个挑战：</p>
<ul>
<li>First, the dynamic changes in news recommendations are difficult to
handle.
<ul>
<li>First, news become outdated very fast.</li>
<li>Second, users’ interest on different news might evolve during
time.</li>
</ul></li>
<li>Second, current recommendation methods [23, 35, 36, 43] usually only
consider the click / no click labels or ratings as users’ feedback.</li>
<li>The third major issue of current recommendation methods is its
tendency to keep recommending similar items to users, which might
decrease users’ interest in similar topics.</li>
</ul></li>
<li><p>一般的强化学习推荐方法使用 <span
class="math display">\[\epsilon-greedy\]</span> 或者 Upper Confidence
Bound (UCB) 方法增加推荐的探索能力。</p>
<p>但是 <span class="math display">\[\epsilon-greedy\]</span>
会损害当前推荐的性能，而UCB在一件物品尝试了几次之后才能得到相对准确的奖励评估。因此需要更高效的探索方式。</p></li>
<li><p>通过使用 Dueling Bandit Gradient Descent (DBGD)
算法作为探索策略，它会随机从候选项的邻域或者候选项中选择推荐对象。这个探索策略可以避免推荐完全无关的信息，因此可以保持当前策略的精度。</p></li>
<li><p>模型框图：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210712-1.png" /></p></li>
<li><p>算法每1小时更新一次。Every one hour, the agent will use the log
in the memory to update its recommendation algorithm.</p></li>
<li><p>主要贡献：</p>
<ul>
<li>我们认为用户的活跃性有助于提高推荐的准确性，这可以提供额外的信息，而不是简单地使用用户点击标签。</li>
<li>应用了更有效的探索方法，避免了由经典探索方法(例如，<span
class="math display">\[\epsilon\]</span>-greedy和置信上限)引起的推荐准确度下降。</li>
<li>我们的系统已经在线部署在商业新闻推荐应用程序中。大量的离线和在线实验显示了我们方法的优越性能。</li>
</ul></li>
<li><p>一些推荐方法的特点：</p>
<ul>
<li>Content-based methods：统计内容的频率，推荐相似的内容；</li>
<li>Collaborative filtering
methods：使用过去的转化率或者其他类似用户的转化率，或者结合两者来预测；</li>
<li>Hybrid methods：提升用户画像模型；</li>
<li>deep learning models：建模复杂的用户-物品关系</li>
</ul></li>
</ul>
<h3 id="算法模型">算法模型：</h3>
<ul>
<li><p>算法步骤：</p>
<ol type="1">
<li><strong>PUSH</strong>: In each timestamp (t1, t2, t3, t4, t5, ...),
when a user sends a news request to the system, the recommendation agent
G will take the feature representation of the current user and news
candidates as input, and generate a top-k list of news to recommend L. L
is generated by combining the exploitation of current model (will be
discussed in Section 4.3) and exploration of novel items (will be
discussed in Section 4.5).</li>
<li><strong>FEEDBACK</strong>: User u who has received recommended news
L will give their feedback B by his clicks on this set of news.</li>
<li><strong>MINOR UPDATE</strong>: After each timestamp (e.g., after
timestamp t1), with the feature representation of the previous user u
and news list L, and the feedback B, agent G will update the model by
comparing the recommendation performance of exploitation network Q and
exploration network Q˜ (will be discussed in Section 4.5). If Q˜ gives
better recommendation result, the current network will be updated
towards Q˜ . Otherwise, Q will be kept unchanged. Minor update can
happen after every recommendation impression happens.</li>
<li><strong>MAJOR UPDATE</strong>: After certain period of timeTR(e.g.,
after timestamp t3), agent G will use the user feedback B and user
activeness stored in the memory to update the network Q. Here, we use
the experience replay technique [31] to update the network.
Specifically, agent G maintains a memory with recent historical click
and user activeness records. When each update happens, agent G will
sample a batch of records to update the model. Major update usually
happens after a certain time interval, like one hour, during which
thousands of recommendation impressions are conducted and their
feedbacks are collected.</li>
<li>Repeat step (1)-(4).</li>
</ol></li>
<li><p>特征设计：</p>
<ul>
<li><p><strong>News features</strong> includes 417 dimension one hot
features that describe whether certain property appears in this piece of
news, including headline, provider, ranking, entity name, category,
topic category, and click counts in last 1 hour, 6 hours, 24 hours, 1
week, and 1 year respectively.</p></li>
<li><p><strong>User features</strong> mainly describes the features
(i.e., headline, provider, ranking, entity name, category, and topic
category) of the news that the user clicked in 1 hour, 6 hours, 24
hours, 1 week, and 1 year respectively. There is also a total click
count for each time granularity. Therefore, there will be totally 413 ×
5 = 2065 dimensions.</p></li>
<li><p><strong>User news features</strong>. These 25-dimensional
features describe the interaction between user and one certain piece of
news, i.e., the frequency for the entity (also category, topic category
and provider) to appear in the history of the user’s readings.</p></li>
<li><p><strong>Context features</strong>. These 32-dimensional features
describe the context when a news request happens, including time,
weekday, and the freshness of the news (the gap between request time and
news publish time).</p></li>
</ul></li>
<li><p>模型框架，包含离线和在线部分</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210712-3.png"
alt="Model framework" />
<figcaption aria-hidden="true">Model framework</figcaption>
</figure>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210712-4.png"
alt="Q network" /> <span class="math display">\[
y_{s,a}=Q(s,a)=r_{immediate}+\gamma r_{future}\\
y_{s,a,t}=r_{a,t+1}+\gamma Q\big(s_{a,t+1},\arg \max_{a&#39;}
Q(s_{a,t+1},a&#39;;W_t);W_t&#39;\big)
\]</span></p>
<h3 id="user-activeness">User Activeness</h3>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210712-3.png"
alt="User activeness estimation" /> <span class="math display">\[
\lambda(t)=\lim_{dt\rightarrow 0} \frac{\Pr\{t \leq T&lt;t+dt\mid T\geq
t \}}{d t}\\
S(t)=e^{-\int_0^\infty \lambda(x)dx}\\
T_0=\int_0^{\infty}S(t)dt
\]</span> the maximum user activeness is truncated to 1.</p>
<p>The click / no click label <span
class="math display">\[r_{click}\]</span> and the user activeness <span
class="math display">\[r_{active}\]</span> are combined as: <span
class="math display">\[
r_{total}=r_{click}+\beta r_{active}
\]</span></p>
<ul>
<li>网络框架</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210712-2.png"
alt="Exploration by Dueling Bandit Gradient Descent" />
<figcaption aria-hidden="true">Exploration by Dueling Bandit Gradient
Descent</figcaption>
</figure>
<p><span class="math display">\[\hat{L}\]</span> 首先使用概率交错方法从
<span class="math display">\[L\]</span> 和 <span
class="math display">\[\tilde{L}\]</span> 。大致就是首先随机从 <span
class="math display">\[L\]</span> 和 <span
class="math display">\[\tilde{L}\]</span>
选择推荐项，之后按照概率值更新网络 <span
class="math display">\[\tilde{Q}\]</span></p>
<p><span class="math display">\[
\Delta W=\alpha \cdot rand(-1,1)\cdot W\\
W&#39;=W+\eta \tilde{W}
\]</span></p>
<h2 id="总结">总结</h2>
<p>感觉整体框架还是很好理解的，针对任务的改进比较多，对强化学习框架的改动比较小。</p>
<p>两个网络的构造也类似于DQN中的target
network，输入的高维特征类比于输入的图像信息。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Recommendation</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Hierarchical Deep Reinforcement Learning: Integrating Temporal Abstraction and Intrinsic Motivation</title>
    <url>/2021/07/14/2021-07-14-Reinforcement%20Learning%20-%20Hierarchical%20Deep%20Reinforcement%20Learning%20Integrating%20Temporal%20Abstraction%20and%20Intrinsic%20Motivation/</url>
    <content><![CDATA[<h1
id="hierarchical-deep-reinforcement-learning-integrating-temporal-abstraction-and-intrinsic-motivation">Hierarchical
Deep Reinforcement Learning: Integrating Temporal Abstraction and
Intrinsic Motivation</h1>
<p>论文链接：https://proceedings.neurips.cc/paper/2016/file/f442d33fa06832082290ad8544a8da27-Paper.pdf</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>稀疏反馈下，不充分的探索使得agent很难学习到鲁棒的行为策略。本文通过设计本质动机来驱动行为探索，并结合分层的结构来完成行为，最后在奖励稀疏和延迟的任务中进行了实验。</p></li>
<li><p>结构分为两层，顶层的meta-controller学习定义子目标，底层的controller学习根据状态和子目标执行行动，直到目标完成或者情节结束。</p></li>
<li><p>这项工作是基于 option 框架完成的。相关的分层强化学习框架还有 MAXQ
等。这篇文章没有对每个option单独使用Q函数。这一点和 [21]
是一致的，这会带来两个好处：（1）不同选项之间存在共享学习；（2）该模型可扩展到大量options的情况；</p>
<p>[21]. T. Schaul, D. Horgan, K. Gregor, and D. Silver. Universal value
function approximators. In Proceedings of the 32nd International
Conference on Machine Learning (ICML-15), pages 1312–1320,
2015.</p></li>
<li><p>In another paper, Singh et al. [26] take an evolutionary
perspective to optimize over the space of reward functions for the
agent, leading to a notion of extrinsically and intrinsically motivated
behavior.</p></li>
<li><p>Cognitive Science and Neuroscience The nature and origin of
intrinsic goals in humans is a thorny issue but there are some notable
insights from existing literature. There is converging evidence in
developmental psychology that human infants, primates, children, and
adults in diverse cultures base their core knowledge on certain
cognitive systems including – entities, agents and their actions,
numerical quantities, space, social-structures and intuitive theories
[29]. During curiositydriven activities, toddlers use this knowledge to
generate intrinsic goals such as building physically stable block
structures. In order to accomplish these goals, toddlers seem to
construct subgoals in the space of their core knowledge. Knowledge of
space can also be utilized to learn a hierarchical decomposition of
spatial environments. This has been explored in Neuroscience with the
successor representation, which represents value functions in terms of
the expected future state occupancy. Decomposition of the successor
representation have shown to yield reasonable subgoals for spatial
navigation problems [5, 30].</p></li>
<li><p>MDP过程中的高效探索是一个难题。<span
class="math display">\[\epsilon-greedy\]</span>
在局部探索中表现还好，但是对于整个状态空间不同区域的探索比较失败。这里通过设计本质目标
<span class="math display">\[g\]</span> 和本质奖励intrinsic
rewards</p></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210714-1.png" /></p>
<ul>
<li><p>agent设置：</p>
<ul>
<li>meta-controller: 接收状态 <span class="math display">\[s_t\]</span>
然后选择子目标 <span class="math display">\[g_t\]</span>.</li>
<li>controller: 根据 <span class="math display">\[s_t\]</span> 和 <span
class="math display">\[g_t\]</span> 选择行为 <span
class="math display">\[a_t\]</span>.</li>
</ul></li>
<li><p>一个内部的critic用来为 controller 评估 <span
class="math display">\[r_t(g)\]</span>
（这篇文章使用的是一个二值的奖励）。controller
的目标就是最大化累积的本质奖励intrinsic reward <span
class="math display">\[R_t(g)=\sum_{t&#39;=t}^{\infty}
\gamma^{t&#39;-t}r_{t&#39;}(g)\]</span></p></li>
<li><p>meta-controller 的目标是最大化累积的外部奖励 extrinsic reward
<span class="math display">\[F_t=\sum_{t&#39;=t}^{\infty}
\gamma^{t&#39;-t}f_{t&#39;}\]</span>，其中<span
class="math display">\[f_{t&#39;}\]</span>是从环境中收到的奖励信号，并且<span
class="math display">\[F_{t}\]</span>和<span
class="math display">\[R_{t}\]</span>的时间尺度是不同的。</p></li>
<li><p>Controller: <span class="math display">\[
Q_1^*(s,a;g)=\max_{\pi_{a,g}} \mathbb{E} \Big[r_t+\gamma
\max_{a_{t+1}}Q_1^*(s_{t+1},a_{t+1};g)\Big]
\]</span></p></li>
<li><p>meta-controller: <span class="math display">\[
Q_2^*(s,g)=\max_{\pi_{g}} \mathbb{E} \Big[\sum_{t&#39;=t}^{t+N}
f_{t&#39;}+\gamma \max_{g&#39;}Q_2^*(s_{t+N},g&#39;)\Big]
\]</span> N 代表当控制器停止时所经过的步数。</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210714-2.png"
alt="算法步骤" />
<figcaption aria-hidden="true">算法步骤</figcaption>
</figure>
<h2 id="总结">总结</h2>
<p>很简单直接的思路，直接在DQN上做出了分层的改进，但是感觉和option的结合并不是很紧密，比如终止函数没有单独设计，时间缩放步数N可能需要预设等等。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | On Learning Intrinsic Rewards for Policy Gradient Methods</title>
    <url>/2021/07/16/2021-07-16-Reinforcement%20Learning%20-%20On%20Learning%20Intrinsic%20Rewards%20for%20Policy%20Gradient%20Methods/</url>
    <content><![CDATA[<h1 id="on-learning-intrinsic-rewards-for-policy-gradient-methods">On
Learning Intrinsic Rewards for Policy Gradient Methods</h1>
<p>论文链接：https://dl.acm.org/doi/pdf/10.5555/3327345.3327375</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li>本文提出基于 <strong>optimal reward framework</strong> [Singh et
al., 2010] 的本质奖励学习方法，并和 PPO 算法（Mujoco）结合</li>
</ul>
<p>Satinder Singh, Richard L Lewis, Andrew G Barto, and Jonathan Sorg.
Intrinsically motivated reinforcement learning: An evolutionary
perspective. IEEE Transactions on Autonomous Mental Development,
2(2):70–82, 2010.</p>
<ul>
<li>在一些游戏场景中缺少清晰的奖励函数选择方式。有时候存在多个目标，最小化能量消耗，最大化吞吐量，最小化延时等（minimizing
energy consumption and maximizing throughput and minimizing
latency）</li>
<li>早期的工作证明了最优策略的奖励函数并不唯一，例如使用一个势能函数（potential-based
reward [Ng et al., 1999]）的奖励函数不会改变最优策略。</li>
</ul>
<p>Andrew Y Ng, Daishi Harada, and Stuart J Russell. Policy invariance
under reward transformations: Theory and application to reward shaping.
In Proceedings of the Sixteenth International Conference on Machine
Learning, pages 278–287. Morgan Kaufmann Publishers Inc., 1999.</p>
<ul>
<li><p>另一方面，由于实际任务中的各种限制（e.g., inadequate memory,
representational capacity, computation, training data,
etc.），智能体很难学习到最优策略。因此，在解决奖励设计问题时，希望设计能改变最优策略的奖励函数变换方式。</p></li>
<li><p>构造奖励函数的好处：</p>
<ul>
<li>比原始的奖励函数更少的稀疏性，加快学习过程 [Rajeswaran et al.,
2017]；</li>
<li>帮助探索状态边界的区域，例如count-based reward
鼓励探索很少探索到的区域 [Bellemare et al., 2016, Ostrovski et al.,
2017, Tang et al., 2017]；</li>
</ul></li>
<li><p>相关的方法：</p>
<ul>
<li>preference elicitation</li>
<li>inverse RL</li>
<li>intrinsically motivated RL</li>
<li>optimal rewards</li>
<li>potentialbased shaping rewards</li>
<li>more general reward shaping</li>
<li>mechanism design</li>
</ul></li>
<li><p>主要贡献：</p>
<ul>
<li>基于策略梯度的方法推导intrinsic rewards学习方法，并与
task-specifying (hereafter extrinsic) reward
相结合，最大化外部奖励。</li>
<li>内部和外部奖励之和的参数通过策略梯度方法更新训练</li>
</ul></li>
<li><p>使用本质奖励的主要原因是对RL
agent的训练都是有限的（表征能力，可得到的数据，计算能力限制等等），通过集合内部奖励可以环节这些限制。The
main intuition is that in practice all RL agents are bounded
(computationally, representationally, in terms of data availability,
etc.) and the optimal intrinsic reward can help mitigate these
bounds.</p></li>
</ul>
<h3 id="background-and-related-work">Background and Related Work</h3>
<ul>
<li><p><strong>Optimal rewards and reward design</strong></p>
<p>Sorg et al.
[2010]提出了PGRD算法，这是一种可扩展的算法，仅适用于基于前瞻搜索(例如，UCT)的规划agent(因此agent本身不是基于学习的agent；只学习与固定规划者一起使用的奖励)。Sorg
et al. [2010] introduced PGRD (Policy Gradient for Reward Design), a
scalable algorithm that only works with lookahead-search (e.g., UCT)
based planning agents (and hence the agent itself is not a
learning-based agent; only the reward to use with the fixed planner is
learned).</p></li>
<li><p><strong>Reward shaping and Auxiliary rewards</strong></p>
<ul>
<li><p>Reward shaping [Ng et al.,
1999]提供了一个一般性的答案，说明什么样的奖励函数修改空间不会改变最优策略，特别是基于势能的奖励函数。Reward
shaping [Ng et al., 1999] provides a general answer to what space of
reward function modifications do not change the optimal policy,
specifically potential-based rewards.</p></li>
<li><p>The <strong>UNREAL</strong> agent <strong>[Jaderberg et al.,
2016]</strong> used pseudo-reward computed from unsupervised auxiliary
tasks to refine its internal representations.</p>
<p>Max Jaderberg, Volodymyr Mnih, Wojciech Marian Czarnecki, Tom Schaul,
Joel Z Leibo, David Silver, and Koray Kavukcuoglu. Reinforcement
learning with unsupervised auxiliary tasks. arXiv preprint
arXiv:1611.05397, 2016.</p></li>
<li><p>In <strong>Bellemare et al. [2016]</strong>, <strong>Ostrovski et
al. [2017]</strong>, and <strong>Tang et al. [2017]</strong>, a
pseudo-count based reward bonus was given to the agent to encourage
exploration</p></li>
<li><p><strong>Pathak et al. [2017]</strong> used self-supervised
prediction errors as intrinsic rewards to help the agent
explore.</p></li>
<li><p>本文的主要出发点是学习本质奖励，使其能够映射高维的观测和行为到奖励中。The
main departure point in this paper is that we learn the parameters of an
intrinsic reward function that maps high-dimensional observations and
actions to rewards.</p></li>
</ul></li>
<li><p><strong>Hierarchical RL</strong></p>
<ul>
<li>另一类的的本质奖励在分层强化学习中使用，比如FeUdal
Network通过manager和worker在不同时间尺度尽心学习，manager学习抽象的目标指挥worker最大化外部奖励</li>
<li>Finally, another difference is that hierarchical RL typically treats
the lower-level learner as a black box while we train the intrinsic
reward using gradients through the policy module in our
architecture.</li>
</ul></li>
<li><p><strong>Meta Learning for RL</strong></p>
<ul>
<li>这篇工作也可以被当做meta-RL方向的工作</li>
<li>与之前工作的区别：在单个任务中元学习到内部奖励，而不是快速适应新的任务。However,
a key distinction from the prior work on meta learning for RL [Finn et
al., 2017, Duan et al., 2017, Wang et al., 2016, Duan et al., 2016b] is
that our method aims to meta-learn intrinsic rewards within a single
task, whereas much of the prior work is designed to quickly adapt to new
tasks in a few-shot learning scenario.</li>
</ul></li>
</ul>
<h3
id="gradient-based-learning-of-intrinsic-rewards-a-derivation">Gradient-Based
Learning of Intrinsic Rewards: A Derivation</h3>
<h4 id="policy-gradient-based-rl">Policy Gradient based RL</h4>
<ul>
<li><p>The value of a policy <span
class="math display">\[J(\theta)=E[\sum^{\infty}_{t=0}
\gamma^tr_t]\]</span></p></li>
<li><p>the gradient of the value <span
class="math display">\[J(\theta)\]</span> is<br />
<span class="math display">\[
\nabla_{\theta} J(\theta)=E_{\theta}[G(s_t,a_t) \nabla_{\theta} \log
\pi_{\theta}(a_t|s_t)]\\
G(s_t,a_t)=\sum^{\infty}_{i=t} \gamma^{i-t}r_i
\]</span> G是到终点为止的return</p></li>
</ul>
<h4 id="lirpg-learning-intrinsic-rewards-for-policy-gradient">LIRPG:
Learning Intrinsic Rewards for Policy Gradient</h4>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210719-1.png"
alt="Learning Intrinsic Rewards for Policy Gradient" />
<figcaption aria-hidden="true">Learning Intrinsic Rewards for Policy
Gradient</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210719-2.png"
alt="Algorithm 1 LIRPG: Learning Intrinsic Reward for Policy Gradient" />
<figcaption aria-hidden="true">Algorithm 1 LIRPG: Learning Intrinsic
Reward for Policy Gradient</figcaption>
</figure>
<ul>
<li><p><strong>Updating Policy Parameters (θ)</strong></p>
<p>使用内部和外部奖励之和来更新 <span
class="math display">\[\theta\]</span><br />
<span class="math display">\[
\begin{align}
\theta&#39;&amp;=\theta+\alpha\nabla_{\theta} J^{ex+in}(\theta)\\
&amp;\approx \theta +\alpha G^{ex+in}(s_t,a_t) \nabla_{\theta} \log
\pi_{\theta}(a_t|s_t)
\end{align}
\]</span></p></li>
<li><p><strong>Updating Intrinsic Reward Parameters
(η)</strong></p></li>
</ul>
<p>Given an episode and the updated policy parameters <span
class="math display">\[\theta&#39;\]</span> , we update intrinsic reward
parameters.<br />
<span class="math display">\[
\begin{align}
\nabla_{\eta}
J^{ex}&amp;=\nabla_{\theta&#39;}J^{ex}\nabla_{\eta}\theta&#39;\\
\nabla_{\theta&#39;}J^{ex} &amp;\approx G^{ex}(s_t,a_t)
\nabla_{\theta&#39;}\log \pi_{\theta&#39;}(a_t \mid s_t)\\
\nabla_{\eta} \theta&#39; &amp; =\nabla_{\eta}(\theta+\alpha
G^{ex+in}(s_t,a_t)\nabla_{\theta}\log \pi_{\theta}(a_t|s_t))\\
&amp;= \nabla_{\eta}(\alpha G^{ex+in}(s_t,a_t) \nabla_{\theta}\log
\pi_{\theta}(a_t|s_t)))\\
&amp;= \nabla_{\eta}(\alpha \lambda G^{in}(s_t,a_t) \nabla_{\theta}\log
\pi_{\theta}(a_t|s_t)))\\
&amp;= \alpha \lambda \sum^{\infty}_{i=t} \gamma^{i-t}\nabla_{\eta}
r^{in}_{\eta}(s_i,a_i)\nabla_{\theta} \log \pi_{\theta}(a_t\mid s_t)
\end{align}  
\]</span> The importance sampling:<br />
<span class="math display">\[
\nabla_{\theta&#39;}
J^{ex}=G^{ex}(s_t,a_t)\frac{\nabla_{\theta&#39;}\pi_{\theta&#39;}(a_t\mid
s_t)}{\pi_{\theta}(a_t\mid s_t)}\\  
\]</span>
重要性采样就是假设数据属于p(x)分布，但是实际采样是以q(x)分布采样的，需要乘以一个权重，把数据转换到p(x)分布，也就是重要性权重。</p>
<h2 id="总结">总结</h2>
<p>整个工作还是很漂亮的，尤其的这两层的梯度推导（需要结合途中公式和文本中的公式来看）。后面考虑再看几篇本质reward的文章，看看还有什么构造方式。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Q688-马在棋盘上的概率-中等-动态规划</title>
    <url>/2021/07/18/2021-07-18-Q688-%E9%A9%AC%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="马在棋盘上的概率"><a
href="https://leetcode-cn.com/problems/knight-probability-in-chessboard/">688.
“马”在棋盘上的概率</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>已知一个 NxN 的国际象棋棋盘，棋盘的行号和列号都是从 0
开始。即最左上角的格子记为 (0, 0)，最右下角的记为 (N-1, N-1)。</p>
<p>现有一个 “马”（也译作 “骑士”）位于 (r, c) ，并打算进行 K 次移动。</p>
<p>如下图所示，国际象棋的 “马” 每一步先沿水平或垂直方向移动 2
个格子，然后向与之相垂直的方向再移动 1 个格子，共有 8 个可选的位置。</p>
<p>现在 “马”
每一步都从可选的位置（包括棋盘外部的）中独立随机地选择一个进行移动，直到移动了
K 次或跳到了棋盘外面。</p>
<p>求移动结束后，“马” 仍留在棋盘上的概率。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: 3, 2, 0, 0 输出: 0.0625 解释: 输入的数据依次为 N, K, r, c 第 1
步时，有且只有 2 种走法令 “马”
可以留在棋盘上（跳到（1,2）或（2,1））。对于以上的两种情况，各自在第2步均有且只有2种走法令
“马” 仍然留在棋盘上。 所以 “马” 在结束后仍在棋盘上的概率为 0.0625。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>N</code> 的取值范围为 [1, 25]</li>
<li><code>K</code> 的取值范围为 [0, 100]</li>
<li>开始时，“马” 总是位于棋盘上</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<ul>
<li>令 <code>f[r][c][steps]</code> 代表马在位置 <code>(r, c)</code>
移动了 <code>steps</code>
次以后还留在棋盘上的概率，根据马的移动方式，我们有以下递归：</li>
</ul>
<p><span class="math display">\[
f[r][c][steps]=\sum_{dr,dc} f[r+dr][c+dc][steps-1]\cdot \frac{1}{8}
\]</span></p>
<ul>
<li>根据题目我们可以知道 (dr, dc) 的可能数据对是 (2, 1), (2, -1), (-2,
1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)。</li>
<li>我们将使用二维的 dp 和 dp2 来存储我们的数据，而不是使用三维数组 f。
<ul>
<li><code>dp2</code> 代表 <code>f[][][steps]</code>；</li>
<li><code>dp</code> 代表 <code>f[][][steps-1]</code>；</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">knightProbability</span>(<span class="params">self, N, K, r, c</span>):</span><br><span class="line">        dp = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">        dp[r][c] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(K): <span class="comment"># 走k步还在棋盘内的概率</span></span><br><span class="line">            dp2 = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">            <span class="keyword">for</span> r, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(dp):</span><br><span class="line">                <span class="keyword">for</span> c, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">                    <span class="keyword">for</span> dr, dc <span class="keyword">in</span> ((<span class="number">2</span>,<span class="number">1</span>),(<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">2</span>,<span class="number">1</span>),(-<span class="number">2</span>,-<span class="number">1</span>),</span><br><span class="line">                                   (<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,-<span class="number">2</span>)):</span><br><span class="line">                        <span class="comment"># 走了一步之后还在棋盘内</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= r + dr &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= c + dc &lt; N:</span><br><span class="line">                            dp2[r+dr][c+dc] += val / <span class="number">8.0</span></span><br><span class="line">            dp = dp2</span><br><span class="line">        <span class="comment"># map()函数把sum依次作用在dp的每一项上，在map()外再使用sum()完成二维数组的求和</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, dp))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    N, K, r, c = <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    solution=Solution().solve(N, K, r, c)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N^2 K)\]</span>。其中 N,
K 为题目中的定义。我们对 <span class="math display">\[N^2\]</span>
元素的每一层 dp 进行 O(1) 工作，并且考虑了 K 层。</li>
<li>空间复杂度：<span class="math display">\[O(N^2)\]</span>，dp 和 dp2
的大小。</li>
</ul>
<h3 id="approach-2-矩阵求幂">Approach 2: 矩阵求幂</h3>
<p>方法 1 中表示的状态重复表达了过渡到其他的线性组合的状态。
任何情况下，我们都可以将整个转换表示为这些线性组合的矩阵。然后，这个矩阵的第
n 次方代表了 n 移动的转换，因此我们可以将问题简化为矩阵求幂问题。</p>
<p><strong>算法：</strong></p>
<ul>
<li>首先，我们可以利用棋盘上的对称性。马可能有 n^2
的状态（假设它在板上）。由于横轴、纵轴和对角线的对称性，我们可以假设骑士在棋盘的左上象限，并且列数等于或大于行数。对于任何一个位置，通过满足条件通过轴反射得到位置将是该位置的标准索引。</li>
<li>这将使状态数从 <span class="math display">\[N^2\]</span> 减少到大约
<span class="math display">\[\frac{N^2}{8}\]</span> ，这使得在这个 <span
class="math display">\[O(\frac{N^2}{8}) \times O(\frac{N^2}{8})\]</span>
矩阵上下求幂大约快 <span class="math display">\[8^3\]</span> 倍。</li>
<li>现在，如果我们知道每一个状态在一次移动后都会变成某种状态的线性组合，那么让我们写一个过渡矩阵
<span class="math display">\[\mathcal{T}\]</span>，其中 <span
class="math display">\[\mathcal{T}\]</span> 的第 i 行代表了第 i
个状态的线性组合。然后，<span
class="math display">\[\mathcal{T}^n\]</span> 表示 n
次移动的转换，我们需要第 i 行的总和，其中 i 是起始位置的索引。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">knightProbability2</span>(<span class="params">self, N, K, sr, sc</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">canonical</span>(<span class="params">r, c</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span> * r &gt; N: r = N - <span class="number">1</span> - r</span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span> * c &gt; N: c = N - <span class="number">1</span> - c</span><br><span class="line">            <span class="keyword">if</span> r &gt; c: r, c = c, r</span><br><span class="line">            <span class="keyword">return</span> r*N + c</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">matrix_mult</span>(<span class="params">A, B</span>):</span><br><span class="line">            ZB = <span class="built_in">zip</span>(*B)</span><br><span class="line">            <span class="keyword">return</span> [[<span class="built_in">sum</span>(a * b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(row, col))</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> ZB] <span class="keyword">for</span> row <span class="keyword">in</span> A]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">matrix_expo</span>(<span class="params">A, K</span>):</span><br><span class="line">            <span class="keyword">if</span> K == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> [[+(i==j) <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="built_in">len</span>(A))]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(A))]</span><br><span class="line">            <span class="keyword">if</span> K == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> A</span><br><span class="line">            <span class="keyword">elif</span> K % <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> matrix_mult(matrix_expo(A, K-<span class="number">1</span>), A)</span><br><span class="line">            B = matrix_expo(A, K/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> matrix_mult(B, B)</span><br><span class="line"></span><br><span class="line">        index = [<span class="number">0</span>] * (N*N)</span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> xrange(N):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> xrange(N):</span><br><span class="line">                <span class="keyword">if</span> r*N + c == canonical(r, c):</span><br><span class="line">                    index[r*N + c] = t</span><br><span class="line">                    t += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index[r*N + c] = index[canonical(r, c)]</span><br><span class="line"></span><br><span class="line">        T = []</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> xrange(N):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> xrange(N):</span><br><span class="line">                <span class="keyword">if</span> r*N + c == canonical(r, c):</span><br><span class="line">                    row = [<span class="number">0</span>] * t</span><br><span class="line">                    <span class="keyword">for</span> dr, dc <span class="keyword">in</span> ((<span class="number">2</span>,<span class="number">1</span>),(<span class="number">2</span>,-<span class="number">1</span>),(-<span class="number">2</span>,<span class="number">1</span>),(-<span class="number">2</span>,-<span class="number">1</span>),</span><br><span class="line">                                    (<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,-<span class="number">2</span>),(-<span class="number">1</span>,<span class="number">2</span>),(-<span class="number">1</span>,-<span class="number">2</span>)):</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= r+dr &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= c+dc &lt; N:</span><br><span class="line">                            row[index[(r+dr)*N + c+dc]] += <span class="number">0.125</span></span><br><span class="line">                    T.append(row)</span><br><span class="line"></span><br><span class="line">        Tk = matrix_expo(T, K)</span><br><span class="line">        i = index[sr * N + sc]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(Tk[i])</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(N^6
\log(K))\]</span>。其中 N, K 为题目中的定义。大约有 <span
class="math display">\[\frac{N^2}{8}\]</span>
规范状态，这使得我们的矩阵乘法 <span
class="math display">\[O(N^6)\]</span>。为了找到这个矩阵的第 K
次幂，我们做了 <span class="math display">\[O(\log(K))\]</span>
matrix乘法。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(N^4)\]</span>，矩阵有大约 <span
class="math display">\[\frac{N^4}{64}\]</span> 个元素。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q200-岛屿数量-中等-深度and广度优先搜索</title>
    <url>/2021/07/18/2021-07-18-Q200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F-%E4%B8%AD%E7%AD%89-%E6%B7%B1%E5%BA%A6and%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="岛屿数量"><a
href="https://leetcode-cn.com/problems/number-of-islands/">200.
岛屿数量</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个由 '1'（陆地）和
'0'（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：grid = [ ["1","1","1","1","0"], ["1","1","0","1","0"],
["1","1","0","0","0"], ["0","0","0","0","0"]] 输出：1</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：grid = [ ["1","1","0","0","0"], ["1","1","0","0","0"],
["0","0","1","0","0"], ["0","0","0","1","1"]] 输出：3</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>grid[i][j]</code> 的值为 <code>'0'</code> 或
<code>'1'</code></li>
</ul>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>我们可以将二维网格看成一个无向图，竖直或水平相邻的 11
之间有边相连。</p>
<p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为
11，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的
11 都会被重新标记为 00。</p>
<p>最终岛屿的数量就是我们进行深度优先搜索的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">self, grid, r, c</span>):</span><br><span class="line">        grid[r][c] = <span class="number">0</span></span><br><span class="line">        nr, nc = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> [(r - <span class="number">1</span>, c), (r + <span class="number">1</span>, c), (r, c - <span class="number">1</span>), (r, c + <span class="number">1</span>)]:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; nr <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; nc <span class="keyword">and</span> grid[x][y] == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                self.dfs(grid, x, y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nr = <span class="built_in">len</span>(grid)</span><br><span class="line">        <span class="keyword">if</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nc = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        num_islands = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(nr):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(nc):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    num_islands += <span class="number">1</span></span><br><span class="line">                    self.dfs(grid, r, c)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num_islands</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：O(MN)，其中 M 和 N 分别为行数和列数。</p></li>
<li><p>空间复杂度：O(MN)，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到
MN。</p></li>
</ul>
<h3 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h3>
<p>同样地，我们也可以使用广度优先搜索代替深度优先搜索。</p>
<p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为
1，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的
1 都会被重新标记为 0。直到队列为空，搜索结束。</p>
<p>最终岛屿的数量就是我们进行广度优先搜索的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nr = <span class="built_in">len</span>(grid)</span><br><span class="line">        <span class="keyword">if</span> nr == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nc = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        num_islands = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(nr):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(nc):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    num_islands += <span class="number">1</span></span><br><span class="line">                    grid[r][c] = <span class="string">&quot;0&quot;</span></span><br><span class="line">                    neighbors = collections.deque([(r, c)])</span><br><span class="line">                    <span class="keyword">while</span> neighbors:</span><br><span class="line">                        row, col = neighbors.popleft()</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> [(row - <span class="number">1</span>, col), (row + <span class="number">1</span>, col), (row, col - <span class="number">1</span>), (row, col + <span class="number">1</span>)]:</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; nr <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; nc <span class="keyword">and</span> grid[x][y] == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                                neighbors.append((x, y))</span><br><span class="line">                                grid[x][y] = <span class="string">&quot;0&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num_islands</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(MN)\]</span>，其中 M 和 N
分别为行数和列数。</li>
<li>空间复杂度：<span class="math display">\[O(\min(M,
N))\]</span>，在最坏情况下，整个网格均为陆地，队列的大小可以达到<span
class="math display">\[ \min(M, N)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Q134-加油站-中等-贪心</title>
    <url>/2021/07/21/2021-07-21-Q134-%E5%8A%A0%E6%B2%B9%E7%AB%99-%E4%B8%AD%E7%AD%89-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h4 id="加油站"><a
href="https://leetcode-cn.com/problems/gas-station/">134.
加油站</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。</p>
<p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1
个加油站需要消耗汽油 cost[i]
升。你从其中的一个加油站出发，开始时油箱为空。</p>
<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>
<p><strong>说明:</strong></p>
<ul>
<li>如果题目有解，该答案即为唯一答案。</li>
<li>输入数组均为非空数组，且长度相同。</li>
<li>输入数组中的元素均为非负数。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: gas = [1,2,3,4,5] cost = [3,4,5,1,2]</p>
<p>输出: 3</p>
<p>解释: 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0
+ 4 = 4 升汽油 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油 开往 0
号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油 开往 1 号加油站，此时油箱有 7
- 3 + 2 = 6 升汽油 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油 开往
3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。 因此，3
可为起始索引。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入: gas = [2,3,4] cost = [3,4,3]</p>
<p>输出: -1</p>
<p>解释: 你不能从 0 号或 1
号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。 我们从 2
号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油 开往 0
号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油 开往 1 号加油站，此时油箱有 3
- 3 + 3 = 3 升汽油 你无法返回 2 号加油站，因为返程需要消耗 4
升汽油，但是你的油箱只有 3 升汽油。
因此，无论怎样，你都不可能绕环路行驶一周。</p>
</blockquote>
<h3 id="approach-1-直接求解">Approach 1: 直接求解</h3>
<p>这个方法比较笨，但是最直接。</p>
<p>把一次环形拆分为3段：</p>
<ul>
<li>出发点到最后一个加油站</li>
<li>最后一个加油站到第一个加油站</li>
<li>第一个加油站到出发点</li>
</ul>
<p>依次计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canCompleteCircuit</span>(<span class="params">self, gas: <span class="type">List</span>[<span class="built_in">int</span>], cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 以每个加油站为出发点依次正向遍历，直到最后一个加油站</span></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gas)):</span><br><span class="line">            start = step <span class="comment"># 起始加油站编号</span></span><br><span class="line">            num_step = <span class="number">0</span> <span class="comment"># 走过的加油站数目</span></span><br><span class="line">            oil = gas[start] <span class="comment"># 油箱中油存量</span></span><br><span class="line">            <span class="comment"># 正向遍历到最后一个加油站i+1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(step,<span class="built_in">len</span>(gas)-<span class="number">1</span>):</span><br><span class="line">                oil -= cost[i] </span><br><span class="line">                <span class="keyword">if</span> oil &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                oil += gas[i+<span class="number">1</span>]</span><br><span class="line">                num_step += <span class="number">1</span></span><br><span class="line">			<span class="comment"># 最后一个加油站到第一个加油站单独判断</span></span><br><span class="line">            oil -= cost[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> oil &gt;= <span class="number">0</span>:</span><br><span class="line">                oil += gas[<span class="number">0</span>]</span><br><span class="line">                num_step += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 判断是否走完一圈</span></span><br><span class="line">                <span class="keyword">if</span> num_step == <span class="built_in">len</span>(gas):</span><br><span class="line">                    ans = start</span><br><span class="line">                    <span class="keyword">return</span> ans <span class="comment"># 题目说了是唯一解</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 油不够，退出循环</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 从第一个加油站遍历到出发的加油站</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(step):</span><br><span class="line">                oil -= cost[j]</span><br><span class="line">                <span class="keyword">if</span> oil &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                oil += gas[j+<span class="number">1</span>]</span><br><span class="line">                num_step += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num_step == <span class="built_in">len</span>(gas):</span><br><span class="line">                    ans = start</span><br><span class="line">                    <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N^2)\]</span>。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span>.</li>
</ul>
<h3 id="approach-2-问题分析简化运算">Approach 2: 问题分析简化运算</h3>
<p>这是个逻辑题。
首先，老司机们都知道，开车的时候，油不能为负数，先变成负数再往后加回来是不可以的。
然后开完一圈回来，如果耗得油总量比加的总量还多那铁定开不回来。</p>
<p>再然后，我们只要遍历一遍就可以了。为什么呢，假设从头开始开一遍，累计下来耗油最多的点的后面那个点开始出发，一定就是跑完以后剩下油最多的。</p>
<p>比如我们跑到第i个点，这时候总消耗减去总加油最大，那说明前面i个点的消耗是整条链上最多的。然后如果总油数比总消耗多，说明可以保证开完一圈。
那么如果想保证能开完一圈，就要从它后面那个点开始开。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canCompleteCircuit</span>(<span class="params">self, gas: <span class="type">List</span>[<span class="built_in">int</span>], cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = [gas[i] - cost[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(gas))]</span><br><span class="line">        minValue = <span class="number">999</span></span><br><span class="line">        minIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        sumValue = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(left):</span><br><span class="line">            sumValue += l</span><br><span class="line">            <span class="keyword">if</span> sumValue &lt; minValue:</span><br><span class="line">                minValue = sumValue</span><br><span class="line">                minIndex = j</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sumValue &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (minIndex + <span class="number">1</span>) % <span class="built_in">len</span>(gas)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(N)\]</span>。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span>.</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q419-甲板上的战舰-中等-深度/宽度优先搜索</title>
    <url>/2021/07/21/2021-07-21-Q419-%E7%94%B2%E6%9D%BF%E4%B8%8A%E7%9A%84%E6%88%98%E8%88%B0-%E4%B8%AD%E7%AD%89-%E6%B7%B1%E5%BA%A6and%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="甲板上的战舰"><a
href="https://leetcode-cn.com/problems/battleships-in-a-board/">419.
甲板上的战舰</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个二维的甲板， 请计算其中有多少艘战舰。 战舰用 'X'表示，空位用
'.'表示。 你需要遵守以下规则：</p>
<p>给你一个有效的甲板，仅由战舰或者空位组成。
战舰只能水平或者垂直放置。换句话说,战舰只能由 1xN (1 行, N 列)组成，或者
Nx1 (N 行, 1 列)组成，其中N可以是任意大小。
两艘战舰之间至少有一个水平或垂直的空位分隔 - 即没有相邻的战舰。</p>
<p>输入二维数组board</p>
<p>输出有多少战舰</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X..X</span><br><span class="line">...X</span><br><span class="line">...X</span><br></pre></td></tr></table></figure>
<p>输出：2</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<p>不用考虑无效样本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...X</span><br><span class="line">XXXX</span><br><span class="line">...X</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="approach-1-深度优先搜索递归">Approach 1: 深度优先搜索+递归</h3>
<p>简单处理，DFS越来越熟练了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countBattleships</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">cur_i,cur_j</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=cur_i <span class="keyword">and</span> cur_i&lt;r <span class="keyword">and</span> <span class="number">0</span>&lt;=cur_j <span class="keyword">and</span> cur_j&lt;c <span class="keyword">and</span> board[cur_i][cur_j] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                board[cur_i][cur_j] = <span class="string">&quot;.&quot;</span></span><br><span class="line">                <span class="keyword">for</span> di,dj <span class="keyword">in</span> [(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>),(<span class="number">0</span>,<span class="number">1</span>)]:</span><br><span class="line">                    DFS(cur_i+di,cur_j+dj)</span><br><span class="line">            </span><br><span class="line">        r,c = <span class="built_in">len</span>(board),<span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                    ans+=<span class="number">1</span></span><br><span class="line">                    DFS(i,j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans </span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(R \times
C)\]</span>。其中 R 是给定网格中的行数，C
是列数。我们访问每个网格最多一次。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Q695-岛屿的最大面积-中等-深度/宽度优先搜索</title>
    <url>/2021/07/21/2021-07-21-Q695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF-%E4%B8%AD%E7%AD%89-%E6%B7%B1%E5%BA%A6and%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="岛屿的最大面积"><a
href="https://leetcode-cn.com/problems/max-area-of-island/">695.
岛屿的最大面积</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个包含了一些 0 和 1 的非空二维数组 grid 。</p>
<p>一个 岛屿 是由一些相邻的 1 (代表土地)
构成的组合，这里的「相邻」要求两个 1
必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被
0（代表水）包围着。</p>
<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0
。)</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0],
[0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0],
[0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]]</p>
<p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是
<code>11</code> ，因为岛屿只能包含水平或垂直的四个方向的 <code>1</code>
。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>[[0,0,0,0,0,0,0,0]]</p>
<p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>给定的矩阵<code>grid</code> 的长度和宽度都不超过 50。</li>
</ul>
</blockquote>
<h3 id="approach-1-深度优先搜索递归">Approach 1: 深度优先搜索+递归</h3>
<p>这个思路比较好理解，DFS+递归可以按照这个步骤思考</p>
<ul>
<li>计算行数，列数</li>
<li>遍历二维数组，计算当前“岛屿”面积，并与最大面积对比取最大值
<ul>
<li>在DFS函数中计算当前岛屿的面积</li>
<li>先判断位置是否合法（r and c）</li>
<li>如果当前位置是1，那就置0，避免重复，在返回结果递归DFS，检测周围是否是岛屿</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">grid,ci,cj</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=ci <span class="keyword">and</span> ci&lt;r <span class="keyword">and</span> <span class="number">0</span>&lt;=cj <span class="keyword">and</span> cj&lt;c <span class="keyword">and</span> grid[ci][cj] == <span class="number">1</span>:</span><br><span class="line">                grid[ci][cj] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> + DFS(grid,ci-<span class="number">1</span>,cj) + DFS(grid,ci+<span class="number">1</span>,cj) + DFS(grid,ci,cj-<span class="number">1</span>) + DFS(grid,ci,cj+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">        r , c = <span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        fin_res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                fin_res = <span class="built_in">max</span>(DFS(grid,i,j),fin_res)</span><br><span class="line">        <span class="keyword">return</span> fin_res</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(R \times
C)\]</span>。其中 R 是给定网格中的行数，C
是列数。我们访问每个网格最多一次。</li>
<li>空间复杂度：<span class="math display">\[O(R \times
C)\]</span>，递归的深度最大可能是整个网格的大小，因此最大可能使用 <span
class="math display">\[O(R \times C)\]</span> 的栈空间。</li>
</ul>
<h3 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h3>
<p>广度优先的写法需要建立一个队列que，记录当前遍历到的结点，结合while
que进行遍历</p>
<ul>
<li>遍历每个元素，判断是否是1，是则放入que</li>
<li>对每个放入que的元素遍历几种移动情况，满足条件的元素置零后放入que，继续遍历</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        r , c = <span class="built_in">len</span>(grid) , <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        total_res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                ans = <span class="number">0</span></span><br><span class="line">                que = []</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    grid[i][j] = <span class="number">0</span></span><br><span class="line">                    ans += <span class="number">1</span></span><br><span class="line">                    que.append((i,j))</span><br><span class="line">                    <span class="keyword">while</span> que:</span><br><span class="line">                        cur_r,cur_c = que.pop(<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">for</span> dr,dc <span class="keyword">in</span> [(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>),(<span class="number">0</span>,<span class="number">1</span>)]:</span><br><span class="line">                            temp_r , temp_c = cur_r + dr , cur_c + dc</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span>&lt;=temp_r <span class="keyword">and</span> temp_r&lt;r <span class="keyword">and</span> <span class="number">0</span>&lt;=temp_c <span class="keyword">and</span> temp_c&lt;c <span class="keyword">and</span> grid[temp_r][temp_c] == <span class="number">1</span>:</span><br><span class="line">                                grid[temp_r][temp_c] = <span class="number">0</span></span><br><span class="line">                                ans += <span class="number">1</span></span><br><span class="line">                                que.append((temp_r,temp_c))</span><br><span class="line">                total_res = <span class="built_in">max</span>(total_res,ans)</span><br><span class="line">        <span class="keyword">return</span> total_res</span><br></pre></td></tr></table></figure>
<p>另一种写法，每次从队首取出土地，并将接下来想要遍历的土地放在队尾，就实现了广度优先搜索算法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(grid):</span><br><span class="line">            <span class="keyword">for</span> j, n <span class="keyword">in</span> <span class="built_in">enumerate</span>(l):</span><br><span class="line">                cur = <span class="number">0</span></span><br><span class="line">                q = collections.deque([(i, j)])</span><br><span class="line">                <span class="keyword">while</span> q:</span><br><span class="line">                    cur_i, cur_j = q.popleft()</span><br><span class="line">                    <span class="keyword">if</span> cur_i &lt; <span class="number">0</span> <span class="keyword">or</span> cur_j &lt; <span class="number">0</span> <span class="keyword">or</span> cur_i == <span class="built_in">len</span>(grid) <span class="keyword">or</span> cur_j == <span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[cur_i][cur_j] != <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    cur += <span class="number">1</span></span><br><span class="line">                    grid[cur_i][cur_j] = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> di, dj <span class="keyword">in</span> [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>]]:</span><br><span class="line">                        next_i, next_j = cur_i + di, cur_j + dj</span><br><span class="line">                        q.append((next_i, next_j))</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, cur)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(R \times
C)\]</span>。其中 R 是给定网格中的行数，C
是列数。我们访问每个网格最多一次。</li>
<li>空间复杂度：<span class="math display">\[O(R \times
C)\]</span>，队列中最多会存放所有的土地，土地的数量最多为 <span
class="math display">\[R \times C\]</span> 块，因此使用的空间为 <span
class="math display">\[O(R \times C)\]</span>。</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Q994-腐烂的橘子-中等-深度/宽度优先搜索</title>
    <url>/2021/07/22/2021-07-22-Q994-%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90-%E4%B8%AD%E7%AD%89-%E6%B7%B1%E5%BA%A6and%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="腐烂的橘子"><a
href="https://leetcode-cn.com/problems/rotting-oranges/">994.
腐烂的橘子</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>在给定的网格中，每个单元格可以有以下三个值之一：</p>
<ul>
<li><p>值 0 代表空单元格；</p></li>
<li><p>值 1 代表新鲜橘子；</p></li>
<li><p>值 2 代表腐烂的橘子。</p></li>
</ul>
<p>每分钟，任何与腐烂的橘子（在 4
个正方向上）相邻的新鲜橘子都会腐烂。</p>
<p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回
-1。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[[2,1,1],[1,1,0],[0,1,1]] 输出：4</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：[[2,1,1],[0,1,1],[1,0,1]] 输出：-1 解释：左下角的橘子（第 2
行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：[[0,2]] 输出：0 解释：因为 0
分钟时已经没有新鲜橘子了，所以答案就是 0 。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= grid.length &lt;= 10</code></li>
<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>
<li><code>grid[i][j]</code> 仅为 <code>0</code>、<code>1</code> 或
<code>2</code></li>
</ul>
</blockquote>
<h3 id="approach-1-宽度优先搜索">Approach 1: 宽度优先搜索</h3>
<h4 id="什么情况应当用-bfs">什么情况应当用 BFS</h4>
<p>我们都知道 DFS（深度优先搜索）和
BFS（广度优先搜索）。它们各有不同的适应场景。</p>
<p>BFS 可以看成是层序遍历。从某个结点出发，BFS 首先遍历到距离为 1
的结点，然后是距离为 2、3、4…… 的结点。因此，BFS
可以用来求最短路径问题。BFS 先搜索到的结点，一定是距离最近的结点。</p>
<p>再看看这道题的题目要求：返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。翻译一下，实际上就是求腐烂橘子到所有新鲜橘子的最短路径。那么这道题使用
BFS，应该是毫无疑问的了。</p>
<h4 id="如何写最短路径的-bfs-代码">如何写（最短路径的） BFS 代码</h4>
<p>我们都知道 BFS 需要使用队列，代码框架是这样子的（伪代码）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> queue 非空:</span><br><span class="line">	node = queue.pop()</span><br><span class="line">    <span class="keyword">for</span> node 的所有相邻结点 m:</span><br><span class="line">        <span class="keyword">if</span> m 未访问过:</span><br><span class="line">            queue.push(m)</span><br></pre></td></tr></table></figure>
<p>但是用 BFS 来求最短路径的话，这个队列中第 1 层和第 2
层的结点会紧挨在一起，无法区分。因此，我们需要稍微修改一下代码，在每一层遍历开始前，记录队列中的结点数量
n ，然后一口气处理完这一层的 n 个结点。代码框架是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">depth = <span class="number">0</span> <span class="comment"># 记录遍历到第几层</span></span><br><span class="line"><span class="keyword">while</span> queue 非空:</span><br><span class="line">    depth++</span><br><span class="line">    n = queue 中的元素个数</span><br><span class="line">    循环 n 次:</span><br><span class="line">        node = queue.pop()</span><br><span class="line">        <span class="keyword">for</span> node 的所有相邻结点 m:</span><br><span class="line">            <span class="keyword">if</span> m 未访问过:</span><br><span class="line">                queue.push(m)</span><br></pre></td></tr></table></figure>
<h4 id="本题题解">本题题解</h4>
<p>有了计算最短路径的层序 BFS
代码框架，写这道题就很简单了。这道题的主要思路是：</p>
<p>一开始，我们找出所有腐烂的橘子，将它们放入队列，作为第 0 层的结点。
然后进行 BFS
遍历，每个结点的相邻结点可能是上、下、左、右四个方向的结点，注意判断结点位于网格边界的特殊情况。
由于可能存在无法被污染的橘子，我们需要记录新鲜橘子的数量。在 BFS
中，每遍历到一个橘子（污染了一个橘子），就将新鲜橘子的数量减一。如果 BFS
结束后这个数量仍未减为零，说明存在无法被污染的橘子。 以下是 Python
版的题解代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">orangesRotting</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    M = <span class="built_in">len</span>(grid)</span><br><span class="line">    N = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    queue = []</span><br><span class="line">    </span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># count 表示新鲜橘子的数量</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">if</span> grid[r][c] == <span class="number">1</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> grid[r][c] == <span class="number">2</span>:</span><br><span class="line">                queue.append((r, c))</span><br><span class="line">                </span><br><span class="line">    <span class="built_in">round</span> = <span class="number">0</span> <span class="comment"># round 表示腐烂的轮数，或者分钟数</span></span><br><span class="line">    <span class="keyword">while</span> count &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">round</span> += <span class="number">1</span> </span><br><span class="line">        n = <span class="built_in">len</span>(queue)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            r, c = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> r-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> grid[r-<span class="number">1</span>][c] == <span class="number">1</span>:</span><br><span class="line">                grid[r-<span class="number">1</span>][c] = <span class="number">2</span></span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                queue.append((r-<span class="number">1</span>, c))</span><br><span class="line">            <span class="keyword">if</span> r+<span class="number">1</span> &lt; M <span class="keyword">and</span> grid[r+<span class="number">1</span>][c] == <span class="number">1</span>:</span><br><span class="line">                grid[r+<span class="number">1</span>][c] = <span class="number">2</span></span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                queue.append((r+<span class="number">1</span>, c))</span><br><span class="line">            <span class="keyword">if</span> c-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> grid[r][c-<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                grid[r][c-<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                queue.append((r, c-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> c+<span class="number">1</span> &lt; N <span class="keyword">and</span> grid[r][c+<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                grid[r][c+<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                queue.append((r, c+<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span></span><br></pre></td></tr></table></figure>
<h3 id="approach-2-多源广度优先搜索">Approach 2: 多源广度优先搜索</h3>
<p>由题目我们可以知道每分钟每个腐烂的橘子都会使上下左右相邻的新鲜橘子腐烂，这其实是一个模拟广度优先搜索的过程。<strong>所谓广度优先搜索，就是从起点出发，每次都尝试访问同一层的节点，如果同一层都访问完了，再访问下一层，最后广度优先搜索找到的路径就是从起点开始的最短合法路径。</strong></p>
<p>回到题目中，假设图中只有一个腐烂的橘子，它每分钟向外拓展，腐烂上下左右相邻的新鲜橘子，那么下一分钟，就是这些被腐烂的橘子再向外拓展腐烂相邻的新鲜橘子，这与广度优先搜索的过程均一一对应，<strong>上下左右相邻的新鲜橘子就是该腐烂橘子尝试访问的同一层的节点，路径长度就是新鲜橘子被腐烂的时间。</strong>我们记录下每个新鲜橘子被腐烂的时间，最后如果单元格中没有新鲜橘子，腐烂所有新鲜橘子所必须经过的最小分钟数就是新鲜橘子被腐烂的时间的最大值。</p>
<p>以上是基于图中只有一个腐烂的橘子的情况，可实际题目中腐烂的橘子数不止一个，看似与广度优先搜索有所区别，不能直接套用，但其实有两个方向的思路。</p>
<p>一个是耗时比较大且不推荐的做法：我们对每个腐烂橘子为起点都进行一次广度优先搜索，用
dis[x][y][i]dis[x][y][i] 表示只考虑第 ii
个腐烂橘子为起点的广度优先搜索，坐标位于 (x, y)
的新鲜橘子被腐烂的时间，设没有被腐烂的新鲜橘子的
dis[x][y][i]=infdis[x][y][i]=inf
，即无限大，表示没有被腐烂，那么每个新鲜橘子被腐烂的最短时间即为 <span
class="math display">\[
\min_i dis[x][y][i]
\]</span>
最后的答案就是所有新鲜橘子被腐烂的最短时间的最大值，如果是无限大，说明有新鲜橘子没有被腐烂，输出
-1 即可。</p>
<p>无疑上面的方法需要枚举每个腐烂橘子，所以时间复杂度需要在原先广度优先搜索遍历的时间复杂度上再乘以腐烂橘子数，这在整个网格范围变大的时候十分耗时，所以需要另寻他路。</p>
<p><strong>多源广度优先搜索</strong></p>
<p>思路</p>
<p>观察到对于所有的腐烂橘子，其实它们<strong>在广度优先搜索上是等价于同一层的节点的</strong>。</p>
<p>假设这些腐烂橘子刚开始是新鲜的，而有一个腐烂橘子（<strong>我们令其为超级源点</strong>）会在下一秒把这些橘子都变腐烂，而这个腐烂橘子刚开始在的时间是
-1 ，那么按照广度优先搜索的算法，下一分钟也就是第 0
分钟的时候，这个腐烂橘子会把它们都变成腐烂橘子，然后继续向外拓展，所以其实这些腐烂橘子是同一层的节点。那么在广度优先搜索的时候，我们将这些腐烂橘子都放进队列里进行广度优先搜索即可，最后每个新鲜橘子被腐烂的最短时间
<code>dis[x][y]</code>
其实是以这个超级源点的腐烂橘子为起点的广度优先搜索得到的结果。</p>
<p>为了确认是否所有新鲜橘子都被腐烂，可以记录一个变量 cnt
表示当前网格中的新鲜橘子数，广度优先搜索的时候如果有新鲜橘子被腐烂，则
cnt-=1 ，最后搜索结束时如果 cnt 大于 0 ，说明有新鲜橘子没被腐烂，返回 -1
，否则返回所有新鲜橘子被腐烂的时间的最大值即可，也可以在广度优先搜索的过程中把已腐烂的新鲜橘子的值由
11 改为 22，最后看网格中是否由值为 11 即新鲜的橘子即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">orangesRotting</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        R, C = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># queue - all starting cells with rotting oranges</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> r, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(grid):</span><br><span class="line">            <span class="keyword">for</span> c, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">                <span class="keyword">if</span> val == <span class="number">2</span>:</span><br><span class="line">                    queue.append((r, c, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">neighbors</span>(<span class="params">r, c</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">for</span> nr, nc <span class="keyword">in</span> ((r - <span class="number">1</span>, c), (r, c - <span class="number">1</span>), (r + <span class="number">1</span>, c), (r, c + <span class="number">1</span>)):</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= nr &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nc &lt; C:</span><br><span class="line">                    <span class="keyword">yield</span> nr, nc</span><br><span class="line"></span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            r, c, d = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> nr, nc <span class="keyword">in</span> neighbors(r, c):</span><br><span class="line">                <span class="keyword">if</span> grid[nr][nc] == <span class="number">1</span>:</span><br><span class="line">                    grid[nr][nc] = <span class="number">2</span></span><br><span class="line">                    queue.append((nr, nc, d + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(<span class="number">1</span> <span class="keyword">in</span> row <span class="keyword">for</span> row <span class="keyword">in</span> grid):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(nm)\]</span>
即进行一次广度优先搜索的时间，其中 <code>n=grid.length</code>,
<code>m=grid[0].length</code> 。</li>
<li>空间复杂度：<span class="math display">\[O(nm)\]</span> 需要额外的
<code>disdis</code> 数组记录每个新鲜橘子被腐烂的最短时间，大小为 <span
class="math display">\[O(nm)\]</span>，且广度优先搜索中队列里存放的状态最多不会超过
nm 个，最多需要 <span class="math display">\[O(nm)\]</span>
的空间，所以最后的空间复杂度为 <span
class="math display">\[O(nm)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Intrinsically Motivated Reinforcement Learning: An Evolutionary Perspective</title>
    <url>/2021/07/22/2021-07-22-Reinforcement%20Learning%20-%20Intrinsically%20Motivated%20Reinforcement%20Learning%20An%20Evolutionary%20Perspective/</url>
    <content><![CDATA[<h1
id="intrinsically-motivated-reinforcement-learning-an-evolutionary-perspective">Intrinsically
Motivated Reinforcement Learning: An Evolutionary Perspective</h1>
<p>论文链接：https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=5471106</p>
<h2 id="主要内容">主要内容</h2>
<ul>
<li><p>intrinsically motivated
这个词最开始是在1950年的文章中提出的，文章认为需要有一种内在的操纵驱动力来解释为什么猴子会在没有任何外在奖励的情况下精力充沛地持续工作数小时来解决复杂的机械难题。内在动机行为对智力增长至关重要</p></li>
<li><p>本文解决了如何在人工系统中实现类似于内在动机的过程的问题，特别关注可能会或可能不会区分内在动机和外在动机的因素，其中外在动机是指由行为的特定奖励结果产生的动机，而不是行为本身。</p></li>
<li><p>相关工作：</p>
<ul>
<li><p>定义有趣度：Lenat's AM system [18], for example, focused on
heuristic definitions of “interestingness,”</p></li>
<li><p>建立好奇心框架：Schmidhuber [32] [33] [34] [35] [36] [37]
introduced methods for implementing forms of curiosity using the
framework of computational reinforcement learning (RL)1 [47].</p></li>
<li><p>奖励函数设计：Other researchers have reported interesting results
of computational experiments involving evolutionary search for RL reward
functions [1], [8], [19], [31], [43], but they did not directly address
the motivational issues on which we focus.</p></li>
<li><p>寻找本质奖励：Uchibe and Doya [51] do address intrinsic reward in
an evolutionary context, but their aim and approach differ significantly
from ours.</p>
<p>[51]. E. Uchibe and K. Doya, "Finding intrinsic rewards by embodied
evolution and constrained reinforcement learning", <em>Neural
Netw.</em>, vol. 21, no. 10, pp. 1447-1455, 2008.</p></li>
<li><p>与我们最接近的研究是 Elfwing
等人的研究。[11]其中使用遗传算法来搜索塑造奖励[23]和其他提高 RL
学习系统性能的学习算法参数。</p>
<p>[11]. S. Elfwing, E. Uchibe, K. Doya and H. I. Christensen,
"Co-evolution of shaping rewards and meta-parameters in reinforcement
learning", <em>Adapt. Behav.</em>, vol. 16, pp. 400-412, 2008.</p></li>
</ul></li>
<li><p>使用RL的模型结构示意图</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210722-1.png"
alt="Agent–environment interactions in reinforcement learning" />
<figcaption aria-hidden="true">Agent–environment interactions in
reinforcement learning</figcaption>
</figure>
<ul>
<li><p>这篇文章[3]使用属于内部奖励（intrinsic
reward），并将其与强化学习框架结合。所谓内部奖励，就是内部动机生成的奖励函数；外部奖励就是常规的强化学习框架的奖励函数。</p>
<p>[3]. A. G. Barto, S. Singh and N. Chentanez, "Intrinsically motivated
learning of hierarchical collections of skills", <em>Proc. Int. Conf.
Develop. Learn.</em>, 2004.</p></li>
<li><p>目前的方法基本都是构建特殊的内部奖励函数，并且将其与一般的强化学习算法结合。例如基于好奇心的内部驱动方法[32]。</p>
<p>[32]. J. Schmidhuber, <em>Adaptive Confidence and Adaptive
Curiosity</em>, 1991.</p></li>
<li><p>这种内部动机的RL框架更加符合生物实际。并且奖励和奖励信号是不同的概念，RL模型中使用的更类似于奖励信号。</p>
<ul>
<li><p>奖励（Reward）指的是获得的好处；</p></li>
<li><p>奖励信号（Reward signal）指的是大脑中奖励神经元发放的信号；</p>
<p>Schultz [38], [39] writes that “Rewards are objects or events that
make us come back for more,” whereas reward signals are produced by
reward neurons in the brain.</p></li>
</ul></li>
<li><p>RL中的环境应该分为an external environment 和 an internal
environment.</p></li>
<li><p>但是并不能从行为上区分是否使用了内部奖励[25]。但是内部动机是通过外部奖励形成的。</p>
<p>[25]. P.-Y. Oudeyer and F. Kaplan, "What is intrinsic motivation? A
typology of computational approaches", <em>Frontiers Neurorobot.</em>,
2007.</p></li>
<li><p>Primary and Secondary
Reward：使用内部动机意义在于作为一种次要的奖励信号，配合主要的外部奖励信号完成行为</p></li>
<li><p>生物动机心理学依据：</p>
<p>Among the most influential theories of motivation in psychology is
the drive theory of Hull [13] [14] [15]. According to Hull's theory, all
behavior is motivated either by an organism's survival and reproductive
needs giving rise to primary drives (such as hunger, thirst, sex, and
the avoidance of pain), or by derivative drives that have acquired their
motivational significance through learning. Primary drives are the
result of physiological deficits—“tissue needs”— and they energize
behavior whose result is to reduce the deficit. A key additional feature
of Hull's theory is that a need reduction, and hence a drive reduction,
acts as a primary reinforcer for learning: behavior that reduces a
primary drive is reinforced. Additionally, through the process of
secondary reinforcement in which a neutral stimulus is paired with a
primary reinforcer, the formerly neutral stimulus becomes a secondary
reinforcer, i.e., acquires the reinforcing power of the primary
reinforcer. In this way, stimuli that predict primary reward, i.e.,
predict a reduction in a primary drive, become rewarding themselves.
According to this influential theory (in its several variants), all
behavior is energized and directed by its relevance to primal drives,
either directly or as the result of learning through secondary
reinforcement.</p></li>
<li><p>一些驱动力对行为影响的例子，在某些条件下，饥饿的老鼠宁愿探索不熟悉的空间，也不愿进食；他们忍受穿越电网的痛苦，去探索新的空间。</p></li>
<li><p>但是饥饿、口渴、繁衍这些驱动都伴随着满足的状态，他们是否能作为次要驱动还是有待研究。下面介绍基于进化的观点。</p></li>
<li><p>使用一个适应度函数和一些环境兴趣的分布（an explicit fitness
function and some distribution of environments of
interest），这个适应度可以是累积的外部奖励和等形式。</p></li>
<li><p><strong>实验1：</strong></p></li>
<li><p>一个6x6的格子空间中分割了4个3x3的子空间，格子之间的墙壁不是全部封闭的，其中2个子格子空间中分别有一个打开的盒子和一个封闭的盒子（盒子位置在智能体生命周期内是不再变化的），一个打开的盒子在每个时间步以
0.1
的概率关闭，密闭的盒子里总是装着食物。智能体在这样的格子迷宫中要找到打开的盒子，并在封闭的盒子中寻找食物。智能体的行动分为上下左右4个方向。</p></li>
<li><p>当代理食用食物时，它会在一个时间步长内感到饱足。代理在所有其他时间步都饥饿。智能体每吃一次食物，它的适应度就会增加
1</p></li>
<li><p>在格子迷宫环境中假设了两只钟情况：</p>
<ol type="1">
<li>constant condition:
食物总是智能体10000步生命周期中，在封闭的盒子中出现；</li>
<li>step condition:
智能体的生命周期是20000步，食物总是出现在10000步之后出现在封闭盒子中；</li>
</ol></li>
<li><p>符号说明：</p>
<ul>
<li>agent <span class="math display">\[\mathcal{A}\]</span></li>
<li>a space of reward function <span
class="math display">\[R_\mathcal{A}\]</span></li>
<li>a specific reward function <span
class="math display">\[r_\mathcal{A} \in R_\mathcal{A}\]</span></li>
<li>a sampled environment <span class="math display">\[E \sim
P(\varepsilon)\]</span></li>
<li>history of agent <span class="math display">\[\mathcal{A}\]</span>
adapting to environment <span class="math display">\[E\]</span> over its
lifetime using the reward function <span
class="math display">\[r_\mathcal{A}\]</span>, i.e., <span
class="math display">\[h \sim \langle
\mathcal{A}(r_\mathcal{A}),E\rangle\]</span></li>
<li>fitness function <span class="math display">\[\mathcal{F}\]</span>
produces a scalar evaluation <span
class="math display">\[\mathcal{F}(h)\]</span> for each history <span
class="math display">\[h\]</span></li>
<li>optimal reward function <span
class="math display">\[r^*_{\mathcal{A}} \in
R_{\mathcal{A}}\]</span></li>
</ul></li>
</ul>
<p><span class="math display">\[
r^*_{\mathcal{A}}=\arg \max_{r_\mathcal{A} \in R_\mathcal{A}}
\mathbb{E}_{E\sim P(\varepsilon)} \mathbb{E}_{h \sim \langle
\mathcal{A}(r_\mathcal{A}),E\rangle}[\mathcal{F}(h)]
\]</span></p>
<ul>
<li><p>使用的算法 the lookup-table -greedy Q-learning [52].</p>
<p>[52]. C. J. C. H. Watkins, “Learning from Delayed Rewards,” Ph.D.
dissertation, Cambridge Univ., Cambridge, U.K., 1989</p></li>
</ul>
<p><span class="math display">\[
Q_{t+1}(s_t,a_t)=(1-\alpha)Q_t(s_t,a_t)+\alpha[r_t + \gamma \max_b
(Q_t(s_{t+1},b))]
\]</span></p>
<p>之后通过实验验证了<span
class="math display">\[r*\]</span>的奖励函数趋近最优奖励函数</p>
<ul>
<li><p><strong>实验2</strong></p>
<ul>
<li>一个三走廊的觅食环境，虫子每次随机出现正在其中一个走廊的尽头。由于每次虫子的位置是随机且未知的，智能体过去的经验不能直接直到新的觅食，所以这个环境是非马尔科夫的。</li>
<li>实验要求智能体在固定的10000步之内尽可能多地吃到虫子。</li>
</ul>
<p><span class="math display">\[
Q_d(s,a)=r_{\mathcal{A}}(s,a)+\gamma\sum_{s&#39;\in \mathcal{S}}
\hat{T}(s&#39;|s,a)\max_{a&#39;} Q_{d-1}(s&#39;,a&#39;)\\
\hat{T}(s&#39;|s,a)=\frac{n_{s,a,s&#39;}}{n_{s,a}}
\]</span></p>
<p>其中 <span class="math display">\[n_{s,a,s&#39;}\]</span> 表示在
<span class="math display">\[s\]</span> 状态下，选择 <span
class="math display">\[a\]</span> 后转移到 <span
class="math display">\[s&#39;\]</span> 的次数。 <span
class="math display">\[n_{s,a}\]</span> 表示在 <span
class="math display">\[s\]</span> 状态下，选择 <span
class="math display">\[a\]</span> 的次数。</p></li>
<li><p>奖励函数：<span
class="math display">\[r_{\mathcal{A}}(s,a)=\beta_F\varPhi_F(s) +
\beta_c\varPhi_c(s,a,h)\]</span> ，其中 <span
class="math display">\[\beta_F\]</span> 和 <span
class="math display">\[\beta_c\]</span> 是权重系数。特征 <span
class="math display">\[\varPhi_F(s)\]</span> 在智能体饱的时候是 1
，其他时候是 0 。特征 <span class="math display">\[\varPhi_c(s,a,h) =
1-\frac{1}{c(s,a,h)}\]</span> ，其中 <span
class="math display">\[c(s,a,h)\]</span> 是智能体在历史 <span
class="math display">\[h\]</span> 中执行行为的时间步数。</p></li>
<li><p>当参数 <span class="math display">\[\beta_c\]</span>
为正时，智能体会因为最近没有从当前状态采取的行动而获得奖励。这种奖励不是外部环境的固定函数.
feature <span class="math display">\[\varPhi_F(s)\]</span> is a
hunger-status feature, and thus when <span
class="math display">\[\beta_F=1\]</span> and <span
class="math display">\[\beta_c=0\]</span>, the reward function is the
fitness-based reward function</p></li>
</ul>
<p>最终基于适应度的奖励函数表现次于最优奖励函数2个数量级。因此利用内在奖励
<span class="math display">\[\varPhi_c(s,a,h)\]</span>
对提升探索能力很有意义。</p>
<h2 id="总结">总结</h2>
<p>视角很独特，实验很新奇。</p>
<p>但是文章发表在自主心理发展IEEE TRANSACTIONS ON AUTONOMOUS MENTAL
DEVELOPMENT，因此作为一篇概念文章比较好。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
        <tag>Reward Shaping</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的链表和二叉树</title>
    <url>/2021/08/08/2021-08-08-Python%E4%B8%AD%E7%9A%84%E9%93%BE%E8%A1%A8%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="python中的链表和二叉树">Python中的链表和二叉树</h1>
<h3 id="链表">链表</h3>
<p>创建链表：把一个数组转换为链表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringToListNode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="comment"># Now convert that list into linked list</span></span><br><span class="line">    dummyRoot = ListNode(<span class="number">0</span>)</span><br><span class="line">    ptr = dummyRoot</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        ptr.<span class="built_in">next</span> = ListNode(number)</span><br><span class="line">        ptr = ptr.<span class="built_in">next</span></span><br><span class="line">    ptr = dummyRoot.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listNodeToString</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> node:</span><br><span class="line">        result += <span class="built_in">str</span>(node.val) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        node = node.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span> <span class="comment"># 最后一个逗号不输出</span></span><br></pre></td></tr></table></figure>
<h3 id="二叉树">二叉树</h3>
<p>创建二叉树：先把每个每个元素都定义为结点，然后连接各个结点为二叉树</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data=<span class="literal">None</span>,left=<span class="literal">None</span>,right=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 这一步是在每次调用某个结点时，自动调用.data的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.data)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建方法一</span></span><br><span class="line">A, B, C, D, E, F, G, H, I = [TreeNode(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABCDEFGHI&#x27;</span>]</span><br><span class="line">A.left, A.right = B, C</span><br><span class="line">B.right = D</span><br><span class="line">C.left, C.right = E, F</span><br><span class="line">E.left = G</span><br><span class="line">F.left,F.right = H, I</span><br><span class="line"><span class="built_in">print</span>(C.right)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建方法二</span></span><br><span class="line">A = TreeNode(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">B = TreeNode(<span class="string">&#x27;B&#x27;</span>,<span class="literal">None</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">C = TreeNode(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">E = TreeNode(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">F = TreeNode(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(C.right)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/2021/07/30/2021-07-30-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="排序算法总结">排序算法总结</h1>
<h2 id="冒泡排序">1. 冒泡排序</h2>
<h4 id="方法描述">1.1 方法描述：</h4>
<p>从数组A第一个元素开始，两两比较相邻元素的大小，如果前面的大于后面的，则把两元素交换位置，这样一次遍历后，最末位的元素就是最大的元素，重复上述过程n次，排序完成。</p>
<p><strong>简述：把相邻元素两两对比，一个一个移动到正确位置。</strong></p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210729-2.gif" /></p>
<h4 id="代码实现">1.2 代码实现：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &gt; alist[j+<span class="number">1</span>]:</span><br><span class="line">                alist[j], alist[j+<span class="number">1</span>] = alist[j+<span class="number">1</span>], alist[j]</span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>
<h4 id="算法优化">1.3 算法优化：</h4>
<p>因为冒泡排序必须要在最终位置找到之前不断交换数据项，所以它经常被认为是最低效的排
序方法。这些 “浪费式”
的交换操作消耗了许多时间。但是，由于冒泡排序要遍历整个未排好的
部分，它可以做一些大多数排序方法做不到的事。尤其是如果在整个排序过程中没有交换，我们就可断定列表已经排好。因此可改良冒泡排序，使其在已知列表排好的情况下提前结束。这就是说，如果一个列表只需要几次遍历就可排好，冒泡排序就占有优势：它可以在发现列表已排好时立刻结束。</p>
<p><strong>优化代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &gt; alist[j+<span class="number">1</span>]:</span><br><span class="line">                alist[j], alist[j+<span class="number">1</span>] = alist[j+<span class="number">1</span>], alist[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果发现整个排序过程中没有交换，提前结束</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>
<h2 id="选择排序">2. 选择排序</h2>
<h4 id="方法描述-1">2.1 方法描述：</h4>
<p>​
描述1：选择排序提高了冒泡排序的性能，它每遍历一次列表只交换一次数据，即进行一次遍历时找到最大的项，完成遍历后，再把它换到正确的位置。和冒泡排序一样，第一次遍历后，最大的数据项就已归位，第二次遍历使次大项归位。这个过程持续进行，一共需要
n-1 次遍历来排好 n 个数据，因为最后一个数据必须在第 n-1
次遍历之后才能归位。</p>
<p>​
描述2：初始时在序列中找到最小（大）元素，放到序列的起始位置作为已排序序列；然后，再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p>　　注意选择排序与冒泡排序的区别：冒泡排序通过依次交换相邻两个顺序不合法的元素位置，从而将当前最小（大）元素放到合适的位置；而选择排序每遍历一次都记住了当前最小（大）元素的位置，最后仅需一次交换操作即可将其放到合适的位置。</p>
<p>​
<strong>简述：以一个元素为基，遍历数组寻找比它更小的值，找到后按顺序排到正确位置。</strong></p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210729-3.gif" /></p>
<h4 id="代码实现-1">2.2 代码实现：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selectionSort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 寻找[i,n]区间里的最小值</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        alist[i], alist[min_index] = alist[min_index], alist[i]</span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>
<h2 id="插入排序">3. 插入排序</h2>
<h4 id="方法描述-2">3.1 方法描述：</h4>
<p>插入排序的算法复杂度仍然是<span
class="math display">\[O(n^2)\]</span>，但其工作原理稍有不同。它总是<strong>保持一个位置靠前的已排好的子表</strong>，然后每一个新的数据项被
“插入”
到前边的子表里，排好的子表增加一项。我们认为只含有一个数据项的列表是已经排好的。每排后面一个数据（从
1 开始到
n-1），这个的数据会和已排好子表中的数据比较。比较时，我们把之前已经排好的列表中比这个数据大的移到它的右边。当子表数据小于当前数据，或者当前数据已经和子表的所有数据比较了时，就可以在此处插入当前数据项。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210729-1.gif" /></p>
<h4 id="代码实现-2">3.2 代码实现：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertionSort</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(alist)):</span><br><span class="line">        currentvalue=alist[i]</span><br><span class="line">        position=i</span><br><span class="line">        <span class="keyword">while</span> alist[position-<span class="number">1</span>]&gt;currentvalue <span class="keyword">and</span> position&gt;<span class="number">0</span>:</span><br><span class="line">            alist[position]=alist[position-<span class="number">1</span>]</span><br><span class="line">            position=position-<span class="number">1</span></span><br><span class="line">        alist[position]=currentvalue</span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>
<p>注意，这里在用 Python
实现的时候需要注意，第一次我采用的是下面的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertionSort</span>(<span class="params">blist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(blist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 寻找a[i]合适的插入位置</span></span><br><span class="line">        temp = blist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; blist[j-<span class="number">1</span>]):</span><br><span class="line">                blist[j] = blist[j-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        blist[j-<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> blist</span><br></pre></td></tr></table></figure>
<p>在测试性能的时候发现，当数列的逐渐变大的时候，运行时间并不是按照<span
class="math display">\[n^2\]</span>的速度增长，后来分析发现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br></pre></td></tr></table></figure>
<p>这行代码在数列很大的时候，会不听的新建列表，这回损害性能，这是非算法思想因素的影响，但是需要注意一下。可以用<code>while</code>和一个列表代替。</p>
<h2 id="希尔排序">4. 希尔排序</h2>
<h4 id="方法描述-3">4.1 方法描述：</h4>
<p>希尔排序有时又叫做
“缩小间隔排序”，它以插入排序为基础，将原来要排序的列表划分为一些子列表，再对每一个子列表执行插入排序，从而实现对插入排序性能的改进。划分子列的特定方法是希尔排序的关键。我们并不是将原始列表分成含有连续元素的子列，而是确定一个划分列表的增量
“i”，这个i更准确地说，是划分的间隔。然后把每间隔为i的所有元素选出来组成子列表，然后对每个子序列进行插入排序，最后当
i=1 时，对整体进行一次直接插入排序。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210729-4.gif" /></p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210729-5.png" /></p>
<h4 id="代码实现-3">4.2 代码实现</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shellSort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    gap = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap):</span><br><span class="line">            gapInsetionSort(alist, i, gap)</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="comment"># # start子数列开始的起始位置， gap表示间隔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gapInsetionSort</span>(<span class="params">alist,startpos,gap</span>):</span><br><span class="line">    <span class="comment">#希尔排序的辅助函数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startpos+gap,<span class="built_in">len</span>(alist),gap):</span><br><span class="line">        position=i</span><br><span class="line">        currentvalue=alist[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> position&gt;startpos <span class="keyword">and</span> alist[position-gap]&gt;currentvalue:</span><br><span class="line">            alist[position]=alist[position-gap]</span><br><span class="line">            position=position-gap</span><br><span class="line">        alist[position]=currentvalue</span><br></pre></td></tr></table></figure>
<h2 id="并归排序">5. 并归排序</h2>
<h4 id="方法描述-4">5.1 方法描述：</h4>
<p>归并排序是一种递归算法，它持续地将一个列表分成两半。如果列表是空的或者只有一个元素，那么根据定义，它就被排序好了（最基本的情况）。如果列表里的元素超过一个，我们就把列表拆分，然后分别对两个部分调用递归排序。一旦这两个部分被排序好了，然后就可以对这两部分数列进行归并了。归并是这样一个过程：把两个排序好了的列表结合在一起组合成一个单一的有序的新列表。有自顶向下（递归法）和自底向上的两种实现方法。</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210730-1.png" /></p>
<h4 id="代码实现-4">5.2 代码实现</h4>
<p><strong>自顶向下（递归法）方法实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mergeSort</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    __mergeSort(alist, <span class="number">0</span>, n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__mergeSort</span>(<span class="params">alist, start, end</span>):</span><br><span class="line">    <span class="comment">#当数列的大小比较小的时候，数列近乎有序的概率较大</span></span><br><span class="line">    <span class="keyword">if</span> (end-start &lt;= <span class="number">15</span>):</span><br><span class="line">        insertionSortHelp(alist, start, end)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 存在风险，start+end可能越界</span></span><br><span class="line">    mid = (start + end) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># mid = start + (end - start) // 2</span></span><br><span class="line">    __mergeSort(alist, start, mid)</span><br><span class="line">    __mergeSort(alist, mid + <span class="number">1</span>, end)</span><br><span class="line">    <span class="comment">#优化</span></span><br><span class="line">    <span class="keyword">if</span> alist[mid] &gt; alist[mid+<span class="number">1</span>]:</span><br><span class="line">        merge(alist, start, mid, end)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并有序数列alist[start....mid] 和 alist[mid+1...end]，使之成为有序数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">alist, start, mid, end</span>):</span><br><span class="line">    <span class="comment"># 复制一份</span></span><br><span class="line">    blist = alist[start:end+<span class="number">1</span>]</span><br><span class="line">    l = start</span><br><span class="line">    k = mid + <span class="number">1</span></span><br><span class="line">    pos = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pos &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> (l &gt; mid):</span><br><span class="line">            alist[pos] = blist[k-start]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (k &gt; end):</span><br><span class="line">            alist[pos] = blist[l-start]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> blist[l-start] &lt;= blist[k-start]:</span><br><span class="line">            alist[pos] = blist[l-start]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            alist[pos] = blist[k-start]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertionSortHelp</span>(<span class="params">alist,l, r</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l+<span class="number">1</span>,r+<span class="number">1</span>):</span><br><span class="line">        currentvalue=alist[i]</span><br><span class="line">        position=i</span><br><span class="line">        <span class="keyword">while</span> alist[position-<span class="number">1</span>]&gt;currentvalue <span class="keyword">and</span> position&gt;l:</span><br><span class="line">            alist[position]=alist[position-<span class="number">1</span>]</span><br><span class="line">            position=position-<span class="number">1</span></span><br><span class="line">        alist[position]=currentvalue</span><br><span class="line">    <span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure>
<p>注意：这里进行小的优化，当数列的长度小于等于15的时候，我们一般认为数列此时基本有序，这时候采用直接插入排序非常快。</p>
<p><strong>自底向上（非递归法）方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自底向上的归并算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mergeBU</span>(<span class="params">alist</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    <span class="comment">#表示归并的大小</span></span><br><span class="line">    size = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> size &lt;= n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-size, size+size):</span><br><span class="line">            merge(alist, i, i+size-<span class="number">1</span>, <span class="built_in">min</span>(i+size+size-<span class="number">1</span>, n-<span class="number">1</span>))</span><br><span class="line">        size += size</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并有序数列alist[start....mid] 和 alist[mid+1...end]，使之成为有序数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">alist, start, mid, end</span>):</span><br><span class="line">    <span class="comment"># 复制一份</span></span><br><span class="line">    blist = alist[start:end+<span class="number">1</span>]</span><br><span class="line">    l = start</span><br><span class="line">    k = mid + <span class="number">1</span></span><br><span class="line">    pos = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pos &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> (l &gt; mid):</span><br><span class="line">            alist[pos] = blist[k-start]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (k &gt; end):</span><br><span class="line">            alist[pos] = blist[l-start]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> blist[l-start] &lt;= blist[k-start]:</span><br><span class="line">            alist[pos] = blist[l-start]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            alist[pos] = blist[k-start]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        pos += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="快速排序">6. 快速排序</h2>
<h4 id="方法描述-5">6.1 方法描述：</h4>
<p>快速排序由 C. A. R. Hoare
在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<ul>
<li>从数列中挑出一个元素，称为"基准"（pivot）。</li>
<li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20210730-1.png" /></p>
<h4 id="代码实现-5">6.2 代码实现</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__quickSort</span>(<span class="params">alist, l, r</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#当数列的大小比较小的时候，数列近乎有序的概率较大</span></span><br><span class="line">    <span class="comment"># if (r - l &lt;= 15):</span></span><br><span class="line">    <span class="comment">#     insertionSortHelp(alist, l, r)</span></span><br><span class="line">    <span class="comment">#     return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># p = partition(alist, l, r)</span></span><br><span class="line">    p = partitionQS(alist, l, r)</span><br><span class="line"></span><br><span class="line">    __quickSort(alist, l, p-<span class="number">1</span>)</span><br><span class="line">    __quickSort(alist, p+<span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在alist[l...r]中寻找j,使得alist[l...j] &lt;= alist[l], alist[j+1...r] &gt;alist[l]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">alist, l, r</span>):</span><br><span class="line">    pos = randint(l, r)</span><br><span class="line">    alist[pos], alist[l] = alist[l], alist[pos]</span><br><span class="line">    v = alist[l]</span><br><span class="line">    <span class="comment"># v = alist[l]</span></span><br><span class="line">    j = l</span><br><span class="line">    i = l + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= r:</span><br><span class="line">        <span class="keyword">if</span> alist[i] &lt;= v:</span><br><span class="line">            alist[j+<span class="number">1</span>],alist[i] = alist[i],alist[j+<span class="number">1</span>]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    alist[l], alist[j] = alist[j], alist[l]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure>
<p><strong>快速排序一些可以优化的点</strong></p>
<ul>
<li>当数列近乎有序的时，由于每次选取的都是第一个数，所以造成数列分割的极其不等，此时快排蜕化成<span
class="math display">\[O(n^2)\]</span>的算法，
此时只要随机选取基准点即可</li>
<li>当数列中包含大量的重复元素的时候，这一版的代码也会造成"分割不等“的问题，此时需要将重复元素均匀的分散的自数列旁</li>
<li>使用三路快排</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Code Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Q64-最小路径和-中等-动态规划</title>
    <url>/2021/08/10/2021-08-10-Q64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="最小路径和"><a
href="https://leetcode-cn.com/problems/minimum-path-sum/">64.
最小路径和</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个包含非负整数的 m x n 网格 <code>grid</code>
，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：grid = [[1,3,1],[1,5,1],[4,2,1]] 输出：7 解释：因为路径
1→3→1→1→1 的总和最小。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：grid = [[1,2,3],[4,5,6]] 输出：12</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>m == grid.length</li>
<li>n == grid[i].length</li>
<li>1 &lt;= m, n &lt;= 200</li>
<li>0 &lt;= grid[i][j] &lt;= 100</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>由于路径的方向只能是向下或向右，因此网格的第一行的每个元素只能从左上角元素开始向右移动到达，网格的第一列的每个元素只能从左上角元素开始向下移动到达，此时的路径是唯一的，因此每个元素对应的最小路径和即为对应的路径上的数字总和。</p>
<p>对于不在第一行和第一列的元素，可以从其上方相邻元素向下移动一步到达，或者从其左方相邻元素向右移动一步到达，元素对应的最小路径和等于其上方相邻元素与其左方相邻元素两者对应的最小路径和中的最小值加上当前元素的值。由于每个元素对应的最小路径和与其相邻元素对应的最小路径和有关，因此可以使用动态规划求解。</p>
<p>创建二维数组 <span
class="math display">\[dp\]</span>，与原始网格的大小相同，<span
class="math display">\[dp[i][j]\]</span> 表示从左上角出发到 <span
class="math display">\[(i,j)\]</span> 位置的最小路径和。显然，<span
class="math display">\[dp[0][0]=grid[0][0]\]</span>。对于 <span
class="math display">\[dp\]</span>
中的其余元素，通过以下状态转移方程计算元素值。</p>
<ul>
<li>当 <span class="math display">\[i&gt;0\]</span> 且 <span
class="math display">\[j=0\]</span> 时，<span
class="math display">\[\textit{dp}[i][0]=\textit{dp}[i-1][0]+\textit{grid}[i][0]\]</span>。</li>
<li>当 <span class="math display">\[i=0\]</span> 且 <span
class="math display">\[j&gt;0\]</span> 时，<span
class="math display">\[\textit{dp}[0][j]=\textit{dp}[0][j-1]+\textit{grid}[0][j]\]</span>。</li>
<li>当 <span class="math display">\[i&gt;0\]</span> 且 <span
class="math display">\[j&gt;0\]</span> 时，<span
class="math display">\[\textit{dp}[i][j]=\min(\textit{dp}[i-1][j],\textit{dp}[i][j-1])+\textit{grid}[i][j]\]</span>。</li>
</ul>
<p>最后得到 <span class="math display">\[\textit{dp}[m-1][n-1]\]</span>
的值即为从网格左上角到网格右下角的最小路径和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minPathSum</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>] * columns <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rows)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rows):</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, columns):</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + grid[<span class="number">0</span>][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, columns):</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[rows - <span class="number">1</span>][columns - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
分别是网格的行数和列数。需要对整个网格遍历一次，计算 <span
class="math display">\[\textit{dp}\]</span> 的每个元素的值。</li>
<li>空间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
分别是网格的行数和列数。创建一个二维数组 <span
class="math display">\[dp\]</span>，和网格大小相同。
空间复杂度可以优化，例如每次只存储上一行的 <span
class="math display">\[dp\]</span> 值，则可以将空间复杂度优化到 <span
class="math display">\[O(n)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q22-括号生成-中等-回溯法</title>
    <url>/2021/08/20/2021-08-20-Q22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90-%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    <content><![CDATA[<h4 id="括号生成"><a
href="https://leetcode-cn.com/problems/generate-parentheses/">22.
括号生成</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>数字 <code>n</code>
代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且
<strong>有效的</strong> 括号组合。</p>
<p>有效括号组合需满足：左括号必须以正确的顺序闭合。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：n = 3 输出：["((()))","(()())","(())()","()(())","()()()"]</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：n = 1 输出：["()"]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= n &lt;= 8</li>
</ul>
</blockquote>
<h3 id="approach-1-暴力法">Approach 1: 暴力法</h3>
<p><strong>思路</strong></p>
<p>我们可以生成所有 <span class="math display">\[2^{2n}\]</span> 个 '('
和 ')' 字符构成的序列，然后我们检查每一个是否有效即可。</p>
<p><strong>算法</strong></p>
<p>为了生成所有序列，我们可以使用递归。长度为 n 的序列就是在长度为 n-1
的序列前加一个 '(' 或 ')'。</p>
<p>为了检查序列是否有效，我们遍历这个序列，并使用一个变量 balance
表示左括号的数量减去右括号的数量。如果在遍历过程中 balance
的值小于零，或者结束时 balance
的值不为零，那么该序列就是无效的，否则它是有效的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">A</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(A) == <span class="number">2</span>*n:</span><br><span class="line">                <span class="keyword">if</span> valid(A):</span><br><span class="line">                    ans.append(<span class="string">&quot;&quot;</span>.join(A))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                A.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                generate(A)</span><br><span class="line">                A.pop()</span><br><span class="line">                A.append(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                generate(A)</span><br><span class="line">                A.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">A</span>):</span><br><span class="line">            bal = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> A:</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span>: bal += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: bal -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> bal &lt; <span class="number">0</span>: <span class="comment"># 合法字符串只可能出现差右括号的情况，不会差左括号 </span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> bal == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        generate([])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(2^{2n}n)\]</span>，对于 <span
class="math display">\[2^{2n}\]</span>
个序列中的每一个，我们用于建立和验证该序列的复杂度为 <span
class="math display">\[O(n)\]</span>。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(n)\]</span>，除了答案数组之外，我们所需要的空间取决于递归栈的深度，每一层递归函数需要
<span class="math display">\[O(1)\]</span> 的空间，最多递归 <span
class="math display">\[2n\]</span> 层，因此空间复杂度为 <span
class="math display">\[O(n)\]</span>。</p></li>
</ul>
<h3 id="approach-2-回溯法">Approach 2: 回溯法</h3>
<p>方法一还有改进的余地：我们可以只在序列仍然保持有效时才添加 '(' or
')'，而不是像 方法一
那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，</p>
<p>如果左括号数量不大于
n，我们可以放一个左括号。如果右括号数量小于左括号的数量，我们可以放一个右括号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis2</span>(<span class="params">self, n: <span class="built_in">int</span></span>):</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">S, left, right</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(S) == <span class="number">2</span> * n:</span><br><span class="line">                ans.append(<span class="string">&#x27;&#x27;</span>.join(S))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; n:</span><br><span class="line">                S.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                backtrack(S, left+<span class="number">1</span>, right)</span><br><span class="line">                S.pop()</span><br><span class="line">            <span class="keyword">if</span> right &lt; left:</span><br><span class="line">                S.append(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                backtrack(S, left, right+<span class="number">1</span>)</span><br><span class="line">                S.pop()</span><br><span class="line"></span><br><span class="line">        backtrack([], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>我们的复杂度分析依赖于理解 generateParenthesis(n)
中有多少个元素。这个分析超出了本文的范畴，但事实证明这是第 n 个卡特兰数
<span class="math display">\[\dfrac{1}{n+1}\dbinom{2n}{n}
\]</span>，这是由 <span
class="math display">\[\dfrac{4^n}{n\sqrt{n}}\]</span> 渐近界定的。</p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(\dfrac{4^n}{\sqrt{n}})\]</span>，在回溯过程中，每个答案需要
<span class="math display">\[O(n)\]</span>
的时间复制到答案数组中。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(n)\]</span>，除了答案数组之外，我们所需要的空间取决于递归栈的深度，每一层递归函数需要
<span class="math display">\[O(1)\]</span> 的空间，最多递归 2n
层，因此空间复杂度为 <span
class="math display">\[O(n)\]</span>。</p></li>
</ul>
<h3 id="approach-3-按括号序列的长度递归">Approach 3:
按括号序列的长度递归</h3>
<p><strong>思路与算法</strong></p>
<p>任何一个括号序列都一定是由 ( 开头，并且第一个 (
一定有一个唯一与之对应的 )。这样一来，每一个括号序列可以用 (a)b
来表示，其中 a 与 b 分别是一个合法的括号序列（可以为空）。</p>
<p>那么，要生成所有长度为 2 * n 的括号序列，我们定义一个函数 generate(n)
来返回所有可能的括号序列。那么在函数 generate(n) 的过程中：</p>
<ul>
<li>我们需要枚举与第一个 ( 对应的 ) 的位置 2 * i + 1；</li>
<li>递归调用 generate(i) 即可计算 a 的所有可能性；</li>
<li>递归调用 generate(n - i - 1) 即可计算 b 的所有可能性；</li>
<li>遍历 a 与 b 的所有可能性并拼接，即可得到所有长度为 2 * n
的括号序列。</li>
</ul>
<p>为了节省计算时间，我们在每次 generate(i)
函数返回之前，把返回值存储起来，下次再调用 generate(i)
时可以直接返回，不需要再递归计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateParenthesis3</span>(<span class="params">self, n: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> left <span class="keyword">in</span> self.generateParenthesis(c):</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.generateParenthesis(n-<span class="number">1</span>-c):</span><br><span class="line">                    ans.append(<span class="string">&#x27;(&#123;&#125;)&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(left, right))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(\dfrac{4^n}{\sqrt{n}})\]</span>，该分析与
方法二 类似。</p></li>
<li><p>空间复杂度：<span class="math display">\[
O(\dfrac{4^n}{\sqrt{n}})\]</span>，此方法除答案数组外，中间过程中会存储与答案数组同样数量级的临时数组，是我们所需要的空间复杂度。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Backtracking Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience | Integration of Reinforcement Learning and Optimal Decision-Making Theories of the Basal Ganglia</title>
    <url>/2021/09/06/2021-09-06-Neuroscience%20-%20Integration%20of%20Reinforcement%20Learning%20and%20Optimal%20Decision-Making%20Theories%20of%20the%20Basal%20Ganglia/</url>
    <content><![CDATA[<h1
id="integration-of-reinforcement-learning-and-optimal-decision-making-theories-of-the-basal-ganglia">Integration
of Reinforcement Learning and Optimal Decision-Making Theories of the
Basal Ganglia</h1>
<p>论文链接：https://direct.mit.edu/neco/article/23/4/817/7637/Integration-of-Reinforcement-Learning-and-Optimal</p>
<h2 id="背景">背景</h2>
<h2 id="主要工作">主要工作</h2>
<ul>
<li></li>
</ul>
<h2 id="总结">总结</h2>
]]></content>
      <tags>
        <tag>Neuroscience</tag>
        <tag>Decision-Making</tag>
      </tags>
  </entry>
  <entry>
    <title>Q744-寻找比目标字母大的最小字母-简单-二分法</title>
    <url>/2021/09/03/2021-09-03-Q744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D-%E7%AE%80%E5%8D%95-%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h4 id="括号生成"><a
href="https://leetcode-cn.com/problems/generate-parentheses/">22.
括号生成</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个排序后的字符列表 letters
，列表中只包含小写英文字母。另给出一个目标字母
target，请你寻找在这一有序列表里比目标字母大的最小字母。</p>
<p>在比较时，字母是依序循环出现的。举个例子：</p>
<p>如果目标字母 target = 'z' 并且字符列表为 letters = ['a',
'b']，则答案返回 'a'</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入: letters = ["c", "f", "j"] target = "a" 输出: "c"</p>
<p>输入: letters = ["c", "f", "j"] target = "c" 输出: "f"</p>
<p>输入: letters = ["c", "f", "j"] target = "d" 输出: "f"</p>
<p>输入: letters = ["c", "f", "j"] target = "g" 输出: "j"</p>
<p>输入: letters = ["c", "f", "j"] target = "j" 输出: "c"</p>
<p>输入: letters = ["c", "f", "j"] target = "k" 输出: "c"</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>letters</code>长度范围在<code>[2, 10000]</code>区间内。</li>
<li><code>letters</code> 仅由小写字母组成，最少包含两个不同的字母。</li>
<li>目标字母<code>target</code> 是一个小写字母。</li>
</ul>
</blockquote>
<h3 id="approach-1-查找法">Approach 1: 查找法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextGreatestLetter</span>(<span class="params">self, letters, target: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">            ans = <span class="built_in">chr</span>((<span class="built_in">ord</span>(target) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + i ) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> ans <span class="keyword">in</span> letters:</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(n)\]</span>，</p></li>
<li><p>空间复杂度：<span class="math display">\[O(1)\]</span>，</p></li>
</ul>
<h3 id="approach-2-二分法">Approach 2: 二分法</h3>
<p>注意由于是循环的数组，所以最后输出的时候有个取余的操作，是为了处理当
<span class="math display">\[L=len(letters)\]</span> 的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextGreatestLetter2</span>(<span class="params">self, letters, target: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        L = <span class="number">0</span></span><br><span class="line">        R = <span class="built_in">len</span>(letters) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> L &lt;= R:</span><br><span class="line">            M = L + (R - L) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> letters[M] &lt;= target:</span><br><span class="line">                L = M + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> letters[M] &gt; target:</span><br><span class="line">                R = M - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> letters[L % <span class="built_in">len</span>(letters)]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(\log N)\]</span>。<span
class="math display">\[N\]</span> 指的是 letters
的长度，我们只查看数组中的 <span class="math display">\[\log n\]</span>
个元素。</li>
<li>空间复杂度：<span class="math display">\[O(1)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
        <tag>bisection</tag>
      </tags>
  </entry>
  <entry>
    <title>Q329-矩阵中的最长递增路径-困难-深度优先搜索</title>
    <url>/2021/09/07/2021-09-07-Q329-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E8%B7%AF%E5%BE%84-%E5%9B%B0%E9%9A%BE-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h4 id="矩阵中的最长递增路径"><a
href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/">329.
矩阵中的最长递增路径</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。</p>
<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 不能 在
对角线 方向上移动或移动到 边界外（即不允许环绕）。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：matrix = [[9,9,4],[6,6,8],[2,1,1]] 输出：4 解释：最长递增路径为
[1, 2, 6, 9]。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>m == matrix.length</li>
<li>n == matrix[i].length</li>
<li>1 &lt;= m, n &lt;= 200</li>
<li>0 &lt;= <span class="math display">\[matrix[i][j]\]</span> &lt;= 231
- 1</li>
</ul>
</blockquote>
<h3 id="approach-1-记忆化深度优先搜索">Approach 1:
记忆化深度优先搜索</h3>
<p>将矩阵看成一个有向图，每个单元格对应图中的一个节点，如果相邻的两个单元格的值不相等，则在相邻的两个单元格之间存在一条从较小值指向较大值的有向边。问题转化成在有向图中寻找最长路径。</p>
<p>深度优先搜索是非常直观的方法。从一个单元格开始进行深度优先搜索，即可找到从该单元格开始的最长递增路径。对每个单元格分别进行深度优先搜索之后，即可得到矩阵中的最长递增路径的长度。</p>
<p>但是如果使用朴素深度优先搜索，时间复杂度是指数级，会超出时间限制，因此必须加以优化。</p>
<p>朴素深度优先搜索的时间复杂度过高的原因是进行了大量的重复计算，同一个单元格会被访问多次，每次访问都要重新计算。由于同一个单元格对应的最长递增路径的长度是固定不变的，因此可以使用记忆化的方法进行优化。用矩阵
<span class="math display">\[\textit{memo}\]</span>
作为缓存矩阵，已经计算过的单元格的结果存储到缓存矩阵中。</p>
<p>使用记忆化深度优先搜索，当访问到一个单元格 <span
class="math display">\[(i,j)\]</span> 时，如果 <span
class="math display">\[\textit{memo}[i][j] \neq
0\]</span>，说明该单元格的结果已经计算过，则直接从缓存中读取结果，如果
<span
class="math display">\[\textit{memo}[i][j]=0\]</span>，说明该单元格的结果尚未被计算过，则进行搜索，并将计算得到的结果存入缓存中。</p>
<p>遍历完矩阵中的所有单元格之后，即可得到矩阵中的最长递增路径的长度。</p>
<p>python中使用@lru_cache(None)可以缓存之前的计算结果，避免重复计算，提高计算效率（参考：https://www.cnblogs.com/sfencs-hcy/p/10171457.html）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    </span><br><span class="line">    DIRS = [(-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestIncreasingPath</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">        @lru_cache(<span class="params"><span class="literal">None</span></span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">row: <span class="built_in">int</span>, column: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            best = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> Solution.DIRS:</span><br><span class="line">                newRow, newColumn = row + dx, column + dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= newRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= newColumn &lt; columns <span class="keyword">and</span> matrix[newRow][newColumn] &gt; matrix[row][column]:</span><br><span class="line">                    best = <span class="built_in">max</span>(best, dfs(newRow, newColumn) + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> best</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(columns):</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dfs(i, j))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
分别是矩阵的行数和列数。深度优先搜索的时间复杂度是 <span
class="math display">\[O(V+E)\]</span>，其中 V 是节点数，E
是边数。在矩阵中，<span
class="math display">\[O(V)=O(mn)\]</span>，<span
class="math display">\[O(E)\approx O(4mn) = O(mn)\]</span></li>
<li>空间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
分别是矩阵的行数和列数。空间复杂度主要取决于缓存和递归调用深度，缓存的空间复杂度是
<span class="math display">\[O(mn)\]</span>，递归调用深度不会超过
mn。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Hard</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>JZOffer 29-顺时针打印矩阵-简单</title>
    <url>/2021/09/08/2021-09-08-JZOffer%2029-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5-%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<h4 id="剑指-offer-29.-顺时针打印矩阵"><a
href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指
Offer 29. 顺时针打印矩阵</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>0 &lt;= matrix.length &lt;= 100</code></li>
<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>
</ul>
</blockquote>
<h3 id="approach-1-模拟">Approach 1: 模拟</h3>
<p>可以模拟打印矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向。</p>
<p>判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵
<span
class="math display">\[\textit{visited}\]</span>，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将
<span class="math display">\[\textit{visited}\]</span>
中的对应位置的元素设为已访问。</p>
<p>如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        visited = [[<span class="literal">False</span>] * columns <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rows)]</span><br><span class="line">        total = rows * columns</span><br><span class="line">        order = [<span class="number">0</span>] * total</span><br><span class="line"></span><br><span class="line">        directions = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">        row, column = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        directionIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total):</span><br><span class="line">            order[i] = matrix[row][column]</span><br><span class="line">            visited[row][column] = <span class="literal">True</span></span><br><span class="line">            nextRow, nextColumn = row + directions[directionIndex][<span class="number">0</span>], column + directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= nextRow &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= nextColumn &lt; columns <span class="keyword">and</span> <span class="keyword">not</span> visited[nextRow][nextColumn]):</span><br><span class="line">                directionIndex = (directionIndex + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            row += directions[directionIndex][<span class="number">0</span>]</span><br><span class="line">            column += directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m
和 n
分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(mn)\]</span>。需要创建一个大小为 <span
class="math display">\[m \times n\]</span> 的矩阵 <span
class="math display">\[\textit{visited}\]</span>
记录每个位置是否被访问过。</p></li>
</ul>
<h3 id="approach-2-按层模拟">Approach 2: 按层模拟</h3>
<p>可以将矩阵看成若干层，首先打印最外层的元素，其次打印次外层的元素，直到打印最内层的元素。</p>
<p>定义矩阵的第 k 层是到最近边界距离为 k
的所有顶点。例如，下图矩阵最外层元素都是第 1 层，次外层元素都是第 2
层，剩下的元素都是第 3 层。</p>
<p>对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于
(<span class="math display">\[\textit{top},
\textit{left})\]</span>，右下角位于 <span
class="math display">\[(\textit{bottom},
\textit{right})\]</span>，按照如下顺序遍历当前层的元素。</p>
<p>从左到右遍历上侧元素，依次为 <span
class="math display">\[(\textit{top}, \textit{left})\]</span> 到 <span
class="math display">\[(\textit{top}, \textit{right})\]</span>.</p>
<p>从上到下遍历右侧元素，依次为 <span
class="math display">\[(\textit{top} + 1, \textit{right}) \]</span>到
<span class="math display">\[(\textit{bottom},
\textit{right})\]</span>。</p>
<p>如果 <span class="math display">\[\textit{left} &lt;
\textit{right}\]</span> 且 <span class="math display">\[\textit{top}
&lt; \textit{bottom}\]</span>，则从右到左遍历下侧元素，依次为 <span
class="math display">\[(\textit{bottom}, \textit{right} - 1)\]</span> 到
<span class="math display">\[(\textit{bottom}, \textit{left} +
1)\]</span> ，以及从下到上遍历左侧元素，依次为 <span
class="math display">\[(\textit{bottom}, \textit{left})\]</span> 到
<span class="math display">\[(\textit{top} + 1,
\textit{left})\]</span>。</p>
<p>遍历完当前层的元素之后，将 <span class="math display">\[\textit{left}
\]</span>和 <span class="math display">\[\textit{top}\]</span> 分别增加
1，将 <span class="math display">\[\textit{right}\]</span> 和 <span
class="math display">\[\textit{bottom}\]</span> 分别减少
1，进入下一层继续遍历，直到遍历完所有元素为止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        order = <span class="built_in">list</span>()</span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, columns - <span class="number">1</span>, <span class="number">0</span>, rows - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[top][column])</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[row][right])</span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[bottom][column])</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[row][left])</span><br><span class="line">            left, right, top, bottom = left + <span class="number">1</span>, right - <span class="number">1</span>, top + <span class="number">1</span>, bottom - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析：</strong></p>
<ul>
<li><p>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m
和 n
分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。</p></li>
<li><p>空间复杂度：<span
class="math display">\[O(1)\]</span>。除了输出数组以外，空间复杂度是常数。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>最小高度树-简单-二叉树</title>
    <url>/2021/09/28/2021-09-28-%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91-%E7%AE%80%E5%8D%95-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h4 id="最小高度树"><a
href="https://leetcode-cn.com/problems/minimum-height-tree-lcci/">最小高度树</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给定一个有序整数数组，元素各不相同且按升序排列，编写一个算法，创建一棵高度最小的二叉搜索树。</p>
<p>在二叉搜索树中：</p>
<ol type="1">
<li><p>若任意结点的左子树不空，则左子树上所有结点的值均不大于它的根结点的值。</p></li>
<li><p>若任意结点的右子树不空，则右子树上所有结点的值均不小于它的根结点的值。</p></li>
<li><p>任意结点的左、右子树也分别为二叉搜索树。</p></li>
</ol>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>给定有序数组: [-10,-3,0,5,9],</p>
<p>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</p>
<pre><code>      0 
     / \ 
   -3   9 
   /   / 
 -10  5 </code></pre>
</blockquote>
<h3 id="approach-1-迭代法">Approach 1: 迭代法</h3>
<p>对于有序数组，我们寻找中间元素，将数组分为两段，每段再分别进行迭代；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedArrayToBST</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        mid = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line">        root.left = self.sortedArrayToBST(nums[: mid])</span><br><span class="line">        root.right = self.sortedArrayToBST(nums[mid + <span class="number">1</span>: ])</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，递归涉及到每一个元素。</li>
<li>空间复杂度：O(n)。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Binary Search Tree</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Q100-相同的树-简单-二叉树</title>
    <url>/2021/09/29/2021-09-29-Q100-100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91-%E7%AE%80%E5%8D%95-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h4 id="相同的树"><a
href="https://leetcode-cn.com/problems/same-tree/">100.
相同的树</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code>
，编写一个函数来检验这两棵树是否相同。</p>
<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：p = [1,2,3], q = [1,2,3] 输出：true</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：p = [1,2], q = [1,null,2] 输出：false</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>两棵树上的节点数目都在范围 [0, 100] 内</li>
<li><span class="math display">\[-10^4 &lt;= Node.val &lt;= 10^4
\]</span></li>
</ul>
</blockquote>
<h3 id="approach-1-深度优先搜索">Approach 1: 深度优先搜索</h3>
<p>如果两个二叉树都为空，则两个二叉树相同。如果两个二叉树中有且只有一个为空，则两个二叉树一定不相同。</p>
<p>如果两个二叉树都不为空，那么首先判断它们的根节点的值是否相同，若不相同则两个二叉树一定不同，若相同，再分别判断两个二叉树的左子树是否相同以及右子树是否相同。这是一个递归的过程，因此可以使用深度优先搜索，递归地判断两个二叉树是否相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSameTree</span>(<span class="params">self, p: TreeNode, q: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> p <span class="keyword">or</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isSameTree(p.left, q.left) <span class="keyword">and</span> self.isSameTree(p.right, q.right)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(\min(m,n))\]</span>，其中
m 和 n
分别是两个二叉树的节点数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。</li>
<li>空间复杂度：<span class="math display">\[O(\min(m,n))\]</span>，其中
m 和 n
分别是两个二叉树的节点数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数。</li>
</ul>
<h3 id="approach-2-广度优先搜索">Approach 2: 广度优先搜索</h3>
<p>也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。</p>
<p>使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。</p>
<ul>
<li><p>比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；</p></li>
<li><p>如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；</p></li>
<li><p>如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。</p></li>
</ul>
<p>如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSameTree</span>(<span class="params">self, p: TreeNode, q: TreeNode</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">or</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        queue1 = collections.deque([p])</span><br><span class="line">        queue2 = collections.deque([q])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue1 <span class="keyword">and</span> queue2:</span><br><span class="line">            node1 = queue1.popleft()</span><br><span class="line">            node2 = queue2.popleft()</span><br><span class="line">            <span class="keyword">if</span> node1.val != node2.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            left1, right1 = node1.left, node1.right</span><br><span class="line">            left2, right2 = node2.left, node2.right</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> left1) ^ (<span class="keyword">not</span> left2):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> right1) ^ (<span class="keyword">not</span> right2):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> left1:</span><br><span class="line">                queue1.append(left1)</span><br><span class="line">            <span class="keyword">if</span> right1:</span><br><span class="line">                queue1.append(right1)</span><br><span class="line">            <span class="keyword">if</span> left2:</span><br><span class="line">                queue2.append(left2)</span><br><span class="line">            <span class="keyword">if</span> right2:</span><br><span class="line">                queue2.append(right2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> queue1 <span class="keyword">and</span> <span class="keyword">not</span> queue2</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(\min(m,n))\]</span>，其中
m 和 n
分别是两个二叉树的节点数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。</li>
<li>空间复杂度：<span class="math display">\[O(\min(m,n))\]</span>，其中
m 和 n
分别是两个二叉树的节点数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Binary Search Tree</tag>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Word多行公式的换行、对齐与编号</title>
    <url>/2021/12/01/2021-12-01-Word%E5%A4%9A%E8%A1%8C%E5%85%AC%E5%BC%8F%E7%9A%84%E6%8D%A2%E8%A1%8C%E3%80%81%E5%AF%B9%E9%BD%90%E4%B8%8E%E7%BC%96%E5%8F%B7/</url>
    <content><![CDATA[<h1
id="word多行公式的换行对齐与编号">Word多行公式的换行、对齐与编号</h1>
<h3 id="需求描述">1 需求描述</h3>
<p>使用Word进行公式编辑的过程中有以下需求：</p>
<ul>
<li>需求1：单行公式的编号并调用；</li>
<li>额外需求：编号修改；</li>
<li>需求2：多行公式的编辑与对齐；</li>
<li>需求3：多行公式，自定义某一行编号并调用；</li>
<li>需求4：长多公式的换行与对齐；</li>
</ul>
<p>后面小节对这些问题进行拆解，并逐一提供解决办法。</p>
<hr />
<h3 id="解决方法">2 解决方法</h3>
<h4 id="需求1单行公式的编号并调用">2.1 需求1：单行公式的编号并调用</h4>
<ul>
<li><strong>Step
1</strong>：输入单行公式，在文档中单独成行并居中，鼠标停留于公式框最右端（图1）；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-1.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<ul>
<li><strong>Step
2</strong>：公式框内最右端输入“#()”并按回车，获得如下效果（图2）；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-2.png"
alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<ul>
<li><strong>Step
3</strong>：方框中需要编写公式序号，这里不直接书写，选中方框后按下 Ctrl
+ Fn + F9，在大括号中输入“seq equation”设置标签（图3），输入完成后按下
Fn + F9，自动获得序号；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-3.png"
alt="3" />
<figcaption aria-hidden="true">3</figcaption>
</figure>
<ul>
<li><strong>Step
4</strong>：为了调用，需要在序号处设置书签。选中生成的序号（序号背景色变深灰），点击窗口栏的“插入
- 书签”根据个人习惯设置一个书签名（图4），之后点击确定；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-4.png"
alt="4" />
<figcaption aria-hidden="true">4</figcaption>
</figure>
<ul>
<li><strong>Step
5</strong>：下面将在正文中对公式进行引用；引用位置如图5光标处所示。在窗口栏选择“插入
-
交叉引用”。“引用类型”选择“书签”，“引用内容”选择“书签文字”；“引用哪一个书签”选择在
Step 4
中定义的书签名（图6），单击“插入”。此时就完成了对公式的引用。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-5.png"
alt="5" />
<figcaption aria-hidden="true">5</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-6.png"
alt="6" />
<figcaption aria-hidden="true">6</figcaption>
</figure>
<h4 id="额外需求编号修改">2.2 额外需求：编号修改</h4>
<ul>
<li><strong>Extra Step
6</strong>：如果要对公式序号进行修改，这里假设要从“1”更改为“7”。光标移动到公式框中编号数字的左边（<strong>注意必须是左边，右边不行！</strong>）（图7）。输入需要的编号，这里输入“7”，然后单击Delete删除旧编号（图8）。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-7.png"
alt="7" />
<figcaption aria-hidden="true">7</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-8.png"
alt="8" />
<figcaption aria-hidden="true">8</figcaption>
</figure>
<ul>
<li><strong>Extra Step
7</strong>：此时正文中的公式编号仍然为“1”，需要框选中正文中的编号“1”，右键，点击“更新域”（图9），即可获得正确编号“7”。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-9.png"
alt="9" />
<figcaption aria-hidden="true">9</figcaption>
</figure>
<hr />
<h4 id="需求2多行公式的编辑与对齐">2.3 需求2：多行公式的编辑与对齐</h4>
<ul>
<li><strong>Step
1</strong>：首先输入多行公式的第一行，在首行末尾输入“#()”并按回车，这一步的目的是拉长公式框（公式框长队对比：图1和图10），方便后续操作（注意：这一步很重要，不可省略！）</li>
<li><strong>Step
2</strong>：光标移动到公式框右端位置，并且该位置恰好使得整行公式呈灰色（图10）。此时单击回车，可生成第二行的小方框（图11），在小方框中输入第二行公式（图12）。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-10.png"
alt="10" />
<figcaption aria-hidden="true">10</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-11.png"
alt="11" />
<figcaption aria-hidden="true">11</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-12.png"
alt="12" />
<figcaption aria-hidden="true">12</figcaption>
</figure>
<ul>
<li><strong>Step
3</strong>：此时的两行公式都是居中，没实现在等号处对齐，只需在每行公式想要设置对齐点的位置输入“&amp;”符号即可对齐（图13）（注意：输入“&amp;”是不可见的，但会在输入位置出现短竖线位置标记）</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-13.png"
alt="13" />
<figcaption aria-hidden="true">13</figcaption>
</figure>
<hr />
<h4 id="需求3多行公式自定义某一行编号并调用">2.4
需求3：多行公式，自定义某一行编号并调用</h4>
<ul>
<li><strong>Step
1</strong>：在已经完成了多行公式输入和对齐的情况下（图13），想要对某一个行进行编号。操作方法同需求1的Step
1和Step 2，但是Step
2中不是按回车，而是按空格（注意此时输入的“#“是不可见的）。之后的步骤继续参考需求1的解决办法即可（图14）。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-13.png"
alt="13" />
<figcaption aria-hidden="true">13</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-14.png"
alt="14" />
<figcaption aria-hidden="true">14</figcaption>
</figure>
<hr />
<h4 id="需求4长多公式的换行与对齐">2.5
需求4：长多公式的换行与对齐；</h4>
<ul>
<li><strong>Step
1</strong>：遇到某行公式过于长，需要换行对齐的情况。首先输入长公式（图15）（可先输入一部分），在换行处回车（图16）；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-15.png"
alt="15" />
<figcaption aria-hidden="true">15</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-16.png"
alt="16" />
<figcaption aria-hidden="true">16</figcaption>
</figure>
<ul>
<li><strong>Step
2</strong>：在每一行想设置对齐点的位置输入“&amp;”符号实现对齐，这里是在等号后和新行最前端设置“&amp;”的（图17）；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20211201-17.png"
alt="17" />
<figcaption aria-hidden="true">17</figcaption>
</figure>
<h3 id="ref">3 Ref：</h3>
<p>[1]. Word 公式编号以及引用
https://www.bilibili.com/read/cv6527614/</p>
<p>[2]. word多行公式编号对齐
https://www.bilibili.com/read/cv6680157/</p>
<p>Pcon</p>
<p>2021年12月01日</p>
]]></content>
      <tags>
        <tag>Word Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Unconscious RL of hidden brain states supported by confidence</title>
    <url>/2020/09/16/2021-12-17-Reinforcement%20Learning-111/</url>
    <content><![CDATA[<h1
id="unconscious-reinforcement-learning-of-hidden-brain-states-supported-by-confidence">Unconscious
reinforcement learning of hidden brain states supported by
confidence</h1>
<p>论文链接：https://www.nature.com/articles/s41467-020-17828-8</p>
<h2 id="背景">背景</h2>
<h2 id="主要工作">主要工作</h2>
<ul>
<li></li>
</ul>
<h2 id="方法">方法</h2>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200912-1.png" /></p>
<h2 id="总结">总结</h2>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Making Efficient Use of Demonstrations to Solve Hard Exploration Problems (R2D3)</title>
    <url>/2020/09/16/2021-12-17-Reinforcement%20Learning-R2D3/</url>
    <content><![CDATA[<h1
id="making-efficient-use-of-demonstrations-to-solve-hard-exploration-problems">Making
Efficient Use of Demonstrations to Solve Hard Exploration Problems</h1>
<p>论文链接：https://arxiv.org/abs/1909.01387</p>
<h2 id="背景">背景</h2>
<p>针对有困难探索的任务，通过示教实现高效的学习。</p>
<p>探索上的困难包括三个方面：</p>
<ul>
<li>奖励稀疏（Sparse rewards）：</li>
<li>部分可观测（Partial observability）：</li>
<li>高度可变的初始条件（Highly variable initial conditions）：</li>
</ul>
<h2 id="主要工作">主要工作</h2>
<ul>
<li></li>
</ul>
<h2 id="方法">方法</h2>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20200912-1.png" /></p>
<h2 id="总结">总结</h2>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-使用优化器的曲线拟合程序</title>
    <url>/2022/01/06/2022-01-06-pytorch-%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96%E5%99%A8%E7%9A%84%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="pytorch---使用优化器的曲线拟合程序">Pytorch -
使用优化器的曲线拟合程序</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># pytorch-使用优化器的曲线拟合程序</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Tensors to hold input and outputs.</span></span><br><span class="line">x = torch.linspace(-math.pi, math.pi, <span class="number">2000</span>)</span><br><span class="line">y = torch.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare the input tensor (x, x^2, x^3).</span></span><br><span class="line">p = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">xx = x.unsqueeze(-<span class="number">1</span>).<span class="built_in">pow</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the nn package to define our model and loss function.</span></span><br><span class="line">model = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">    torch.nn.Flatten(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line">loss_fn = torch.nn.MSELoss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the optim package to define an Optimizer that will update the weights of</span></span><br><span class="line"><span class="comment"># the model for us. Here we will use RMSprop; the optim package contains many other</span></span><br><span class="line"><span class="comment"># optimization algorithms. The first argument to the RMSprop constructor tells the</span></span><br><span class="line"><span class="comment"># optimizer which Tensors it should update.</span></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line">optimizer = torch.optim.RMSprop(model.parameters(), lr=learning_rate)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="comment"># Forward pass: compute predicted y by passing x to the model.</span></span><br><span class="line">    y_pred = model(xx)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute and print loss.</span></span><br><span class="line">    loss = loss_fn(y_pred, y)</span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">99</span>:</span><br><span class="line">        <span class="built_in">print</span>(t, loss.item())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before the backward pass, use the optimizer object to zero all of the</span></span><br><span class="line">    <span class="comment"># gradients for the variables it will update (which are the learnable</span></span><br><span class="line">    <span class="comment"># weights of the model). This is because by default, gradients are</span></span><br><span class="line">    <span class="comment"># accumulated in buffers( i.e, not overwritten) whenever .backward()</span></span><br><span class="line">    <span class="comment"># is called. Checkout docs of torch.autograd.backward for more details.</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backward pass: compute gradient of the loss with respect to model</span></span><br><span class="line">    <span class="comment"># parameters</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calling the step function on an Optimizer makes an update to its</span></span><br><span class="line">    <span class="comment"># parameters</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">linear_layer = model[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Result: y = <span class="subst">&#123;linear_layer.bias.item()&#125;</span> + <span class="subst">&#123;linear_layer.weight[:, <span class="number">0</span>].item()&#125;</span> x + <span class="subst">&#123;linear_layer.weight[:, <span class="number">1</span>].item()&#125;</span> x^2 + <span class="subst">&#123;linear_layer.weight[:, <span class="number">2</span>].item()&#125;</span> x^3&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-手动梯度下降的曲线拟合</title>
    <url>/2022/01/06/2022-01-06-Pytorch-%E6%89%8B%E5%8A%A8%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%9A%84%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<h4 id="pytorch---手动梯度下降的曲线拟合">Pytorch -
手动梯度下降的曲线拟合</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random input and output data</span></span><br><span class="line">x = np.linspace(-math.pi, math.pi, <span class="number">2000</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Randomly initialize weights</span></span><br><span class="line">a = np.random.randn()</span><br><span class="line">b = np.random.randn()</span><br><span class="line">c = np.random.randn()</span><br><span class="line">d = np.random.randn()</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-6</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="comment"># Forward pass: compute predicted y</span></span><br><span class="line">    <span class="comment"># y = a + b x + c x^2 + d x^3</span></span><br><span class="line">    y_pred = a + b * x + c * x ** <span class="number">2</span> + d * x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute and print loss</span></span><br><span class="line">    loss = np.square(y_pred - y).<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">99</span>:</span><br><span class="line">        <span class="built_in">print</span>(t, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backprop to compute gradients of a, b, c, d with respect to loss</span></span><br><span class="line">    grad_y_pred = <span class="number">2.0</span>*(y_pred - y)</span><br><span class="line">    grad_a = grad_y_pred.<span class="built_in">sum</span>()</span><br><span class="line">    grad_b = (grad_y_pred * x).<span class="built_in">sum</span>()</span><br><span class="line">    grad_c = (grad_y_pred * x ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">    grad_d = (grad_y_pred * x ** <span class="number">3</span>).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update weights</span></span><br><span class="line">    a -= learning_rate * grad_a</span><br><span class="line">    b -= learning_rate * grad_b</span><br><span class="line">    c -= learning_rate * grad_c</span><br><span class="line">    d -= learning_rate * grad_d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Result: y = <span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> x + <span class="subst">&#123;c&#125;</span> x^2 + <span class="subst">&#123;d&#125;</span> x^3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig  = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax.plot(y)</span><br><span class="line">ax.plot(y_pred)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-自定义nn模块的曲线拟合程序</title>
    <url>/2022/01/06/2022-01-06-pytorch-%E8%87%AA%E5%AE%9A%E4%B9%89nn%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="pytorch---自定义nn模块的曲线拟合程序">Pytorch -
自定义nn模块的曲线拟合程序</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># pytorch-自定义nn模块的曲线拟合程序</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Polynomial3</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        In the constructor we instantiate four parameters and assign them as</span></span><br><span class="line"><span class="string">        member parameters.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.a = torch.nn.Parameter(torch.randn(()))</span><br><span class="line">        self.b = torch.nn.Parameter(torch.randn(()))</span><br><span class="line">        self.c = torch.nn.Parameter(torch.randn(()))</span><br><span class="line">        self.d = torch.nn.Parameter(torch.randn(()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        In the forward function we accept a Tensor of input data and we must return</span></span><br><span class="line"><span class="string">        a Tensor of output data. We can use Modules defined in the constructor as</span></span><br><span class="line"><span class="string">        well as arbitrary operators on Tensors.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.a + self.b * x + self.c * x ** <span class="number">2</span> + self.d * x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">string</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Just like any class in Python, you can also define custom method on PyTorch modules</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;y = <span class="subst">&#123;self.a.item()&#125;</span> + <span class="subst">&#123;self.b.item()&#125;</span> x + <span class="subst">&#123;self.c.item()&#125;</span> x^2 + <span class="subst">&#123;self.d.item()&#125;</span> x^3&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Tensors to hold input and outputs.</span></span><br><span class="line">x = torch.linspace(-math.pi, math.pi, <span class="number">2000</span>)</span><br><span class="line">y = torch.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct our model by instantiating the class defined above</span></span><br><span class="line">model = Polynomial3()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct our loss function and an Optimizer. The call to model.parameters()</span></span><br><span class="line"><span class="comment"># in the SGD constructor will contain the learnable parameters (defined </span></span><br><span class="line"><span class="comment"># with torch.nn.Parameter) which are members of the model.</span></span><br><span class="line">criterion = torch.nn.MSELoss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">1e-6</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="comment"># Forward pass: Compute predicted y by passing x to the model</span></span><br><span class="line">    y_pred = model(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute and print loss</span></span><br><span class="line">    loss = criterion(y_pred, y)</span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">99</span>:</span><br><span class="line">        <span class="built_in">print</span>(t, loss.item())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Zero gradients, perform a backward pass, and update the weights.</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Result: <span class="subst">&#123;model.string()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>CoppeliaSim入门指南</title>
    <url>/2022/01/16/2022-01-16-CoppeliaSim%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="coppeliasim入门指南">CoppeliaSim入门指南</h1>
<h3 id="软件安装">1 软件安装</h3>
<p>CoppeliaSim 以前叫做
V-rep，是一款广泛使用的机器人仿真软件环境。在本指南中，尝试在 python
中实现对 CoppeliaSim 的调用。</p>
<blockquote>
<p>CoppeliaSim下载地址：https://www.coppeliarobotics.com/</p>
</blockquote>
<p>下载完成后按照默认引导完成安装。</p>
<h3 id="环境配置">2 环境配置</h3>
<p>然后新建 python 工程环境，在工程文件夹内需要添加三个 CoppeliaSim
相关的文件，分别为：</p>
<ul>
<li><p>sim.py（原vrep.py）</p>
<blockquote>
<p>位置：C:Files</p>
</blockquote></li>
<li><p>simConst.py（原vrepConst.py）</p>
<blockquote>
<p>位置：C:Files</p>
</blockquote></li>
<li><p>remoteApi.dll</p>
<blockquote>
<p>位置：C:Files</p>
</blockquote></li>
</ul>
<p>在 CoppeliaSim 窗口中，双击 main
文件，添加如下所示第三行代码。帮助实现与 python 的远程连接</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220117-1.png"
alt="main文件位置" />
<figcaption aria-hidden="true">main文件位置</figcaption>
</figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- The main script is not supposed to be modified, except in special cases.</span><br><span class="line">require(&#x27;defaultMainScript&#x27;)</span><br><span class="line">simRemoteApi.start(19999)</span><br></pre></td></tr></table></figure>
<h3 id="程序代码">3 程序代码</h3>
<p>在 python 窗口中，添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Make sure to have the server side running in CoppeliaSim: </span></span><br><span class="line"><span class="comment"># in a child script of a CoppeliaSim scene, add following command</span></span><br><span class="line"><span class="comment"># to be executed just once, at simulation start:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># simRemoteApi.start(19997)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># then start simulation, and run this program.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IMPORTANT: for each successful call to simxStart, there</span></span><br><span class="line"><span class="comment"># should be a corresponding call to simxFinish at the end!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> sim</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;--------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;&quot;sim.py&quot; could not be imported. This means very probably that&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;either &quot;sim.py&quot; or the remoteApi library could not be found.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Make sure both are in the same folder as this file,&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;or appropriately adjust the file &quot;sim.py&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;--------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Program started&#x27;</span>)</span><br><span class="line">sim.simxFinish(-<span class="number">1</span>) <span class="comment"># just in case, close all opened connections</span></span><br><span class="line">clientID=sim.simxStart(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">19999</span>,<span class="literal">True</span>,<span class="literal">True</span>,<span class="number">5000</span>,<span class="number">5</span>) <span class="comment"># Connect to CoppeliaSim</span></span><br><span class="line"><span class="keyword">if</span> clientID!=-<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Connected to remote API server&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now try to retrieve data in a blocking fashion (i.e. a service call):</span></span><br><span class="line">    res,objs=sim.simxGetObjects(clientID,sim.sim_handle_all,sim.simx_opmode_blocking)</span><br><span class="line">    <span class="keyword">if</span> res==sim.simx_return_ok:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Number of objects in the scene: &#x27;</span>,<span class="built_in">len</span>(objs))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Remote API function call returned with error code: &#x27;</span>,res)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now retrieve streaming data (i.e. in a non-blocking fashion):</span></span><br><span class="line">    startTime=time.time()</span><br><span class="line">    sim.simxGetIntegerParameter(clientID,sim.sim_intparam_mouse_x,sim.simx_opmode_streaming) <span class="comment"># Initialize streaming</span></span><br><span class="line">    <span class="keyword">while</span> time.time()-startTime &lt; <span class="number">5</span>:</span><br><span class="line">        returnCode,data=sim.simxGetIntegerParameter(clientID,sim.sim_intparam_mouse_x,sim.simx_opmode_buffer) <span class="comment"># Try to retrieve the streamed data</span></span><br><span class="line">        <span class="keyword">if</span> returnCode==sim.simx_return_ok: <span class="comment"># After initialization of streaming, it will take a few ms before the first value arrives, so check the return code</span></span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;Mouse position x: &#x27;</span>,data) <span class="comment"># Mouse position x is actualized when the cursor is over CoppeliaSim&#x27;s window</span></span><br><span class="line">        time.sleep(<span class="number">0.005</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now send some data to CoppeliaSim in a non-blocking fashion:</span></span><br><span class="line">    sim.simxAddStatusbarMessage(clientID,<span class="string">&#x27;Hello CoppeliaSim!&#x27;</span>,sim.simx_opmode_oneshot)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before closing the connection to CoppeliaSim, make sure that the last command sent out had time to arrive. You can guarantee this with (for example):</span></span><br><span class="line">    sim.simxGetPingTime(clientID)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now close the connection to CoppeliaSim:</span></span><br><span class="line">    sim.simxFinish(clientID)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Failed connecting to remote API server&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Program ended&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码来自于样例程序simpleTest.py (C:Files)</p>
<h3 id="功能实现">4 功能实现</h3>
<p>功能大致是：获取 CoppeliaSim 窗口中鼠标的 x 坐标，并返回到 python
窗口输出。</p>
<p>运行方式为：先点击 CoppeliaSim 的 start simulation
按键运行仿真，再运行 python 程序，会自动实现通信。</p>
]]></content>
      <tags>
        <tag>V-rep</tag>
        <tag>CoppeliaSim</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境的导出与导入</title>
    <url>/2022/02/08/2022-02-08-python%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<h1 id="python环境的导出与导入">python环境的导出与导入</h1>
<h3 id="问题描述">1 问题描述</h3>
<p>需要在多台电脑中安装python项目的环境，需要避免第三方库不同版本的影响，减少重复工作量。</p>
<h3 id="解决方案">2 解决方案</h3>
<p>本文提供两种环境复制方案，并提供了详细的步骤：</p>
<ul>
<li><p>不太好的方案：使用requirements.txt</p></li>
<li><p>比较好的方案：使用requirements.yaml</p></li>
</ul>
<h4 id="不太好的方案使用requirements.txt">2.1
不太好的方案：使用requirements.txt</h4>
<p>使用
<code>requirements.txt</code>导出环境中所有<strong>使用库</strong>的名称和版本号。注意，这里说的“使用库”是指导出的库不一定是当前python环境中所有的库，而是所在项目中使用了的库，这是不一样的。（查看所有的库可以通过
<code>conda list</code> 实现）</p>
<h5 id="step-1环境导出">step 1：环境导出</h5>
<p>这里使用的是windows下的Anaconda3，先打开Anaconda
Navigator窗口，选择所需导出的环境，在选项中选择Open
Terminal打开终端窗口。输入语句，进入D盘，打开工程项目文件所在的窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:\Code\code_v2</span><br></pre></td></tr></table></figure>
<p>输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>实现环境的导出，在项目文件目录中可以看到导出的<code>requirements.txt</code>文件，文件中包括了使用库的名称和版本号。如果该文件为空，则说明导出失败，检查上述步骤，是否是打开了所需环境的终端。</p>
<h5 id="step-2环境导入">step 2：环境导入</h5>
<p>环境定位到文件所在文件夹，通过代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>即可实现环境的导入。</p>
<p>但是这种方法存在一些问题，一些通过pip方式安装的库会在requirements.txt文件中记录路径信息，但这个路径在新设备中不一定有，因此会报错，处理起来也比较麻烦（已放弃）。</p>
<h4 id="比较好的方案使用requirements.yaml">2.2
比较好的方案：使用requirements.yaml</h4>
<p>.yaml是保存环境信息的专用文件，在不同机器间导入速度快，可靠性高。</p>
<h5 id="step-1环境导出-1">step 1：环境导出</h5>
<p>这里使用的是windows下的Anaconda3，先打开Anaconda
Navigator窗口，选择所需导出的环境，在选项中选择Open
Terminal打开终端窗口。输入语句，进入D盘，打开工程项目文件所在的窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:\Code\code_v2</span><br></pre></td></tr></table></figure>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda env export &gt; requirements.yaml</span><br></pre></td></tr></table></figure>
<p>实现文件导出，.yaml文件保存在项目文件目录。</p>
<h5 id="step-2环境导入-1">step 2：环境导入</h5>
<p>打开anaconda终端，定位到.yaml文件所在目录，直接在base环境中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br></pre></td></tr></table></figure>
<p>即可完成新环境的创建，注意新环境的名称会默认和之前机器上环境的名称一致。</p>
<p>2022年2月8日</p>
<p>Pcon</p>
]]></content>
      <tags>
        <tag>V-rep</tag>
        <tag>CoppeliaSim</tag>
      </tags>
  </entry>
  <entry>
    <title>Gym框架下的CoppeliaSim小车倒立摆实现</title>
    <url>/2022/01/17/2022-01-17-Gym%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84CoppeliaSim%E5%80%92%E7%AB%8B%E6%91%86%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1
id="gym框架下的coppeliasim小车倒立摆实现">Gym框架下的CoppeliaSim小车倒立摆实现</h1>
<h3 id="任务环境">1 任务环境</h3>
<p>cart_pole
是一个经典的强化学习任务。小车上连着一根杆，小车通过在横轴上左右移动，实现杆保持竖直向上，但小车不能运动得太远（有运动边界限制）。</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220117-2.png"
alt="cart_pole.ttt" />
<figcaption aria-hidden="true">cart_pole.ttt</figcaption>
</figure>
<h3 id="环境配置">2 环境配置</h3>
<p>这个工程中，有点不一样的是.ttt文件中<strong>不用补充</strong>那句</p>
<blockquote>
<p>simRemoteApi.start(19997)</p>
</blockquote>
<p>否则会收到报错空端口号，无法进行仿真：</p>
<blockquote>
<p>3: Invalid port number. (in function
'simRemoteApi.start@simExtRemoteApi') stack traceback: [C]: in function
'simExtRemoteApiStart' [string "mainScript"]:3: in function
'sim_code_function_to_run'</p>
</blockquote>
<h3 id="gym环境封装">3 Gym环境封装</h3>
<p>主要包含两个文件：</p>
<ul>
<li>模型文件（MyArm.py）：主要包括模型的API接口；</li>
<li>环境文件（MyArmEnv.py）：主要按照gym标准的几个函数封装环境；</li>
</ul>
<p>（我感觉这两个文件完全可以合成一个，放在MyArmEnv.py里面）</p>
<p>MyArm.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MyArm.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../VREP_RemoteAPIs&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> sim <span class="keyword">as</span> vrep_sim</span><br><span class="line"></span><br><span class="line"><span class="comment"># CartPole simulation model for VREP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartPoleSimModel</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;CartPole&#x27;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param: name: string</span></span><br><span class="line"><span class="string">            name of objective</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(self.__class__, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.client_ID = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.prismatic_joint_handle = <span class="literal">None</span></span><br><span class="line">        self.revolute_joint_handle = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initializeSimModel</span>(<span class="params">self, client_ID</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;Connected to remote API server&#x27;</span>)</span><br><span class="line">            client_ID != -<span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;Failed connecting to remote API server&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.client_ID = client_ID</span><br><span class="line"></span><br><span class="line">        return_code, self.prismatic_joint_handle = vrep_sim.simxGetObjectHandle(client_ID, <span class="string">&#x27;prismatic_joint&#x27;</span>, vrep_sim.simx_opmode_blocking)</span><br><span class="line">        <span class="keyword">if</span> (return_code == vrep_sim.simx_return_ok):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;get object prismatic joint ok.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        return_code, self.revolute_joint_handle = vrep_sim.simxGetObjectHandle(client_ID, <span class="string">&#x27;revolute_joint&#x27;</span>, vrep_sim.simx_opmode_blocking)</span><br><span class="line">        <span class="keyword">if</span> (return_code == vrep_sim.simx_return_ok):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;get object revolute joint ok.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the joint position</span></span><br><span class="line">        return_code, q = vrep_sim.simxGetJointPosition(self.client_ID, self.prismatic_joint_handle, vrep_sim.simx_opmode_streaming)</span><br><span class="line">        return_code, q = vrep_sim.simxGetJointPosition(self.client_ID, self.revolute_joint_handle, vrep_sim.simx_opmode_streaming)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set the initialized position for each joint</span></span><br><span class="line">        self.setJointTorque(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getJointPosition</span>(<span class="params">self, joint_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param: joint_name: string</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        q = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> joint_name == <span class="string">&#x27;prismatic_joint&#x27;</span>:</span><br><span class="line">            return_code, q = vrep_sim.simxGetJointPosition(self.client_ID, self.prismatic_joint_handle, vrep_sim.simx_opmode_buffer)</span><br><span class="line">        <span class="keyword">elif</span> joint_name == <span class="string">&#x27;revolute_joint&#x27;</span>:</span><br><span class="line">            return_code, q = vrep_sim.simxGetJointPosition(self.client_ID, self.revolute_joint_handle, vrep_sim.simx_opmode_buffer)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error: joint name: \&#x27; &#x27;</span> + joint_name + <span class="string">&#x27;\&#x27; can not be recognized.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setJointTorque</span>(<span class="params">self, torque</span>):</span><br><span class="line">        <span class="keyword">if</span> torque &gt;= <span class="number">0</span>:</span><br><span class="line">            vrep_sim.simxSetJointTargetVelocity(self.client_ID, self.prismatic_joint_handle, <span class="number">1000</span>, vrep_sim.simx_opmode_oneshot)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            vrep_sim.simxSetJointTargetVelocity(self.client_ID, self.prismatic_joint_handle, -<span class="number">1000</span>, vrep_sim.simx_opmode_oneshot)</span><br><span class="line"></span><br><span class="line">        vrep_sim.simxSetJointMaxForce(self.client_ID, self.prismatic_joint_handle, <span class="built_in">abs</span>(torque), vrep_sim.simx_opmode_oneshot)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<p>然后是 MyArmEnv.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MyArmEnv.py</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.utils <span class="keyword">import</span> seeding</span><br><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces, logger</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../VREP_RemoteAPIs&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> sim <span class="keyword">as</span> vrep_sim</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyArm <span class="keyword">import</span> CartPoleSimModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartPoleEnv</span>(gym.Env):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Custom Environment that follows gym interface&quot;&quot;&quot;</span></span><br><span class="line">    metadata = &#123;<span class="string">&#x27;render.modes&#x27;</span>: [<span class="string">&#x27;human&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action_type=<span class="string">&#x27;descrete&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CartPoleEnv, self).__init__()</span><br><span class="line">        self.action_type = action_type</span><br><span class="line">        self.push_force = <span class="number">0</span></span><br><span class="line">        self.q = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        self.q_last = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line"></span><br><span class="line">        self.theta_max = <span class="number">40</span>*np.pi / <span class="number">360</span></span><br><span class="line">        self.cart_pos_max = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">        high = np.array(</span><br><span class="line">            [</span><br><span class="line">                self.cart_pos_max,</span><br><span class="line">                self.theta_max,</span><br><span class="line">                <span class="number">1000000.0</span>,</span><br><span class="line">                <span class="number">1000000.0</span></span><br><span class="line">            ],</span><br><span class="line">            dtype=np.float32,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.action_type == <span class="string">&#x27;discrete&#x27;</span>:</span><br><span class="line">            self.action_space = spaces.Discrete(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.action_type == <span class="string">&#x27;continuous&#x27;</span>:</span><br><span class="line">            self.action_space = spaces.Box(low=-<span class="number">1.0</span>, high=<span class="number">1.0</span>, shape=(<span class="number">1</span>,), dtype=np.float32)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span>, <span class="string">&quot;The action type \&#x27;&quot;</span> + self.action_type + <span class="string">&quot;\&#x27; can not be recognized&quot;</span></span><br><span class="line"></span><br><span class="line">        self.observation_space = spaces.Box(low=-high, high=high, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">        self.seed()</span><br><span class="line">        self.state = self.np_random.uniform(low=-<span class="number">0.05</span>, high=<span class="number">0.05</span>, size=(<span class="number">4</span>,))</span><br><span class="line">        self.counts = <span class="number">0</span></span><br><span class="line">        self.steps_beyond_done = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Connect to VREP (CoppeliaSim)</span></span><br><span class="line">        vrep_sim.simxFinish(-<span class="number">1</span>) <span class="comment"># close all opened connections</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_ID = vrep_sim.simxStart(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">19997</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">5000</span>, <span class="number">5</span>) <span class="comment"># Connect to CoppeliaSim</span></span><br><span class="line">            <span class="keyword">if</span> client_ID &gt; -<span class="number">1</span>: <span class="comment"># connected</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Connect to remote API server.&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Failed connecting to remote API server! Try it again ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Open synchronous mode</span></span><br><span class="line">        vrep_sim.simxSynchronous(client_ID, <span class="literal">True</span>) </span><br><span class="line">        vrep_sim.simxStartSimulation(client_ID, vrep_sim.simx_opmode_oneshot)</span><br><span class="line">        vrep_sim.simxSynchronousTrigger(client_ID)</span><br><span class="line"></span><br><span class="line">        self.cart_pole_sim_model = CartPoleSimModel()</span><br><span class="line">        self.cart_pole_sim_model.initializeSimModel(client_ID)</span><br><span class="line">        vrep_sim.simxSynchronousTrigger(client_ID)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">seed</span>(<span class="params">self, seed=<span class="literal">None</span></span>):</span><br><span class="line">        self.np_random, seed = seeding.np_random(seed)</span><br><span class="line">        <span class="keyword">return</span> [seed]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, action</span>):</span><br><span class="line">        <span class="keyword">if</span> self.action_type == <span class="string">&#x27;discrete&#x27;</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.action_space.contains(action), <span class="string">&quot;%r (%s) invalid&quot;</span>%(action, <span class="built_in">type</span>(action))</span><br><span class="line"></span><br><span class="line">        q = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        q[<span class="number">0</span>] = self.cart_pole_sim_model.getJointPosition(<span class="string">&#x27;prismatic_joint&#x27;</span>)</span><br><span class="line">        q[<span class="number">1</span>] = self.cart_pole_sim_model.getJointPosition(<span class="string">&#x27;revolute_joint&#x27;</span>)</span><br><span class="line">        self.q_last = self.q</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.action_type == <span class="string">&#x27;discrete&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> action == <span class="number">0</span>:</span><br><span class="line">                self.push_force = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> action == <span class="number">1</span>:</span><br><span class="line">                self.push_force = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">elif</span> action == <span class="number">2</span>:</span><br><span class="line">                self.push_force = -<span class="number">1.0</span></span><br><span class="line">        <span class="keyword">elif</span> self.action_type == <span class="string">&#x27;continuous&#x27;</span>:</span><br><span class="line">            self.push_force = action*<span class="number">2.0</span> <span class="comment"># The action is in [-1.0, 1.0], therefore the force is in [-2.0, 2.0]</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span>, <span class="string">&quot;The action type \&#x27;&quot;</span> + self.action_type + <span class="string">&quot;\&#x27; can not be recognized&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set action</span></span><br><span class="line">        self.cart_pole_sim_model.setJointTorque(self.push_force)</span><br><span class="line">        </span><br><span class="line">        done = (q[<span class="number">0</span>] &lt;= -self.cart_pos_max) <span class="keyword">or</span> (q[<span class="number">0</span>] &gt;= self.cart_pos_max) <span class="keyword">or</span> (q[<span class="number">1</span>] &lt; -self.theta_max) <span class="keyword">or</span> (q[<span class="number">1</span>] &gt; self.theta_max)</span><br><span class="line">        done = <span class="built_in">bool</span>(done)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> done:</span><br><span class="line">            reward = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">elif</span> self.steps_beyond_done <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Pole just fell!</span></span><br><span class="line">            self.steps_beyond_done = <span class="number">0</span></span><br><span class="line">            reward = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.steps_beyond_done == <span class="number">0</span>:</span><br><span class="line">                logger.warn(</span><br><span class="line">                    <span class="string">&quot;You are calling &#x27;step()&#x27; even though this &quot;</span></span><br><span class="line">                    <span class="string">&quot;environment has already returned done = True. You &quot;</span></span><br><span class="line">                    <span class="string">&quot;should always call &#x27;reset()&#x27; once you receive &#x27;done = &quot;</span></span><br><span class="line">                    <span class="string">&quot;True&#x27; -- any further steps are undefined behavior.&quot;</span></span><br><span class="line">                )</span><br><span class="line">            self.steps_beyond_done += <span class="number">1</span></span><br><span class="line">            reward = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">        dt = <span class="number">0.005</span></span><br><span class="line">        self.v = [(self.q[<span class="number">0</span>] - self.q_last[<span class="number">0</span>])/dt, (self.q[<span class="number">1</span>] - self.q_last[<span class="number">1</span>])/dt]</span><br><span class="line">        self.state = (self.q[<span class="number">0</span>], self.q[<span class="number">1</span>], self.v[<span class="number">0</span>], self.v[<span class="number">1</span>])</span><br><span class="line">        self.counts += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        vrep_sim.simxSynchronousTrigger(self.cart_pole_sim_model.client_ID)</span><br><span class="line">        vrep_sim.simxGetPingTime(self.cart_pole_sim_model.client_ID)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.array(self.state), reward, done, &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;Reset the environment after &#123;&#125; counts&#x27;.format(self.counts))</span></span><br><span class="line">        self.counts = <span class="number">0</span></span><br><span class="line">        self.push_force = <span class="number">0</span></span><br><span class="line">        self.state = self.np_random.uniform(low=-<span class="number">0.05</span>, high=<span class="number">0.05</span>, size=(<span class="number">4</span>,))</span><br><span class="line">        self.steps_beyond_done = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        vrep_sim.simxStopSimulation(self.cart_pole_sim_model.client_ID, vrep_sim.simx_opmode_blocking) <span class="comment"># stop the simulation</span></span><br><span class="line">        vrep_sim.simxGetPingTime(self.cart_pole_sim_model.client_ID)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>) <span class="comment"># ensure the coppeliasim is stopped</span></span><br><span class="line">        vrep_sim.simxStartSimulation(self.cart_pole_sim_model.client_ID, vrep_sim.simx_opmode_oneshot)</span><br><span class="line">        self.cart_pole_sim_model.setJointTorque(<span class="number">0</span>)</span><br><span class="line">        vrep_sim.simxSynchronousTrigger(self.cart_pole_sim_model.client_ID)</span><br><span class="line">        vrep_sim.simxGetPingTime(self.cart_pole_sim_model.client_ID)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.array(self.state)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        vrep_sim.simxStopSimulation(self.cart_pole_sim_model.client_ID, vrep_sim.simx_opmode_blocking) <span class="comment"># stop the simulation</span></span><br><span class="line">        vrep_sim.simxFinish(-<span class="number">1</span>)  <span class="comment"># Close the connection</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Close the environment&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    env = CartPoleEnv()</span><br><span class="line">    env.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        action = env.action_space.sample() <span class="comment"># random action</span></span><br><span class="line">        env.step(action)</span><br><span class="line">        <span class="built_in">print</span>(env.state)</span><br><span class="line"></span><br><span class="line">    env.close()</span><br></pre></td></tr></table></figure>
<p>最后补上主程序文件 main.py即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../VREP_RemoteAPIs&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> sim <span class="keyword">as</span> vrep_sim</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MyArm <span class="keyword">import</span> CartPoleSimModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Program started&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% ------------------------------- Connect to VREP (CoppeliaSim) ------------------------------- </span></span><br><span class="line">vrep_sim.simxFinish(-<span class="number">1</span>) <span class="comment"># just in case, close all opened connections</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_ID = vrep_sim.simxStart(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">19997</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">5000</span>, <span class="number">5</span>) <span class="comment"># Connect to CoppeliaSim</span></span><br><span class="line">    <span class="keyword">if</span> client_ID &gt; -<span class="number">1</span>: <span class="comment"># connected</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Connect to remote API server.&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Failed connecting to remote API server! Try it again ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open synchronous mode</span></span><br><span class="line">vrep_sim.simxSynchronous(client_ID, <span class="literal">True</span>) </span><br><span class="line"><span class="comment"># Start simulation</span></span><br><span class="line">vrep_sim.simxStartSimulation(client_ID, vrep_sim.simx_opmode_oneshot)</span><br><span class="line">vrep_sim.simxSynchronousTrigger(client_ID)  <span class="comment"># trigger one simulation step, takes about 11 ms on Windows 10</span></span><br><span class="line"></span><br><span class="line">cart_pole_sim_model = CartPoleSimModel(<span class="string">&#x27;CartPole&#x27;</span>)</span><br><span class="line">cart_pole_sim_model.initializeSimModel(client_ID)</span><br><span class="line"></span><br><span class="line">q = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    q[<span class="number">0</span>] = cart_pole_sim_model.getJointPosition(<span class="string">&#x27;prismatic_joint&#x27;</span>)</span><br><span class="line">    q[<span class="number">1</span>] = cart_pole_sim_model.getJointPosition(<span class="string">&#x27;revolute_joint&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(q))</span><br><span class="line"></span><br><span class="line">    action = random.uniform(-<span class="number">1.0</span>, <span class="number">1.0</span>)</span><br><span class="line">    cart_pole_sim_model.setJointTorque(action)</span><br><span class="line"></span><br><span class="line">    vrep_sim.simxSynchronousTrigger(client_ID)</span><br><span class="line">    _, ping_time = vrep_sim.simxGetPingTime(client_ID) <span class="comment"># make sure the last simulation step is finished</span></span><br><span class="line"></span><br><span class="line">vrep_sim.simxStopSimulation(client_ID, vrep_sim.simx_opmode_blocking) <span class="comment"># stop the simulation</span></span><br><span class="line">vrep_sim.simxFinish(-<span class="number">1</span>)  <span class="comment"># Close the connection</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Program terminated&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>V-rep</tag>
        <tag>CoppeliaSim</tag>
      </tags>
  </entry>
  <entry>
    <title>Bibtex类型与格式说明</title>
    <url>/2022/03/19/2022-03-19-Bibtex%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h3 id="bibtex类型与格式说明">Bibtex类型与格式说明</h3>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 25%" />
<col style="width: 29%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">类型</th>
<th style="text-align: center;">简介</th>
<th style="text-align: center;">必需关键字</th>
<th style="text-align: center;">可省略关键字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="article">@article</span></td>
<td style="text-align: center;">期刊或杂志上的一篇文章。</td>
<td style="text-align: center;">author, title, journal, year.</td>
<td style="text-align: center;">volume, number, pages, month, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="book">@book</span></td>
<td style="text-align: center;">有确定出版社的书籍。</td>
<td style="text-align: center;">author或editor, title, publisher,
year.</td>
<td style="text-align: center;">volume或number, series, address,
edition, month, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="booklet">@booklet</span></td>
<td
style="text-align: center;">印制的有封皮的作品，但没有出版社或赞助机构的名称。</td>
<td style="text-align: center;">title.</td>
<td style="text-align: center;">author, howpublished, address, month,
year, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="inbook">@inbook</span></td>
<td style="text-align: center;">一本书的一部分(章，节或某些页)。</td>
<td style="text-align: center;">author或editor, title,
chapter和/或pages, publisher,year.</td>
<td style="text-align: center;">volume或number, series, type, address,
edition, month, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="incollection">@incollection</span></td>
<td style="text-align: center;">一本书中有自己题目的一部分。</td>
<td style="text-align: center;">author, title, booktitle, publisher,
year.</td>
<td style="text-align: center;">editor, volume或number, series, type,
chapter, pages, address, edition, month, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="conference">@conference</span>/ <span class="citation"
data-cites="inproceedings">@inproceedings</span></td>
<td style="text-align: center;">会议论文集中的一篇文章。</td>
<td style="text-align: center;">author, title, booktitle, year.</td>
<td style="text-align: center;">editor, volume或number, series, pages,
address, month, organization, publisher, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="manual">@manual</span></td>
<td style="text-align: center;">科技文档。</td>
<td style="text-align: center;">title.</td>
<td style="text-align: center;">author, organization, address, edition,
month, year, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="mastersthesis">@mastersthesis</span></td>
<td style="text-align: center;">硕士论文。</td>
<td style="text-align: center;">author, title, school, year.</td>
<td style="text-align: center;">type, address, month, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="misc">@misc</span></td>
<td style="text-align: center;">不属于其它任何类型的作品。</td>
<td style="text-align: center;">没有。</td>
<td style="text-align: center;">author, title, howpublished, month,
year, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="phdthesis">@phdthesis</span></td>
<td style="text-align: center;">博士论文。</td>
<td style="text-align: center;">author, title, school, year.</td>
<td style="text-align: center;">type, address, month, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="proceedings">@proceedings</span></td>
<td style="text-align: center;">会议论文集。</td>
<td style="text-align: center;">title, year.</td>
<td style="text-align: center;">editor,volume或number, series, address,
month, organization, publisher, note.</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="citation"
data-cites="techreport">@techreport</span></td>
<td style="text-align: center;">学校或其它研究机构印制的报告。</td>
<td style="text-align: center;">author, title, institution, year.</td>
<td style="text-align: center;">type, number, address, month, note.</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="citation"
data-cites="unpublished">@unpublished</span></td>
<td style="text-align: center;">有作者和标题的还未出版的作品。</td>
<td style="text-align: center;">author, title, note.</td>
<td style="text-align: center;">month, year.</td>
</tr>
</tbody>
</table>
<p>ref:</p>
<p>https://blog.csdn.net/kmsj0x00/article/details/85318057?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2<sub>aggregatepage</sub>first_rank_ecpm_v1~rank_v31_ecpm-1-85318057.pc_agg_new_rank&amp;utm_term=bibtex%E4%B8%ADmisc&amp;spm=1000.2123.3001.4430</p>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode的C++环境配置方法</title>
    <url>/2022/04/06/2022-04-06-VScode%E7%9A%84C++%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="vscode的c环境配置方法">VScode的C++环境配置方法</h3>
<p>近期想在本地配置一个在VScode上的C++编程环境，尝试了不同配置方式，有些虽然可以编译成功生成'.exe'文件，但并不支持debug。不能debug这点难以接受，于是尝试新的配置，实现完整的编译功能。</p>
<h4 id="step1.-安装vscode">step1. 安装VScode</h4>
<p>这一步非常简单，不赘述。</p>
<p>值得一提的是需要安装c/c++插件，在插件栏搜索安装即可。</p>
<h4 id="step2.-安装c编译器mingw">step2. 安装C++编译器mingw</h4>
<ol type="1">
<li><p>编译工具我们选用gcc（全称GNU Compiler Collection
意思是GNU编译器套件），不过不是原版的gcc，而是它在Windows下的特制版<strong>MinGW</strong>(全称Minimalist
GNU on Windows）。它实际上是将GCC 移植到了 Windows 平台下，并且包含了
Win32API ，因此可以将源代码编译为可在 Windows
中运行的可执行程序。而且还可以使用一些 Windows
不具备的，Linux平台下的开发工具。MinGW又分为MinGW-w64 与 MinGW
，区别在于 MinGW 只能编译生成32位可执行程序，而 MinGW-w64 则可以编译生成
64位 或 32位 可执行程序。MinGW 现已被 MinGW-w64 所取代，且 MinGW
也已停止了更新。因此，我们最终下载安装的是<strong>MinGW-w64</strong></p>
<p>下载地址：https://sourceforge.net/projects/mingw-w64/files/</p>
<p>打开网址后，选择 <strong>x86_64-win32-seh</strong> 并下载</p>
<p>下载好了后把文件解压到<code>C:\Program Files</code>文件夹中（也可以更换路径，但不要有中文）</p></li>
<li><p>添加路径<code>C:\Program File\mingw64\bin</code>（具体路径根据安装路径会有变化）到系统环境变量。</p>
<p>添加好之后，在<code>cmd</code>窗口输入<code>gcc --version</code>，可以看到版本信息说明安装成功。</p></li>
</ol>
<h4 id="step3.-文件配置">step3. 文件配置</h4>
<p>在一个c++项目中，根目录包含两个文件夹</p>
<ul>
<li><code>.vscode</code>：存放编译文件。</li>
<li><code>codes</code>：存放编写的代码，名称可随意更改。</li>
</ul>
<p>在<code>.vscode</code>文件夹中，需要添加两<code>.json</code>文件：</p>
<ul>
<li><code>launch.json</code></li>
<li><code>tasks.json</code></li>
</ul>
<p><code>tasks.json</code> 文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;-g&quot;,</span><br><span class="line">        &quot;$&#123;file&#125;&quot;,</span><br><span class="line">        &quot;-o&quot;,</span><br><span class="line">        &quot;$&#123;file&#125;.exe&quot;</span><br><span class="line">    ], // 编译命令参数</span><br><span class="line">    &quot;problemMatcher&quot;: &#123;</span><br><span class="line">        &quot;owner&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;fileLocation&quot;: [</span><br><span class="line">            &quot;relative&quot;,</span><br><span class="line">            &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;pattern&quot;: &#123;</span><br><span class="line">            &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span><br><span class="line">            &quot;file&quot;: 1,</span><br><span class="line">            &quot;line&quot;: 2,</span><br><span class="line">            &quot;column&quot;: 3,</span><br><span class="line">            &quot;severity&quot;: 4,</span><br><span class="line">            &quot;message&quot;: 5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>launch.json：一定要注意miDebuggerPath与安装路径保持一致，文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;C++ Launch (GDB)&quot;, // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;, // 配置类型，这里只能为cppdbg</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;, // 请求配置类型，可以为launch（启动）或attach（附加）</span><br><span class="line">            &quot;targetArchitecture&quot;: &quot;x86&quot;, // 生成目标架构，一般为x86或x64，可以为x86, arm, arm64, mips, x64, amd64, x86_64</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;file&#125;.exe&quot;, // 将要进行调试的程序的路径</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;c:\\Program Files (x86)\\mingw64\\bin\\gdb.exe&quot;, // miDebugger的路径，注意这里要与MinGw的路径对应</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;blackkitty&quot;,</span><br><span class="line">                &quot;1221&quot;,</span><br><span class="line">                &quot;# #&quot;</span><br><span class="line">            ], // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            &quot;stopAtEntry&quot;: false, // 设为true时程序将暂停在程序入口处，一般设置为false</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;, // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录</span><br><span class="line">            &quot;externalConsole&quot;: true, // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++&quot; // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随后，在<code>codes</code>文件夹中创建一个<code>.cpp</code>文件即可验证环境了。</p>
<p>main.cpp 样例程序如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    unordered_map&lt;char, int&gt; symbolValues = &#123;</span><br><span class="line">        &#123;&#x27;I&#x27;, 1&#125;,</span><br><span class="line">        &#123;&#x27;V&#x27;, 5&#125;,</span><br><span class="line">        &#123;&#x27;X&#x27;, 10&#125;,</span><br><span class="line">        &#123;&#x27;L&#x27;, 50&#125;,</span><br><span class="line">        &#123;&#x27;C&#x27;, 100&#125;,</span><br><span class="line">        &#123;&#x27;D&#x27;, 500&#125;,</span><br><span class="line">        &#123;&#x27;M&#x27;, 1000&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int romanToInt(string s) &#123;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        int n = s.length();</span><br><span class="line">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            int value = symbolValues[s[i]];</span><br><span class="line">            if (i &lt; n - 1 &amp;&amp; value &lt; symbolValues[s[i + 1]]) &#123;</span><br><span class="line">                ans -= value;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ans += value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Solution S; </span><br><span class="line">    // char a=&#x27;IX&#x27;;</span><br><span class="line">    cout &lt;&lt; S.romanToInt(&quot;IX&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以设置断点进行debug，程序暂停的时候也可以在debug
console窗口输入新代码进行测试。</p>
<h4 id="step4.-快捷键说明">step4. 快捷键说明</h4>
<ul>
<li><p><code>ctrl + F4</code>：运行 .exe</p></li>
<li><p><code>shift + ctrl + b</code>：编译程序生成 .exe</p></li>
<li><p><code>F5</code>：debug</p></li>
</ul>
<p>ref:</p>
<p>https://zhuanlan.zhihu.com/p/147366852</p>
<p>https://www.cnblogs.com/baihualiaoluan/p/10661669.html</p>
<p>Pcon</p>
<p>2022年04月06日</p>
]]></content>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>Q1277-统计全为1的正方形子矩阵-中等-动态规划</title>
    <url>/2022/04/08/2022-04-08-Q1277-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="统计全为-1-的正方形子矩阵"><a
href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/">1277.
统计全为 1 的正方形子矩阵</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是
1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1]] 输出：15 解释：
边长为 1 的正方形有 10 个。 边长为 2 的正方形有 4 个。 边长为 3
的正方形有 1 个。 正方形的总数 = 10 + 4 + 1 = 15.</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：matrix = [ [1,0,1], [1,1,0], [1,1,0]] 输出：7 解释： 边长为 1
的正方形有 6 个。 边长为 2 的正方形有 1 个。 正方形的总数 = 6 + 1 =
7.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= arr.length &lt;= 300</li>
<li>1 &lt;= arr[0].length &lt;= 300</li>
<li>0 &lt;= arr[i][j] &lt;= 1</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>本题和 <a
href="https://leetcode-cn.com/problems/maximal-square/">221.
最大正方形</a>非常类似，使用的方法也几乎相同。</p>
<p>我们用 <code>f[i][j]</code> 表示以 <code>(i, j)</code>
为右下角的正方形的最大边长，那么除此定义之外，<code>f[i][j] = x</code>
也表示以 <code>(i, j)</code> 为右下角的正方形的数目为
<code>x</code>（即边长为 1, 2, ..., x 的正方形各一个）。在计算出所有的
<code>f[i][j]</code>
后，我们将它们进行累加，就可以得到矩阵中正方形的数目。</p>
<p>我们尝试挖掘 <code>f[i][j]</code> 与相邻位置的关系来计算出
<code>f[i][j]</code> 的值。</p>
<p>如上图所示，若对于位置 <code>(i, j)</code> 有
<code>f[i][j] = 4</code>，我们将以 <code>(i, j)</code> 为右下角、边长为
4 的正方形涂上色，可以发现其左侧位置 <code>(i, j - 1)</code>，上方位置
<code>(i - 1, j)</code>和左上位置
<code>(i - 1, j - 1)</code>均可以作为一个边长为 <code>4 - 1 = 3</code>
的正方形的右下角。也就是说，这些位置的的 <code>f</code> 值至少为
3，即：</p>
<p><span class="math display">\[
f[i][j - 1] &gt;= f[i][j] - 1\\
f[i - 1][j] &gt;= f[i][j] - 1\\
f[i - 1][j - 1] &gt;= f[i][j] - 1
\]</span> 将这三个不等式联立，可以得到： <span class="math display">\[
\min(f[i][j−1],f[i−1][j],f[i−1][j−1])≥f[i][j]−1
\]</span> 这是我们通过固定 <code>f[i][j]</code>
的值，判断其相邻位置与之的关系得到的不等式。同理，我们也可以固定
<code>f[i][j]</code> 相邻位置的值，得到另外的限制条件。</p>
<p>如上图所示，假设 <code>f[i][j - 1]</code>，<code>f[i - 1][j]</code>
和 <code>f[i - 1][j - 1]</code> 中的最小值为
3，也就是说，<code>(i, j - 1)</code>，<code>(i - 1, j)</code> 和
<code>(i - 1, j - 1)</code> 均可以作为一个边长为 3
的正方形的右下角。我们将这些边长为 3
的正方形依次涂上色，可以发现，如果位置 <code>(i, j)</code> 的元素为
1，那么它可以作为一个边长为 4 的正方形的右下角，<code>f</code> 值至少为
4，即：</p>
<p><span class="math display">\[
f[i][j] \geq \min(f[i][j−1],f[i−1][j],f[i−1][j−1])+1
\]</span> 将其与上一个不等式联立，可以得到： <span
class="math display">\[
f[i][j]=\min(f[i][j−1],f[i−1][j],f[i−1][j−1])+1
\]</span> 这样我们就得到了 <code>f[i][j]</code>
的递推式。此外还要考虑边界（i = 0 或 j = 0）以及位置 <code>(i, j)</code>
的元素为 0 的情况，可以得到如下完整的递推式：</p>
<p><span class="math display">\[
f[i][j]=
\begin{cases}
matrix[i][j], &amp;i==0 or j==0\\
0, &amp;matrix[i][j]==0\\
\min (f[i][j-1],f[i-1][j],f[i-1][j-1])+1, &amp;otherwise
\end{cases}
\]</span> 我们按照行优先的顺序依次计算 <code>f[i][j]</code>
的值，就可以得到最终的答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countSquares</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        f = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span>:</span><br><span class="line">                    f[i][j] = matrix[i][j]</span><br><span class="line">                <span class="keyword">elif</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                    f[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i][j - <span class="number">1</span>], f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">                ans += f[i][j]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSquares</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(),n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> f[m][n];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                f[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)&#123;</span><br><span class="line">                    f[i][j] = matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    f[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i][j] = <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],<span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]))+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += f[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<code>O(MN)</code>。</p></li>
<li><p>空间复杂度：<code>O(MN)</code>。由于递推式中 <code>f[i][j]</code>
只与本行和上一行的若干个值有关，因此空间复杂度可以优化至
<code>O(N)</code>。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q63-不同路径II-中等-动态规划</title>
    <url>/2022/04/08/2022-04-08-Q63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="不同路径-ii"><a
href="https://leetcode-cn.com/problems/unique-paths-ii/">63. 不同路径
II</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start”
）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为
“Finish”）。</p>
<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>
<p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] 输出：2 解释：3x3
网格的正中间有一个障碍物。 从左上角到右下角一共有 2 条不同的路径： 1.
向右 -&gt; 向右 -&gt; 向下 -&gt; 向下 2. 向下 -&gt; 向下 -&gt; 向右
-&gt; 向右</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：obstacleGrid = [[0,1],[0,0]] 输出：1</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>m == obstacleGrid.length</li>
<li>n == obstacleGrid[i].length</li>
<li>1 &lt;= m, n &lt;= 100</li>
<li>obstacleGrid[i][j] 为 0 或 1</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>这道题在Q62的基础上设置了障碍物，思路比较简单，只需在动态规划迭代之前先判断知否存在障碍物即可。本题目是典型的动态规划问题，因为我们计算到每个格子的路线数目可以通过，之前格子的可到达路线数目计算。具体计算迭代方式如下：</p>
<p>用<code>dp[m][n]</code>记录到达每个位置的路径数目（注意，agent只能右移或者下移）。
<span class="math display">\[
dp[i][j] =
\begin{cases}
dp[i-1][j]+dp[i][j-1] ,&amp;obstacleGrid[i][j] = 1\\
0,&amp; obstacleGrid[i][j] = 0
\end{cases}
\]</span>
考虑边界条件，将<code>dp[0][j]</code>和<code>dp[i][0]</code>单独赋值为<code>1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePathsWithObstacles</span>(<span class="params">self, obstacleGrid</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        m,n = <span class="built_in">len</span>(obstacleGrid),<span class="built_in">len</span>(obstacleGrid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span> <span class="keyword">or</span> obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> obstacleGrid[i][<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> obstacleGrid[<span class="number">0</span>][j] != <span class="number">1</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                <span class="keyword">if</span> obstacleGrid[i][j] != <span class="number">1</span>:</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    mat = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">    solution=Solution().uniquePathsWithObstacles(mat)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(mn)\]</span>。</p></li>
<li><p>空间复杂度：<span
class="math inline">\(O(mn)\)</span>，即为存储所有状态需要的空间。注意到<code>dp[i][j]</code>仅与第<code>i</code>行和第<code>i-1</code>行的状态有关，因此我们可以使用滚动数组代替代码中的二维数组，使空间复杂度降低为
<code>O(n)</code>。此外，由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换<code>m</code>和<code>n</code>使得
<code>m</code> <span class="math inline">\(\leq\)</span>
<code>n</code>，这样空间复杂度降低至 <span
class="math inline">\(O(\min(m, n))\)</span>。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q62-不同路径-中等-动态规划</title>
    <url>/2022/04/08/2022-04-08-Q62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="不同路径"><a
href="https://leetcode-cn.com/problems/unique-paths/">62.
不同路径</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start”
）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为
“Finish” ）。</p>
<p>问总共有多少条不同的路径？</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：m = 3, n = 7 输出：28</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：m = 3, n = 2 输出：3 解释： 从左上角开始，总共有 3
条路径可以到达右下角。</p>
<ol type="1">
<li>向右 -&gt; 向下 -&gt; 向下</li>
<li>向下 -&gt; 向下 -&gt; 向右</li>
<li>向下 -&gt; 向右 -&gt; 向下</li>
</ol>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<p>输入：m = 7, n = 3 输出：28</p>
</blockquote>
<blockquote>
<p><strong>Example 4:</strong></p>
<p>输入：m = 3, n = 3 输出：6</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li>题目数据保证答案小于等于 <code>2 * 109</code></li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>本题目是典型的动态规划问题，因为我们计算到每个格子的路线数目可以通过，之前格子的可到达路线数目计算。具体计算迭代方式如下：</p>
<p>用<code>dp[m][n]</code>记录到达每个位置的路径数目（注意，agent只能右移或者下移）。
<span class="math display">\[
dp[i][j] = dp[i-1][j]+dp[i][j-1]
\]</span>
考虑边界条件，将<code>dp[0][j]</code>和<code>dp[i][0]</code>单独赋值为<code>1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    m = <span class="number">7</span></span><br><span class="line">    n = <span class="number">3</span></span><br><span class="line">    solution=Solution().uniquePaths(m,n)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li><p>时间复杂度：<span
class="math display">\[O(mn)\]</span>。</p></li>
<li><p>空间复杂度：<span
class="math inline">\(O(mn)\)</span>，即为存储所有状态需要的空间。注意到<code>dp[i][j]</code>仅与第<code>i</code>行和第<code>i-1</code>行的状态有关，因此我们可以使用滚动数组代替代码中的二维数组，使空间复杂度降低为
<code>O(n)</code>。此外，由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换<code>m</code>和<code>n</code>使得
<code>m</code> <span class="math inline">\(\leq\)</span>
<code>n</code>，这样空间复杂度降低至 <span
class="math inline">\(O(\min(m, n))\)</span>。</p></li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q198-打家劫舍-中等-动态规划</title>
    <url>/2022/04/20/2022-04-20-Q198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="打家劫舍"><a
href="https://leetcode-cn.com/problems/house-robber/">198.
打家劫舍</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你
不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：[1,2,3,1] 输出：4 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3
号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：[2,7,9,3,1] 输出：12 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3
号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。 偷窃到的最高金额 = 2 +
9 + 1 = 12 。</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>首先考虑最简单的情况。如果只有一间房屋，则偷窃该房屋，可以偷窃到最高总金额。如果只有两间房屋，则由于两间房屋相邻，不能同时偷窃，只能偷窃其中的一间房屋，因此选择其中金额较高的房屋进行偷窃，可以偷窃到最高总金额。</p>
<p>如果房屋数量大于两间，应该如何计算能够偷窃到的最高总金额呢？对于第 k
(k&gt;2) 间房屋，有两个选项：</p>
<ul>
<li><p>偷窃第 k 间房屋，那么就不能偷窃第 k-1 间房屋，偷窃总金额为前 k−2
间房屋的最高总金额与第 kk 间房屋的金额之和。</p></li>
<li><p>不偷窃第 k 间房屋，偷窃总金额为前 k−1
间房屋的最高总金额。</p></li>
</ul>
<p>在两个选项中选择偷窃总金额较大的选项，该选项对应的偷窃总金额即为前 k
间房屋能偷窃到的最高总金额。</p>
<p>用 <span class="math display">\[\textit{dp}[i]\]</span> 表示前 <span
class="math display">\[i\]</span>
间房屋能偷窃到的最高总金额，那么就有如下的状态转移方程：</p>
<p><span class="math display">\[
dp[i]=\max(dp[i−2]+nums[i],dp[i−1])
\]</span> 边界条件为： <span class="math display">\[
\begin{cases}
dp[0]=nums[0] &amp; 只有一间房屋，则偷窃该房屋
\\
dp[1]=\max(nums[0],nums[1]) &amp;
只有两间房屋，选择其中金额较高的房屋进行偷窃
\end{cases}
\]</span> 最终的答案即为 <span
class="math display">\[\textit{dp}[n-1]\]</span>，其中 <span
class="math display">\[n\]</span> 是数组的长度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp = [<span class="number">0</span>]*n</span><br><span class="line">            dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]+nums[i])</span><br><span class="line">            <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(n)\]</span>，其中 <span
class="math display">\[n\]</span>
是数组长度。只需要对数组遍历一次。</li>
<li>空间复杂度：<span
class="math display">\[O(1)\]</span>。使用滚动数组，可以只存储前两间房屋的最高总金额，而不需要存储整个数组的结果，因此空间复杂度是
<span class="math display">\[O(1)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Q221-最大正方形-中等-动态规划</title>
    <url>/2022/04/10/2022-04-10-Q221-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2-%E4%B8%AD%E7%AD%89-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h4 id="最大正方形"><a
href="https://leetcode-cn.com/problems/maximal-square/">221.
最大正方形</a></h4>
<h2 id="question">Question</h2>
<blockquote>
<p>在一个由 <code>'0'</code> 和 <code>'1'</code>
组成的二维矩阵内，找到只包含 <code>'1'</code>
的最大正方形，并返回其面积。</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p>输入：matrix = [</p>
<p>["1","0","1","0","0"],</p>
<p>["1","0","1","1","1"],</p>
<p>["1","1","1","1","1"],</p>
<p>["1","0","0","1","0"]] 输出：4</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：matrix = [["0","1"],["1","0"]] 输出：1</p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong></p>
<p>输入：matrix = [["0"]] 输出：0</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>m == matrix.length</li>
<li>n == matrix[i].length</li>
<li>1 &lt;= m, n &lt;= 300</li>
<li>matrix[i][j] 为 '0' 或 '1'</li>
</ul>
</blockquote>
<h3 id="approach-1-动态规划">Approach 1: 动态规划</h3>
<p>可以使用动态规划降低时间复杂度。我们用 <span
class="math display">\[\textit{dp}(i, j)\]</span> 表示以 <span
class="math display">\[(i, j)\]</span> 为右下角，且只包含 1
的正方形的边长最大值。如果我们能计算出所有 <span
class="math display">\[\textit{dp}(i, j)\]</span>
的值，那么其中的最大值即为矩阵中只包含 1
的正方形的边长最大值，其平方即为最大正方形的面积。</p>
<p>那么如何计算 <span class="math display">\[\textit{dp}\]</span>
中的每个元素值呢？对于每个位置 <span class="math display">\[(i,
j)\]</span>，检查在矩阵中该位置的值：</p>
<ul>
<li>如果该位置的值是 0，则 <span class="math display">\[\textit{dp}(i,
j) = 0\]</span>，因为当前位置不可能在由 1 组成的正方形中；</li>
<li>如果该位置的值是 1，则 <span class="math display">\[\textit{dp}(i,
j)\]</span> 的值由其上方、左方和左上方的三个相邻位置的 <span
class="math display">\[\textit{dp}\]</span>
值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加
1，状态转移方程如下：</li>
</ul>
<p><span class="math display">\[
dp(i,j)=min\big(dp(i−1,j),dp(i−1,j−1),dp(i,j−1)\big)+1
\]</span> 如果读者对这个状态转移方程感到不解，可以参考 1277. 统计全为 1
的正方形子矩阵的官方题解，其中给出了详细的证明。</p>
<p>此外，还需要考虑边界条件。如果 i 和 j 中至少有一个为 0，则以位置 (i,
j) 为右下角的最大正方形的边长只能是 1，因此 <span
class="math display">\[\textit{dp}(i, j) = 1\]</span>。</p>
<p>Python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximalSquare</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        maxSide = <span class="number">0</span></span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>] * columns <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rows)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(columns):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span>:</span><br><span class="line">                        dp[i][j] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">                    maxSide = <span class="built_in">max</span>(maxSide, dp[i][j])</span><br><span class="line">        </span><br><span class="line">        maxSquare = maxSide * maxSide</span><br><span class="line">        <span class="keyword">return</span> maxSquare</span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxSide = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rows = matrix.<span class="built_in">size</span>(), columns = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(columns));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    maxSide = <span class="built_in">max</span>(maxSide, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxSquare = maxSide * maxSide;</span><br><span class="line">        <span class="keyword">return</span> maxSquare;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
是矩阵的行数和列数。需要遍历原始矩阵中的每个元素计算 <span
class="math display">\[\textit{dp}\]</span> 的值。</li>
<li>空间复杂度：<span class="math display">\[O(mn)\]</span>，其中 m 和 n
是矩阵的行数和列数。创建了一个和原始矩阵大小相同的矩阵 <span
class="math display">\[\textit{dp}\]</span>。由于状态转移方程中的 <span
class="math display">\[\textit{dp}(i, j)\]</span>
由其上方、左方和左上方的三个相邻位置的 <span
class="math display">\[\textit{dp}\]</span>
值决定，因此可以使用两个一维数组进行状态转移，空间复杂度优化至 <span
class="math display">\[O(n)\]</span>。</li>
</ul>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Python</tag>
        <tag>Medium</tag>
        <tag>Dynamic Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>利用patch制作的对象在animation以及生成Gif文件时显示错误的问题</title>
    <url>/2022/05/14/2022-05-14-%E5%88%A9%E7%94%A8patch%E5%88%B6%E4%BD%9C%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%9C%A8animation%E4%BB%A5%E5%8F%8A%E7%94%9F%E6%88%90Gif%E6%96%87%E4%BB%B6%E6%97%B6%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1
id="利用patch制作的对象在animation以及生成gif文件时显示错误的问题">利用patch制作的对象在animation以及生成Gif文件时显示错误的问题</h1>
<h2 id="problems">Problems：</h2>
<p>animation制作动画的时候，用patch制作的对象（例如Circle）在背景层，即使设置为返回值来清除，在下一帧更新的时候，上一帧也不会消失，从而造层残影的效果。而且由于图形的利用ax.add_patch()直接添加，没办法单个删除，很让人头痛。</p>
<p>而这一现象在plt.show()的时候，如果animation.FuncAnimation( blit=True)
则不会在预览时出现问题，在保存为gif时候才会暴露。</p>
<h2 id="solutions">Solutions：</h2>
<h3 id="method-1惹不起躲得起法">Method 1：惹不起躲得起法</h3>
<p>不使用patch制作Circle等对象，而通过lines在描点连线制作，这种方法比较笨重，想要精确表达图形每一帧都需要大量的点，而在动态时候，点的运动也是一个难题。</p>
<h3 id="method-2将错就错法">Method 2：将错就错法</h3>
<p>既然patch制作的对象难以删除，我们可以将错就错，每一帧更新的时候都用一个背景色（白色）的图形盖住上一帧的的图形，从而达到删除的效果。</p>
<p>值得注意的是，白色图形需要比原图形略大一点，以免留下上一帧的边框。</p>
<p>在设定每一帧的返回值的时候，图形名称的排序决定了图层的顺序。利用此方法需要将原白色图形放在这一帧的图形之前。</p>
<h2 id="conclusions">Conclusions：</h2>
<p>目前找到的两个方法都各自存在问题，方法1太笨重，若非迫不得已肯定不会使用。方法2是间接的方法，有点小聪明，但没有直接解决问题，以后还需要继续探索更好的解决方法。</p>
<p>问题处理时长：2天</p>
<p>2019年8月29日</p>
<p>Txing</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | A survey of deep RL and IL for autonomous driving policy learning</title>
    <url>/2022/05/31/2022-05-30-Reinforcement%20Learning%20-%20a%20survey%20of%20deep%20RL%20and%20IL%20for%20autonomous%20driving%20policy%20learning/</url>
    <content><![CDATA[<h1
id="a-survey-of-deep-rl-and-il-for-autonomous-driving-policy-learning">A
survey of deep RL and IL for autonomous driving policy learning</h1>
<p>论文链接：https://arxiv.org/abs/2101.01993v1</p>
<h2 id="背景">背景</h2>
<ul>
<li><p>首先介绍5类结合了IL和RL的自动驾驶模型。First, a taxonomy of the
literature studies is constructed from the system perspective, among
which five modes of integration of DRL/DIL models into an AD
architecture are identified.</p></li>
<li><p>其次介绍自动驾驶中具体的RL和IL任务和公式。Second, the
formulations of DRL/DIL models for conducting specified AD tasks are
comprehensively reviewed, where various designs on the model state and
action spaces and the reinforcement learning rewards are
covered.</p></li>
<li><p>最后介绍RL和IL如何解决自动驾驶模型与参与者和环境交互的安全问题。Finally,
an in-depth review is conducted on how the critical issues of AD
applications regarding driving safety, interaction with other traffic
participants and uncertainty of the environment are addressed by the
DRL/DIL models.</p></li>
<li><p><strong>task-driven</strong> and <strong>problem-driven</strong>
perspectives</p></li>
<li><p>代表性文章：</p>
<ul>
<li>[1] C. Urmson and W. Whittaker, “Self-driving cars and the urban
challenge,” IEEE Intelligent Systems, vol. 23, no. 2, pp. 66–68,
2008.</li>
<li>[2] S. Thrun, “Toward robotic cars,” Communications of the ACM, vol.
53, no. 4, pp. 99–106, 2010.</li>
<li>[3] A. Eskandarian, Handbook of intelligent vehicles. Springer,
2012, vol. 2.</li>
<li>[4] S. M. Grigorescu, B. Trasnea, T. T. Cocias, and G. Macesanu, “A
survey of deep learning techniques for autonomous driving,” J. Field
Robotics, vol. 37, no. 3, pp. 362–386, 2020.</li>
</ul></li>
<li><p>驾驶策略基于多个等级的抽象（multiple levels of
abstraction），例如行为规划、运动规划和控制（behavior planning, motion
planning and control）</p></li>
<li><p>典型的自动驾驶模型结构图：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220602-1.png" /></p></li>
<li><p>相关综述的调研：</p>
<ul>
<li>[13, 15] survey the motion planning and control methods of automated
vehicles before the era of DL.</li>
<li>[29–33] review general DRL/DIL methods without considering any
particular applications.</li>
<li>[4] addresses the deep learning techniques for AD with a focus on
perception and control, while [34] addresses control only.</li>
<li>[35] provides a taxonomy of AD tasks to which DRL models have been
applied and highlights the key challenges.</li>
</ul></li>
<li><p>pomdp相关参考文献：</p>
<ul>
<li>G. Shani, J. Pineau, and R. Kaplow, “A survey of point-based pomdp
solvers,” Autonomous Agents and Multi-Agent Systems, vol. 27, no. 1, pp.
1–51, 2013.</li>
<li>W. S. Lovejoy, “A survey of algorithmic methods for partially
observed markov decision processes,” Annals of Operations Research, vol.
28, no. 1, pp. 47–65, 1991.</li>
</ul></li>
<li><p>强化学习（reinforcement learning）和模仿学习（imitation
learning）算法分类示意图：</p>
<p><img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220620-1.png" /></p></li>
<li><p>learning from demonstrations (LfD)</p></li>
<li><p><strong>模仿学习</strong>的形式：</p>
<ul>
<li>A demonstration dataset <span class="math display">\[D=\{\xi_i
\}_{i=0,...,N}\]</span>,表示一系列的轨迹</li>
<li><span
class="math display">\[\xi_i=\{(s^i_t,a^i_t)\}_{t=1,...,T}\]</span>是state-action
pairs（状态行为对）的序列</li>
<li>专家策略<span class="math display">\[\pi_E\]</span></li>
<li>待优化的模仿策略<span class="math display">\[\pi^*\]</span></li>
<li><span class="math display">\[\pi^*=\arg\min_{\pi}
\mathbb{D}(\pi_E,\pi)\]</span></li>
<li><span
class="math display">\[\mathbb{D}\]</span>是策略间的相似性度量函数</li>
</ul></li>
<li><p>模仿学习的三个分类：</p>
<ul>
<li><p><strong>Behavior Clone (BC) :</strong></p>
<ul>
<li><p><span class="math display">\[\min_{\theta}
\mathbb{E}\mid\mid\pi_{\theta}-\pi_E\mid\mid_2\]</span></p></li>
<li><p><span class="math display">\[J(\theta)=\mathbb{E}_{(s,a)\sim
D}[(\pi_{\theta}(s)-a)^2]\]</span></p></li>
<li><p>BC在训练集中表现良好，但在泛化性上表现差，covariate shift [66,
67]</p></li>
<li><p>代表方法：</p>
<ul>
<li><p><strong>DAgger</strong>——S. Ross, G. J. Gordon, and D. Bagnell,
“A reduction of imitation learning and structured prediction to
no-regret online learning,” in International Conference on Artificial
Intelligence and Statistics, ser. JMLR Proceedings, vol. 15, 2011, pp.
627–635.</p></li>
<li><p><strong>SafeDAgger</strong>——J. Zhang and K. Cho,
“Query-efficient imitation learning for end-to-end autonomous driving,”
arXiv preprint arXiv:1605.06450, 2016.</p></li>
</ul></li>
</ul></li>
<li><p><strong>Inverse Reinforcement Learning (IRL)：</strong></p>
<ul>
<li><p><span class="math display">\[\max_{\theta}
\mathbb{E}_{\pi_E}[G_t|r_{\theta}]-\mathbb{E}_{\pi}[G_t|r_{\theta}]\]</span></p></li>
<li><p><span class="math display">\[J(\theta)=\mathbb{E}_{\xi_i \sim
D}[\log P(\xi_i|r_{\theta})]\]</span></p></li>
<li><p>代表方法：</p>
<ul>
<li><p><strong>guided cost learning (GCL)</strong>——C. Finn, S. Levine,
and P. Abbeel, “Guided cost learning: Deep inverse optimal control via
policy optimization,” in International Conference on Machine Learning,
2016, pp. 49–58.</p>
<p>（it handles unknown dynamics in high-dimensional complex systems and
learns complex neural network cost functions through an efficient
sample-based approximation.）</p></li>
</ul></li>
</ul></li>
<li><p><strong>Generative Adversarial Imitation Learning
(GAIL):</strong></p></li>
<li><p>Generative adversarial imitation learning (GAIL) [81] directly
learns a policy from expert demonstrations while requiring neither the
<strong>reward design</strong> in RL nor the <strong>expensive RL
process</strong> in the inner loop of IRL.</p></li>
<li><p><span class="math display">\[\min_{\pi_{\theta}}\max_{D_{\omega}}
\mathbb{E}_{\pi_{\theta}}[\log
D_{\omega}(s,a)]+\mathbb{E}_{\pi_E}[\log(1-D_{\omega}(s,a))]-\lambda
H(\pi_{\theta})\]</span>，其中<span
class="math display">\[H(\pi)\]</span>是一个正则熵项，生成器和判别器通过下式更新：</p></li>
<li><p><span
class="math display">\[\nabla_{\theta}J(\theta)=\mathbb{E}_{\pi}[\nabla_{\theta}
\log \pi_{\theta}(a\mid
s)Q(s,a)]-\lambda\nabla_{\theta}H(\pi_{\theta})\]</span></p></li>
<li><p><span
class="math display">\[\nabla_{\omega}J(\omega)=\mathbb{E}_{\pi}[\nabla_{\omega}
\log D_{\omega}(s,a)]+\mathbb{E}_{\pi_E}[\nabla_{\omega}
\log(1-D_{\omega}(s,a))]\]</span></p></li>
<li><p>Fu et al.[84] proposed adversarial inverse reinforcement learning
(AIRL) based on an adversarial reward learning formulation, which can
recover reward functions that are robust to dynamics changes.</p>
<ul>
<li>J. Fu, K. Luo, and S. Levine, “Learning robust rewards with
adversarial inverse reinforcement learning,” CoRR, vol. abs/1710.11248,
2017.</li>
</ul></li>
</ul></li>
<li><h2 id="adautonomous-driving系统的几个模块">AD（Autonomous
driving）系统的几个模块：</h2></li>
</ul>
<h2 id="主要内容">主要内容</h2>
<ul>
<li></li>
</ul>
<h2 id="总结">总结</h2>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>HRL</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Exploring Imitation Learning for Autonomous Driving with Feedback Synthesizer and Differentiable Rasterization (2021, Apollo 6.0)</title>
    <url>/2022/07/14/2022-07-14-Autonomous%20Driving%20-%20Exploring%20Imitation%20Learning%20for%20Autonomous%20Driving%20with%20Feedback%20Synthesizer%20and%20Differentiable%20Rasterization%20(2021%20Apollo%206.0)/</url>
    <content><![CDATA[<h2
id="exploring-imitation-learning-for-autonomous-driving-with-feedback-synthesizer-and-differentiable-rasterization-2021-apollo-6.0">Exploring
Imitation Learning for Autonomous Driving with Feedback Synthesizer and
Differentiable Rasterization (2021, Apollo 6.0)</h2>
<h3 id="introduction">Introduction</h3>
<ul>
<li><p>our work adopts a <strong>mid-to-mid approach</strong>
(mid2mid允许便利地增加数据，并且通过任务依赖的loss超过单纯地模仿。allows
us to augment data handily and go beyond pure imitation by having
task-specific losses) where our system’s input is constructed by
building a top-down image representation of the environment that
incorporates both static and dynamic information from our <strong>HD
Map</strong> and <strong>perception system</strong>.<br />
</p></li>
<li><p>Following the philosophy of <strong>DAgger</strong> [2], we
introduce a <strong>feedback synthesizer</strong>（反馈合成器）that
generates and perturbs on-policy data based on the current policy. Then
we train the next policy on the aggregate of collected datasets. The
feedback synthesizer addresses the <strong>distributional shift
issue</strong>, thus improving the overall performance shown in Section
IV.</p>
<ul>
<li>[2]. S. Ross, G. Gordon, and D. Bagnell, “A reduction of imitation
learning and structured prediction to no-regret online learning,” in
AISTATS, 2011, pp. 627–635.<br />
</li>
</ul></li>
<li><p>启发本文的文章：</p>
<ul>
<li>V. Blukis, N. Brukhim, A. Bennett, R. Knepper, and Y. Artzi,
“Following high-level navigation instructions on a simulated quadcopter
with imitation learning,” in RSS, June 2018.</li>
<li>M. Bansal, A. Krizhevsky, and A. Ogale, “ChauffeurNet: Learning to
drive by imitating the best and synthesizing the worst,” in RSS,
2019.</li>
<li>A. Buhler, A. Gaidon, A. Cramariuc, R. Ambrus, G. Rosman, and W.
Burgard, “Driving through ghosts: Behavioral cloning with false
positives,” in IROS, 2020.</li>
<li>D. Chen, B. Zhou, V. Koltun, and P. Krahenbuhl, “Learning by
cheating,” in CoRL, 2020, pp. 66–75.<br />
</li>
</ul></li>
<li><p>单纯的模仿学习没有关于任务的明确的重要目标和约束，因此难免会学习到非期望的行为。通过引入task
losses可以控制这些非期望的行为。</p></li>
<li><p>task losses直接映射到输出轨迹到车辆光栅图像中。The task losses
are implemented by directly projecting the output trajectories into
top-down images using a differentiable vehicle rasterizer.</p></li>
<li><p>They（task losses） effectively penalize behaviors, such as
<strong>obstacle collision</strong>（障碍碰撞）, <strong>traffic rule
violation</strong>（违反交规）, and so on, by building losses between
<strong>rasterized images</strong> and <strong>specific object
masks</strong>.</p></li>
<li><p>Inspired by recent works [9], our output trajectories are
produced by a <strong>trajectory decoding module</strong> that includes
an <strong>LSTM</strong> [10] and a <strong>kinematic layer</strong>
that assures our output trajectories’ feasibility. On the whole, these
designs help us avoid using the heavy AgentRNN network in Chauffeurnet
[5], which functions similarly to a Convolutional-LSTM network [11].</p>
<ul>
<li><p>[5]. M. Bansal, A. Krizhevsky, and A. Ogale, “ChauffeurNet:
Learning to drive by imitating the best and synthesizing the worst,” in
RSS, 2019.</p></li>
<li><p>[9]. H. Cui, T. Nguyen, F.-C. Chou, T.-H. Lin, J. Schneider, D.
Bradley, and N. Djuric, “Deep kinematic models for kinematically
feasible vehicle trajectory predictions,” in ICRA, 2020, pp. 10 563–10
569.</p></li>
<li><p>[11]. X. Shi, Z. Chen, H. Wang, D.-Y. Yeung, W.-k. Wong, and
W.-c. Woo, “Convolutional LSTM network: A machine learning approach for
precipitation nowcasting,” in NeurIPS, vol. 28, 2015, pp.
802–810.</p></li>
</ul></li>
<li><p>Moreover, to further improve the performance, similar to recent
works [12], [13], we introduce a <strong>spatial attention
module</strong>（空间注意力机制） in our network design.</p>
<ul>
<li>[12]. S. Hecker, D. Dai, A. Liniger, and L. Van Gool, “Learning
accurate and human-like driving using semantic maps and attention,” in
IROS, 2020, pp. 2346–2353.</li>
<li>[13]. J. Kim and M. Bansal, “Attentional bottleneck: Towards an
interpretable deep driving network,” in CVPR Workshops, 2020.<br />
</li>
</ul></li>
<li><p>为了提高舒适度，提出了可选择的后处理规划器作为看门人，进行高级别的决策引导和组成新的轨迹。we
propose to add an <strong>optional post-processing planner</strong> as a
gatekeeper which manages to interpret them as high-level decision
guidance and composes a new trajectory that offers better
comfort.</p></li>
<li><p>Our models are trained with <strong>400 hours of human driving
data</strong>. We evaluated our system using <strong>70 autonomous
driving test scenarios (ADS)</strong> that are specifically created for
evaluating the fundamental driving capabilities of a self-driving
vehicle.</p></li>
<li><p>We show that our <strong>learning-based planner (M2)</strong>
trained via imitation learning achieves <strong>70.0% ADS</strong>
<strong>pass rate</strong> and can intelligently handle different
challenging scenarios, including <strong>overtaking a dynamic
vehicle</strong>, <strong>stopping for a red traffic light</strong>, and
so on, as shown in Figure 1.</p></li>
</ul>
<h3 id="related-works">Related works</h3>
<ul>
<li><p><strong>Imitation Learning</strong>：</p>
<p>一般遵循end-to-end philosophy，本文采取mid-to-mid
approach提高数据增强便利性和任务依赖的loss</p></li>
<li><p><strong>Loss and Differentiable Rasterization</strong>：</p>
<p>Imitation learning for motion planning typically applies a loss
between <strong>inferred</strong> and <strong>ground truth
trajectories</strong>. Therefore, the ideas of avoiding collisions or
off-road situations are implicit and don’t generalize well.</p>
<p>Wang et al. [8] leverage a differentiable rasterizer, and it allows
gradients to flow from a discriminator to a generator, enhancing a
trajectory prediction network powered by GANs [21].</p>
<p><strong>General-purpose differentiable mesh renderers</strong> [23],
[24] have also been employed to solve other computer vision
tasks.</p></li>
<li><p><strong>Attention</strong>：</p>
<p>by providing spatial attention heatmaps highlighting image areas that
the network attends to in their tasks. In this work, we introduce the
Atrous Spatial Attentional Bottleneck from [13], providing easily
interpretable attention heatmaps while also enhancing the network’s
performance.</p>
<ul>
<li>[13]. J. Kim and M. Bansal, “Attentional bottleneck: Towards an
interpretable deep driving network,” in CVPR Workshops, 2020.</li>
</ul></li>
<li><p><strong>Data Augmentation</strong>：</p>
<p>DAgger及其变体提出通过拥有更多关于代理可能遇到的状态的数据来解决分布转移问题。特别是，他们基于从当前策略推断的动作在每次迭代中采样新状态，让专家代理演示他们在这些新状态下将采取的动作，并在收集的数据集的集合上训练下一个策略。DAgger
[2] and its variants [32], [4], [3] propose to address the
distributional shift issue by having more data with states that the
agent is likely to encounter. In particular, they sample new states at
each iteration based on the actions inferred from the current policy,
let expert agents demonstrate the actions they would take under these
new states, and train the next policy on the aggregate of collected
datasets.</p>
<ul>
<li>S. Ross, G. Gordon, and D. Bagnell, “A reduction of imitation
learning and structured prediction to no-regret online learning,” in
AISTATS, 2011, pp. 627–635.</li>
</ul>
<p>ChauffeurNet引入了一个随机合成器，通过合成轨迹的扰动来增加演示数据。ChauffeurNet
[5] introduces a random synthesizer that augments the demonstration data
by synthesizing perturbations to the trajectories. In this work, we
explore both ideas and propose a feedback synthesizer improving the
overall performance.</p></li>
</ul>
<h3 id="model-architecture">Model Architecture</h3>
<p>B-CNN（branched CNN）</p>
<ul>
<li><p>refence：Zhu X , Bain M . B-CNN: Branch Convolutional Neural
Network for Hierarchical Classification[J]. 2017.</p></li>
<li><p><strong>Model Input</strong>：</p>
<ul>
<li>使用栅格化的多通道鸟瞰图。bird‘s eye view (BEV) representation with
multiple channels by scene rasterization</li>
<li>The image size is W × H with ρ meters per pixel in resolution.</li>
<li>agent汽车的位置永远在图像的中心位置 <span class="math display">\[p_0
= [i_0,j_0]^T\]</span> ，这种图片模式称为ego-centered</li>
<li>模型输入<span
class="math display">\[\mathcal{I}\]</span>是多通道图像，不仅包括ego-vehicle、路况信息、还有车辆速度信息<span
class="math display">\[v_0\]</span></li>
</ul></li>
<li><p><strong>Model Design</strong>：</p>
<ul>
<li><p>整个模型分为三个部分：</p>
<ul>
<li>A. 一个带空间注意力分支的CNN模型</li>
<li>B. 一个LSTM decoder</li>
<li>C. 一个可微分的光栅化模块（加在LSTM decoder上）</li>
</ul></li>
<li><p><strong>A.</strong> CNN骨架模型使用MobileNetV2
[37]以平衡输出精度和推断速度。输出特征是<span
class="math display">\[F_h\]</span>，经过一个MLP（multilayer
perceptron）层之后，输出扁平的特征<span
class="math display">\[h_0\]</span>。该特征作为同时作为LSTM
decoder的初始隐藏状态被使用。</p>
<p>为了减轻计算量，主干CNN的中间特征<span
class="math display">\[F_I\]</span>传递给空间注意力模块。注意力使用的是Atrous
Spatial Attentional Bottleneck from [13] （J. Kim and M. Bansal,
“Attentional bottleneck: Towards an interpretable deep driving network,”
in CVPR Workshops, 2020）</p></li>
<li><p><strong>B.</strong> LSTM的 cell state <span
class="math display">\[c_0\]</span> is initialized by the Glorot
initialization [38]</p>
<p>模型输出是汽车的转向角序列（steering angle）和加速度序列，记为<span
class="math display">\[(\delta_{t-1},a_{t-1})\]</span>。</p>
<p>动力学层： <span class="math display">\[
\begin{align}
\begin{cases}
    x_t=v_{t-1}\sin (\phi_{t-1})\Delta t + y_{t-1}\\
    y_t=v_{t-1}\cos (\phi_{t-1})\Delta t + x_{t-1}\\
    \phi_t=v_{t-1}\frac{\tan (\delta_{t-1})}{L} \Delta t + \phi_{t-1}\\
    v_t=a_{t-1}\Delta t + v_{t-1}
\end{cases}
\end{align}
\]</span></p></li>
<li><p><strong>C.</strong> Differentiable
Rasterizer使用三个高斯基函数来描述汽车的形状。</p>
<p>光栅化函数：<span class="math display">\[g_{i,j}(s_t)=\max_{k=1,2,3}
(N(\mu^k,\Sigma^k))\]</span> <span class="math display">\[
\begin{align}
\begin{cases}
\mu^k=\frac{1}{\rho}(x_t^k-x_0)+P_0\\
\Sigma^k=R(\phi_t)^T \text{diag}(\sigma_l,\sigma_{\omega})R(\phi_t)
\end{cases}
\end{align}
\]</span> 其中，<span
class="math display">\[(\sigma_l,sigma_{\omega})=(\frac{1}{3}\alpha
l,\alpha \omega)\]</span>，<span
class="math display">\[\alpha\]</span>是固定的比例系数，<span
class="math display">\[l\]</span>和<span
class="math display">\[\omega\]</span>是车辆的长度和宽度。<span
class="math display">\[R(\phi_t)\]</span>表示旋转矩阵。</p></li>
</ul></li>
<li><p><strong>Loss：</strong></p>
<p>trajectory imitation loss：<span
class="math display">\[L_{imit}=\sum^{N-1}_{t=0}\lambda\mid\mid s_t -
\hat{s}_t\mid\mid_2\]</span></p>
<p>four task losses：</p>
<ul>
<li><p>obstacle collision：<span
class="math display">\[L_{obs}=\sum^{N-1}_{t=0}\frac{1}{WH}\sum_i\sum_j
g_{i,j} \tau_{i,j}^{obs}\]</span></p></li>
<li><p>off-route：<span
class="math display">\[L_{route}=\sum^{N-1}_{t=0}\frac{1}{WH}\sum_i\sum_j
g_{i,j} \tau_{i,j}^{route}\]</span></p></li>
<li><p>off-road：<span
class="math display">\[L_{road}=\sum^{N-1}_{t=0}\frac{1}{WH}\sum_i\sum_j
g_{i,j} \tau_{i,j}^{road}\]</span></p></li>
<li><p>traffic signal violation：<span
class="math display">\[L_{signal}=\sum^{N-1}_{t=0}\frac{1}{WH}\sum_i\sum_j
g_{i,j} \tau_{i,j}^{signal}\]</span> 其中，<span
class="math display">\[\tau^{obs}\]</span>, <span
class="math display">\[\tau^{route}\]</span>, <span
class="math display">\[\tau^{road}\]</span>, and <span
class="math display">\[\tau^{signal}\]</span> 是响应的二值掩码（binary
masks）</p></li>
<li><p>总的损失函数：</p>
<p><span
class="math display">\[L=L_{imit}+\lambda_{task}(L_{obs}+L_{route}+L_{road}+L_{signal})\]</span></p></li>
</ul></li>
</ul>
<h3 id="data-augmentation">Data Augmentation</h3>
<ul>
<li><p><strong>Random
Synthesizer</strong>：随机扰动轨迹，产生off-road和碰撞的场景。起始点和终止点保持不变，扰动中间过程的<strong>一个</strong>点，并平滑路径轨迹，通过对最大曲率进行阈值处理，仅保留真实的扰动轨迹。</p></li>
<li><p><strong>Feedback
Synthesizer</strong>：学习一个驾驶策略帮助生成新的轨迹数据。用上一次迭代的策略<span
class="math display">\[\pi_{t-1}\]</span>生成轨迹数据，用于训练策略<span
class="math display">\[\pi_t\]</span>。具体算法如下：</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220714-1.png"
alt="Feedback Synthesizer" />
<figcaption aria-hidden="true">Feedback Synthesizer</figcaption>
</figure></li>
<li><p><strong>Post-processing
Planner</strong>：保证舒适和安全。相关实现在 Apollo 6.0
中（https://github.com/ApolloAuto/apollo/tree/master/modules/planning）
<span class="math display">\[
\text{Quadratic Optimization} \leftarrow
\begin{cases}
\text{Safety Bounds}\\
\text{Learning-based Objective}\\
\text{Comfort Constrains}
\end{cases}
\]</span></p></li>
</ul>
<h3 id="experiments">Experiments</h3>
<ul>
<li><p><strong>Implementation Details</strong></p>
<p>方形的BEV图（俯瞰图）宽度<span class="math display">\[W\times
H=200\times200\]</span>，<span
class="math display">\[\rho=0.2m/pixel\]</span>。ego-vehicle位于图片的<span
class="math display">\[i_0=100,j_0=160\]</span>的位置。使用Apollo的感知模块（“Baidu
Apollo open platform,”
http://apollo.auto/）光栅化2秒的历史数据或者预测数据。使用Adam
optimizer，且初始学习率为<span
class="math display">\[0.0003\]</span>。</p></li>
<li><p><strong>Dataset and Augmented Data</strong></p>
<ul>
<li><p>400 hours’ driving data demonstrated by human-drivers in southern
San Francisco bay area。</p></li>
<li><p>经过数据预处理后，保留了250k帧作为原始的训练数据<span
class="math display">\[D_0\]</span></p></li>
<li><p>利用random synthesizer生成400k帧数据，记为<span
class="math display">\[D_r\]</span></p></li>
<li><p>设置feedback steps T = 5，feedback
synthesizer生成465k帧数据，记为<span
class="math display">\[D_f\]</span></p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220714-2.png"
alt="不同模型配置的性能对比" />
<figcaption aria-hidden="true">不同模型配置的性能对比</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220714-3.png"
alt="offroad,speeding,collision,and failed to arrive性能对比" />
<figcaption aria-hidden="true">offroad,speeding,collision,and failed to
arrive性能对比</figcaption>
</figure></li>
<li><p><strong>Evaluation Scenarios</strong></p>
<p>使用Apollo Dreamland simulator。主要包括4类场景：</p>
<ul>
<li><strong>巡航 Cruising</strong>: normal cruising in straight or
curved roads without other traffic participants.</li>
<li><strong>岔道口 Junction</strong>: junction related scenarios
including left or right turns, U-turns, stop before a traffic signal,
etc.</li>
<li><strong>静态交互 Static Interaction</strong>: interaction with
static obstacles, such as overtaking a stopped car.</li>
<li><strong>动态交互 Dynamic Interaction</strong>: interaction with
dynamic obstacles, for example, overtaking a slow vehicle.</li>
</ul></li>
<li><p><strong>Evaluation Metrics</strong></p>
<p>除了通过率和成功率以外，还使用了舒适度评分。舒适度评分是根据自动驾驶状态和人类驾驶状态的相识度计算得到的。</p>
<p>在人驾数据集<span
class="math display">\[D_0\]</span>中还包括了角速度和角加加速度<span
class="math display">\[(\omega,j)\]</span>，使用这两个数据，可得舒适度评分为：<span
class="math display">\[c=\frac{\sum_{i=1}^N P(\omega,j\mid
D_0)}{n}\]</span>。其中，<span class="math display">\[P(\omega,j\mid
D_0)\]</span>表示状态<span
class="math display">\[(\omega,j)\]</span>在人驾数据<span
class="math display">\[D_0\]</span>中出现的概率，<span
class="math display">\[n\]</span>表示帧数。<span
class="math display">\[\omega\]</span>和<span
class="math display">\[j\]</span>都经过离散化处理（0.1 and
1.0），直接查表读取响应的概率。</p>
<p>agent被要求在时间限制之内到达目的地，同时避免碰撞等事故（出现则判定失败）。</p></li>
<li><p><strong>Runtime Analysis</strong></p>
<p>an Nvidia Titan-V GPU, Intel Core i7-9700K CPU, and 16GB Memory.</p>
<p>The online inference time per frame is <strong>10ms</strong> in
rendering, <strong>22 ms</strong> in model inference, and <strong>15
ms</strong> (optional) in the post-processing planner. Note that our
model inference time is much shorter than the prior work [5]</p></li>
</ul>
<p>模型出现的主要问题是超速、不能到达和碰撞。超速可以通过添加速度损失来解决，不能到达是由于速度过慢，碰撞多是出现了追尾，因此发生被动碰撞。值得注意的是，实验中其它的车辆都是按照既定轨迹运动的，不会避让ego车辆，因此容易出现追尾风险。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | ChauffeurNet: Learning to Drive by Imitating the Best and Synthesizing the Worst (Waymo, 2018)</title>
    <url>/2022/07/16/2022-07-16-Autonomous%20Driving%20-%20ChauffeurNet%20Learning%20to%20Drive%20by%20Imitating%20the%20Best%20and%20Synthesizing%20the%20Worst/</url>
    <content><![CDATA[<h2
id="chauffeurnet-learning-to-drive-by-imitating-the-best-and-synthesizing-the-worst">ChauffeurNet:
Learning to Drive by Imitating the Best and Synthesizing the Worst</h2>
<h3 id="introduction">1. Introduction</h3>
<ul>
<li><p>提出通过扰动专家的驾驶数据创建更多有趣的驾驶情景，例如碰撞和off-road等。</p></li>
<li><p>在模仿学习中，并不是模仿所有的数据，而是利imitation
loss惩罚不期望的情况。</p></li>
<li><p>数据：30 million real-world expert driving examples,
corresponding to about 60 days of continual driving<br />
</p></li>
<li><p>由于无论是原始传感器输入还是直接的控制器输出都很难产生扰动，因此在mid-level的输入输出数据上实施扰动。</p></li>
</ul>
<h3 id="related-work">2. Related Work</h3>
<p>Decades-old work on ALVINN (Pomerleau (1989)) showed how a shallow
neural network could follow the road by directly consuming camera and
laser range data. Learning to drive in an end-to-end manner has seen a
resurgence in recent years. Recent work by Chen et al. (2015)
demonstrated a convolutional net to estimate affordances such as
distance to the preceding car that could be used to program a controller
to control the car on the highway. Researchers at NVIDIA (Bojarski et
al. (2016, 2017)) showed how to train an end-to-end deep convolutional
neural network that steers a car by consuming camera input. Xu et al.
(2017) trained a neural network for predicting discrete or continuous
actions also based on camera inputs. Codevilla et al. (2018) also train
a network using camera inputs and conditioned on high-level commands to
output steering and acceleration. Kuefler et al. (2017) use Generative
Adversarial Imitation Learning (GAIL) with simple affordance-style
features as inputs to overcome cascading errors typically present in
behavior cloned policies so that they are more robust to perturbations.
Recent work from Hecker et al. (2018) learns a driving model using
360-degree camera inputs and desired route planner to predict steering
and speed. The CARLA simulator (Dosovitskiy et al. (2017)) has enabled
recent work such as Sauer et al. (2018), which estimates several
affordances from sensor inputs to drive a car in a simulated urban
environment. Using mid-level representations in a spirit similar to our
own, M¨uller et al. (2018) train a system in simulation using CARLA by
training a driving policy from a scene segmentation network to output
high-level control, thereby enabling transfer learning to the real world
using a different segmentation network trained on real data. Pan et al.
(2017) also describes achieving transfer of an agent trained in
simulation to the real world using a learned intermediate scene labeling
representation. Reinforcement learning may also be used in a simulator
to train drivers on difficult interactive tasks such as merging which
require a lot of exploration, as shown in Shalev-Shwartz et al. (2016).
A convolutional network operating on a space-time volume of bird’s
eye-view representations is also employed by Luo et al. (2018); Djuric
et al. (2018); Lee et al. (2017) for tasks like 3D detection, tracking
and motion forecasting. Finally, there exists a large volume of work on
vehicle motion planning outside the machine learning context and Paden
et al. (2016) present a notable survey.</p>
<h3 id="model-architecture">3. Model Architecture</h3>
<h4 id="input-output-representation">3.1 Input Output
Representation</h4>
<ul>
<li>a top-down coordinate system：
<ul>
<li>agent位姿<span class="math display">\[P_t=(x_t,y_t)\]</span></li>
<li>方向角<span class="math display">\[\theta_t\]</span></li>
<li>速度<span class="math display">\[s_t\]</span></li>
<li>图像大小：W × H pixels, <span
class="math display">\[\varphi\]</span> meters/pixel<br />
</li>
<li>因此agent只能看见前方的 <span
class="math display">\[R_{forward}=(H-v_0)\phi\]</span> 米</li>
</ul></li>
<li>表征内容：
<ul>
<li><ol type="a">
<li>Roadmap:
3通道彩色图片，包含车道线、停止信号、人行道、路边等等。</li>
</ol></li>
<li><ol start="2" type="a">
<li>Traffic
lights：灰度图像的时间序列，其中该序列的每一帧表示在每个过去的时间步交通灯的已知状态。在每一帧中，我们用一个灰度级给每一个车道中心着色，最亮的灰度级代表红灯，中间灰度级代表黄灯，较暗的灰度级代表绿灯或未知灯。</li>
</ol></li>
<li><ol start="3" type="a">
<li>Speed
limit：单通道图像，并且车道中心的颜色与其速度限制成比例对应。</li>
</ol></li>
<li><ol start="4" type="a">
<li>Route：生成的希望行驶的预定路线。</li>
</ol></li>
<li><ol start="5" type="a">
<li>Current agent box：显示agent在当前时间步的完整边界框。</li>
</ol></li>
<li><ol start="6" type="a">
<li>Dynamic objects in the
environment：一个时序的图像序列，展示所有潜在的动态物体。（车辆、自行车、行人等）</li>
</ol></li>
<li><ol start="7" type="a">
<li>Past agent
poses：agent过去的姿态被渲染成一个单一的灰度图像，显示为位置点轨迹。</li>
</ol></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220716-1.png"
alt="Driving model inputs (a-g) and output (h)" />
<figcaption aria-hidden="true">Driving model inputs (a-g) and output
(h)</figcaption>
</figure>
<ul>
<li>用<span
class="math display">\[I\]</span>表示上述枚举的各种输入，ChauffeurNet模型循环地预测未来的自车姿态，并用绿色点表示。
<span class="math display">\[
P_{t+\delta t} = \text{ChauffeurNet}(I,P_t)
\]</span></li>
</ul>
<h4 id="model-design">3.2 Model Design</h4>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220716-2.png"
alt="Training the driving model" />
<figcaption aria-hidden="true">Training the driving model</figcaption>
</figure>
<ul>
<li><p><strong>a convolutional feature network
(FeatureNet)：</strong></p>
<ul>
<li>输入：input data</li>
<li>输出：处理后的上下文特征表征（a digested contextual feature
representation）</li>
</ul></li>
<li><p><strong>a recurrent agent network (AgentRNN)：</strong></p>
<ul>
<li><p>输入：处理后的特征（consumed features）</p></li>
<li><p>输出：迭代地预测连续的路径点（iteratively predicts successive
points）以及其它信息</p></li>
<li><p>AgentRNN还将车辆的边界框预测为每个未来时间步的空间热图。（The
AgentRNN also predicts the bounding box of the vehicle as a spatial
heatmap at each future timestep）<br />
</p></li>
<li><p>point <span class="math display">\[P_k\]</span></p></li>
<li><p>the agent bounding box heatmap <span
class="math display">\[B_k\]</span><br />
</p></li>
<li><p>memory <span class="math display">\[M_k\]</span></p></li>
<li><p>FeatureNet 输出的特征<span
class="math display">\[F\]</span></p></li>
<li><p><span class="math display">\[P_k,B_k =
\text{AgentRNN}(k,F,M_{k-1},B_{k-1})\]</span></p></li>
</ul></li>
<li><p><strong>Road Mask Network：</strong></p>
<ul>
<li><p>输入：feature representation</p></li>
<li><p>输出：预测可行驶的区域（predicts the drivable areas of the field
of view (on-road vs. off-road)）</p></li>
</ul></li>
<li><p><strong>recurrent perception network
(PerceptionRNN)：</strong></p>
<ul>
<li><p>输入：feature representation</p></li>
<li><p>输出：迭代预测空间热图（iteratively predicts a spatial heatmap
(of every other agent in the scene))</p></li>
</ul></li>
</ul>
<h4 id="system-architecture">3.3 System Architecture</h4>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220718-1.png"
alt="Software architecture for the end-to-end driving pipeline" />
<figcaption aria-hidden="true">Software architecture for the end-to-end
driving pipeline</figcaption>
</figure>
<h3 id="imitating-the-expert">4. Imitating the Expert</h3>
<ul>
<li><p>AgentRNN在每次迭代中预测三个输出：</p>
<ul>
<li>概率分布<span class="math display">\[P_k(x,y)\]</span></li>
<li>预测边界的热图<span class="math display">\[B_k(x,y)\]</span></li>
<li>回归边界朝向输出<span class="math display">\[\theta_k\]</span> (a
regressed box heading output <span
class="math display">\[\theta_k\]</span>)</li>
</ul></li>
<li><p>定义上述三个变量响应的损失函数：(上标<span
class="math display">\[gt\]</span>表示相应的ground-truth值；<span
class="math display">\[H(a,b)\]</span>表示交叉熵函数；<span
class="math display">\[P^{gt}_k\]</span>是二值图像，并且只有ground-truth目标坐标取值为1)</p>
<ul>
<li><span class="math display">\[L_p=H(P_k,P^{gt}_k)\]</span></li>
<li><span class="math display">\[L_B=\frac{1}{WH}\sum_x \sum_y
H(B_k(x,y),B_k^{gt}(x,y))\]</span></li>
<li><span class="math display">\[L_{\theta}=\mid\mid \theta_k -
\theta_k^{gt} \mid\mid_1\]</span></li>
</ul></li>
<li><p>精细的位置预测用<span class="math display">\[\delta
P_k^{gt}\]</span>表示，并用<span
class="math display">\[L_1\]</span>损失计算误差：</p>
<p><span class="math display">\[L_{p-subpixel} = \mid\mid \delta
P_k-\delta P_k^{gt} \mid\mid_1\]</span></p>
<p><span class="math display">\[L_{speed}=\mid\mid s_k-s_k^{gt}
\mid\mid_1\]</span></p>
<p>其中，<span class="math display">\[\delta P^{gt}_k = P^{gt}_k-\lfloor
P^{gt}_k \rfloor\]</span>是ground-truth位置坐标的小数部分（the
fractional part）</p></li>
</ul>
<h3 id="beyond-pure-imitation">5. Beyond Pure Imitation</h3>
<ul>
<li><p>合成扰动（Synthesizing
Perturbations），路径的起始点和终点不变，晃动中间某个点的位置，幅度是<span
class="math display">\[[-0.5,0.5]\]</span>米，扰动的车头朝向角度为<span
class="math display">\[[-\pi/3,\pi/3]\]</span>弧度。最后结合扰动点和端点，拟合出一条平滑的轨迹，让车能在干扰之后回到原来的轨迹。</p></li>
<li><p>通过与最大曲率阈值比较，去除生成的一些不切实际的轨迹</p></li>
<li><p>允许生成的轨迹与其它车辆发生碰撞的情况，这些cases可以帮助训练避免这些情况。</p></li>
<li><p>Beyond the Imitation Loss：</p>
<ul>
<li><p><strong>Collision Loss</strong></p>
<p>直接测量预测的智能体边框<span
class="math display">\[B_k\]</span>和ground-truth场景中其它目标边框的重叠区域（directly
measures the overlap of the predicted agent box Bk with the ground-truth
boxes of all the scene objects at each timestep） <span
class="math display">\[
L_{collosion}=\frac{1}{WH}\sum_x \sum_y B_{k}(x,y)\cdot Obj^{gt}_k (x,y)
\]</span> 其中，<span
class="math display">\[B_k\]</span>是输出的预测的智能体边框似然度地图，<span
class="math display">\[Obj^{gt}_k\]</span>是一个二值掩码图，其中其它的动态目标用1表示</p></li>
<li><p><strong>On road loss</strong></p>
<p>避免agent冲出道路边界 <span class="math display">\[
L_{onroad}=\frac{1}{WH}\sum_x \sum_y B_k(x,y)\cdot (1-Road^{gt}(x,y))
\]</span></p></li>
<li><p><strong>Geometry loss</strong></p>
<p>不与目标几何位置重叠的区域作为一个惩罚项损失 <span
class="math display">\[
L_{geom}=\frac{1}{WH}\sum_x \sum_yB_k(x,y)\cdot(1-Geom^{gt}(x,y))
\]</span></p></li>
<li><p><strong>Auxiliary losses</strong></p>
<p>使用a recurrent perception network PerceptionRNN预测他车轨迹 <span
class="math display">\[
L_{objects}=\frac{1}{WH}\sum_x \sum_y H(Obj_k (x,y),obj^{gt}_k(x,y))
\]</span></p></li>
</ul></li>
<li><p>本文使用的损失函数用两组损失组成：模仿损失（imitation
losses）和环境损失（environment losses）：</p>
<ul>
<li>模仿损失：<span
class="math display">\[L_{imit}=\{L_p,L_B,L_{\theta},L_{p-subpixel},L_{speed}\}\]</span></li>
<li>环境损失：<span
class="math display">\[L_{env}=\{L_{collision},L_{onroad},L_{geom},L_{objects},L_{road}\}\]</span></li>
<li>总损失：<span class="math display">\[L=\omega_{imit}\sum_{l\in
L_{imit}}l +\omega_{env}\sum_{l \in L_{env}} l\]</span></li>
</ul>
<p>模仿损失导致模型模仿专家的演示，而环境损失阻止不期望的行为，例如碰撞。(The
imitation losses cause the model to imitate the expert’s demonstrations,
while the environment losses discourage undesirable behavior such as
collisions.)</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220718-2.png"
alt="Visualization of predictions and loss functions on an example input" />
<figcaption aria-hidden="true">Visualization of predictions and loss
functions on an example input</figcaption>
</figure></li>
<li><p>参数情况：</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span
class="math display">\[T_{scene}\]</span></th>
<th style="text-align: center;"><span
class="math display">\[T_{pose}\]</span></th>
<th style="text-align: center;"><span class="math display">\[\delta
t\]</span></th>
<th style="text-align: center;"><span
class="math display">\[N\]</span></th>
<th style="text-align: center;"><span
class="math display">\[\Delta\]</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1.0 s</td>
<td style="text-align: center;">8.0 s</td>
<td style="text-align: center;">0.2 s</td>
<td style="text-align: center;">10</td>
<td style="text-align: center;">25 deg</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math display">\[W\]</span></td>
<td style="text-align: center;"><span
class="math display">\[H\]</span></td>
<td style="text-align: center;"><span
class="math display">\[u_0\]</span></td>
<td style="text-align: center;"><span
class="math display">\[v_0\]</span></td>
<td style="text-align: center;"><span
class="math display">\[\phi\]</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">400 px</td>
<td style="text-align: center;">400 px</td>
<td style="text-align: center;">200 px</td>
<td style="text-align: center;">320 px</td>
<td style="text-align: center;">0.2 m/px</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | MotionCNN: A Strong Baseline for Motion Prediction in Autonomous Driving (2022)</title>
    <url>/2022/07/22/2022-07-22-Autonomous%20Driving%20-%20MotionCNN%20A%20Strong%20Baseline%20for%20Motion%20Prediction%20in%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2
id="motioncnn-a-strong-baseline-for-motion-prediction-in-autonomous-driving">MotionCNN:
A Strong Baseline for Motion Prediction in Autonomous Driving</h2>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>Motion prediction
目前仍然是一个困难的任务，本文提出了一个可以进行多模式的行为预测（multimodal
motion prediction）的较强的baseline (based purely on Convolutional
Neural Networks (CNNs)<br />
</li>
<li>算法在 2021 Waymo Open Dataset Motion Prediction Challenge
取得第三名。相关代码见<a
href="https://github.com/kbrodt/waymo-motion-prediction-2021">Github</a></li>
<li>运动预测任务最重要的一些方法：
<ul>
<li>birds-eye-view rasterized scene representations [15, 6, 4, 11, 18,
14]</li>
<li>methods incarnated using graph neural networks [2, 8, 25]</li>
</ul></li>
</ul>
<h3 id="method">2 Method</h3>
<h4 id="rasterization">2.1 Rasterization</h4>
<ul>
<li>栅格化历史轨迹获得标准化的数据输入</li>
<li>agent 始终位于图像中心</li>
<li>agent 速度方向与x轴对齐</li>
</ul>
<h4 id="model">2.2 Model</h4>
<ul>
<li>在ImageNet上预训练</li>
<li>真实的行为难以预测，因此输出K个不同的行为假设</li>
<li>输入：多通道栅格化图像</li>
<li>输出：预测的K条轨迹，并带有可信度<span
class="math display">\[c_1,c_2,...,c_k\]</span>，可信度用softmax归一化，满足<span
class="math display">\[\sum_k c_k=1\]</span></li>
</ul>
<h4 id="loss-function">2.3 Loss function</h4>
<ul>
<li><p>使用k个高斯分布，网络输出高斯分布的均值，将每个高斯的协方差固定为单位矩阵<span
class="math display">\[I\]</span></p></li>
<li><p>损失函数使用混合高斯分布的负的log似然度negative log-likelihood
(NLL)，混合高斯由真实轨迹坐标定义<br />
</p></li>
<li><p>给定ground truth轨迹：<span
class="math display">\[X^{gt}=[(x_1,y_1),...,(x_T,y_T)]\]</span></p></li>
<li><p>给定K个预测的假设轨迹：<span
class="math display">\[X_k=[(x_{k,1},y_{k,1}),...,(x_{k,T},y_{k,T})],k=1,...,K\]</span></p></li>
<li><p>计算预测高斯混合下真实轨迹的负对数概率，其均值等于预测轨迹，单位矩阵I为协方差:compute
negative log probability of the ground truth trajectory under the
predicted mixture of Gaussians with the means equal to the predicted
trajectories and the identity matrix I as covariance: <span
class="math display">\[
L=-\log P(X^{gt})=-\log\sum_k c_k \mathcal{N}(X^{gt};\mu=X_k,\Sigma=I)
\]</span></p></li>
<li><p>损失函数可以进一步分解为1维高斯的乘积： <span
class="math display">\[
L=-\log \sum_k c_k\prod
\mathcal{N}(x_t^{gt};x_{k,t},1)\mathcal{N}(y_t^{gt};y_{k,t},1)\\
=-\log \sum_k \exp \bigg(\log(c_k)-\frac{1}{2}\sum_{t=1}^T
(x_t^{gt}-x_{k,t})^2+(y_t^{gt}-y_{k,t})^2 \bigg)
\]</span></p></li>
<li><p>建议的损失函数没有明确地惩罚产生非常接近的轨迹的模型。然而，根据经验，我们没有观察到模式崩溃，因为将所有的概率质量组合到一个模式中会导致更高的风险策略和更高的预测失误损失值。因此，优化建议的损失产生足够的多模态。</p></li>
</ul>
<h4 id="inference">2.4 Inference</h4>
<ul>
<li>为未来轨迹提供了6个假设</li>
</ul>
<h3 id="experiments">3 Experiments</h3>
<h4 id="dataset">3.1 Dataset</h4>
<ul>
<li>Waymo Open Motion Dataset [22, 7]
<ul>
<li>[22]. Pei Sun, Henrik Kretzschmar, Xerxes Dotiwalla, Aurelien
Chouard, Vijaysai Patnaik, Paul Tsui, James Guo, Yin Zhou, Yuning Chai,
Benjamin Caine, Vijay Vasudevan, Wei Han, Jiquan Ngiam, Hang Zhao,
Aleksei Timofeev, Scott Ettinger, Maxim Krivokon, Amy Gao, Aditya Joshi,
Sheng Zhao, Shuyang Cheng, Yu Zhang, Jonathon Shlens, Zhifeng Chen, and
Dragomir Anguelov. Scalability in perception for autonomous driving:
Waymo open dataset, 2020. 3, 4<br />
</li>
<li>[7]. Scott Ettinger, Shuyang Cheng, Benjamin Caine, Chenxi Liu, Hang
Zhao, Sabeek Pradhan, Yuning Chai, Ben Sapp, Charles Qi, Yin Zhou, et
al. Large scale interactive motion forecasting for autonomous driving:
The waymo open motion dataset. arXiv preprint arXiv:2104.10133, 2021. 1,
2, 3, 4<br />
</li>
</ul></li>
<li>Waymo数据包括：
<ul>
<li>object trajectories<br />
</li>
<li>3D maps for 103354 segments</li>
<li>Each segment is a 20 seconds recording of an object trajectory at
10Hz<br />
</li>
<li>map data for the area covered by the segment</li>
<li>A single sample comprises 1 second of history and 8 seconds of
future data obtained by breaking the segments into 9-second windows with
5 second overlap<br />
</li>
<li>每个这样的样本包含多达8个标记为“有效”的代理，模型需要预测它们在未来8秒内的位置。Every
such sample contains up to 8 agents marked as ”valid” for which the
model needs to predict their positions for 8 seconds into the
future.</li>
</ul></li>
<li>Rasterisation details
<ul>
<li>栅格尺寸：224 × 224 × (3 + 2T )，<span
class="math display">\[T=11\]</span>​是快照（snapshot）数，3是RGB图像的3个通道，包括road
lines, crosswalks, traffic
lights等；每个历史快照通过两个额外通道表示：（1）The mask representing
the location of the target agent. （2）the mask representing all other
agents nearby<br />
</li>
<li>智能体位于坐标<span
class="math display">\[[61,112]\]</span>，其速度与图像的X轴对齐</li>
</ul></li>
</ul>
<h4 id="metrics">3.2 Metrics</h4>
<ul>
<li>预测的轨迹点下采样至2Hz。从预测的80个点产生16个2维坐标的子集被用于计算测试和验证度量</li>
<li>最小化Average Displacement Error：<span
class="math display">\[minADE=\min_k \frac{1}{T} \mid\mid X^{gt} -X
\mid\mid_2\]</span></li>
<li>最小化Final Displacement Error (FDE): <span
class="math display">\[minFDE=\min_k \mid\mid x_T^{gt}- x_T
\mid\mid_2\]</span></li>
<li>Miss Rate(MR) and mean average precision (mAP) in [7]
<ul>
<li>[7]. Scott Ettinger, Shuyang Cheng, Benjamin Caine, Chenxi Liu, Hang
Zhao, Sabeek Pradhan, Yuning Chai, Ben Sapp, Charles Qi, Yin Zhou, et
al. Large scale interactive motion forecasting for autonomous driving:
The waymo open motion dataset. arXiv preprint arXiv:2104.10133, 2021. 1,
2, 3, 4</li>
</ul></li>
</ul>
<h4 id="implementation-details">3.3 Implementation details</h4>
<p>Results from the final leaderboard of the Waymo open dataset motion
prediction challenge [1] are presented in Tab. 1. Despite the simplicity
of the proposed approach we secured the 3rd place according to the mAP
metric. Moreover, our model is superior to the other competing methods
according to Min ADE, Min FDE, and Overlap Rate metrics. Note that in
contrast to methods [12, 9], our simple model achieves such impressive
results without any use of advanced deep learning techniques or complex
architectures.</p>
<p>To test a more lightweight architecture, we also trained our model
using ResNet18 [10] as the backbone and evaluated it on the validation
set (see Tab. 1). This architecture is 3x times faster to train than the
one with Xception71 backbone, but it does not reach the same high
performance showing that a sufficiently deep model is necessary for
attaining good results. In Fig. 4 we show plots with train and
validation loss values during training.</p>
<p>In Tab. 2 we also provide more detailed evaluation results for
different object types separately.</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220722-1.png"
alt="Quantitative evaluation on test and validation sets of Waymo Open Motion Dataset" />
<figcaption aria-hidden="true">Quantitative evaluation on test and
validation sets of Waymo Open Motion Dataset</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220722-2.png"
alt="Detailed evaluation of our MotionCNN-Xception71 model on test and validation sets of Waymo Open Motion Dataset" />
<figcaption aria-hidden="true">Detailed evaluation of our
MotionCNN-Xception71 model on test and validation sets of Waymo Open
Motion Dataset</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>作者也承认整个模型在结构和设计上比较简单，但是结果上是取得了waymo比赛的第三名。这是否意味着他们做了更多的工程化调整才取得如此的成绩？</p>
<p>如果follow这项工作，其他人是否也能实现这样的性能是一个问题。</p>
<p>​</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Structure | A ConvNet for the 2020s (Facebook, 2022)</title>
    <url>/2022/07/22/2022-07-22-Network%20Structure%20-%20A%20ConvNet%20for%20the%202020s/</url>
    <content><![CDATA[<h2 id="a-convnet-for-the-2020s">A ConvNet for the 2020s</h2>
<ul>
<li>纯卷积的网络堪比transformer。</li>
</ul>
<p>Vision Transformers (ViTs)
的引入迅速取代了ConvNets，成为最先进的图像分类模型。另一方面，普通的 ViT
在应用于目标检测和语义分割等一般计算机视觉任务时面临困难。分层
Transformers（例如，Swin Transformers）重新引入了几个 ConvNet 先验，使
Transformers
作为通用视觉骨干实际上可行，并在各种视觉任务上表现出卓越的性能。然而，这种混合方法的有效性在很大程度上仍归功于
Transformer
的内在优势，而不是卷积固有的归纳偏差。在这项工作中，我们重新检查了设计空间并测试了纯
ConvNet 所能达到的极限。</p>
<p>我们逐渐将标准 ResNet “现代化”为视觉 Transformer
的设计，并在此过程中发现了导致性能差异的几个关键组件。这一探索的结果是一系列纯
ConvNet 模型，称为 ConvNeXt。ConvNeXts 完全由标准 ConvNet
模块构建，在准确性和可扩展性方面与 Transformer 竞争，实现 87.8% ImageNet
top-1 准确率，在 COCO 检测和 ADE20K 分割方面优于 Swin
Transformers，同时保持标准 ConvNet 的简单性和效率。</p>
<h3 id="introduction">1. Introduction</h3>
<ul>
<li><p>过去的十年视觉认知领域的研究从特征工程转移到了网络结构设计。</p></li>
<li><p>solutions to numerous computer vision tasks in the past decade
depended significantly on a sliding-window, fully- convolutional
paradigm</p></li>
<li><p>The <strong>biggest challenge</strong> is ViT’s global attention
design, which has a <strong>quadratic complexity</strong> with respect
to the input size. This might be acceptable for ImageNet classification,
but quickly becomes intractable with higher-resolution inputs.</p></li>
<li><p><strong>Swin Transformer</strong> [45] is a milestone work in
this direction, demonstrating for the first time that Transformers can
be adopted as a generic vision backbone and achieve state-of-the-art
performance across a range of computer vision tasks beyond image
classification</p>
<ul>
<li>[45]. Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang,
Stephen Lin, and Baining Guo. Swin transformer: Hierarchical vision
transformer using shifted windows. 2021.</li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
<p>写作语言非常高级的一篇介绍网络结构的文章，介绍了如何构建超越transformer的纯卷积网络。并在计算机视觉多项任务中取得了成功，包括ImageNet
top-1。文章值得一看，但由于这不是我重点关注方向，不详细介绍了。</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
        <tag>Network Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VSCode调试带参数的Python脚本</title>
    <url>/2022/07/23/2022-07-23-%E4%BD%BF%E7%94%A8VSCode%E8%B0%83%E8%AF%95%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84Python%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2
id="使用vscode调试带参数的python脚本">使用VSCode调试带参数的Python脚本</h2>
<h3 id="问题描述">1 问题描述</h3>
<p>linux系统上执行带参数的python程序直接添加-arg
xxx即可。但在VSCode调试模式（Debug）下该执行方式不可行。那么是否有办法在VSCode上调试带参数的python脚本呢？</p>
<p>这里提供三种方案：</p>
<ul>
<li>2.1 方案1 pbd命令的Debug</li>
<li>2.2 方案2 在launch.json中设置参数的Debug</li>
<li>2.3 方案3 终端命令行中写入参数的Debug</li>
</ul>
<h3 id="解决方案">2 解决方案</h3>
<h4 id="方案1-pbd命令的debug">2.1 方案1 pbd命令的Debug</h4>
<p>终端窗口执行命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pdb xxx.py</span><br></pre></td></tr></table></figure>
<p>开启Debug模式，在断点处暂停，可输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">h：（<span class="built_in">help</span>）帮助</span><br><span class="line">w：（<span class="built_in">where</span>）打印当前执行堆栈</span><br><span class="line">d：（down）执行跳转到在当前堆栈的深一层（个人没觉得有什么用处）</span><br><span class="line">u：（up）执行跳转到当前堆栈的上一层</span><br><span class="line">b：（<span class="built_in">break</span>）添加断点</span><br><span class="line">	b 列出当前所有断点，和断点执行到统计次数</span><br><span class="line">	b line_no：当前脚本的line_no行添加断点</span><br><span class="line">	b filename:line_no：脚本filename的line_no行添加断点</span><br><span class="line">	b <span class="keyword">function</span>：在函数<span class="keyword">function</span>的第一条可执行语句处添加断点</span><br><span class="line">tbreak：（temporary <span class="built_in">break</span>）临时断点</span><br><span class="line">	在第一次执行到这个断点之后，就自动删除这个断点，用法和b一样</span><br><span class="line">cl：（clear）清除断点</span><br><span class="line">	cl 清除所有断点</span><br><span class="line">	cl bpnumber1 bpnumber2… 清除断点号为bpnumber1,bpnumber2…的断点</span><br><span class="line">	cl lineno 清除当前脚本lineno行的断点</span><br><span class="line">	cl filename:line_no 清除脚本filename的line_no行的断点</span><br><span class="line"><span class="built_in">disable</span>：停用断点，参数为bpnumber，和cl的区别是，断点依然存在，只是不启用</span><br><span class="line"><span class="built_in">enable</span>：激活断点，参数为bpnumber</span><br><span class="line">s：（step）执行下一条命令</span><br><span class="line">	如果本句是函数调用，则s会执行到函数的第一句</span><br><span class="line">n：（next）执行下一条语句</span><br><span class="line">	如果本句是函数调用，则执行函数，接着执行当前执行语句的下一条。</span><br><span class="line">r：（<span class="built_in">return</span>）执行当前运行函数到结束</span><br><span class="line">c：（<span class="built_in">continue</span>）继续执行，直到遇到下一条断点</span><br><span class="line">l：（list）列出源码</span><br><span class="line">	l 列出当前执行语句周围11条代码</span><br><span class="line">	l first 列出first行周围11条代码</span><br><span class="line">	l first second 列出first–second范围的代码，如果second&lt;first，second将被解析为行数</span><br><span class="line">a：（args）列出当前执行函数的函数</span><br><span class="line">p expression：（<span class="built_in">print</span>）输出expression的值</span><br><span class="line">pp expression：好看一点的p expression</span><br><span class="line">run：重新启动debug，相当于restart</span><br><span class="line">q：（quit）退出debug</span><br><span class="line">j lineno：（jump）设置下条执行的语句函数</span><br><span class="line">	只能在堆栈的最底层跳转，向后重新执行，向前可直接执行到行号</span><br><span class="line">unt：（until）执行到下一行（跳出循环），或者当前堆栈结束</span><br><span class="line">condition bpnumber conditon，给断点设置条件，当参数condition返回True的时候bpnumber断点有效，否则bpnumber断点无效</span><br></pre></td></tr></table></figure>
<p><strong>Note：</strong>
<code>1：直接输入Enter，会执行上一条命令；</code>
<code>2：输入PDB不认识的命令，PDB会把他当做Python语句在当前环境下执行；</code></p>
<p>但这种方式不依赖VSCode，并且是在命令行中调试，并不方便。</p>
<h4 id="方案2-在launch.json中设置参数的debug">2.2 方案2
在launch.json中设置参数的Debug</h4>
<p><strong>Step1：</strong>VSCode菜单栏-运行-打开配置，出现launch.json文件。</p>
<p><strong>Step2：</strong>在configurations中添加”args”参数形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python: Current File&quot;</span></span><br><span class="line">                  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                   ]</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Step3：</strong>添加完成后，设置断点，按F5执行即可开始调试。</p>
<p>该方式需要预先写入参数，在实际项目中参数数量和名称可能常常发生变化，这种方式在调整时还不够灵活，效率不够高。</p>
<h4 id="方案3-终端命令行中写入参数的debug">2.3 方案3
终端命令行中写入参数的Debug</h4>
<p><strong>Step1：</strong>安装debugpy库，<code>pip install debugpy</code></p>
<p><strong>Step2：</strong>打开本地终端，找到一个未占用的端口号。输入<code>netstat -a</code>
State显示为LISTEN即为未占用，记该端口号为xxxx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于State的说明：</span><br><span class="line">- LISTEN: The socket is listening for incoming connections. Foreign address is not relevant for this line</span><br><span class="line">- ESTABLISHED: The socket has an established connection. Foreign address in the address of the remote end point of the socket.</span><br><span class="line">- CLOSE_WAIT: The remote end has shut down, waiting for the socket to close.</span><br></pre></td></tr></table></figure>
<p><strong>Step3：</strong>修改launch.json中内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">	&quot;configurations&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;name&quot;: &quot;Python: Attach&quot;,</span><br><span class="line">			&quot;type&quot;: &quot;python&quot;,</span><br><span class="line">			&quot;request&quot;: &quot;attach&quot;,</span><br><span class="line">			&quot;connect&quot;: &#123;</span><br><span class="line">				&quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">				&quot;port&quot;: xxxx</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，xxxx表示使用的端口号。</p>
<p><strong>Step4：</strong>假设run
该Python脚本的命令为：<code>python xxx.py -arg1 ARG1 -arg2 ARG2</code>。即脚本有两个参数输入。在进行调试之前，在VSCode终端命令行中键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m debugpy --listen xxxx --wait-for-client xxx.py -arg1 ARG1 -arg2 ARG2</span><br></pre></td></tr></table></figure>
<p>注意这里监听的端口xxxx即为上一步找到的未占用端口（这里输入的端口号需要和launch.json中设置的端口号一致）</p>
<p>执行上述命令，终端处于执行中，没有任何返回。接下来在程序中设置断点，按下F5键，即可进入VSCode的调试模式。调试方式与不带参数的情况相同。</p>
<h3 id="ref">Ref:</h3>
<p>https://blog.csdn.net/weixin_37251044/article/details/107471459</p>
<p>https://www.cnblogs.com/JavicxhloWong/p/14356814.html（重要参考，感谢）</p>
<p>https://blog.csdn.net/qq_37837061/article/details/124561317</p>
]]></content>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | A Review of Motion Planning for Highway Autonomous Driving</title>
    <url>/2022/07/23/2022-07-23-Autonomous%20Driving%20-%20A%20Review%20of%20Motion%20Planning%20for%20Highway%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2 id="a-review-of-motion-planning-for-highway-autonomous-driving">A
Review of Motion Planning for Highway Autonomous Driving</h2>
<ul>
<li>高速路具有路径高速（high speed）、路径曲率小（small curvature
roads）、规则具体（specific driver rules）的几项特点。</li>
<li>主要面临的问题：变道（Lane change），避障（obstacle
avoidance），跟车（car following）合并道路（merging）</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>automakers now try to personalize Advanced Driving Assistance
Systems (ADAS) to the driver’s style [7].</p>
<ul>
<li>[7]. M. Hasenjager and H. Wersing, “Personalization in advanced
driver "assistance systems and autonomous vehicles: A review," in IEEE
Int. Conf. on Intelligent Transportation Systems (ITSC), 2017.</li>
</ul></li>
<li><p>现有的一些辅助技术：</p>
<ul>
<li>巡航控制中的纵向合/横向舒适度和安全性（longitudinal and lateral
comfort and security with the Cruise Control (CC)）</li>
<li>智能速度自适应（Intelligent Speed Adaptation (ISA)）</li>
<li>道路保持辅助（Lane Keeping Assist (LKA)）</li>
<li>离道警报（Lane Departure Warning (LDW)）</li>
</ul></li>
<li><p>自动驾驶分类标准：（With such an evolution in the automotive
field, the Society of Automotive Engineers (SAE) published a standard
classification for autonomous vehicles with a 6-level system, from 0 (no
control but active safety systems) to 5 (no human intervention for
driving) [10]）</p>
<ul>
<li>SAE International J3016, accessed 2018-11-03. [Online]. Available:
https://www.sae.org/standards/content/j3016 201401/<br />
</li>
</ul></li>
<li><p>2007 DARPA城市挑战赛：since the Defense Advanced Research
Projects Agency (DARPA) organized autonomous vehicle competitions in
2004, 2005, and 2007, and thanks to new technologies, autonomous
functions are evolving quickly and treat more complex scenarios in real
environments. The 11 finalist teams of the DARPA Urban Challenge 2007
[11] succeeded in navigating through a city environment.</p></li>
<li><p>Furthermore, highways seem to be the first environment where
drivers would be confident driving in a fully autonomous mode
[26]</p></li>
</ul>
<h3 id="considerations-for-highway-motion-planning">2 Considerations for
highway motion planning</h3>
<h4 id="a.-terminology">A. Terminology</h4>
<ul>
<li><p><strong>ego
vehicle</strong>表示被掌控（mastered）并装备传感器（sensors-equipped）的车辆</p></li>
<li><p><strong>obstacles
vehicle</strong>表示其它车辆，都被视为障碍物。</p></li>
<li><p>车辆的states包括：</p>
<ul>
<li>position</li>
<li>orientation</li>
<li>and their</li>
<li>time derivatives (position, speed, and acceleration, linear and
angular)</li>
</ul></li>
<li><p>The <strong>geometric state space</strong> is called the
<strong>configuration space</strong></p></li>
<li><p>The <strong>evolution space</strong> identifies the
<strong>configuration space-time</strong> in which the ego vehicle can
navigate.</p></li>
<li><p>configuration 和 evolution 空间被分为三个子空间：</p>
<ul>
<li>the <strong>collision space</strong>, in which the ego vehicle
collides with obstacles;</li>
<li>the <strong>uncertain space</strong>, in which there exists a
probability for the ego vehicle to be in collision;</li>
<li>the <strong>free space</strong>, in which there is no
collision.<br />
</li>
<li><strong>free-space</strong> (spatial geometric zones)</li>
<li><strong>path</strong> (sequence of spacerelated states in the free
space, i.e. geometric waypoints)</li>
<li><strong>trajectory</strong> (sequence of spatiotemporal states in
the free space, i.e. time-varying waypoints)<br />
</li>
<li><strong>maneuver</strong> (predefined motion, considered as a
subspace of paths or trajectories, i.e. motion primitives)<br />
</li>
<li><strong>generation</strong>, which builds sequences of paths,
trajectories, maneuvers, or actions<br />
</li>
<li><strong>planning</strong>, meaning the selection of one sequence
among the generated motions<br />
</li>
<li><strong>prediction horizon</strong> denotes the space or/and time
horizon limit for the simulation of motion</li>
</ul></li>
</ul>
<h4 id="b.-motion-planning-scheme">B. Motion Planning Scheme</h4>
<ul>
<li>分层的自动驾驶算法框架</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220731-1.png"
alt="A hierarchical scheme of Autonomous Ground Vehicle systems." />
<figcaption aria-hidden="true">A hierarchical scheme of Autonomous
Ground Vehicle systems.</figcaption>
</figure>
<ul>
<li>行为规划包括：(i) route planning, (ii) prediction, (iii) decision
making, (iv) generation, and (v) deformation.</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220731-2.png"
alt="Motion planning functions. Motion planning acts as a global, local, and reactive motion strategy." />
<figcaption aria-hidden="true">Motion planning functions. Motion
planning acts as a global, local, and reactive motion
strategy.</figcaption>
</figure>
<p>其中，decision making, generation, and
deformation是核心。参考[32][33]两篇文章，总结的方法如下：</p>
<ul>
<li><p><strong>A high-level predictive planning</strong> built around
three objectives: risk evaluation, criteria minimization, and constraint
ubmission (see II-D). Those are used for decision making (iii), i.e. to
select the best solution out of the candidates’ generation (iv). One
either generates a set of motions and then makes a decision on the
behavior motion, or, defines the behavior to adopt and then fits a set
of motions. This high-level stage benefits from a longer predicted
motion but is time-consuming.</p></li>
<li><p><strong>A low-level reactive planning</strong> deforming the
generated motion from the high-level planning according to a reactive
approach, i.e. the deformation function (v). This acts on a shorter
range of actions and thus has faster computation.</p></li>
</ul>
<p>[32]. L. Claussmann, A. Carvalho, and G. Schildbach, “A path planner
for autonomous driving on highways using a human mimicry approach with
binary decision diagrams,” in IEEE European Control Conference (ECC),
2015. [33]. X. Li, Z. Sun, Q. Zhu, and D. Liu, “A unified approach to
local trajectory planning and control for autonomous driving along a
reference path,” in IEEE Int. Conf. on Mechatronics and Automation
(ICMA), 2014.</p>
<ul>
<li>空间和时间约束：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220731-3.png"
alt="Motion planning functions. Motion planning acts as a global, local, and reactive motion strategy." />
<figcaption aria-hidden="true">Motion planning functions. Motion
planning acts as a global, local, and reactive motion
strategy.</figcaption>
</figure>
<h4 id="c.-specificities-of-highway-driving">C. Specificities of Highway
Driving</h4>
<ul>
<li><p>特点：</p>
<ul>
<li>单向车流</li>
<li>高速a dynamic speed over 60km/h</li>
<li>道路形状简单：直线道路（straight
lines），回旋曲线道路（clothoids），小曲率的环形道路（circles with small
curvature）</li>
</ul></li>
<li><p>障碍车的行为预测分为以下几个：</p>
<ul>
<li>one-direction</li>
<li>two-lane changes – right or left</li>
<li>and to accelerate, maintain speed, or brake</li>
</ul></li>
<li><p>高速路的一些通常境况：</p>
<ul>
<li><p><strong>Lane keeping</strong></p>
<p>纵向安全的情况下保持期望的速度行驶</p></li>
<li><p><strong>Car following</strong></p>
<p>跟随自己前方的车辆，保持安全距离</p></li>
<li><p><strong>Lane changing</strong></p>
<p>受到方向和障碍物的约束，规划需要保证目标车道由充足的空间和合适的行驶速度</p></li>
<li><p><strong>Lateral-most lane changing</strong></p>
<p>一些情况下的交规要求只能在最左/右的车道行驶，因此agent会一直寻求变道的机会，直到到达目标车道</p></li>
<li><p><strong>Passing</strong></p>
<p>在侧向有障碍物的时候遵守lane keeping或者car
following决策的情况，需要保证侧向的安全距离</p></li>
<li><p><strong>Overtaking</strong></p>
<p>超车上复杂的机动动作，包括变道、pass、变道三个过程</p></li>
<li><p><strong>Merging</strong></p>
<p>两个车道合并为一个车道</p></li>
<li><p><strong>Highway toll</strong></p>
<p>高速收费站，先并入虚拟的车道线，进入收费站，之后再加速驶出，并入实际的车道线</p></li>
<li><p>高速场景特点总结：The main differences between highway, except
for platooning, and city driving consist in a further look-ahead time,
with a stronger focus towards the ahead direction of the road, whereas
city driving involves a closer range but in all directions. The highway
vehicle dynamics is also simpler with lower turn-angle, no reverse, and
less braking/acceleration, but higher and more constant speed. Thus,
even if there are less hazards, the risk due to high speed is stronger.
Moreover, the higher distances imply poorer sensors capacities. Finally,
less traffic insures more stable scenario. The algorithms which consider
all these specificities in real-time will be favored for a practical
application on highways.</p></li>
<li><p>[34]. L. Claussmann, M. Revilloud, S. Glaser, and D. Gruyer, “A
study on ai-based approaches for high-level decision making in highway
autonomous driving,” in IEEE. Int. Conf. on Systems, Man, and
Cybernetics (SMC), 2017.</p></li>
</ul></li>
</ul>
<h4 id="d.-constraints-on-highway-driving">D. Constraints on Highway
Driving</h4>
<ul>
<li><p><strong>硬约束</strong>（hard
constraints）：环境约束、交规、安全约束、避免碰撞。</p></li>
<li><p><strong>软约束</strong>（soft
constraints）：时间/距离/能耗最小化，舒适性最大化等乘坐优化约束。</p></li>
<li><p>其他可行性约束依赖于车辆的运动学限制，即非完整动力学，即车辆在只有两个自由度的三维空间中发展，平滑路径，即轨迹应该可微分且其曲率连续，以及车辆的动力学限制。</p></li>
<li><p>作者在文献[27]中认为，生成运动的质量要求应该为：可行、安全、最优、可用、自适应、高效、渐进和交互（feasible,
safe, optimal, usable, adaptive, efficient, progressive, and
interactive）</p></li>
<li><p>[27]. M. Rodrigues, A. McGordon, G. Gest, and J. Marco, “Adaptive
tactical behaviour planner for autonomous ground vehicle,” in IEEE Int.
Conf. on Control, 2016.</p></li>
</ul>
<h3 id="state-of-the-art">3 State of the art</h3>
<ul>
<li><p>运动规划包含了5个方面：</p></li>
<li><ol type="i">
<li>state estimation</li>
</ol></li>
<li><ol start="2" type="i">
<li>time evolution</li>
</ol></li>
<li><ol start="3" type="i">
<li>actions planning</li>
</ol></li>
<li><ol start="4" type="i">
<li>criteria optimization</li>
</ol></li>
<li><ol start="22" type="a">
<li>compliance with constraints</li>
</ol></li>
<li><p>一个争论：是否要区分驾驶模式（distinguishing and not
distinguishing the driving
modes），不同模式下使用不同的数据进行学习。</p></li>
<li><p><strong>分类1：空间构造算法</strong>（Space Configuration）</p>
<ul>
<li><p>总述：sampling points, connected cells, and
lattice这些方法的核心思想在于：（1）对进化空间进行采样或离散化；（2）排除与障碍物冲突或不可行的点、单元或网格；（3）将这些空间分解作为自由空间约束发送，或者用寻路算法(见III-B2)或曲线规划器(见III-B4)求解结果空间配置，以直接将路点、连接单元集或点阵集发送到控制块。</p></li>
<li><p>Sampling-Based Decomposition：</p>
<ul>
<li>Probabilistic RoadMap (PRM) [41]（The most popular random
method），配合Dijkstra算法[42]，先选择路径点，再分配速度曲线</li>
<li>spatiotemporal sampling points predictive
algorithm[43]，采样5维的车辆状态点（车的位置、速度、角度、到达时间），考虑空间分辨率的因素，还可以结合自适应分辨率采样方法[44]</li>
</ul></li>
<li><p>Connected Cells
Decomposition：网格化道路，赋予格子随机权重，然后避障寻路，该方法的缺点在于要求大的记忆容量、较高的计算速度、具有移动障碍物的虚假指示性占领，以及随空间和时间变化的分辨率。</p>
<p>依据不同的速度和形状，障碍物通常表示为凸多边形（convex polygons）
、矩形、 三角形、圆形、椭圆形。</p>
<ul>
<li><strong>非基于障碍物表征的方法</strong>，格子组织可以离线觉得在线填充，网格可以快速获得但没有使用环境特性。eg：exact
decomposition（正在淘汰）</li>
<li><strong>基于障碍物表征的方法</strong>，考虑动态变化的环境，建立在线的网格，更加方便计算和重规划。</li>
</ul></li>
<li><p>Lattice Representation（晶格表征）构建reachability graph of
maneuvers，多用于predictive planning。calculated offline for a quick
replanning [76]. Unfortunately, their application to reactive planning
is mostly limited due to the fixed structure.</p>
<p>经典的晶格表征算法基于maximum turn strategy [13,
76]，只变化车的角度，调整路径。引入速度后的改进方法curvature velocity
method[77],[72], [78]
。方法的缺点在于需要预先定义的运动集，以及高密度的运动图。</p></li>
</ul></li>
<li><p><strong>分类2：路径搜索算法</strong>（Pathfinding
Algorithms）</p>
<p>这类算法属于图论中的一部分，代表算法为Dijkstra and
A*等，主要问题在于图的尺寸和复杂度，以及进一步的动态环境的处理上，总之这些方法不是太适应高速的环境条件。</p></li>
<li><p><strong>分类3：吸引力和排斥力</strong>（Attractive and Repulsive
Forces）</p>
<p>目的地是吸引力，障碍物产生排斥力，由此构建引力图产生规划的轨迹。其优点是方便适应动态的环境。其问题在于局部最优和震荡现象。</p>
<p>Virtual Force Field (VFF) [56]</p>
<p>elastic band algorithm [102]</p></li>
<li><p><strong>分类4：参数化和半参数化曲线</strong>（Parametric and
Semi-parametric Curves）</p>
<p>考虑（1）高速路本省就是由简单的曲线构成的；（2）预先定义的曲线几何很容易实施和测试；曲线路径和速度可以解耦考虑。这里介绍两类算法：</p>
<ul>
<li><p><strong>point-free
curves算法</strong>：首先构建运动学上可行的轨迹，作为一组候选解；然后基于点的子类使用曲线来拟合一组选择的路点(采样点或单元)</p>
<p>该方法也可以参考基于晶格的方法，用一些基本曲线构建可能的运动路径，形成“触手”，以加快求解的速度。但是这些简单曲线的二阶导数不连续</p></li>
<li><p><strong>point-based
curves算法</strong>：能很好适应约束环境的几何特征，各种曲线的选择依赖对环境的认知。</p></li>
</ul></li>
<li><p><strong>分类5：数值优化</strong>（Numerical Optimization）</p>
<p>数值优化方法在运动规划中被广泛使用。一类算法简化求解的复杂度，提高效率；一类算法探索数学上的性质，以在受限的空间（restrictive
space）中推断出预测解。对于第二类方法，其基础的算法是the Linear
Programming (LP) （most popular one: Simplex algorithm[81]）</p>
<p>具体的预测上，使用Model Predictive Control (MPC)，Dynamic Programming
(DP)等</p></li>
<li><p><strong>分类6：人工智能方法</strong>（Artificial
Intelligence）</p>
<p>需要复制并模拟司机的推断和学习能力。本文将这些方法分为两类：<strong>cognitive/rational</strong>
and <strong>rules/learning</strong>，– based on [125]’s distinction
between thinking and acting humanly or rationally</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220801-1.png"
alt="A map of AI-based algorithms." />
<figcaption aria-hidden="true">A map of AI-based
algorithms.</figcaption>
</figure>
<ul>
<li><p>人工智能基于逻辑的方法（AI Logic-Based Approach）</p>
<p>依赖专家知识库和规则的专家推理系统。主要缺点在于处理循环推理和枚举所有规则</p>
<ul>
<li><p>决策树：不确定性和近似值增加了计算困难，行为必须被解释为安全合法的。</p></li>
<li><p>有限状态机（Finite State Machine (FSM)）：
只能在已知的知识范围内运行，不能在未知的环境中做生成。</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220808-1.png"
alt="Illustration of an FSM for highway" />
<figcaption aria-hidden="true">Illustration of an FSM for
highway</figcaption>
</figure></li>
<li><p>Bayesian networks：依赖马尔科夫模型的状态转移因果链。The authors
in [50] develop a Markov Decision Process (MDP) on the <strong>choice of
tentacle trajectories</strong>, and the one in [130] for a
<strong>lane-staying or -changing decision.</strong></p>
<ul>
<li>[50]. H. Mouhagir, R. Talj, V. Cherfaoui, F. Aioun, and F.
Guillemard, “Integrating safety distances with trajectory planning by
modifying the occupancy grid for autonomous vehicle navigation,” in IEEE
Int. Conf. on Intelligent Transportation Systems (ITSC), 2016.<br />
</li>
<li>[130]. S. Zhou, Y. Wang, M. Zheng, and M. Tomizuka, “A hierarchical
planning and control framework for structured highway driving,”
IFACPapersOnLine, vol. 50, no. 1, pp. 9101–9107, 2017.</li>
</ul>
<p>POMDP：</p>
<ul>
<li>[131] S. Ulbrich and M. Maurer, “Towards tactical lane change
behavior planning for automated vehicles,” in IEEE Int. Conf. on
Intelligent Transportation Systems (ITSC), 2015.</li>
<li>[132] E. Galceran, A. G. Cunningham, R. M. Eustice, and E. Olson,
“Multipolicy decision-making for autonomous driving via
changepoint-based behavior prediction: Theory and experiment,”
Autonomous Robots, vol. 41, no. 6, pp. 1367–1382, 2017.</li>
<li>[133] N. Li, D. W. Oyler, M. Zhang, Y. Yildiz, I. Kolmanovsky, and
A. R. Girard, “Game theoretic modeling of driver and vehicle
interactions for verification and validation of autonomous vehicle
control systems,” IEEE Trans. on Control Systems Technology, vol. 26,
no. 5, pp. 1782– 1797, 2018.</li>
</ul></li>
<li><p>人工智能启发式算法（AI Heuristic Algorithms）</p>
<p>优势在于相对快速高效，但是具有启发式算法的通病，即陷入局部最优，无法保证得到全局最优。</p>
<ul>
<li>基于Support Vector Machines (SVM)的个性化变道决策：
<ul>
<li>C. Vallon, Z. Ercan, A. Carvalho, and F. Borrelli, “A machine
learning approach for personalized autonomous lane change initiation and
control,” in IEEE Intelligent Vehicles Symposium (IV), 2017.<br />
</li>
</ul></li>
<li>演化算法（Evolutionary
methods）。在高速场景，最优解并不是必须的，演化算法的高计算效率，获得近似次优解，足以满足要求。</li>
</ul></li>
</ul></li>
<li><p>人工智能近似推理（AI Approximate Reasoning）</p>
<p>该方法与logic approach的区别在于其知识是非boolean形式表示的。
方法的优势在于其灵活，可拓展到非确定性数据中。缺点在于缺少可追踪性和系统性的设计方法</p>
<ul>
<li><p>Artificial Neural Networks (ANN)</p>
<p>主要可分为三类方法：supervised, unsupervised, and reinforcement
learning。他们的缺点在于缺少因果解释</p>
<p>使用卷积网络变道</p>
<ul>
<li>E. Rehder, J. Quehl, and C. Stiller, “Driving like a human:
Imitation learning for path planning using convolutional neural
networks,” in IEEE Int. Conf. on Intelligent Robots and Systems (IROS)
Workshops, 2017.</li>
</ul>
<p>multi-goal overtaking maneuvers[144]</p>
<ul>
<li>D. C. K. Ngai and N. H. C. Yung, “A multiple-goal reinforcement
learning method for complex vehicle overtaking maneuvers,” IEEE Trans.
on Intelligent Transportation Systems, vol. 12, no. 2, pp. 509–522,
2011.</li>
</ul>
<p>automated lane change maneuvers[145]</p>
<ul>
<li>P. Wang, C.-Y. Chan, and A. de La Fortelle, “A reinforcement
learning based approach for automated lane change maneuvers,” IEEE
Intelligent Vehicles Symposium (IV), 2018.</li>
</ul></li>
</ul></li>
<li><p>人工智能类人的方法（AI Human-Like Methods）</p>
<p>类人的驾驶模型的完整描述，参考这篇文章</p>
<ul>
<li>D. D. Salvucci, “Modeling driver behavior in a cognitive
architecture,” Human factors, vol. 48, no. 2, pp. 362–380, 2006</li>
</ul>
<p>可以分解为风险、任务和博弈三类：</p>
<ul>
<li><strong>Risk
estimators</strong>：执行可接受风险和目标安全之间的权衡。</li>
<li><strong>Taxonomic models</strong>：场景和状况细分分类。<br />
</li>
<li><strong>Game
theory</strong>：把所有车辆看做agent参与博弈，缺点是假设所有人准守规则，一些文章进行了改进：
<ul>
<li>N. Li, D. W. Oyler, M. Zhang, Y. Yildiz, I. Kolmanovsky, and A. R.
Girard, “Game theoretic modeling of driver and vehicle interactions for
verification and validation of autonomous vehicle control systems,” IEEE
Trans. on Control Systems Technology, vol. 26, no. 5, pp. 1782–1797,
2018.</li>
</ul></li>
</ul>
<p>人工智能类似人类的方法非常适合在高速公路场景中进行决策，由于这种环境的基本规则，司机的行为更容易预测。也易于理解并与驾驶员分享。但目前还没有统一的处理框架。</p></li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
<p>这篇文章介绍的范围太大，涵盖的研究方向和方法过多，受篇幅限制，讲的东西又很浅显，价值不大。</p>
<p>​</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Model-based offline planning</title>
    <url>/2022/08/01/2022-08-01-Autonomous%20Driving%20-%20Model-based%20offline%20planning/</url>
    <content><![CDATA[<h2 id="model-based-offline-planning">Model-based offline planning</h2>
<ul>
<li>由于成本、安全性等因素，很多情况下不能够直接与系统交互来学习控制策略，因此，只能从记录的log数据中学习控制策略（offline
reinforcement
learning）。本文介绍了一种从log数据中学到超越成圣log数据的原策略的新策略的方法，命名为
model-based ofline planning (MBOP)。</li>
</ul>
<h3 id="introduction">Introduction</h3>
<ul>
<li>Offline reinforcement learning包括：
<ul>
<li>model-free方法：
<ul>
<li>Yifan Wu, George Tucker, and Ofir Nachum. Behavior regularized
offline reinforcement learning. CoRR, abs/1911.11361, 2019. URL
http://arxiv.org/abs/1911.11361.<br />
</li>
<li>Xue Bin Peng, Aviral Kumar, Grace Zhang, and Sergey Levine.
Advantage-weighted regression: Simple and scalable off-policy
reinforcement learning. arXiv preprint arXiv:1910.00177, 2019.<br />
</li>
<li>Scott Fujimoto, David Meger, and Doina Precup. Off-policy deep
reinforcement learning without exploration. In International Conference
on Machine Learning, pp. 2052–2062, 2019.<br />
</li>
<li>Ziyu Wang, Alexander Novikov, Konrad Zolna, Josh S Merel, Jost
Tobias Springenberg, Scott E Reed, Bobak Shahriari, Noah Siegel, Caglar
Gulcehre, Nicolas Heess, et al. Critic regularized regression. Advances
in Neural Information Processing Systems, 33, 2020.<br />
</li>
</ul></li>
<li>model-based方法：MOPO,
MoREL学习一个模型，然后用于训练一个无模型策略，这种模式和Dyna模式类似。
<ul>
<li><strong>MOPO</strong>: Tianhe Yu, Garrett Thomas, Lantao Yu, Stefano
Ermon, James Zou, Sergey Levine, Chelsea Finn, and Tengyu Ma. Mopo:
Model-based offline policy optimization. arXiv preprint
arXiv:2005.13239, 2020.<br />
</li>
<li><strong>MoREL</strong>: Rahul Kidambi, Aravind Rajeswaran, Praneeth
Netrapalli, and Thorsten Joachims. Morel: Modelbased offline
reinforcement learning. arXiv preprint arXiv:2005.05951, 2020.<br />
</li>
<li><strong>Dyna</strong>: Richard S Sutton and Andrew G Barto.
Reinforcement learning: An introduction. MIT press, 2018.</li>
</ul></li>
</ul></li>
<li>本文的算法属于model-based，利用model-predictive control (MPC)
，扩展MPPI轨迹规划器，并使用实时规划，产生目标或满足奖励条件的策略。
<ul>
<li>Grady Williams, Nolan Wagener, Brian Goldfain, Paul Drews, James M
Rehg, Byron Boots, and Evangelos A Theodorou. Information theoretic mpc
for model-based reinforcement learning. In 2017 IEEE International
Conference on Robotics and Automation (ICRA), pp. 1714–1721. IEEE,
2017b.</li>
</ul></li>
<li>本文模型MBOP包含三个要素：
<ul>
<li>a learnt <strong>world model</strong>,</li>
<li>a learnt <strong>behavior-cloning policy</strong>,</li>
<li>a learnt <strong>fixed-horizon value-function</strong>.<br />
</li>
</ul></li>
<li>MBOP的核心优势是<strong>数据高效</strong>和<strong>自适应</strong>。只需仅100秒就可以训练出一个和奖励函数、目标状态、基于状态的约束相适应的策略。</li>
<li>MBOP能够对非平稳目标和约束执行zero-shot自适应，但是没有处理非平稳动力学特性的机制。</li>
</ul>
<h3 id="model-based-offline-planning-1">Model-based offline
planning</h3>
<ul>
<li>描述问题为Markov Decision Process (MDP)，<span
class="math display">\[(S,A,p,r,\gamma)\]</span>
<ul>
<li><span class="math display">\[s\]</span>是系统状态</li>
<li><span class="math display">\[a\]</span>是行为</li>
<li><span class="math display">\[p(s_{t+1}\mid
s_t,a_t)\]</span>是状态转移概率</li>
<li><span class="math display">\[r(s_t,a_t,s_{t+1})\]</span>是奖励</li>
<li><span class="math display">\[\gamma=1\]</span>是时间折扣系数</li>
</ul></li>
<li>MBOP包括三个函数近似器：
<ul>
<li><span
class="math display">\[f_m\]</span>：环境动力学的单步模型，<span
class="math display">\[(\hat{r}_t,\hat{s}_{t+1})=f_m(s_t,a_t)\]</span>，本文使用<span
class="math display">\[f_m(s_t,a_t)_s\]</span>表示状态预测，使用<span
class="math display">\[f_m(s_t,a_t)_r\]</span>表示奖励预测。</li>
<li><span
class="math display">\[f_b\]</span>：表示一个行为克隆网络，<span
class="math display">\[a_t=f_b(s_t,a_{t-1})\]</span>，被规划算法用来引导轨迹采样的先验。</li>
<li><span
class="math display">\[f_R\]</span>：是一个阉割的值函数，提供在状态s中采取行为a后，在固定界限<span
class="math display">\[R_H\]</span>上的收益。<span
class="math display">\[\hat{R}_H = f_R(s_t,a_{t-1})\]</span></li>
</ul></li>
<li>MBOP-POLICY
<ul>
<li>使用MPC输出每个新状态下的行为（<span
class="math display">\[a_t=\pi(s_t)\]</span>）。MPC在每一时间步执行一个固定长度的规划，返回长度为H的轨迹T。选择该轨迹的第一个行为<span
class="math display">\[a_t\]</span>并返回。</li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220802-1.png"
alt="High-Level MBOP-Policy" />
<figcaption aria-hidden="true">High-Level MBOP-Policy</figcaption>
</figure>
<ul>
<li>MBOP-TRAJOPT
<ul>
<li>在PDDM的基础上增加一个策略先验<span
class="math display">\[f_b\]</span>和价值预测<span
class="math display">\[f_R\]</span></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220802-2.png"
alt="MBOP-Trajopt" />
<figcaption aria-hidden="true">MBOP-Trajopt</figcaption>
</figure>
<blockquote>
<p>P.S.：第11行在<span
class="math display">\[f_b\]</span>给出的行为上加权了采样轨迹的行为，其含义可能是希望在网络没有收敛时，记录下来的行为也不要偏差太大，都保持在采样轨迹附近，参数<span
class="math display">\[\beta\]</span>可被视为学习率。第17行给出多条轨迹中奖励最大的作为输出（re-weighting）</p>
</blockquote>
<h3 id="experimental-results">Experimental results</h3>
<ul>
<li><p>首先，在非常少的数据中心训练，其次，再迁移到基于相同系统动力学的两种novel
tasks中：</p>
<ul>
<li><strong>goal-conditioned tasks</strong> (that ignore the original
reward function)<br />
</li>
<li><strong>constrained tasks</strong> (that require optimising for the
original reward under some state constraint)</li>
</ul></li>
<li><p>使用的数据集RL Unplugged (RLU) 和 D4RL</p>
<ul>
<li><strong>RL Unplugged (RLU)</strong>：Caglar Gulcehre, Ziyu Wang,
Alexander Novikov, Tom Le Paine, Sergio Gomez Colmenarejo, Kon- ´rad
Zolna, Rishabh Agarwal, Josh Merel, Daniel Mankowitz, Cosmin Paduraru,
et al. Rl unplugged: Benchmarks for offline reinforcement learning.
arXiv preprint arXiv:2006.13888, 2020.
<ul>
<li>cartpole-swingup</li>
<li>walker</li>
<li>quadruped</li>
</ul></li>
<li><strong>D4RL</strong>：Justin Fu, Aviral Kumar, Ofir Nachum, George
Tucker, and Sergey Levine. D4rl: Datasets for deep data-driven
reinforcement learning. arXiv preprint arXiv:2004.07219, 2020.
<ul>
<li>halfcheetah</li>
<li>hopper</li>
<li>walker2d</li>
<li>Adroit</li>
</ul></li>
</ul></li>
<li><p>对于 RLU 中的 Quadruped 和 Walker
任务，由于数据集中性能高方差，在训练 <span
class="math display">\[f_b\]</span> 和 <span
class="math display">\[f_R\]</span>
的过程中，通过设定阈值，舍弃了性能不好的数据。 使用未过滤的数据来训练
<span class="math display">\[f_s\]</span></p></li>
<li><p>对于所有的数据集，90%用于训练，10%用于测试验证</p></li>
<li><p>性能：For the RLU datasets (Fig. 1), we observe that MBOP is able
to find a near-optimal policy on most dataset sizes in Cartpole and
Quadruped with as little as <strong>5000 steps</strong>, which
corresponds to <strong>5 episodes</strong>, or approximately 50 seconds
on Cartpole and 100 seconds on Quadruped. On the Walker datasets MBOP
requires 23 episodes (approx. 10 minutes) before it finds a reasonable
policy, and with sufficient data converges to a score of 900 which is
near optimal. On most tasks, MBOP is able to generate a policy
significantly better than the behavior data as well as the the BC
prior.</p></li>
<li><p>MBOP模型容易适应新的目标函数，例如添加新的子目标函数<span
class="math display">\[R&#39;_n\]</span>时， <span
class="math display">\[
R&#39;_n = \sum_t f_{obj}(s_t)
\]</span> 其中，<span
class="math display">\[f_{obj}\]</span>是用户自定义的目标函数。只需要将轨迹更新规则改为：
<span class="math display">\[
T_t=\frac{\sum_{n=1}^N e^{kR_n+k_{obj}R&#39;_n}A_{n,t}}{\sum_{n=1}^N
e^{kR_n+k_{obj}R&#39;_n}}
\]</span></p></li>
<li><p>为了验证上述模型的适应能力，进行了两个实验：</p>
<ul>
<li><strong>goal-conditioned control</strong>（忽略原始奖励，<span
class="math display">\[k=0\]</span>，学习新奖励）</li>
<li><strong>constrained control</strong>（增加了state-based
constraint，然后探索合适的 <span class="math display">\[k\]</span> 和
<span class="math display">\[k_{obj}\]</span> ）</li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220802-3.png"
alt="ZERO-SHOT TASK ADAPTATION" />
<figcaption aria-hidden="true">ZERO-SHOT TASK ADAPTATION</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>MBOP为策略生成提供了一种易于实施、数据高效、稳定且灵活的算法。</p>
<p>由于使用了在线规划，使其能够应对变化的目标、成本和环境限制。</p>
<p>但是算法没有在更复杂的场景和约束条件下测试，因此适用范围和效果还缺少验证。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | DriverGym Democratising Reinforcement Learning for Autonomous Driving</title>
    <url>/2022/08/01/2022-08-01-Autonomous%20Driving%20-%20DriverGym%20Democratising%20Reinforcement%20Learning%20for%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2
id="drivergym-democratising-reinforcement-learning-for-autonomous-driving">DriverGym:
Democratising Reinforcement Learning for Autonomous Driving</h2>
<ul>
<li>现状：目前缺少open-source platform来用real-world
data训练和高效地验证RL算法。</li>
<li>DriverGym 平台的特点：
<ul>
<li>开源（opensource）</li>
<li>与Gym兼容（OpenAI Gym-compatible environment specifically
tailored）</li>
<li>超过1000小时专家记录数据（more than 1000 hours of expert logged
data）<br />
</li>
<li>灵活的闭环评估协议（flexible closed-loop evaluation protocol）</li>
<li>提供行为克隆baselines（provide behavior cloning baselines using
supervised learning and RL）<br />
</li>
<li>代码：https://lyft.github.io/l5kit/ （已失效）</li>
</ul></li>
<li>环境结构：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220801-2.png"
alt="DriverGym" />
<figcaption aria-hidden="true">DriverGym</figcaption>
</figure>
<blockquote>
<p>DriverGym: an open-source gym environment that enables training RL
driving policies on real-world data. The RL policy can access rich
semantic maps to control the ego (<strong>red</strong>). Other agents
(<strong>blue</strong>) can either be simulated from the data logs or
controlled using a dedicated policy pre-trained on real-world data. We
provide an extensible evaluation system (<strong>purple</strong>) with
easily configurable metrics to evaluate the idiosyncrasies of the
trained policies.</p>
</blockquote>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>自动驾驶开源RL仿真环境的对比</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220801-3.png"
alt="自动驾驶开源RL仿真环境的对比" />
<figcaption aria-hidden="true">自动驾驶开源RL仿真环境的对比</figcaption>
</figure>
<ul>
<li><p>对仿真平台的几个需求：</p>
<ul>
<li><ol type="1">
<li>易于训练RL策略；be used to easily train RL policies using real-world
logs,</li>
</ol></li>
<li><ol start="2" type="1">
<li>可仿真实际的和反应式的周围智能体行为反应；simulate surrounding agent
behavior that is both realistic and reactive to the ego policy,</li>
</ol></li>
<li><ol start="3" type="1">
<li>可高效评估模型；effectively evaluate the trained models,</li>
</ol></li>
<li><ol start="4" type="1">
<li>设计灵活可调；be flexible in its design,</li>
</ol></li>
<li><ol start="5" type="1">
<li>包容整个相关研究社区；inclusive to the entire research
community,</li>
</ol></li>
</ul></li>
<li><p>使用了最大的公开数据集：Level 5 Prediction Dataset</p>
<ul>
<li>J. Houston, G. Zuidhof, L. Bergamini, Y. Ye, A. Jain, S. Omari, V.
Iglovikov, and P. Ondruska. One thousand and one hours: Self-driving
motion prediction dataset. https://level-5.global/level5/data/,
2020.<br />
</li>
</ul></li>
<li><p>支持反应式的行为仿真</p>
<ul>
<li>Luca Bergamini, Y. Ye, Oliver Scheel, Long Chen, Chih Hu, Luca Del
Pero, Blazej Osinski, Hugo Grimmett, and Peter Ondruska. Simnet:
Learning reactive self-driving simulations from real-world observations.
ArXiv, abs/2105.12332, 2021.</li>
</ul></li>
<li><p>闭环评估系统中提供了自动驾驶相关的评估指标，指标支持扩展和合并，应用于策略的训练</p></li>
<li><p>主要贡献：</p>
<ul>
<li>An open-source and OpenAI gym-compatible environment for autonomous
driving task;</li>
<li>Support for more than 1000 hours of real-world expert data;</li>
<li>Support for logged agents replay or data-driven realistic agent
trajectory simulations;</li>
<li>Configurable and extensible evaluation protocol;</li>
<li>Provide pre-trained models and the corresponding reproducible
training code.</li>
</ul></li>
</ul>
<h3 id="related-work">2 Related Work</h3>
<ul>
<li><strong>赛车仿真环境（Racing simulators）：</strong>
<ul>
<li><strong>TORCS</strong>：提供了受限的驾驶场景
<ul>
<li>E. Espié, Christophe Guionneau, Bernhard Wymann, Christos
Dimitrakakis, Rémi Coulom, and Andrew Sumner. Torcs, the open racing car
simulator. 2005.<br />
</li>
</ul></li>
<li><strong>Highway-Env</strong>：环境与Gym兼容，但缺少交通灯、评估协议和专家数据
<ul>
<li>Edouard Leurent. An environment for autonomous driving
decision-making. https://github.com/eleurent/highway-env, 2018.<br />
</li>
</ul></li>
</ul></li>
<li><strong>交通仿真环境（Traffic simulators）</strong>：
<ul>
<li><strong>CARLA</strong>：支持多变的交通情况训练和测试，但周围车辆使用手写规则（hand-coded
rules），真实性有限。
<ul>
<li>A. Dosovitskiy, G. Ros, Felipe Codevilla, Antonio M. López, and V.
Koltun. Carla: An open urban driving simulator. ArXiv, abs/1711.03938,
2017.<br />
</li>
</ul></li>
<li><strong>SUMO</strong>：支持多变的交通情况训练和测试，但周围车辆使用手写规则（hand-coded
rules），真实性有限。
<ul>
<li>Pablo Alvarez Lopez, Michael Behrisch, Laura Bieker-Walz, Jakob
Erdmann, Yun-Pang Flötteröd, Robert Hilbrich, Leonhard Lücken, Johannes
Rummel, Peter Wagner, and Evamarie Wießner. Microscopic traffic
simulation using sumo. In The 21st IEEE International Conference on
Intelligent Transportation Systems. IEEE, 2018. URL
https://elib.dlr.de/124092/.<br />
</li>
</ul></li>
<li><strong>SMARTS</strong>
：有<code>Social Agent Zoo</code>支持数据驱动周围车辆行为。
<ul>
<li>Ming Zhou, Jun Luo, Julian Villela, Yaodong Yang, David Rusu, Jiayu
Miao, Weinan Zhang, Montgomery Alban, Iman Fadakar, Zheng Chen, Aurora
Chongxi Huang, Ying Wen, Kimia Hassanzadeh, Daniel Graves, Dong Chen,
Zhengbang Zhu, Nhat M. Nguyen, Mohamed Elsayed, Kun Shao, Sanjeevan
Ahilan, Baokuan Zhang, Jiannan Wu, Zhengang Fu, Kasra Rezaee, Peyman
Yadmellat, Mohsen Rohani, Nicolas Perez Nieves, Yihan Ni, Seyedershad
Banijamali, Alexander Cowen Rivers, Zheng Tian, Daniel Palenicek,
Haitham Ammar, Hongbo Zhang, Wulong Liu, Jianye Hao, and Jintao Wang.
Smarts: Scalable multi-agent reinforcement learning training school for
autonomous driving. ArXiv, abs/2010.09776, 2020.<br />
</li>
</ul></li>
<li><strong>CRTS</strong>：提供了logs数据接口，使用64小时的真实驾驶数据（real-world
logs）训练周围车辆的行为。集成在Carla中。
<ul>
<li>Blazej Osinski, Piotr Milos, Adam Jakubowski, Pawel Ziecina, Michal
Martyniak, Christopher Galias, Antonia Breuer, Silviu Homoceanu, and
Henryk Michalewski. Carla real traffic scenarios - novel training ground
and benchmark for autonomous driving. ArXiv, abs/2012.11329, 2020.<br />
</li>
</ul></li>
<li><strong>DriverGym</strong>：支持反应式的agent使用数据驱动模型学习真实世界的数据，并提供了1000小时真实的驾驶记录可用于仿真agent</li>
</ul></li>
</ul>
<h3 id="drivergym">3 DriverGym</h3>
<ul>
<li><p>模型兼容两个流行的框架训练策略：</p>
<ul>
<li><strong>SB3</strong>：<a
href="https://github.com/DLR-RM/stable-baselines3">Stable Baselines3
(SB3)</a>是 PyTorch 中强化学习算法的一组可靠实现。它是<a
href="https://github.com/hill-a/stable-baselines">Stable
Baselines</a>的下一个主要版本。
<ul>
<li>Antonin Raffin, Ashley Hill, Maximilian Ernestus, Adam Gleave, Anssi
Kanervisto, and Noah Dormann. Stable baselines3.
https://github.com/DLR-RM/stable-baselines3, 2019.<br />
</li>
</ul></li>
<li><strong>RLlib</strong>：RLlib是一个开源强化学习库,提供了高度可扩展能力和不同应用的统一的<a
href="https://so.csdn.net/so/search?q=API&amp;spm=1001.2101.3001.7020">API</a>。RLlib原生支持Tensorflow，Tensorflow
Eager，以及PyTorch，但其内部与这些框架无关。
<ul>
<li>Eric Liang, Richard Liaw, Robert Nishihara, Philipp Moritz, Roy Fox,
Ken Goldberg, Joseph E. Gonzalez, Michael I. Jordan, and Ion Stoica.
Rllib: Abstractions for distributed reinforcement learning. In ICML,
2018.</li>
</ul></li>
</ul></li>
<li><p>例子场景：绿线是策略预测的轨迹</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220801-4.png"
alt="Visualization of an episode rollout (ego in red, agents in blue) in DriverGym. The policy prediction (green line) is scaled by factor of 10 and shown at 2 second intervals for better viewing" />
<figcaption aria-hidden="true">Visualization of an episode rollout (ego
in red, agents in blue) in DriverGym. The policy prediction (green line)
is scaled by factor of 10 and shown at 2 second intervals for better
viewing</figcaption>
</figure></li>
<li><p>action space：行为为 <span class="math display">\[(x; y;
yaw)\]</span> (yaw是朝向)，用于更新ego-agent行为；环境输出 <span
class="math display">\[(acceleration; steer)\]</span>
用于计算下一时刻的observation</p></li>
<li><p>reactive agent：允许周围车辆使用两种方式控制：</p>
<ul>
<li>log replay：回放真实世界中收集的数据；</li>
<li>reactive simulation：可使用真实世界数据训练neural-network-based
agent models，用于控制车辆行为</li>
</ul></li>
<li><p>reward：支持不同的自动驾驶评价指标，在每一帧进行评价计算，指标可以整合为奖励函数。</p></li>
</ul>
<h3 id="总结">总结</h3>
<p>整体来看，支持Gym环境大大方便了仿真和调试，一些细节问题由于没有实际使用该环境还不清楚，比如车辆密度、速度、周围车辆的观测质量、轨迹质量等。</p>
<p>本文作者正对更多细粒度场景设计评估方案，例如或绿灯路口重新启动等。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Urban Driver: Learning to Drive from Real-world Demonstrations Using Policy Gradients</title>
    <url>/2022/08/03/2022-08-03-Autonomous%20Driving%20-%20Urban%20Driver%20Learning%20to%20Drive%20from%20Real-world%20Demonstrations%20Using%20Policy%20Gradients/</url>
    <content><![CDATA[<h2
id="urban-driver-learning-to-drive-from-real-world-demonstrations-using-policy-gradients">Urban
Driver: Learning to Drive from Real-world Demonstrations Using Policy
Gradients</h2>
<ul>
<li>取得了城市驾驶场景中最好的效果（Urban driving scenarios）</li>
<li>数据：使用100小时的城市道路专家示教数据</li>
<li>不必添加复杂的状态扰动；</li>
<li>不必在训练中收集额外的同策略数据；</li>
</ul>
<h3 id="introduction">Introduction</h3>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220803-1.png"
alt="本文的闭环训练算法概览" />
<figcaption aria-hidden="true">本文的闭环训练算法概览</figcaption>
</figure>
<ul>
<li>工业界最好轨迹规划器文献：
<ul>
<li>H. Fan, F. Zhu, C. Liu, L. Zhang, L. Zhuang, D. Li, W. Zhu, J. Hu,
H. Li, and Q. Kong. Baidu apollo em motion planner. ArXiv, 2018.</li>
</ul></li>
<li>本文主要贡献：
<ul>
<li>复杂城市驾驶场景中，第一个证明了用策略梯度学习，可以从大量真实世界演示数据中学习模仿驾驶策略；</li>
<li>一个新的可微分仿真器，可基于过去的数据进行闭环仿真，并通过时间的反向传播计算策略梯度，实现快速学习；</li>
<li>单纯在仿真器中训练可在真实世界中控制自动驾驶车辆，优于其他方法；</li>
<li>源码可得：https://planning.l5kit.org.</li>
</ul></li>
</ul>
<h3 id="related-work">Related work</h3>
<ul>
<li><p><strong>Trajectory-based optimization</strong>：</p>
<ul>
<li><p>这是当前工业界的主流方法（a dominant approach）</p></li>
<li><p>依赖手工定义的损失和奖励</p></li>
<li><p>损失的优化可结合一系列经典的算法：</p>
<ul>
<li>A* [11]</li>
<li>RRTs [12]</li>
<li>POMDP with solver [13]</li>
<li>dynamic programming [14]<br />
</li>
</ul></li>
<li><p>整体上是依赖human engineering，而不是数据驱动</p></li>
</ul></li>
<li><p><strong>Reinforcement learning（RL）</strong>：</p>
<ul>
<li>依赖仿真器的构造、精确编码和优化的奖励信号
<ul>
<li>S. Shalev-Shwartz, S. Shammah, and A. Shashua. Safe, multi-agent,
reinforcement learning for autonomous driving. ArXiv, 2016.<br />
</li>
</ul></li>
<li>手工编程的仿真器，不能还原真实的长尾场景</li>
<li>本文直接通过 mid-level representations 从真实世界的 log
中构建仿真环境</li>
</ul></li>
<li><p><strong>Imitation learning (IL) and Inverse Reinforcement
Learning (IRL)</strong>：</p>
<ul>
<li>原始的行为克隆（Naive behavioral
cloning）面临协变量偏移问题（covariate shift）</li>
<li>Adversarial Imitation Learning [31, 32,
33]，还没有在自动驾驶场景使用</li>
</ul></li>
<li><p><strong>Neural Motion Planners</strong>：</p>
<ul>
<li>在[34]中，原始感觉输入和高清地图被用于估计未来可能的SDV位置的成本量。基于这些成本量，可以对轨迹进行采样，并且选择最低成本的轨迹来执行。这些方法目前没有在实车测试。
<ul>
<li>W. Zeng, W. Luo, S. Suo, A. Sadat, B. Yang, S. Casas, and R.
Urtasun. End-to-end interpretable neural motion planner. Int. Conference
on Computer Vision and Pattern Recognition (CVPR), \2019.<br />
</li>
<li>S. Casas, A. Sadat, and R. Urtasun. Mp3: A unified model to map,
perceive, predict and plan. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition, pages 14403–14412, 2021.</li>
</ul></li>
</ul></li>
<li><p><strong>Mid-representations and the availability of large-scale
real-world AD datasets</strong>：</p>
<ul>
<li>J. Houston, G. Zuidhof, L. Bergamini, Y. Ye, A. Jain, S. Omari, V.
Iglovikov, and P. Ondruska. One thousand and one hours: Self-driving
motion prediction dataset. Conference on Robot Learning (CoRL),
2020.</li>
<li>M.-F. Chang, J. Lambert, P. Sangkloy, J. Singh, S. Bak, A. Hartnett,
P. C. De Wang, S. Lucey, D. Ramanan, and J. Hays. Argoverse: 3d tracking
and forecasting with rich maps supplementary material. Int. Conf. on
Computer Vision and Pattern Recognition (CVPR).<br />
</li>
<li>state-of-the-art solutions for motion forecasting [8, 9]
<ul>
<li>[8] J. Gao, C. Sun, H. Zhao, Y. Shen, D. Anguelov, C. Li, and C.
Schmid. Vectornet: Encoding hd maps and agent dynamics from vectorized
representation. In Int. Conf. on Computer Vision and Pattern Recognition
(CVPR), 2020.</li>
<li>[9] M. Liang, B. Yang, R. Hu, Y. Chen, R. Liao, S. Feng, and R.
Urtasun. Learning lane graph representations for motion forecasting.
2020.<br />
</li>
</ul></li>
</ul></li>
<li><p><strong>Data-driven simulation</strong>：</p>
<ul>
<li>[23] created a photo-realistic simulator for training an end-to-end
RL policy.</li>
<li>[5] simulated a bird’s-eye view of dense traffic on a highway.</li>
<li>Finally, two recent works [39, 40] developed data-driven simulators
and showed their usefulness for training and validating ML
planners.</li>
</ul></li>
</ul>
<h3
id="differentiable-traffic-simulator-from-real-world-driving-data">Differentiable
Traffic Simulator from Real-world Driving Data</h3>
<ul>
<li>真实世界的经验轨迹：<span
class="math display">\[\overline{\tau}=\{\overline{s}_1,\overline{s}_2,...,\overline{s}_T\}\]</span></li>
<li>仿真的目标是迭代地生成观测状态序列<span
class="math display">\[\tau=\{s_1,s_2,...,s_T\}\]</span>，然后计算车辆轨迹<span
class="math display">\[p_t\]</span>，包括<span
class="math display">\[(x;y;\theta)\]</span></li>
<li><span class="math display">\[s_{t+1}=S(s_t,a_t)\]</span>，<span
class="math display">\[p_{t+1}=f(p_t,a_t)\]</span></li>
</ul>
<h3 id="imitation-learning-using-a-differentiable-simulator">Imitation
Learning Using a Differentiable Simulator</h3>
<ul>
<li><span class="math display">\[L(s_t,a_t)=\mid\mid \overline{p}_t -
p_t\mid\mid_1\]</span></li>
<li><span
class="math display">\[J(\pi)=\mathbb{E}_{\overline{\tau}\sim\pi_E}\mathbb{E}_{\tau\sim\pi}
\sum_{t}\gamma^t L(s_t,a_t)\]</span>，<span
class="math display">\[\pi_E\]</span>是专家策略，<span
class="math display">\[\pi\]</span>是模型的策略，希望两个策略接近</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220803-2.png"
alt="Imitation learning from expert demonstrations" />
<figcaption aria-hidden="true">Imitation learning from expert
demonstrations</figcaption>
</figure>
<blockquote>
<p>P.S.：由于轨迹的开始阶段均来自专家策略，会引入bias，在策略更新的时候，在运动开始的第K步之后才计算梯度，以此避免bias</p>
</blockquote>
<ul>
<li><p>策略梯度的计算（用下标表示偏微分，<span
class="math display">\[\theta\]</span>是策略参数）： <span
class="math display">\[
J_s^t = L_s+L_a\pi_s+\gamma J^{t+1}_{\theta}(S_s+S_a\pi_{s})\\
J_{\theta}^t =
L_a\pi_{\theta}+\gamma(J_s^{t+1}S_a\pi_{\theta}+J_{\theta}^{t+1})
\]</span> &gt; Ref: N. Heess, G. Wayne, D. Silver, T. Lillicrap, T.
Erez, and Y. Tassa. Learning continuous control policies by stochastic
value gradients. In Advances in Neural Information Processing Systems,
\2015.<br />
### Experiments</p></li>
<li><p>Lyft Motion Prediction Dataset
[6]：数据采集自加利福尼亚州帕洛阿尔托的复杂城市路线。数据集捕捉各种真实世界的情况，例如在多车道交通中驾驶、转弯、在十字路口与车辆互动等。</p>
<ul>
<li>J. Houston, G. Zuidhof, L. Bergamini, Y. Ye, A. Jain, S. Omari, V.
Iglovikov, and P. Ondruska. One thousand and one hours: Self-driving
motion prediction dataset. Conference on Robot Learning (CoRL),
2020.<br />
</li>
</ul></li>
<li><p>模型在100小时子集上训练，并在25小时子集上测试。</p></li>
<li><p>three state-of-the-art baselines：</p>
<ul>
<li>Naive Behavioral Cloning (BC)<br />
</li>
<li>Behavioral Cloning + Perturbations (BC-perturb)
<ul>
<li>M. Bansal, A. Krizhevsky, and A. Ogale. Chauffeurnet: Learning to
drive by imitating the best and synthesizing the worst. 12 2018.<br />
</li>
</ul></li>
<li>Multi-step Prediction (MS Prediction)
<ul>
<li>A. Venkatraman, M. Hebert, and J. Bagnell. Improving multi-step
prediction of learned time series models. In AAAI, 2015.</li>
</ul></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220803-3.png"
alt="性能对比" />
<figcaption aria-hidden="true">性能对比</figcaption>
</figure>
<blockquote>
<p>指标值越小越好，本文模型取得最好的表现以及最低的l1K指标（综合其它指标，每1000英里干预次数）</p>
</blockquote>
<ul>
<li>评价指标：
<ul>
<li><strong>L2</strong>: L2 distance to the underlying expert position
in the driving log in meters.</li>
<li><strong>Off-road events</strong>: we report a failure if the planner
deviates more than 2m laterally from the reference trajectory – this
captures events such as running off-road and into opposing traffic.</li>
<li><strong>Collisions</strong>: collisions of the SDV with any other
agent, broken down into front, side and rear collisions w.r.t. the
SDV.</li>
<li><strong>Comfort</strong>: we monitor the absolute value of
acceleration, and raise a failure should this exceed 3 m/s2.</li>
<li><strong>I1K</strong>: we accumulate safety-critical failures
(collisions and off-road events) into one key metric for ease of
comparison, namely Interventions per 1000 Miles (I1K)</li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220803-4.png"
alt="仿真结果" />
<figcaption aria-hidden="true">仿真结果</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>策略梯度的推导部分可以继续看看，本文有仿真和实车实验，但方法对比上，对其它算法进行了修改，因此并不完整。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | An Optimistic Perspective on Offline Reinforcement Learning (Google)</title>
    <url>/2022/08/12/2022-08-12-Autonomous%20Driving%20-%20An%20Optimistic%20Perspective%20on%20Offline%20Reinforcement%20Learning/</url>
    <content><![CDATA[<h2
id="an-optimistic-perspective-on-offline-reinforcement-learning-google">An
Optimistic Perspective on Offline Reinforcement Learning (Google)</h2>
<p>作者用online DQN在60款 Atari
2600游戏上获取数据样本，然后用这些样本(fixed
dataset)训练offline强化学习算法，一些offline的算法性能可以超过online的算法。本文提出的Random
Ensemble Mixture
(REM)算法在离线回放数据上的表现超过了强的基准算法。因此作者认为在离线样本足够多，多样化充分的情况下，使用鲁棒的RL算法可以获得高质量的策略。</p>
<p>代码： github.com/google-research/batch_rl</p>
<h3 id="introduction">1 Introduction</h3>
<p>离线强化学习的设定是不与真实环境的主动交互，而是通过对收集的离线回放数据中学习策略，在评估模型中生成新的交互数据。相应的情景在以下场景均会面临：</p>
<ul>
<li><strong>robotics</strong>
<ul>
<li>Cabi, S., Colmenarejo, S. G., Novikov, A., Konyushkova, K., Reed,
S., Jeong, R., Zołna, K., Aytar, Y., Budden, D., Vecerik, M., et al. A
framework for data-driven robotics. arXiv preprint arXiv:1909.12200,
2019.</li>
<li>Dasari, S., Ebert, F., Tian, S., Nair, S., Bucher, B., Schmeckpeper,
K., Singh, S., Levine, S., and Finn, C. Robonet: Large-scale multi-robot
learning. CoRL, 2019.</li>
</ul></li>
<li><strong>autonomous driving</strong>
<ul>
<li>Yu, F., Xian, W., Chen, Y., Liu, F., Liao, M., Madhavan, V., and
Darrell, T. Bdd100k: A diverse driving video database with scalable
annotation tooling. CVPR, 2018.</li>
</ul></li>
<li><strong>recommendation systems</strong>
<ul>
<li>Strehl, A. L., Langford, J., Li, L., and Kakade, S. Learning from
logged implicit exploration data. NeurIPS, 2010.</li>
<li>Bottou, L., Peters, J., Quiñonero-Candela, J., Charles, D. X.,
Chickering, D. M., Portugaly, E., Ray, D., Simard, P., and Snelson, E.
Counterfactual reasoning and learning systems: The example of
computational advertising. JMLR, 2013.</li>
</ul></li>
<li><strong>healthcare</strong>
<ul>
<li>Shortreed, S. M., Laber, E., Lizotte, D. J., Stroup, T. S., Pineau,
J., and Murphy, S. A. Informing sequential clinical decisionmaking
through reinforcement learning: an empirical study. Machine learning,
2011.</li>
</ul></li>
</ul>
<p>面对离线强化学习问题时，off-policy算法普遍表现不好，设计大的replay
buffer反而会损害off-policy算法的性能（由于算法的off-policyness）</p>
<ul>
<li>对比的方法包括：
<ul>
<li><strong>offline QR-DQN</strong>：Dabney, W., Rowland, M., Bellemare,
M. G., and Munos, R. Distributional reinforcement learning with quantile
regression. AAAI, 2018.</li>
<li><strong>DQN</strong>：（Nature）</li>
<li><strong>Random Ensemble
Mixture</strong>（REM，随机集成混合）：为本文提出方法</li>
<li><strong>online C51</strong>： 分布式DQN算法。Bellemare, M. G.,
Dabney, W., and Munos, R. A distributional perspective on reinforcement
learning. ICML, 2017.</li>
<li><strong>distributional QR-DQN (SOTA)</strong>：Dabney, W., Rowland,
M., Bellemare, M. G., and Munos, R. Distributional reinforcement
learning with quantile regression. AAAI, 2018</li>
</ul></li>
</ul>
<h3 id="off-policy-reinforcement-learning">2 Off-policy Reinforcement
Learning</h3>
<ul>
<li><p>DQN算法介绍</p>
<ul>
<li>Huber loss：介于MSE和MAE之间的，对数据异常值更不敏感的loss</li>
</ul>
<p><span class="math display">\[
l_{\lambda}(u)=
\begin{align}
\begin{cases}
\frac{1}{2}u^2,&amp;\mid u \mid \leq \lambda\\
\lambda(\mid u\mid-\frac{1}{2}\lambda),&amp; \text{otherwise}
\end{cases}
\end{align}
\]</span></p></li>
<li><p>baseline方法：分布式RL（Distributional RL）</p>
<ul>
<li>C51</li>
<li>QR-DQN</li>
</ul></li>
</ul>
<h3 id="offline-reinforcement-learning">3 Offline Reinforcement
Learning</h3>
<ul>
<li><p>offline的模式分离了模型对经验的利用、生成能力（exploit） vs
探索效率（explore）</p></li>
<li><p>offline RL面临的挑战是<strong>distribution
mismatch</strong>：错误匹配当前使用的策略和固定的离线数据集。例如，当采取了数据集中不存在的行为时，并不知道响应的奖励是多少。<br />
</p></li>
<li><p>本文尝试在不解决distribution
mismatch的基础上，训练高性能的agent</p></li>
</ul>
<h3 id="developing-robust-offline-rl-algorithms">4 Developing Robust
Offline RL Algorithms</h3>
<ul>
<li>采用集成（Ensemble）可以提高模型的泛化能力，本文使用了Ensemble
DQN和REM两个采取该思想的方法。</li>
</ul>
<h4 id="ensemble-dqn">4.1 Ensemble-DQN</h4>
<ul>
<li><p>该方法是对DQN算法的简单扩展，使用集成多个参数化的Q函数来近视Q值。</p>
<ul>
<li>Faußer, S. and Schwenker, F. Neural network ensembles in
reinforcement learning. Neural Processing Letters, 2015<br />
</li>
<li>Osband, I., Blundell, C., Pritzel, A., and Van Roy, B. Deep
exploration via bootstrapped DQN. NeurIPS, 2016.<br />
</li>
<li>Anschel, O., Baram, N., and Shimkin, N. Averaged-dqn: Variance
reduction and stabilization for deep reinforcement learning. ICML,
2017.</li>
</ul></li>
<li><p>每个参数化Q函数的优化目标是近似真实的Q值，参考下面这篇文章：</p>
<ul>
<li><strong>Bootstrapped-DQN</strong>：Osband, I., Blundell, C.,
Pritzel, A., and Van Roy, B. Deep exploration via bootstrapped DQN.
NeurIPS, 2016.</li>
</ul></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220812-2.png"
alt="损失函数" />
<figcaption aria-hidden="true">损失函数</figcaption>
</figure>
<p>其中，<span
class="math display">\[l_{\lambda}\]</span>是Huber损失。算法使用所有Q函数的均值作为输出。</p></li>
</ul>
<h4 id="random-ensemble-mixture-rem">4.2 Random Ensemble Mixture
(REM)</h4>
<ul>
<li>引入了dropout：
<ul>
<li>Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., and
Salakhutdinov, R. Dropout: a simple way to prevent neural networks from
overfitting. JMLR, 2014</li>
</ul></li>
<li>不同于Ensemble-DQN，REM构造一个包含多个Q函数近似器的凸组合（convex
combination），将多个Q 函数近似器作为1个近似器使用。使用(K −
1)-simplex计算混合的概率。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220812-3.png"
alt="模型结构" />
<figcaption aria-hidden="true">模型结构</figcaption>
</figure>
<ul>
<li><p>对于每个mini-batch，随机产生一个分类分布（categorical
distribution）<span
class="math display">\[\alpha\]</span>，它定义了一个逼近最优Q-函数的K个估计器的凸组合</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220817-3.png"
alt="REM的loss形式" />
<figcaption aria-hidden="true">REM的loss形式</figcaption>
</figure>
<p>其中，<span
class="math display">\[P_{\Delta}\]</span>表示标准的(K-1)-simplex的概率分布，<span
class="math display">\[\Delta^{K-1}=\{\alpha\in R^K:
\alpha_1+\alpha_2+...+\alpha_K=1,\alpha_k\geq0,k=1,...,K
\}\]</span></p></li>
<li><p>对于<span class="math display">\[P_{\Delta}\]</span>：先从Uniform
(0,1)分布中采样K个独立同分布的值，然后归一化它们获得有效的分类分布（<span
class="math display">\[a&#39;_k \sim U(0,1),a_k=a&#39;_k/\sum_k
a&#39;_i\]</span>）</p></li>
<li><p>对于Q值的求解，使用<span
class="math display">\[Q(s,a)=\frac{1}{K}\sum_k Q_{\theta}^k
(s,a)\]</span></p></li>
</ul>
<h3 id="offline-rl-on-atari-2600-games">5 Offline RL on Atari 2600
Games</h3>
<ul>
<li>将Nature DQN在60个Atari游戏上的行为数据用来构建DQN
replay数据集，每个游戏2亿帧（200 million frames）</li>
<li>每个游戏训练5个智能体，因此60个游戏一共有60个数据集</li>
<li>ofline RL算法性能对比：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220812-1.png"
alt="Offline RL on Atari 2600." />
<figcaption aria-hidden="true">Offline RL on Atari 2600.</figcaption>
</figure>
<ul>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220818-1.png"
alt="Offline QR-DQN vs. DQN (Nature)" />
<figcaption aria-hidden="true">Offline QR-DQN vs. DQN
(Nature)</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220818-2.png"
alt="Offline Agents on DQN Replay Dataset" />
<figcaption aria-hidden="true">Offline Agents on DQN Replay
Dataset</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220818-3.png"
alt="Asymptotic performance of offline agents" />
<figcaption aria-hidden="true">Asymptotic performance of offline
agents</figcaption>
</figure></li>
<li><p>文中提到offline连续强化学习方法，实验了offline DDPG，offline
TD3，offline BCQ等算法</p>
<ul>
<li><p>Fujimoto, S., Meger, D., and Precup, D. Off-policy deep
reinforcement learning without exploration. ICML, 2019b.</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220818-4.png"
alt="Asymptotic performance of offline agents" />
<figcaption aria-hidden="true">Asymptotic performance of offline
agents</figcaption>
</figure></li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
<p>总的来说，文章本身目的更倾向于提供一种乐观的横向对比，证明offline
RL在一些情况下可以获取SOTA的性能，甚至超过online RL。提供的几个offline
Q-learning变体和offline连续情况的RL算法可以再看看。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | SMARTS Scalable Multi-Agent Reinforcement Learning Training School for Autonomous Driving (Huawei)</title>
    <url>/2022/08/17/2022-08-17-Autonomous%20Driving%20-%20SMARTS%20Scalable%20Multi-Agent%20Reinforcement%20Learning%20Training%20School%20for%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2
id="smarts-scalable-multi-agent-reinforcement-learning-training-school-for-autonomous-driving">SMARTS:
Scalable Multi-Agent Reinforcement Learning Training School for
Autonomous Driving</h2>
<p>顾名思义，SMARTS是针对多智能体算法的自动驾驶强化学习仿真平台。</p>
<p>开源了基准任务和代码：https://github.com/huawei-noah/SMARTS</p>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>自动驾驶仿真的挑战之一是天气问题；绝大部分数据是在好天气（fair
weather）下采集的；当前的L4自动驾驶面对复杂的交互情况时。倾向于减速等待，而不是提前主动找办法通过；</p></li>
<li><p>Waymo的California2018的自动驾驶事故数据中, 57%是发生了追尾（rear
endings），29%是发生了侧面碰撞（sideswipes），并且事故都是由于他车造成的，因此说明过于保守的驾驶策略</p></li>
<li><p>waymo的汽车相比人类驾驶员经常过分刹车，导致乘客晕车</p></li>
<li><p>多智能体交互的分级标准：“multi-agent learning levels”, or
“M-levels“</p></li>
<li><p>double
merge道路场景（即&gt;--&lt;形道路）是多智能体交互的难点，车辆需考虑是继续走还是等待；在间隙不够大的时候是否需要变道；其他车开到了自车车道上，是否和它交换位置？等</p></li>
<li><p>平台设计目标：</p>
<ul>
<li><p>Bootstrapping Realistic Interaction</p>
<ul>
<li><ol type="1">
<li>physics,</li>
</ol></li>
<li><ol start="2" type="1">
<li>behavior of road users,</li>
</ol></li>
<li><ol start="3" type="1">
<li>road structure &amp; regula-tions,</li>
</ol></li>
<li><ol start="4" type="1">
<li>background traffic flow.</li>
</ol></li>
</ul></li>
<li><p>Heterogeneous Agent Computing（异构智能体计算）</p></li>
<li><p>Simulation Providers</p></li>
<li><p>Interaction Scenarios</p></li>
<li><p>Distributed Computing</p></li>
</ul></li>
<li><p>Key Features：</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220817-1.png"
alt="Levels of multi-agent learning in autonomous driving" />
<figcaption aria-hidden="true">Levels of multi-agent learning in
autonomous driving</figcaption>
</figure>
<ul>
<li>场景：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220817-2.png"
alt="Levels of multi-agent learning in autonomous driving" />
<figcaption aria-hidden="true">Levels of multi-agent learning in
autonomous driving</figcaption>
</figure>
<ul>
<li><p><strong>Observation.</strong> The observation is a stack of three
consecutive frames, which covers the dynamic objects and key events. For
each frame, it contains: 1) relative position of goal; 2) distance to
the center of lane; 3) speed; 4) steering; 5) a list of heading errors;
6) at most eight neighboring vehicles’ driving states (relative
distance, speed and position); 7) a bird’s-eye view gray-scale image
with the agent at the center.</p></li>
<li><p><strong>Action.</strong> The action used here is a
four-dimensional vector of discrete values, for longitudinal
control—keep lane and slow down—and lateral control—turn right and turn
left.</p></li>
<li><p><strong>Reward.</strong> The reward is a weighted sum of the
reward components shaped according to ego vehicle states, interactions
involving surrounding vehicles, and key traffic events. More details can
be found in our implementation code.</p></li>
</ul>
<h3 id="总结">总结</h3>
<p>华为推出的针对多智能体的自动驾驶仿真环境，设计相对灵活，支持场景和他车的编辑，以及Waymo的真实数据，后续可以继续看看</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | UMBRELLA: Uncertainty-Aware Model-Based Offline Reinforcement Learning Leveraging Planning</title>
    <url>/2022/08/04/2022-08-04-Autonomous%20Driving%20-%20UMBRELLA%20Uncertainty-Aware%20Model-Based%20Offline%20Reinforcement%20Learning%20Leveraging%20Planning/</url>
    <content><![CDATA[<h2
id="umbrella-uncertainty-aware-model-based-offline-reinforcement-learning-leveraging-planning">UMBRELLA:
Uncertainty-Aware Model-Based Offline Reinforcement Learning Leveraging
Planning</h2>
<ul>
<li>在学习过程中考虑了随机不确定性的影响，提高了模型的可迁移性和可解释性</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>目前的模型考虑到多智能体之间的交互和复杂行为，多采用工程设计的驾驶策略，但这样难以适用更复杂的任务。强化学习通过试错学习的方式避免了这些手工设计，但需要大量的试错机会。相比于模仿学习习得次优行为，强化学习可以提升不同类型数据的质量</p></li>
<li><p>主要贡献：</p>
<ul>
<li>提出了一个基于模型的离线规划算法UMBRELLA，在观测上考虑了认知和偶然的不确定性（epistemic
和 aleatoric）<br />
</li>
<li>引入了一个消融实验，优化最坏情况模型</li>
<li>实验中，在稠密车流（with dense
traffic）的城市和高速场景中，胜过了BC行为克隆方法和MBOP算法</li>
</ul></li>
</ul>
<h3 id="related-work">2 Related Work</h3>
<ul>
<li><p><strong>Model-based Offline Reinforcement Learning</strong>：</p>
<p>其主要的问题是the distributional
shift。MOReL和MBOP方法将动态模型的认知不确定性估计结合到奖励函数中，以惩罚未被行为分布覆盖的状态</p>
<ul>
<li>Sergey Levine, Aviral Kumar, George Tucker, and Justin Fu. Offline
reinforcement learning: Tutorial, review, and perspectives on open
problems. CoRR, 2020. arXiv:2005.01643.</li>
</ul>
<p>这些方法在多智能体环境中测试，没考虑到由行人和其它车辆行为造成的偶然不确定性（aleatoric
uncertainty）的影响。[Henaff et al.,
2019]通过由条件变分自动编码器（conditional variational
autoencoder，CVAE）表示的随机动力学模型解决了这个问题[Kingma and
Welling,
2014]。然而，他们的方法依赖于策略学习，这与基于模型的离线规划相比，可解释性和控制灵活性有所降低。</p>
<ul>
<li>Mikael Henaff, Alfredo Canziani, and Yann LeCun. Model-predictive
policy learning with uncertainty regularization for driving in dense
traffic. In International Conference on Learning Representations,
\2019.<br />
</li>
<li>Diederik P. Kingma and Max Welling. Auto-Encoding Variational Bayes.
In International Conference on Learning Representations, 2014.</li>
</ul></li>
<li><p><strong>Interaction-aware Motion Prediction and
Planning</strong>：</p>
<p>单纯通过规划安全的pass进行自动驾驶忽略了车辆之间包含规划和预测（planning
and prediction）的行为交互</p>
<p>引入博弈论的方法考虑了多智能体的动力学过程，但带来了计算上的开销。</p>
<p>一些基于学习的模型可以生成更多的场景，但是没有考虑认知不确定性</p>
<ul>
<li>Jerry Liu, Wenyuan Zeng, Raquel Urtasun, and Ersin Yumer. Deep
structured reactive planning. In IEEE International Conference on
Robotics and Automation, 2021.<br />
</li>
<li>Nicholas Rhinehart, Jeff He, Charles Packer, Matthew A. Wright,
Rowan McAllister, Joseph E. Gonzalez, and Sergey Levine. Contingencies
from observations: Tractable contingency planning with learned behavior
models. In IEEE International Conference on Robotics and Automation,
2021.</li>
</ul></li>
</ul>
<h3 id="the-umbrella-framework">3 The UMBRELLA Framework</h3>
<ul>
<li><p>UMBRELLA 是 MBOP 算法的扩展</p>
<ul>
<li>Arthur Argenson and Gabriel Dulac-Arnold. Model-based offline
planning. In International Conference on Learning Representations,
2021.</li>
</ul></li>
<li><p>问题形式化，用MDP的<span class="math display">\[(S; A; p; r;
\gamma)\]</span>
表示，在offline设定中，智能体不与环境直接交互，而是从数据集中学习策略<span
class="math display">\[\pi_d\]</span>。如果观测值<span
class="math display">\[O\]</span>并不是完全可得，那么问题就变化为（partially
observable MDP，POMDP），使用 <span
class="math display">\[M_{PO}=(S;A;O;p;r;\gamma)\]</span>，处理该问题的常用方法是使用nth-order
history
方法，可以近似得到状态估计，然后将其转变为MDP，用标准的RL方法处理。</p></li>
<li><p>UMBRELLA使用连续的潜在变量（continuous latent variable）<span
class="math display">\[z_t\in Z\]</span>
，并枚举自车所有的可能行为（行为采样通过学到的BC
policy）。预测N条长度界限为H的轨迹。还使用了一个return-weighted
trajectory optimizer，处理POMDP问题，用持续观测状态从<span
class="math display">\[o_{t-_c:t}\]</span>直到时间步t估计缺失的观测状态。（相关解释参考VAE算法）</p>
<ul>
<li><span
class="math display">\[z_t=\mu_{\phi}+\sigma_{\phi}*\epsilon\]</span></li>
<li><span
class="math display">\[(\mu_{\phi},\sigma_{\phi})=q_{\phi}(s_t,s_{t+1})\]</span></li>
<li><span class="math display">\[\epsilon \sim
\mathcal{N}(0,1)\]</span></li>
</ul></li>
<li><p>随机动力学模型：</p>
<ul>
<li><p>为了建模不同的未来可能情况，学习随机前向动力学模型<span
class="math display">\[f_{m,\theta}:S\times A\times Z \rightarrow S
\times \mathbb{R}\]</span></p></li>
<li><p>该模型采用CVAE架构，预测下一时刻的状态</p>
<ul>
<li>Diederik P. Kingma and Max Welling. Auto-Encoding Variational Bayes.
In International Conference on Learning Representations, 2014.</li>
</ul></li>
<li><p><span
class="math display">\[\hat{s}_{t+1}=f_m(s_t,a_t,z_t)_s\]</span></p></li>
<li><p><span
class="math display">\[\hat{r}_{t}=f_m(s_t,a_t,z_t)_r\]</span></p></li>
<li><p>其中潜在变量<span
class="math display">\[z_t\]</span>建模了不同的未来预测，并确保了输出对于输入是非确定性的。在训练过程中，该潜在变量从后验分布<span
class="math display">\[q_{\phi}(z\mid s_t,s_{t+1})\]</span>中采样，<span
class="math display">\[\phi\]</span>是参数。由于实际采样只能从先验分布中采，因此使用Kullback-Leibler
(KL) divergence度量后验分布和先验分布<span
class="math display">\[p(z)\]</span>并最小化距离。</p>
<ul>
<li>潜变量用于区分细分情况，精细化建模</li>
</ul></li>
<li><p>定义Evidence Lower BOund (ELBO)目标训练VAEs。</p>
<ul>
<li>Evidence Lower BOund： https://zhuanlan.zhihu.com/p/400322786</li>
</ul></li>
<li><p>损失函数为： <span class="math display">\[
L(\theta,\phi;s_t,s_{t+1},a_t,r_t)=\mid\mid s_{t+1} -
f_{m,\theta}(s_t,a_t,z_t)_s\mid\mid_2^2 + \mid\mid
r_t-f_{m,\theta}(s_t,a_t,z_t)_r\mid\mid^2_2 \\
\zeta D_{KL}(q_{\phi}(z_t\mid s_t,s_{t+1})\mid\mid p(z_t))
\]</span></p></li>
<li><p>BC policies <span class="math display">\[f_{b,\psi}:S\times
A^{n_c} \rightarrow A \]</span> ，<span
class="math display">\[f_b(s_t,a_{(t-n_c):(t-1)})\]</span>，该函数使用当前的状态和<span
class="math display">\[n_c\]</span>个之前的行为作为输入，输出行为<span
class="math display">\[a_t\]</span>。通过将之前的行为串联考虑，可以使得输出的行为更加平滑。</p></li>
<li><p>训练BC Policy使用最小化损失函数：</p>
<p><span
class="math display">\[L(\psi;s_t,a_{(t-n_c):(t-1)},a_t)=\mid\mid a_t -
f_{b,\psi}(s_t,a_{(t-n_c):(t-1)})\mid\mid^2_2\]</span></p></li>
<li><p>截断价值函数<span class="math display">\[f_{R,\xi}:S\times
A^{n_c}\rightarrow \mathbb{R}\]</span> 估计H个时间步后的期望回报<span
class="math display">\[\hat{R}_H\]</span></p></li>
</ul></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-3.png"
alt="Simplified network architecture of the stochastic forward dynamics model during training" />
<figcaption aria-hidden="true">Simplified network architecture of the
stochastic forward dynamics model during training</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-4.png"
alt="Behavior-cloned policy network architecture" />
<figcaption aria-hidden="true">Behavior-cloned policy network
architecture</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-5.png"
alt="Truncated value function network architecture" />
<figcaption aria-hidden="true">Truncated value function network
architecture</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-6.png"
alt="Signal flow of the stochastic forward dynamics model" />
<figcaption aria-hidden="true">Signal flow of the stochastic forward
dynamics model</figcaption>
</figure></li>
<li><p><strong>UMBRELLA-Planning</strong>：采用了MPC，在每一步规划未来H步的最优控制轨迹，然后只执行第一步行为，之后再次进行规划，并不断迭代。通过这样的迭代优化可以降低模型误差带来的影响。</p></li>
<li><p><strong>UMBRELLA Trajectory Optimizer</strong>：</p>
<p>最终的轨迹输出使用MPPI framework</p>
<ul>
<li>Grady Williams, Andrew Aldrich, and Evangelos A. Theodorou. Model
predictive path integral control: From theory to parallel computation.
Journal of Guidance, Control, and Dynamics, 40(2): 344–357, 2017.</li>
</ul></li>
<li><p>最后，模型通过re-weighting获得最优轨迹：</p></li>
</ul>
<p><span class="math display">\[
T^*_t = \frac{\sum_{n=1}^N e^{kR_n} A_{n,t+1}}{\sum_{n=1}^N e^{kR_n}}
\]</span></p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-1.png"
alt="UMBRELLA Planning" />
<figcaption aria-hidden="true">UMBRELLA Planning</figcaption>
</figure>
<ul>
<li><strong>Pessimistic Trajectory Optimizer</strong>：
面对认知的不确定性，UMBRELLA-P对最坏情况的结果进行优化，并采取悲观的行动</li>
</ul>
<h3 id="experimental-evaluation">4 Experimental Evaluation</h3>
<ul>
<li>环境：
<ul>
<li><strong>NGSIM</strong>：多智能体自动驾驶环境<br />
</li>
<li><strong>CARLA</strong>：城市多智能体自动驾驶场景</li>
</ul></li>
<li>基线方法：
<ul>
<li><strong>1-step IL</strong>：模仿专家行为的BC policy</li>
<li><strong>MBOP</strong>：当前最好的基于模型的离线RL方法
<ul>
<li>Arthur Argenson and Gabriel Dulac-Arnold. Model-based offline
planning. In International Conference on Learning Representations,
2021.<br />
</li>
</ul></li>
<li><strong>MPUR</strong>：最好的基于模型策略学习方法
<ul>
<li>Mikael Henaff, Alfredo Canziani, and Yann LeCun. Model-predictive
policy learning with uncertainty regularization for driving in dense
traffic. In International Conference on Learning Representations,
2019.<br />
</li>
</ul></li>
</ul></li>
<li>指标：
<ul>
<li>Success rate (SR)：The rate of collision-free
episodes，并要求在时间内到达目标位置</li>
<li>Mean distance (MD)：NGSIM中的纵向行驶距离</li>
<li>mean successful time (MST)<br />
</li>
<li>mean proximity reward <span
class="math display">\[\overline{r}_{prox}\]</span></li>
<li>mean lane reward <span
class="math display">\[\overline{r}_{lane}\]</span><br />
</li>
<li>mean final reward <span
class="math display">\[\overline{r}\]</span><br />
</li>
</ul></li>
<li>实验结果：</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220804-2.png"
alt="性能对比" />
<figcaption aria-hidden="true">性能对比</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>奖励函数误设计仍然是一个较大的问题，也是自动驾驶策略不像人的原因之一。</p>
<ul>
<li>W. Bradley Knox, Alessandro Allievi, Holger Banzhaf, Felix Schmitt,
and Peter Stone. Reward (mis)design for autonomous driving. 2021.
arxiv:2104.13906.</li>
</ul>
<p>模型考虑偶然不确定性：使用潜变量<span
class="math display">\[z\]</span>，枚举可能的轨迹</p>
<p>模型考虑认知不确定性：在reward中进行re-weighting和使用参数<span
class="math display">\[\beta\]</span></p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Goal-driven Self-Attentive Recurrent Networks for Trajectory Prediction</title>
    <url>/2022/08/18/2022-08-18-Autonomous%20Driving%20-%20%5BU%5D%20Goal-driven%20Self-Attentive%20Recurrent%20Networks%20for%20Trajectory%20Prediction/</url>
    <content><![CDATA[<h2
id="goal-driven-self-attentive-recurrent-networks-for-trajectory-prediction">Goal-driven
Self-Attentive Recurrent Networks for Trajectory Prediction</h2>
<p>提出了一种基于U-Net
architecture和注意力的循环网络框架，增加了语义信息来预测轨迹终点。提出的算法在公开数据集SDD,
inD, ETH/UCY上部分取得了SOTA的成绩，还简化了模型。</p>
<h3 id="introduction">1 Introduction</h3>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220817-2.png"
alt="Levels of multi-agent learning in autonomous driving" />
<figcaption aria-hidden="true">Levels of multi-agent learning in
autonomous driving</figcaption>
</figure>
<h3 id="总结">总结</h3>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | 关于加减速变道的思考</title>
    <url>/2022/08/23/2022-08-23-Autonomous%20Driving%20-%20%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%87%8F%E9%80%9F%E5%8F%98%E9%81%93%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="关于加减速变道的思考">关于加减速变道的思考</h2>
<h3 id="为什么要加减速变道"><strong>1. 为什么要加减速变道</strong></h3>
<p>车端的基于规则的变道算法已经实现了常规情况下的变道过程，但目前基于规则的算法都是匀速变道，对于需要加减速的较复杂的变道场景并不能自适应。因此需要一种既能应对常规简单变道情况，又能灵活适应车流密集、需要的较大幅度变速的变道算法模型。</p>
<h3 id="加减速变道并不是变道场景中的特例">2.
<strong>加减速变道并不是变道场景中的特例</strong></h3>
<p>在行车过程中，根据实际路况灵活地加减速度是一项融合于几乎所有驾驶场景中的基本驾驶技能，不应当被视为一种只在特定场景使用的技能。因此，不适合单独识别出一个类别用于概括加减速变道情况。</p>
<h3 id="车辆加减速的目的">3. 车辆加减速的目的</h3>
<p>在复杂路况中，理想便道路径上存在障碍物，或者路径上存在潜在不安全因素，具有一定风险。为避免碰撞、规避风险，使用加减速策略灵活调整路线，实现安全、合规的自动驾驶。</p>
<h3 id="如何使得agent获得变速变道能力">4.
如何使得Agent获得变速变道能力</h3>
<p>既然加减速并非独立的技能，因此只需在正常的驾驶规划训练中学习即可。由于加减速变道的目的在于规避碰撞等风险，因此需要考虑设置碰撞相关的损失函数。另一方面，模仿学习中的专家数据中如果他车、障碍物比较少，可以尝试生成一些障碍物，增加规划的避障难度。</p>
<p>因此，总的来说，有两个方案可以提高agent变速变道能力：<code>碰撞loss</code>
和 <code>障碍生成</code>。</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
        <tag>Thinking</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Off-Policy Deep Reinforcement Learning without Exploration</title>
    <url>/2022/08/20/2022-08-20-Autonomous%20Driving%20-%20Off-Policy%20Deep%20Reinforcement%20Learning%20without%20Exploration/</url>
    <content><![CDATA[<h2
id="off-policy-deep-reinforcement-learning-without-exploration-2019">Off-Policy
Deep Reinforcement Learning without Exploration (2019)</h2>
<p>类似DQN和DDPG的off-policy
RL算法在被禁止探索，并在没有数据策略分布修正的的情况下，难以取得好的效果。本文通过限制off-policy
agent的行为空间，使其行为类似与on-policy算法，最后提出了一个较为通用的，针对连续控制的deep
reinforcement learning algorithm。</p>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p><strong>batch reinforcement
learning</strong>：在一些数据收集面临costly, risky, or
time-consuming的情境时，智能体只能从固定的数据集中学习策略，并且其对数据质量的要求较低。</p></li>
<li><p>当数据集中的分布与当前算法策略的分布不同时，标准的off-policy
RL算法将会失败。</p></li>
<li><p>extrapolation
error：未见过的状态-动作对被错误地估计为具有不现实的价值的现象。</p></li>
<li><p>引入了batch-constrained reinforcement learning来克服extrapolation
error，最大化奖励的同时，最小化批量数据中状态-行为对和策略访问的状态行为对的误匹配。</p></li>
<li><p>本文提出算法：<strong>Batch-Constrained deep Q-learning</strong>
(BCQ)，利用一个与Q-network结合的条件状态生成模型，只生成过去见过的行为。在较弱的假设下，证明了这种批约束范式对于有限确定MDP的不完全数据集的无偏估计是必要的。</p></li>
<li><p>代码开源：https://github.com/sfujim/BCQ</p></li>
</ul>
<h3 id="background">2 Background</h3>
<ul>
<li>贝尔曼算子（Bellman operator）<span
class="math display">\[\Tau^{\pi}\]</span>： <span
class="math display">\[
\Tau^{\pi}Q(s,a)=\mathbb{E}_{s&#39;}[r+\gamma Q(s&#39;,\pi(s&#39;))]
\]</span></li>
</ul>
<h3 id="extrapolation-error-外推误差">3 Extrapolation Error
(外推误差)</h3>
<ul>
<li><p>Extrapolation error is an error in off-policy value learning
which is introduced by the mismatch between the dataset and true
state-action visitation of the current policy，或者<span
class="math display">\[(s,a)\]</span>在数据集中不存在</p></li>
<li><p>外推误差的成因：</p>
<ul>
<li><p><strong>数据缺省</strong>（Absent Data）：state-action pair (s,
a) is unavailable，因此在估计状态-行为价值Q的时候会引入误差。</p></li>
<li><p><strong>模型偏置</strong>（Model Bias）：when performing
off-policy Q-learning with a batch B，状态转移动力学的有偏估计为：</p>
<p><span class="math display">\[\Tau^{\pi}Q(s,a) \approx
\mathbb{E}_{s&#39;\sim B}[r+\gamma Q(s&#39;,\pi(s&#39;))]\]</span>
其中，状态转移依据buffer B，而不是真实的MDP。</p></li>
<li><p><strong>训练误匹配</strong>（Training
Mismatch）：当数据的分布和当前策略的分布不匹配，对action的估计会有误差</p></li>
</ul></li>
<li><p>As a result, learning a value estimate with off-policy data can
result in large amounts of extrapolation error if the policy selects
actions which are not similar to the data found in the batch.</p></li>
</ul>
<h4 id="extrapolation-error-in-deep-reinforcement-learning">3.1
Extrapolation Error in Deep Reinforcement Learning</h4>
<ul>
<li>本节使用SOTA Actor-Critic off-policy RL
算法DDPG，在与策略无关的数据集上学习，观察到性能迅速恶化。</li>
<li>These results suggest that off-policy deep reinforcement learning
algorithms are ineffective when learning truly off-policy.</li>
<li>训练环境：OpenAI gym’s Hopper-v1 environment</li>
<li>train an off-policy DDPG agent with no interaction with the
environment.</li>
<li>三个batch：
<ul>
<li><strong>Batch 1 (Final buffer)</strong>：1 million time
steps，行为加上（0,0.5）的高斯噪声，store all experienced
transitions。</li>
<li><strong>Batch 2 (Concurrent)</strong>：训练behavioral DDPG agents，1
million time
steps，行为加上（0,0.1）的高斯噪声，每一次转移经验都放入buffer，即该情况下每个behavioral和off-policy智能体使用同一的数据集训练。</li>
<li><strong>Batch 3 (Imitation)</strong>：使用一个完全训练的DDPG，收集1
million time steps数据作为专家数据。</li>
</ul></li>
<li>实验中的off-policy DDPG完全使用离线数据训练，behavioral
DDPG与环境交互正常训练。</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220820-1.png"
alt="Figure 1" />
<figcaption aria-hidden="true">Figure 1</figcaption>
</figure>
<p>Even in the concurrent experiment, where both agents are trained with
the same dataset, there is a large gap in performance in every single
trial.</p>
<ul>
<li>结论：
<ul>
<li>Batch 1中，即使有了充足的探索，agent依然难以具有稳定的value
estimation</li>
<li>Batch
2中，即使使用相同的数据训练，agent之间的差异巨大。说明policy初始化的不同足以引入外推误差。</li>
<li>Batch
3中，尽管有了专家数据，agent仍快速学习非专家策略，最终导致效果很差。</li>
</ul></li>
<li>外推误差提供了一个噪声源，可导致持续高估偏差。extrapolation error
provides a source of noise that can induce a persistent overestimation
bias (Thrun &amp; Schwartz, 1993; Van Hasselt et al., 2016; Fujimoto et
al.,2018).</li>
<li>在完全off-policy情况下，外推误差无法通过与环境交互获得新数据来消除</li>
</ul>
<h3 id="batch-constrained-reinforcement-learning">4 Batch-Constrained
Reinforcement Learning</h3>
<h3 id="总结">总结</h3>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | On the Choice of Data for Efficient Training and Validation of End-to-End Driving Models</title>
    <url>/2022/08/24/2022-08-24-Autonomous%20Driving%20-%20On%20the%20Choice%20of%20Data%20for%20Efficient%20Training%20and%20Validation%20of%20End-to-End%20Driving%20Models/</url>
    <content><![CDATA[<h2
id="on-the-choice-of-data-for-efficient-training-and-validation-of-end-to-end-driving-models">On
the Choice of Data for Efficient Training and Validation of End-to-End
Driving Models</h2>
<p>本文关注数据集的设计，包括针对自动驾驶端到端模型训练集和验证集。</p>
<p>主要工作：</p>
<ul>
<li>调研训练数据量如何影响最终驾驶表现，以及通过当前使用的生成训练数据的机制导致了哪些表现限制；</li>
<li>相关性分析表明，验证设计使得在验证期间测量的驾驶性能能够很好地推广到未知的测试环境；</li>
<li>调查了随机种子和不确定性的影响，给出了哪些报告的改进可以被认为是显著的；</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-1.png"
alt="本文关注数据而非模型" />
<figcaption aria-hidden="true">本文关注数据而非模型</figcaption>
</figure>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>Towards End-to-End Deep Driving:
高维场景信息输入，训练自动驾驶算法。</p></li>
<li><p>Training of Deep Driving
Models：端到端的自动驾驶模型的初衷是移除人工的中间表征。</p>
<ul>
<li>Felipe Codevilla, Matthias Müller, Antonio López, Vladlen Koltun,
and Alexey Dosovitskiy. <strong>End-to-end Driving via Conditional
Imitation Learning</strong>. In Proc. of ICRA, pages 4693–4700,
Brisbane, Australia, May 2018.</li>
<li>Kashyap Chitta, Aditya Prakash, and Andreas Geiger. NEAT:
<strong>Neural Attention Fields for End-to-End Autonomous
Driving</strong>. In Proc. of ICCV, pages 15793–15803, Virtual, Oct.
2021.</li>
<li>Keishi Ishihara, Anssi Kanervisto, Jun Miura, and Ville Hautamaki.
<strong>Multi-task Learning with Attention for End-to-end Autonomous
Driving</strong>. In Proc. of CVPR - Workshops, pages 2902–2911,
Virtual, June 2021</li>
</ul></li>
<li><p>Evaluation of Deep Driving
Models：可以开环和offline专家对比，也可以闭环仿真评估，但是评估是非确定性的，不会执行两次相同的评估。</p>
<ul>
<li>Jeffrey Hawke, Richard Shen, Corina Gurau, Siddharth Sharma, Daniele
Reda, Nikolay Nikolov, Przemysław Mazur, Sean Micklethwaite, Nicolas
Griffiths, Amar Shah, and Alex Kendall. <strong>Urban Driving with
Conditional Imitation Learning</strong>. In Proc. of ICRA, pages
251–257, Virtual, May 2020.</li>
</ul></li>
<li><p>Contributions:</p>
<ul>
<li>调研了end2end模型的训练集大小对性能的影响</li>
<li>分析了end2end模型的局限性</li>
<li>为驾驶模型的验证集设计提供了建议</li>
<li>调研了random seed和非确定性end2end模型</li>
</ul></li>
</ul>
<h3 id="related-work">2 Related Work</h3>
<h4 id="training-of-end-to-end-deep-driving-models">Training of
End-to-End Deep Driving Models</h4>
<ul>
<li><p>Reinforcement Learning</p>
<ul>
<li>Alex Kendall, Jeffrey Hawke, David Janz, Przemyslaw Mazur, Daniele
Reda, John-Mark Allen, Vinh-Dieu Lam, Alex Bewley, and Amar Shah.
<strong>Learning to Drive in a Day</strong>. In Proc. of ICRA, pages
8248–8254, Montréal, Canada, May 2019.</li>
<li>Marin Toromanoff, Emilie Wirbel, and Fabien Moutarde.
<strong>End-to-End Model-Free Reinforcement Learningfor Urban Driving
using Implicit Affordances</strong>. In Proc. of CVPR, pages 7153–7162,
Virtual, June 2020.</li>
<li>Dian Chen, Vladlen Koltun, and Philipp Krähenbühl. <strong>Learning
to Drive from a World on Rails</strong>. In Proc. of ICCV, pages
15590–15599, Virtual, Oct. 2021</li>
</ul></li>
<li><p>two-stage training:
先训练一个专家，然后将知识传递给自动驾驶智能体</p>
<ul>
<li>Dian Chen, Brady Zhou, Vladlen Koltun, and Philipp Krähenbühl.
<strong>Learning by Cheating</strong>. In Proc. of CoRL, pages 66–75,
Virtual, Nov. 2020.</li>
<li>Jiaming Zhang, Kailun Yang, Angela Constantinescu, Kunyu Peng, Karin
Müller, and Rainer Stiefelhagen. <strong>Trans4Trans: Efficient
Transformer for Transparent Object Segmentation To Help Visually
Impaired People Navigate in the Real World</strong>. In Proc. of ICCV -
Workshops, pages 1760–1770, Virtual, Oct. 2021</li>
</ul></li>
<li><p>inverse reinforcement learning</p>
<ul>
<li>Sascha Rosbach, Vinit James, Simon Großjohann, Silviu Homoceanu, and
Stefan Roth. <strong>Driving with Style: Inverse Reinforcement Learning
in General-PurposePlanning for Automated Driving</strong>. In Proc. of
IROS, pages 2658–2665, Macau, China, Nov. 2019.</li>
<li>Sahand Sharifzadeh, Ioannis Chiotellis, Rudolph Triebel, and Daniel
Cremers. <strong>Learning to Drive using Inverse Reinforcement Learning
and Deep Q-Networks</strong>. In Proc. of NIPS Workshops, pages 1–7,
Barcelona, Spain, Dec. 2016.</li>
</ul></li>
<li><p>LSTM</p>
<ul>
<li>Huazhe Xu, Yang Gao, Fisher Yu, and Trevor Darrell.
<strong>End-to-end Learning of Driving Models from Large-scale Video
Datasets</strong>. In Proc. of CVPR, pages 2174–2182, Honolulu, HI, USA,
July 2017.</li>
</ul></li>
<li><p>self-attention</p>
<ul>
<li>Keishi Ishihara, Anssi Kanervisto, Jun Miura, and Ville Hautamaki.
<strong>Multi-task Learning with Attention for End-to-end Autonomous
Driving</strong>. In Proc. of CVPR - Workshops, pages 2902–2911,
Virtual, June 2021.</li>
</ul></li>
<li><p>multi-task networks</p>
<ul>
<li>Dan Wang, Junjie Wen, Yuyong Wang, Xiangdong Huang, and Feng Pei.
<strong>End-to-End Self-Driving Using Deep Neural Networks with
Multi-auxiliary Tasks</strong>. Automotive Innovation, 2(2):127–136, May
2019.</li>
<li>Zhengyuan Yang, Yixuan Zhang, Jerry Yu, Junjie Cai, and Jiebo Luo.
<strong>End-to-end Multi-Modal Multi-Task Vehicle Controlfor
Self-Driving Cars with Visual Perceptions</strong>. In Proc. of ICPR,
pages 2289–2294, Beijing, China, Aug. 2018.</li>
</ul></li>
<li><p>The fusion of different input modalities</p>
<ul>
<li>Aditya Prakash, Kashyap Chitta, and Andreas Geiger.
<strong>Multi-Modal Fusion Transformer for End-to-End Autonomous
Driving</strong>. In Proc. of CVPR, pages 7077–7087, Virtual, June
2021.</li>
</ul></li>
<li><p>affordances</p>
<ul>
<li>Axel Sauer, Nikolay Savinov, and Andreas Geiger. <strong>Conditional
Affordance Learning for Driving in Urban Environments</strong>. In Proc.
of CoRL, pages 237–252, Zürich, Switzerland, Oct. 2018.</li>
</ul></li>
<li><p>waypoints 替代速度</p></li>
<li><p>Kashyap Chitta, Aditya Prakash, and Andreas Geiger. NEAT:
<strong>Neural Attention Fields for End-to-End Autonomous
Driving</strong>. In Proc. of ICCV, pages 15793–15803, Virtual, Oct.
2021.</p></li>
<li><p>probabilistic output</p>
<ul>
<li>Alexander Amini, Guy Rosman, Sertac Karaman, and Daniela Rus.
<strong>Variational End-to-End Navigation and Localization</strong>. In
Proc. of ICRA, pages 8958–8964, Montréal, QC, Canada, May 2019.</li>
</ul></li>
<li><p>sim-2-real</p>
<ul>
<li>Blażej Osiński, Adam Jakubowski, Pawel Ziecina, Piotr Miloś,
Christopher Galias, Silviu Homoceanu, and Henryk Michalewski.
<strong>Simulation-Based Reinforcement Learningfor Real-World Autonomous
Driving</strong>. In Proc. of ICRA, pages 6411–6418, Virtual, May
2020</li>
<li>GAN-based
<ul>
<li>Matthias Müller, Alexey Dosovitskiy, Bernard Ghanem, and Vladlen
Koltun. <strong>Driving Policy Transfer via Modularity and
Abstraction</strong>. In Proc. of CoRL, pages 1–15, Zürich, Switzerland,
Oct. 2018.</li>
<li>Luona Yang, Xiaodan Liang, Tairui Wang, and Eric Xing.
<strong>Real-to-Virtual Domain Unification for End-to-</strong>
<strong>EndAutonomous Driving</strong>. In Proc. of ECCV, pages 530–545,
Munich, Germany, Sept. 2018.</li>
</ul></li>
</ul></li>
<li><p>attention</p>
<ul>
<li>Bob Wei, Mengye Ren, Wenyuan Zeng, Ming Liang, Bin Yang, and Raquel
Urtasun. <strong>Perceive, Attend, and Drive: Learning Spatial Attention
for Safe Self-Driving</strong>. In Proc. of ICRA, pages 4875–4881,
Virtual, May 2021.</li>
<li>Luca Cultrera, Lorenzo Seidenari, Federico Becattini, Pietro Pala,
and Alberto Del Bimbo. <strong>Explaining Autonomous Driving by Learning
End-to-End Visual Attention</strong>. In Proc. of CVPR - Workshops,
pages 340–341, Virtual, June 2020.</li>
</ul></li>
<li><p>intermediate semantic representation</p>
<ul>
<li>Abbas Sadat, Sergio Casas, Mengye Ren, Xinyu Wu, Pranaab Dhawan, and
Raquel Urtasun. <strong>Perceive, Predict, and Plan: Safe Motion
Planning Through Interpretable Semantic Representations</strong>. In
Proc. of ECCV, pages 414–430, Virtual, Aug. 2020.</li>
</ul></li>
<li><p>on-line data selection techniques (视觉输入情况)</p>
<ul>
<li>Aditya Prakash, Aseem Behl, Eshed Ohn-Bar, Kashyap Chitta, and
Andreas Geiger. <strong>Exploring Data Aggregation in Policy Learning
for Vision-based Urban Autonomous Driving</strong>. In Proc. of CVPR,
pages 11763–11773, Virtual, June 2020.</li>
<li>Soumi Das, Harikrishna Patibandla, Suparna Bhattacharya, Kshounis
Bera, Niloy Ganguly, and Sourangshu Bhat tacharya. <strong>TMCOSS:
Thresholded Multi-Criteria Online Subset Selection forData-Efficient
Autonomous Driving</strong>. In Proc. of ICCV, pages 6341–6350, Virtual,
Oct. 2021. 2</li>
</ul></li>
</ul>
<h4 id="evaluation-of-end-to-end-deep-driving-models">Evaluation of
End-to-End Deep Driving Models</h4>
<ul>
<li>CARLA benchmarks CoRL2017 [20]
<ul>
<li>Alexey Dosovitskiy, German Ros, Felipe Codevilla, Antonio Lopez, and
Vladlen Koltun. CARLA: An Open Urban Driving Simulator. In Proc. of
CoRL, pages 1–16, Mountain View, CA, USA, Nov. 2017.</li>
</ul></li>
<li>NoCrash [17]
<ul>
<li>Felipe Codevilla, Eder Santana, Antonio M. López, and Adrien Gaidon.
Exploring the Limitations of Behavior Cloning for Autonomous Driving. In
Proc. of ICCV, pages 9329–9338, Seoul, Korea, Oct. 2019.</li>
</ul></li>
<li>Leaderboard [1]
<ul>
<li>CARLA Autonomous Driving Leaderboard. https://leaderboard.carla.org,
2020. 3, 5, 6</li>
</ul></li>
</ul>
<h3 id="end-to-end-deep-driving">3 End-to-End Deep Driving</h3>
<ul>
<li><p>文章设置了一个城市驾驶环境的点到点导航任务，预先定义一个稀疏点的路线为粗略的行驶路线，车辆需要避免违法和碰撞，从初始点驾驶到终止点（CARLA
Leaderboard标准配置）。</p></li>
<li><p>输入：一个RGB前置相机图像、一个LiDAR点云</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-2.png"
alt="End-to-end driving method" />
<figcaption aria-hidden="true">End-to-end driving method</figcaption>
</figure>
<ul>
<li><p>使用Conditional Imitation Learning</p></li>
<li><p>不同训练集设置情况：</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-3.png"
alt="Training set design" />
<figcaption aria-hidden="true">Training set design</figcaption>
</figure></li>
<li><p>验证集和测试集路线类型</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-4.png"
alt="Validation and test route types" />
<figcaption aria-hidden="true">Validation and test route
types</figcaption>
</figure>
<ul>
<li>不同验证集和测试集设置情况</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-5.png"
alt="Validation and test design" />
<figcaption aria-hidden="true">Validation and test design</figcaption>
</figure>
<ul>
<li><p>不同数据集上的驾驶得分<span
class="math display">\[DS\in[0,1]\]</span>，包括两部分分数：</p>
<ul>
<li><p>完成路线 route completion percentage <span
class="math display">\[RC\in [0, 1]\]</span>;</p></li>
<li><p>避免事故 infraction score <span class="math display">\[IS \in [0,
1]\]</span>;</p></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-6.png"
alt="Driving scores" />
<figcaption aria-hidden="true">Driving scores</figcaption>
</figure>
<ul>
<li>不同训练集和验证集的性能对比</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-7.png"
alt="Pearson correlation between the validation set performance and the test set performance (given by the driving score)" />
<figcaption aria-hidden="true">Pearson correlation between the
validation set performance and the test set performance (given by the
driving score)</figcaption>
</figure>
<ul>
<li>不同验证集下的测试集得分对比</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-8.png"
alt="Test driving scores given in (%) obtained on R^test, having used different validation sets" />
<figcaption aria-hidden="true">Test driving scores given in (%) obtained
on R^test, having used different validation sets</figcaption>
</figure>
<ul>
<li>不同训练集下的性能对比</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220824-9.png"
alt="Performance on different training sets" />
<figcaption aria-hidden="true">Performance on different training
sets</figcaption>
</figure>
<ul>
<li><p>结论（不完整）：</p>
<ul>
<li><p>随机性对仿真实验的影响大。随机种子、carla等。</p></li>
<li><p>训练集和验证集的选择对结果影响大。</p></li>
<li><p>数据量从100k-220k变化时，对大约160，000幅图像的训练似乎已经在性能和复杂性之间提供了良好的平衡，同时使用更大但计算上更昂贵的数据量可以获得最佳结果。（Training
on approximately 160, 000 images already seems to provide a good
trade-off between performance and complexity, while best results are
obtained using larger but computationally more expensive amounts of
data.）。</p></li>
<li><p>数据越少路线完成率越高，但事故率也高；数据越多，事故率显著降低，但路线完成率也降低；</p></li>
<li><p>专家数据是必要的。不完美的专家数据对结果影响大</p></li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
<p>总的来说比较玄学，对于视觉输入的模型而言，数据量偏小（100k-220k），给出的经验参数不具有普遍意义。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Python报错libGL error: MESA-LOADER: failed to open iris</title>
    <url>/2022/09/05/2022-09-05%20-%20Python%E6%8A%A5%E9%94%99libGL%20error%20MESA-LOADER%20failed%20to%20open%20iris/</url>
    <content><![CDATA[<h2
id="python报错libgl-error-mesa-loader-failed-to-open-iris">Python报错libGL
error: MESA-LOADER: failed to open iris</h2>
<h3 id="问题背景">1 问题背景</h3>
<p>执行gym-like环境代码时，渲染动画输出时报错无法找到系统显卡驱动（笔记本，核显，Ubuntu），报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libGL error: MESA-LOADER: failed to open iris: /usr/lib/dri/iris_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: iris</span><br><span class="line">libGL error: MESA-LOADER: failed to open iris: /usr/lib/dri/iris_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: iris</span><br><span class="line">libGL error: MESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: swrast</span><br></pre></td></tr></table></figure>
<p>然而，根据提示，在<code>/usr/lib/x86_64-linux-gnu/dri</code>路径下是可以找<code>iris_dri.so</code>驱动的。</p>
<h3 id="处理办法">2 处理办法</h3>
<p><a
href="https://zhuanlan.zhihu.com/p/538877347">这篇博客</a>提供了一个有效解决方法：</p>
<p>Step 1: 建立一个 /usr/lib/dri/iris_dri.so 的软连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:/usr/lib$ sudo mkdir dri</span><br><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:/usr/lib$ cd dri </span><br><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:/usr/lib/dri$ sudo ln -s /usr/lib/x86_64-linux-gnu/dri/iris_dri.so iris_dri.so</span><br></pre></td></tr></table></figure>
<p>Step 2: 再次python执行代码，报错变为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libGL error: MESA-LOADER: failed to open iris: /home/pcon/anaconda3/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.29&#x27; not found (required by /usr/lib/dri/iris_dri.so) (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: iris</span><br><span class="line">libGL error: MESA-LOADER: failed to open iris: /home/pcon/anaconda3/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.29&#x27; not found (required by /usr/lib/dri/iris_dri.so) (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: iris</span><br><span class="line">libGL error: MESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$$&#123;ORIGIN&#125;/dri:/usr/lib/dri, suffix _dri)</span><br><span class="line">libGL error: failed to load driver: swrast</span><br></pre></td></tr></table></figure>
<p>这是由于 conda 里的 libstdcxx-ng 版本不够高造成的。</p>
<p>Step 3：执行以下命令查看GLIBCXX版本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:~/anaconda3$ strings /home/pcon/anaconda3//lib/libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure>
<p>Step 4：升级 conda 里的 libstdcxx-ng (根据<a
href="https://zhuanlan.zhihu.com/p/538877347">博客</a>)
。（截至2022.09该版本号有效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:~/anaconda3$ conda install libstdcxx-ng=12.1.0</span><br></pre></td></tr></table></figure>
<p>再次查看版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(base) pcon@pcon-ThinkPad-L14-Gen-2:~/anaconda3$ strings /home/pcon/anaconda3//lib/libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure>
<p>执行Python代码，成功运行！</p>
<p>ref</p>
<p>https://zhuanlan.zhihu.com/p/538877347</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | MP3 A Unified Model to Map Perceive Predict and Plan (Uber ATG 2021)</title>
    <url>/2022/08/25/2022-08-25-Autonomous%20Driving%20-%20MP3%20A%20Unified%20Model%20to%20Map%20Perceive%20Predict%20and%20Plan/</url>
    <content><![CDATA[<h2
id="mp3-a-unified-model-to-map-perceive-predict-and-plan-uber-atg-2021">MP3:
A Unified Model to Map, Perceive, Predict and Plan (Uber ATG, 2021)</h2>
<ul>
<li>HD map具有的语义和几何信息使其成为自动驾驶系统的关键部件。但HD
map的成本很高，难扩展，尤其是厘米级精度（centimeter-level
accuracy）的情况下。因此能摆脱HD
Map（地图加载失败、地图老旧等）的算法值得研究。本文提出了一种<strong>end2end</strong>的<strong>不依赖地图</strong>的自动驾驶算法——MP3。</li>
<li>输入为：
<ul>
<li><strong>raw sensor data</strong></li>
<li><strong>high-level command</strong> (e.g., turn left at the
intersection)</li>
</ul></li>
<li>本文的定位为：mapless technology 的自动驾驶</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>没有HD map的劣势：</p>
<ul>
<li><p>感知不能再依赖“人行道上的行人”、“道路上的车辆”这样的先验信息；</p></li>
<li><p>进行规划的空间变大了</p></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220826-1.png"
alt="有地图和无地图对比" />
<figcaption aria-hidden="true">有地图和无地图对比</figcaption>
</figure>
<ul>
<li>车辆需要把到达抽象成为路口直行（going straight at an
intersection）、左转（turning left）和右转（turning
right）等高阶的行为指令。</li>
<li>大多数的无地图方法模仿专家的驾驶行为（朝向角、加速度），但是没有提供可解释的中间表征（intermediate
interpretable representations），而这可以帮助解释车辆的决策行为
<ul>
<li>End to end learning for self-driving cars. arXiv preprint
arXiv:1604.07316, 2016.</li>
<li>End-to-end driving via conditional imitation learning. In ICRA,
2018.</li>
<li>Urban driving with conditional imitation learning. arXiv preprint
arXiv:1912.00177, 2019.</li>
<li>Lift, splat, shoot: Encoding images from arbitrary camera rigs by
implicitly unprojecting to 3d. In Proceedings of the European Conference
on Computer Vision, 2020.</li>
</ul></li>
<li>这些方法没有结构信息和先验知识，容易受到分布漂移（distributional
shift）的影响
<ul>
<li>A reduction of imitation learning and structured prediction to
no-regret online learning. In Proceedings of the fourteenth
international conference on artificial intelligence and statistics,
pages 627–635, 2011.</li>
</ul></li>
<li>一些使用在线地图的方法（获得道路边界、中心线），要么过度简单（假设了车道是平行的，但这只在高速场景适用），要么难以将静态环境的不确定性纳入运动规划，而运动规划对于降低风险至关重要。[2,
16, 18, 21, 37],
<ul>
<li>Deep multi-sensor lane detection. In IROS, pages 3102–3109. IEEE,
2018.</li>
<li>3d-lanenet: End-to-end 3d multiple lane detection. In Proceedings of
the IEEE International Conference on Computer Vision, pages 2921–2930,
2019.</li>
<li>Gen-lanenet: A generalized and scalable approach for 3d lane
detection. arXiv, pages arXiv–2003, 2020.</li>
<li>Hierarchical recurrent attention networks for structured online
maps. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 3417–3426, 2018.</li>
</ul></li>
</ul>
<h3 id="related-work">2 Related Work</h3>
<h4 id="online-mapping">2.1 Online Mapping:</h4>
<ul>
<li>特点：
<ul>
<li>satellite imagery (卫星图像)</li>
<li>gather dense information (采集车多次经过同一地方)</li>
<li>human-in-the-loop</li>
</ul></li>
<li>predicting map elements online:
<ul>
<li>3d-lanenet: End-to-end 3d multiple lane detection. In Proceedings of
the IEEE International Conference on Computer Vision, pages 2921–2930,
2019.</li>
<li>Gen-lanenet: A generalized and scalable approach for 3d lane
detection. arXiv, pages arXiv–2003, 2020.</li>
</ul></li>
</ul>
<h4 id="perception-and-prediction">2.2 Perception and Prediction</h4>
<ul>
<li><strong>生成轨迹集合</strong> generate a fixed set of trajectories
[6, 8–10, 26, 28, 30, 36, 56]</li>
<li><strong>画出样本特征分布</strong> draw samples to characterize the
distribution
<ul>
<li>Implicit latent variable model for scene-consistent motion
forecasting. arXiv preprint arXiv:2007.12036, 2020.</li>
<li>R2p2: A reparameterized pushforward policy for diverse, precise
generative path forecasting. In ECCV, 2018.</li>
<li>Multiple futures prediction. In Advances in Neural Information
Processing Systems, pages 15398–15408, 2019.</li>
</ul></li>
<li><strong>预测时间占用图</strong> predict temporal occupancy maps
<ul>
<li>Discrete residual flow for probabilistic pedestrian behavior
prediction. arXiv preprint arXiv:1910.08041, 2019.</li>
<li>The garden of forking paths: Towards multi-future trajectory
prediction. In Proceedings of the IEEE/CVF Conference on Computer Vision
and Pattern Recognition, pages 10508–10518, 2020.</li>
<li>Scene compliant trajectory forecast with agent-centric
spatio-temporal grids. IEEE RA-L, 5(2):2816–2823, 2020.</li>
</ul></li>
<li>这些方法由于涉及了非最大抑制（non-maximum
suppression）和可信度阈值（confidence
thresholding），可能出现不安全的情况</li>
<li>occupancy grids:
<ul>
<li>Motionnet: Joint perception and motion prediction for autonomous
driving based on bird’s eye view maps. In Proceedings of the IEEE/CVF
Conference on Computer Vision and Pattern Recognition, pages
11385–11395, 2020.</li>
<li>Learning occupancy grid maps with forward sensor models. Autonomous
robots, 15(2):111–127, 2003.</li>
<li><strong>Perceive, predict, and plan: Safe motion planning through
interpretable semantic representations.</strong> In Proceedings of the
European Conference on Computer Vision (ECCV), 2020.</li>
</ul></li>
</ul>
<h4 id="motion-planning">2.3 Motion Planning</h4>
<ul>
<li>从感知直接输出控制信号 （Driving policy transfer via modularity and
abstraction. arXiv preprint arXiv:1804.09364,
2018.）会面临稳定性和鲁棒性的问题（stability and robustness
issues）（Exploring the limitations of behavior cloning for autonomous
driving. In Proceedings of the IEEE International Conference on Computer
Vision, pages 9329–9338, 2019.）</li>
</ul>
<h3 id="interpretable-mapless-driving">3 Interpretable Mapless
Driving</h3>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220826-2.png"
alt="MP3 predicts probabilistic scene representations that are leveraged in motion planning as interpretable cost functions" />
<figcaption aria-hidden="true">MP3 predicts probabilistic scene
representations that are leveraged in motion planning as interpretable
cost functions</figcaption>
</figure>
<h4 id="extracting-geometric-and-semantic-features">3.1 Extracting
Geometric and Semantic Features</h4>
<ul>
<li>The result is a 3D tensor of size <span
class="math display">\[(\frac{H}{a},\frac{W}{a},\frac{Z}{a}\cdot T_p
)\]</span>,which is the input to our backbone network.</li>
<li>This network combines ideas from [9, 53] to extract geometric,
semantic and motion information about the scene.</li>
</ul>
<h4 id="interpretable-scene-representations">3.2 Interpretable Scene
Representations</h4>
<ul>
<li>道路先验信息和一些可解释的知识，使用 <code>online map</code>
表示</li>
<li>动态目标的位置、速度信息，使用 <code>dynamic occupancy field</code>
表示（the dynamic objects position and velocity into the future,
captured in our dynamic occupancy field）</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220826-3.png"
alt="Interpretable Scene representations" />
<figcaption aria-hidden="true">Interpretable Scene
representations</figcaption>
</figure>
<ul>
<li>具体而言，两种表征信息包括：</li>
</ul>
<p><strong>Online map representation:</strong></p>
<ul>
<li>Drivable area：以道路边缘为界的可行驶区域；</li>
<li>Reachable
lanes：可用车道是SDV在不违反任何交通规则的情况下可以到达的运动路径的子集。规划轨迹时，我们希望SDV靠近这些可到达的车道，并按照它们的方向行驶。因此，对于地平面中的每个像素，我们预测到最近的可到达车道中心线的无符号距离，在10米处截断，以及最近的可到达车道中心线分段的角度。</li>
<li>Intersection：被交通信号等或者交通标志控制的路段，需要根据信号灯或者标志按交通规定行驶；</li>
</ul>
<p><strong>Dynamic occupancy field:</strong></p>
<p>现有的行为预测算法包括不安全的离散决策unsafe discrete decisions such
as confidence thresholding and non-maximum suppression (NMS)</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220826-4.png"
alt="The motion field warps the occupancy over time" />
<figcaption aria-hidden="true">The motion field warps the occupancy over
time</figcaption>
</figure>
<ul>
<li>Initial Occupancy：一个BEV网格单元</li>
<li>Temporal Motion Field：a 2D BEV velocity vector (in m/s).</li>
<li><code>Note</code>：车辆、行人和自行车被视为单独的类别，每个类别都有自己的占用流。</li>
</ul>
<p><strong>Probabilistic Model:</strong></p>
<p>online Map 分为以下几个通道：</p>
<ul>
<li><p>可到达区域<span class="math display">\[M^A_i\]</span></p></li>
<li><p>路口<span class="math display">\[M^I_i\]</span></p></li>
<li><p>到最近车道线的距离。the direction of the closest lane centerline
in the reachable lanes <span
class="math display">\[M^{\theta}_i\]</span> as a Von Mises distribution
since it has support between <span
class="math display">\[[\pi,\pi]\]</span>.</p></li>
<li><p>可到达车道中线的截断距离变换为拉普拉斯算子。We model the
truncated distance transform to the reachable lanes centerline <span
class="math display">\[M^D_i\]</span>​ as a Laplacian, which we
empirically found to yield more accurate results than a
Gaussian</p></li>
</ul>
<p>建模动态物体的occupancy <span
class="math display">\[O^c\]</span>,为伯努利随机分布<span
class="math display">\[O^c_{t,i}\]</span>，<span
class="math display">\[c\in
\{行人，车辆，自行车\}\]</span>（考虑这些物体未来行为的多模态（直走或左转）和不确定性），用<span
class="math display">\[K_{t,i}\]</span>建模基于K个BEV运动向量<span
class="math display">\[V^c_{t,i,k}\]</span>的行为分类分布</p>
<p>the probability of future occupancy under our probabilistic model, we
first define the probability of occupancy flowing from location <span
class="math display">\[i_1\]</span> to location <span
class="math display">\[i_2\]</span> between two consecutive time steps t
and t + 1 as follows:</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220829-1.png"
alt="the probability of occupancy flowing" />
<figcaption aria-hidden="true">the probability of occupancy
flowing</figcaption>
</figure>
<h4 id="motion-planning-1">3.3 Motion Planning</h4>
<p>设计了一个基于采样的轨迹规划器，其根据运动学灵活的生成多种轨迹，然后使用一个learned
scoring function选择轨迹。</p>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220830-1.png"
alt="规划器的轨迹选择方式" />
<figcaption aria-hidden="true">规划器的轨迹选择方式</figcaption>
</figure>
<h5 id="trajectory-sampling">3.3.1 Trajectory Sampling</h5>
<p>Search-based optimal motion planning for automated driving. In IROS,
2018</p>
<ul>
<li>根据<span
class="math display">\[(v_x,a_x,k_x)\]</span>在专家轨迹数据集中检索专家轨迹，<span
class="math display">\[x\]</span>表示当前自车状态，检索出的轨迹有不同的初始速度和朝向。因此使用加速度和转向角来描述轨迹<span
class="math display">\[(a,\dot k)_t,t=0,...,T\]</span>，输入到a bicycle
model [38]生成具有连续速度和转向角的轨迹。
<ul>
<li>[38]. The kinematic bicycle model: A consistent model for planning
feasible trajectories for autonomous vehicles? In 2017 IEEE Intelligent
Vehicles Symposium (IV), pages 812–818. IEEE, 2017.</li>
</ul></li>
<li>文献[37]提供了一个忽略自车初始状态的简化的轨迹生成模型。
<ul>
<li>[37]. Lift, splat, shoot: Encoding images from arbitrary camera rigs
by implicitly unprojecting to 3d. In Proceedings of the European
Conference on Computer Vision, 2020.</li>
</ul></li>
</ul>
<h5 id="route-prediction">3.3.2 Route Prediction</h5>
<ul>
<li>由于无地图驾驶没有车道线follow，本文假设遵循command来行驶，指令<span
class="math display">\[c = (a, d)\]</span>, where <span
class="math display">\[a \in \{keep lane, turn left, turn
right\}\]</span> is a discrete high-level action, and <span
class="math display">\[d\]</span> an approximate longitudinal distance
to the
action（行为的纵向距离）（d经过”rasterize”处理），输入给CoordConv[29]
<ul>
<li>An intriguing failing of convolutional neural networks and the
coordconv solution. In Advances in Neural Information Processing
Systems, pages 9605–9616, 2018.</li>
</ul></li>
</ul>
<h5 id="trajectory-scoring">3.3.2 Trajectory Scoring</h5>
<ul>
<li>Routing and Driving on Roads:
该评分函数鼓励车辆行驶在概率图R中概率高的区域</li>
</ul>
<p><span class="math display">\[
f_r(\tau,R)=-m(\tau)\min_{i \in m(\tau)} R_i
\]</span></p>
<p>其中<span
class="math display">\[m(\tau)\]</span>是BEV图中和自车轨迹<span
class="math display">\[\tau\]</span>重合的格子单元（grid-cells that
overlap with SDV polygon in trajectory <span
class="math display">\[\tau\]</span>)</p>
<p>离开车道损失： <span class="math display">\[
f_a(x,M)=\max_{i \in m(x)}[1-P(M_i^A)]
\]</span></p>
<ul>
<li><p>Safety</p></li>
<li><p>Comfort</p>
<p>惩罚jerk和加速度</p></li>
</ul>
<h4 id="learning">3.4. Learning</h4>
<p>两阶段的训练。我们分两个阶段优化我们的驾驶模型。我们首先训练<strong>online
map</strong>、<strong>dynamic occupancy
field</strong>和<strong>routing</strong>。一旦这些被收敛，在第二阶段，我们保持这些部分冻结，并为得分函数的线性组合训练规划器权重。我们发现这种两阶段的培训比端到端的培训更稳定。（We
optimize our driving model in two stages. We first train the online map,
dynamic occupancy field, and routing. Once these are converged, in a
second stage, we keep these parts frozen and train the planner weights
for the linear combination of scoring functions. We found this 2-stage
training empirically more stable than training end-to-end.）</p>
<h3 id="experimental-evaluation">4. Experimental Evaluation</h3>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-1.png"
alt="性能指标" />
<figcaption aria-hidden="true">性能指标</figcaption>
</figure>
<ul>
<li>Imitation Learning (IL), where the future positions of the SDV are
predicted directly from the scene context features, and is trained using
L2 loss.</li>
<li>Conditional Imitation Learning (CIL) [11], which is similar to IL
but the trajectory is conditioned on the driving command.
<ul>
<li>End-to-end driving via conditional imitation learning. In ICRA,
2018.</li>
</ul></li>
<li>Neural Motion Planner (NMP) [55], where a planning cost-volume as
well as detection and prediction are predicted in a multi-task fashion
from the scene context features, and Trajectory Classification (TC)
[37], where a cost-volume is predicted similar to NMP, but the
trajectory cost is used to create a probability distribution over the
trajectories and is trained by optimizing for the likelihood of the
expert trajectory.
<ul>
<li>Lift, splat, shoot: Encoding images from arbitrary camera rigs by
implicitly unprojecting to 3d. In Proceedings of the European Conference
on Computer Vision, 2020.</li>
<li>End-to-end interpretable neural motion planner. In CVPR, 2019.</li>
</ul></li>
<li>Finally, we extend NMP to consider the high-level command by
learning a separate costing network for each discrete action
(CNMP).</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-2.png"
alt="Backbone Network" />
<figcaption aria-hidden="true">Backbone Network</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-3.png"
alt="Mapping Network" />
<figcaption aria-hidden="true">Mapping Network</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-4.png"
alt="Perception and Prediction Network" />
<figcaption aria-hidden="true">Perception and Prediction
Network</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-5.png"
alt="Routing Network" />
<figcaption aria-hidden="true">Routing Network</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220901-6.png"
alt="Sets of trajectories retrieved from the expert demonstrations." />
<figcaption aria-hidden="true">Sets of trajectories retrieved from the
expert demonstrations.</figcaption>
</figure>
<p>后面还有大量实验情景的展示图。</p>
<h3 id="总结">总结</h3>
<p>比较有想法的一个工作，做得比较细致，但是介绍相对粗略，可以仔细研究。</p>
]]></content>
      <tags>
        <tag>Imitation Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | BEVFormer: Learning Bird’s-Eye-View Representation from Multi-Camera Images via Spatiotemporal Transformers</title>
    <url>/2022/09/20/2022-09-20-Autonomous%20Driving%20-%20BEVFormer%20Learning%20Bird%E2%80%99s-Eye-View%20Representation%20from%20Multi-Camera%20Images%20via%20Spatiotemporal%20Transformers/</url>
    <content><![CDATA[<h2 id="bevformer-learning-birds-eye-view-representation-from-multi-camera-images-via-spatiotemporal-transformers">BEVFormer:
Learning Bird’s-Eye-View Representation from Multi-Camera Images via
Spatiotemporal Transformers</h2>
<p>多相机3D检测的工作。提出了spatial
cross-attention整合空间信息；提出了temporal
self-attention整合历史BEV信息。</p>
<p>代码开源：https://github.com/zhiqi-li/BEVFormer</p>
<h3 id="related-work">Related Work</h3>
<p><strong>deformable attention mechanism:</strong></p>
<figure>
<img src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220920-1.png" alt="deformable attention mechanism">
<figcaption aria-hidden="true">deformable attention
mechanism</figcaption>
</figure>
<p><strong>Camera-based 3D Perception:</strong></p>
<p>过去的3D object detection 任务和map segmentation
任务是相互独立的。</p>
<ol type="1">
<li><p>predict the 3D bounding boxes based on 2D bounding
boxes.</p></li>
<li><p>Another solution is to transform image features into BEV features
and predict 3D bounding boxes from the top-down view.</p></li>
</ol>
<p>从多相机特征生成BEV图。A straightforward method is converting
perspective view into the BEV through Inverse Perspective Mapping (IPM)
[35, 5]</p>
<h3 id="bevformer">BEVFormer</h3>
<ul>
<li><p>几个特殊的设计：</p>
<ul>
<li><p><strong>BEV queries;</strong></p>
<p>BEV queries are grid-shaped learnable parameters, which is designed
to query features in BEV space from multi-camera views via attention
mechanisms.</p></li>
<li><p><strong>spatial cross-attention</strong> and <strong>temporal
self-attention</strong>;</p>
<p>Spatial cross-attention and temporal self-attention are attention
layers working with BEV queries, which are used to lookup and aggregate
spatial features from multi-camera images as well as temporal features
from history BEV, according to the BEV query.</p></li>
</ul></li>
</ul>
<h4 id="bev-queries">BEV Queries</h4>
<p>We predefine a group of grid-shaped learnable parameters <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.263ex" height="2.501ex" role="img" focusable="false" viewBox="0 -911.5 5862.2 1105.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(1068.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2013.6,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1666,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mo" transform="translate(2714,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(3492,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></g></g></svg></mjx-container></span> as the
queries of BEVFormer, where H, W are the spatial shape of the BEV plane.
To be specific, the query <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="10.713ex" height="2.712ex" role="img" focusable="false" viewBox="0 -911.5 4735.3 1198.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(824,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(1507.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2452.2,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></g></g></svg></mjx-container></span> located at <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.324ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4121.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(780.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1836.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2225.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2797.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3242.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3732.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> of <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container></span> is responsible
for the corresponding grid cell region in the BEV plane.</p>
<h4 id="spatial-cross-attention">Spatial Cross-Attention</h4>
<p>未来降低高昂的computational cost of vanilla multi-head attention
[42]，本文采用了deformable attention
[56]模型，这是一个资源高效的注意力层，其中每个BEV查询<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="2.782ex" height="2.08ex" role="img" focusable="false" viewBox="0 -725.5 1229.7 919.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(824,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container></span>只与它在摄像机视图上感兴趣的区域交互。</p>
<p>spatial cross-attention (SCA)</p>
<figure>
<img src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220922-1.png" alt="spatial cross-attention">
<figcaption aria-hidden="true">spatial cross-attention</figcaption>
</figure>
<h4 id="temporal-self-attention">Temporal Self-Attention</h4>
<p>temporal self-attention (TSA) layer</p>
<figure>
<img src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20220922-2.png" alt="temporal self-attention">
<figcaption aria-hidden="true">temporal self-attention</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>后续没仔细看了，整体框架感觉各个模块衔接比较自然流畅，这也是目前最好的自动驾驶视觉感知方案。</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | DL-IAPS and PJSO: A Path/Speed Decoupled Trajectory Optimization and its Application in Autonomous Driving (Baidu, 2020)</title>
    <url>/2022/09/28/2022-09-28-Autonomous%20Driving%20-%20DL-IAPS%20and%20PJSO%20A%20Path%20Speed%20Decoupled%20Trajectory%20Optimization%20and%20its%20Application%20in%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2 id="dl-iaps-and-pjso-a-pathspeed-decoupled-trajectory-optimization-and-its-application-in-autonomous-driving">DL-IAPS
and PJSO: A Path/Speed Decoupled Trajectory Optimization and its
Application in Autonomous Driving</h2>
<p>本文是以下三者的结合：</p>
<ul>
<li>collision-free trajectory planning problem</li>
<li>Dual-Loop Iterative Anchoring Path Smoothing (DL-IAPS)</li>
<li>Piece-wise Jerk Speed Optimization (PJSO)</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li><p>一些环境不支持车辆倒车，但在parking上倒车是必要的，因此需要自由空间轨迹规划算法
Free space trajectory planning algorithm</p></li>
<li><p>当前主流的自由空间轨迹规划方法有两类：</p>
<ul>
<li><strong>路径-速度联合优化方法</strong>（path/speed coupled method）:
Nonlinear Model Predictive Control (NMPC), Mixed Interger Programming
(MIP), Hierarchical Optimization-Based Collision Avoidance
(H-OBCA)。这些方法可以优雅地将车辆动力学和避障结合成一个单一的优化问题，但具有高计算复杂度和低鲁棒性；</li>
<li><strong>路径-速度解耦优化方法</strong>（path/speed decoupled
method）:
先计算平滑路径后计算轨迹轮廓。该方式具有更高的计算效率，但可能不具有控制可行性，在极端情况下无法保证路径或速度的平滑性。</li>
</ul></li>
<li><p><strong>Hybrid A* method: </strong> “Path planning for autonomous
vehicles in unknown semi-structured environments,” The International
Journal of Robotics Research, vol. 29, no. 5, pp. 485–501,
2010.</p></li>
<li><p>迭代曲率约束路径平滑 iterative curvature constrained path
smoothing (i.e., DL-IAPS)</p></li>
<li><p>舒适的最小时间分段加加速度优化 comfortable minimum-time
piece-wise jerk speed optimization (i.e., PJSO)</p></li>
<li><p>主要贡献：</p>
<ul>
<li>精确实时的碰撞避免轨迹生成，Precise Collision Avoidance in
Real-Time，轨迹长度9-14s，检测时间0.18−0.21s</li>
<li>具备可行性的控制，Control Feasibility</li>
<li>兼顾驾驶舒适性和最短行驶时间，Driving comfort and Minimum Traversal
Time</li>
</ul></li>
</ul>
<h3 id="problem-statement">2 Problem Statement</h3>
<ul>
<li>模型包括三部分：
<ul>
<li>Region of Interest (RoI)：感兴趣区域</li>
<li>Trajectory Generation：</li>
<li>Trajectory Post-processing</li>
</ul></li>
</ul>
<h3 id="path-speed-decoupled-trajectory-optimization">3 Path speed
decoupled trajectory optimization</h3>
<h4 id="inner-loop-for-curvature-constrained-path-smoothing">Inner Loop
for Curvature Constrained Path Smoothing:</h4>
<ul>
<li>the nonlinear path smoothing optimization problem is formulated in
as:</li>
</ul>
<figure>
<img src="/images/20220929-1.jpg" alt="非线性路径平滑优化问题">
<figcaption aria-hidden="true">非线性路径平滑优化问题</figcaption>
</figure>
<h4 id="outer-loop-for-collision-avoidance">Outer Loop for Collision
Avoidance:</h4>
<ul>
<li>collision check and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.738ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1210.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>
updates</li>
</ul>
<figure>
<img src="/images/20220929-2.jpg" alt="碰撞检测">
<figcaption aria-hidden="true">碰撞检测</figcaption>
</figure>
<h4 id="piece-wise-jerk-speed-optimization">Piece-wise Jerk Speed
Optimization</h4>
<figure>
<img src="/images/20220929-3.jpg" alt="Jerk形式推导">
<figcaption aria-hidden="true">Jerk形式推导</figcaption>
</figure>
<ul>
<li>二次规划优化问题：</li>
</ul>
<figure>
<img src="/images/20220929-4.jpg" alt="二次规划优化问题">
<figcaption aria-hidden="true">二次规划优化问题</figcaption>
</figure>
<ul>
<li><p>侧方位停车对比：</p>
<figure>
<img src="/images/20220929-5.jpg" alt="Optimized path trajectory from starting pose [x = -6m, y = 2.5m, \theta = 0.0] with Hybrid A* path generator and DL-IAPS smoothing">
<figcaption aria-hidden="true">Optimized path trajectory from starting
pose <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.432ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12567 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1127.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2183.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2961.6,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mi" transform="translate(3461.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4339.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4784.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5552,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6607.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(7885.8,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8763.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9208.4,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(9955.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11011,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(12289,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> with Hybrid A* path generator and DL-IAPS
smoothing</figcaption>
</figure></li>
<li><p>parking 系列实验：</p></li>
</ul>
<figure>
<img src="/images/20220929-6.jpg" alt="Various simulation test cases with multiple numbers of boundaries and obstacles">
<figcaption aria-hidden="true">Various simulation test cases with
multiple numbers of boundaries and obstacles</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>整体而言就是在混合A*的基础上，加上了轨迹平滑、碰撞检测、速度规划三个后续模块，在parking任务上取得了一定效果，并集成与Apollo平台中</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Learning | Human-level Atari 200x faster</title>
    <url>/2022/09/23/2022-09-23-Reinforcement%20Learning%20-%20%5Bu%5D%20Human-level%20Atari%20200x%20faster/</url>
    <content><![CDATA[<h2 id="human-level-atari-200x-faster-deepmind-2022">Human-level Atari
200x faster (Deepmind, 2022)</h2>
<p>Deepmind的Agent57是第一个在57款Atari游戏上全面超过人类水平的强化学习智能体。但是Agent57的数据利用效率很低，要求80亿帧数据。本文通过设置不同的策略集合实现了200倍的训练效率提高。</p>
<p>4个关键点：</p>
<ul>
<li><p>使用在线网络的近似信赖域的方法，实现稳定的Bootstrapping；</p></li>
<li><p>一个损失和优先级的正则化方案，可在学习具有大范围尺度的价值函数时，提高鲁棒性；</p></li>
<li><p>使用改进的NFNets的架构，不必normalization
layers也可使用深层网络；</p></li>
<li><p>使用策略蒸馏方法，消除瞬时贪婪策略随时间的变化；</p></li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<figure>
<img src="/images/20220923-1.png" alt="MEME和Agent57在Atari游戏上达到人类水平所需数据量对比。">
<figcaption aria-hidden="true">MEME和Agent57在Atari游戏上达到人类水平所需数据量对比。</figcaption>
</figure>
<ul>
<li><p>衡量agent学习能力的两种方式：</p>
<ul>
<li><p>在与环境交互有限次后对比性能高低；</p>
<p>但该方法忽略了那些在允许的预算内难以解决的问题；</p></li>
<li><p>对比达到目标性能所需的交互次数；</p>
<p>本文为了和agent57对比，并凸显效率，采用该方式对比；</p></li>
</ul></li>
<li><p>MEME (Efficient Memory-based Exploration agent):</p>
<ul>
<li><p>针对所有策略的转换，并行训练Agent57的整个策略系列的价值函数，而不是仅是行为策略的转换？；</p></li>
<li><p>bootstrapping from the online network；</p></li>
<li><p>using high replay ratios</p></li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Reinforcement Learning-Based Motion Planning for Automatic Parking System</title>
    <url>/2022/09/29/2022-09-29-Autonomous%20Driving%20-%20Reinforcement%20Learning-Based%20Motion%20Planning%20for%20Automatic%20Parking%20System/</url>
    <content><![CDATA[<h2 id="reinforcement-learning-based-motion-planning-for-automatic-parking-system">Reinforcement
Learning-Based Motion Planning for Automatic Parking System</h2>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>典型的自动泊车系统包括以下组件：
<ul>
<li>停车位检测 parking slot detection,</li>
<li>运动规划 motion planning (or path planning and tracking),</li>
<li>自我车辆的姿态估计 ego-vehicle’s posture estimation,</li>
<li>底盘控制 chassis control,</li>
</ul></li>
<li>自动泊车算法分类：
<ul>
<li>基于专家驾驶员泊车数据的方法 expert drivers’ parking data-based
method,</li>
<li>基于人类先验知识的方法 human prior knowledge-based method,</li>
<li>基于强化学习的方法 reinforcement learning-based method.</li>
</ul></li>
</ul>
<h4 id="基于专家驾驶员泊车数据的方法">1)
基于专家驾驶员泊车数据的方法</h4>
<ul>
<li>使用监督学习训练神经网络，训练数据需要尽可能覆盖实际使用场景（图像输入）</li>
<li>局限：
<ul>
<li>专家数据是模型的上限；</li>
<li>专家数据难获得；</li>
<li>数据质量要求高；</li>
</ul></li>
</ul>
<h4 id="基于先验知识的方法">2) 基于先验知识的方法</h4>
<ul>
<li><p>abstracting human parking experience into prior knowledge and
then using it to guide the planning.</p></li>
<li><p>几何方法：</p>
<ul>
<li>Reeds-Shepp (RS) curve [6], [7],</li>
<li>clothoid curve [8], [9],</li>
<li>Bezier curve [10],</li>
<li>spline curve [11],</li>
<li>polynomial curve [12]</li>
</ul></li>
<li><p>启发式方法：</p>
<ul>
<li>A* [13]</li>
</ul></li>
<li><p>模糊逻辑方法：</p>
<ul>
<li>fuzzy rules [14], [15]</li>
</ul></li>
</ul>
<h4 id="基于强化学习的方法">3) 基于强化学习的方法</h4>
<ul>
<li><p>前两种方案依赖原始或抽象的人类经验，因此要求高质量的泊车数据。</p></li>
<li><p>可以突破人类数据的限制</p></li>
<li><p>一般认为泊车场景agent比高速场景agent更难训练，因为前者方向盘角度会发生短时间的巨大变化</p></li>
</ul>
<h3 id="总结">总结</h3>
<p>本文质量一般，只看了intro部分，文献较老，没继续看了。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | From smart parking towards autonomous valet parking: A survey, challenges and future Works</title>
    <url>/2022/09/30/2022-09-30-Autonomous%20Driving%20-%20From%20smart%20parking%20towards%20autonomous%20valet%20parking%20A%20survey%20challenges%20and%20future%20Works/</url>
    <content><![CDATA[<h2 id="from-smart-parking-towards-autonomous-valet-parking-a-survey-challenges-and-future-works">From
smart parking towards autonomous valet parking: A survey, challenges and
future Works</h2>
<p>停车的基本任务要求：</p>
<ul>
<li>找车位 finding the proper parking slot,</li>
<li>提升使用者的体验 increasing users’ experience,</li>
<li>动态的路径规划 dynamic path planning,</li>
<li>避免拥堵 congestion avoidance</li>
</ul>
<p>本综述讨论从智能泊车到自动泊车的技术发展：</p>
<ul>
<li><p>Smart Parking (SP):</p>
<ul>
<li>digitally enhanced parking,</li>
<li>smart routing,</li>
<li>high density parking</li>
<li>vacant slot detection solutions</li>
</ul></li>
<li><p>Autonomous Valet Parking (AVP):</p>
<ul>
<li>Short-range Autonomous Valet Parking (SAVP)</li>
</ul></li>
<li><p>Long-range Autonomous Valet Parking (LAVP)</p></li>
</ul>
<p>这是一篇停车场管理的综述，不是我想找的Autonomous parking算法的。</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Practical Search Techniques in Path Planning for Autonomous Driving</title>
    <url>/2022/10/09/2022-10-09-Autonomous%20Driving%20-%20Practical%20Search%20Techniques%20in%20Path%20Planning%20for%20Autonomous%20Driving/</url>
    <content><![CDATA[<h2 id="practical-search-techniques-in-path-planning-for-autonomous-driving">Practical
Search Techniques in Path Planning for Autonomous Driving</h2>
<p>本文是stanford大学在 2007 DARPA Urban Challenge
中产出的一项工作，提出了著名的混合A*算法。</p>
<p>混合A*算法包含两个主要步骤：</p>
<ul>
<li><ol type="1">
<li>求解基于改进的A*算法的粗略轨迹，节点之间在动力学上是连续的；</li>
</ol></li>
<li><ol start="2" type="1">
<li>使用数值非线性优化提升轨迹质量；</li>
</ol></li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>结合 rapidly exploring random trees (RRTs)
的连续路径规划算法，但他们依赖高效的启发式引导：
<ul>
<li>Kavraki, L.; Svestka, P.; Latombe, J.-C.; and Overmars, M. 1996.
Probabilistic roadmaps for path planning in high-dimensional
configuration spaces. IEEE Transactions on Robotics and Automation
12(4).</li>
<li>LaValle, S. 1998. Rapidly-exploring random trees: A new tool for
path planning.</li>
<li>Plaku, E.; Kavraki, L.; and Vardi, M. 2007. Discrete search leading
continuous exploration for kinodynamic motion planning. In Robotics:
Science and Systems.</li>
</ul></li>
<li>步骤：
<ul>
<li>step
1：使用启发式搜索在连续的坐标空间中规划满足动力学的轨迹。但该方法缺少理论上的最优保证；</li>
<li>step 2：使用共轭梯度(conjugate gradient,
CG)下降来局部改善解的质量，产生至少是局部最优的路径，但通常也达到全局最优。</li>
</ul></li>
</ul>
<h3 id="hybrid-state-a-search">2 Hybrid-State A* Search</h3>
<ul>
<li>本文的方法的第一阶段使用3D运动学状态空间的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.828ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 1250 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></svg></mjx-container></span>算法的变体，但修改了状态更新规则，该规则在<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.828ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 1250 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></svg></mjx-container></span>的离散搜索节点中使用连续状态。</li>
<li>由于合并了同一网格中的连续坐标状态，因此不保证损失最小解（minimal-cost
solution），但路径一定是可行的（drivable）。</li>
<li>搜索空间<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.236ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3198.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2340.3,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(2809.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>​​，每个状态节点之间是动力学连续的。但是搜索过程中转向角是离散化的，考虑离散化和精度之间的关系，使用
Reed-Shepp model 进行轨迹扩展 （We used a 160x160 grid with 1m
resolution in x-y and 5 deg angular resolution.）
<ul>
<li>Reeds, J. A., and Shepp, L. A. 1990. Optimal paths for a car that
goes both forwards and backwards. Pacific Journal of Mathematics
145(2):367–393</li>
</ul></li>
<li><figure>
<img src="/images/20221011-1.jpg" alt="搜索规则对比">
<figcaption aria-hidden="true">搜索规则对比</figcaption>
</figure></li>
<li>算法规划向前和向后的运动，并对向后驾驶以及转换运动方向进行惩罚</li>
<li>两个启发式步骤：
<ul>
<li>“non-holonomic-without-obstacles”
，忽略障碍物，但考虑到汽车的非完整性，计算目标点邻域内到该点的最短路径</li>
<li>考虑障碍物和动力学，计算到目标的最短距离，其优势在于可以发现2D地图所有的U形障碍和死胡同，引导更代价昂贵的3D搜索远离这些区域。</li>
</ul></li>
<li>对求解的 Reed-and-Shepp path
进行碰撞检测，确定无碰撞后才会加入到路径树中。</li>
<li><figure>
<img src="/images/20221011-2.jpg" alt="不同启发函数的对比">
<figcaption aria-hidden="true">不同启发函数的对比</figcaption>
</figure></li>
<li>出于计算的原因，不希望将Reed-Shepp展开应用于每个节点(尤其是远离目标的节点，在那里大多数这样的路径可能会穿过障碍物)。在我们的实现中，我们使用了一个简单的选择规则，其中Reed-Shepp扩展应用于每N个节点中的一个，其中N作为目标成本启发式算法的函数而减少(随着我们越来越接近目标，导致更频繁的分析扩展)。</li>
<li>带有Reed-Shepp扩展的搜索树如下图所示。由节点的短增量扩展生成的搜索树显示在黄绿色范围内，Reed-Shepp扩展显示为通向目标的单紫色线。我们发现，搜索树的这种分析扩展在准确性和计划时间方面都带来了显著的好处。</li>
<li><figure>
<img src="/images/20221011-3.jpg" alt="Analytic Reed-and-Shepp expansion">
<figcaption aria-hidden="true">Analytic Reed-and-Shepp
expansion</figcaption>
</figure></li>
</ul>
<h3 id="path-cost-function-using-the-voronoi-field">3 Path-Cost Function
Using the Voronoi Field</h3>
<ul>
<li>使用流动势场法（following potential
field）权衡路径长度和与障碍物的距离，将其命名为Voronoi Field</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.397ex;" xmlns="http://www.w3.org/2000/svg" width="63.3ex" height="6.09ex" role="img" focusable="false" viewBox="0 -1632.1 27978.6 2691.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mi" transform="translate(550,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1532.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2104.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2549.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3039.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3706.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4762,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g></g><g data-mml-node="mfrac" transform="translate(5498,0)"><g data-mml-node="mi" transform="translate(2544.8,676)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(862.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(1862.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(3005,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3394,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3966,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4410.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4900.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="5489.6" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11227.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11963.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g></g><g data-mml-node="mfrac" transform="translate(12699.6,0)"><g data-mml-node="mrow" transform="translate(2544.8,710)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(1146.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1535.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2107.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2552.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3042.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1142.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1531.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2103.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2548.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3038.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3649.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4649.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(5796.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6185.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6757.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7202.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7692.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="8281.1" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(21220.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mfrac" transform="translate(21956.7,0)"><g data-mml-node="mrow" transform="translate(220,798.1)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1753.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2754,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(553,-322.6) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="msup" transform="translate(4756.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(1402.5,-719.9)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,361.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(553,-324.2) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="msup" transform="translate(2391.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><rect width="5781.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.585ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 1142.5 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></g></svg></mjx-container></span> 表示到最近障碍物的距离；</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.594ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 1146.8 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></g></svg></mjx-container></span> 表示到最近 Generalized
Voronoi Diagram (GVD) 边缘（edge）的距离；</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.596ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2473.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1973.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 表示衰减率；</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="6.733ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 2976.1 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1420.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(2476.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>
表示场的最大效用边界；</p>
<p>表达式满足 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.765ex;" xmlns="http://www.w3.org/2000/svg" width="10.132ex" height="2.335ex" role="img" focusable="false" viewBox="0 -694 4478.4 1032.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1420.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msubsup" transform="translate(2476.1,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(553,-322.6) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></g></svg></mjx-container></span>
，否则<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.905ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5262 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mi" transform="translate(550,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1532.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2104.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2549.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3039.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3706.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4762,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>；</p>
<ul>
<li>势场有以下几个原则：
<ol type="1">
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.765ex;" xmlns="http://www.w3.org/2000/svg" width="10.132ex" height="2.335ex" role="img" focusable="false" viewBox="0 -694 4478.4 1032.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1420.3,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msubsup" transform="translate(2476.1,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(553,-322.6) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></g></svg></mjx-container></span>
时其值为0；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.049ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6651.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mi" transform="translate(550,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1532.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2104.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2549.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3039.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3706.2,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4651,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(4929,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5429,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5873.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6373.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>，并且在<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>处连续，因为不存在同时满足<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="12.345ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 5456.4 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1420.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2476.1,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(3900.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4956.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 的情况；</li>
<li>势场仅在障碍物内部取到最大值；</li>
<li>势场仅在GVD边界上取到最小值；</li>
</ol></li>
<li>Voronoi场比传统势场的关键优势在于，场值与导航的可用间隙成比例。即使狭窄的开口仍然可以通航，而标准势场并不总是如此，传统势场可能封闭这些道路。</li>
</ul>
<figure>
<img src="/images/20221011-4.jpg" alt="Voronoi field">
<figcaption aria-hidden="true">Voronoi field</figcaption>
</figure>
<h3 id="local-optimization-and-smoothing">4 Local Optimization and
Smoothing</h3>
<ul>
<li>hybrid-state A*
产生的轨迹仍然是次优的，需要进一步优化，去除不自然的突然转弯（unnatural
swerves）。</li>
<li>优化过程分为两步：
<ol type="1">
<li>对轨迹的每个顶点使用非线性优化平滑</li>
<li>对轨迹进行非参数的插值（non-parametric
interpolation），使用共轭梯度提升轨迹分辨率。</li>
</ol></li>
<li>变量定义：
<ul>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.556ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9528 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path></g><g data-mml-node="mi" transform="translate(561,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1132.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2188.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2577.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3476.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3921.1,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4738.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5127.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5571.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6194.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7139.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(7417.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7917.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8362,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(9250,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>
表示顶点序列；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.871ex" height="1.371ex" role="img" focusable="false" viewBox="0 -448 827 605.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path></g><g data-mml-node="mi" transform="translate(533,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
表示离顶点最近的障碍物坐标；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="15.714ex" height="2.09ex" role="img" focusable="false" viewBox="0 -716 6945.5 924"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mtext"><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path></g><g data-mml-node="mi" transform="translate(561,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1965.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3021.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4142.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5142.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>
表示顶点的位移矢量；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.116ex;" xmlns="http://www.w3.org/2000/svg" width="32.377ex" height="3.364ex" role="img" focusable="false" viewBox="0 -993.4 14310.8 1486.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mi" transform="translate(629,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2033.7,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="msup" transform="translate(3367.5,0)"><g data-mml-node="mi"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(889,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1478,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5799.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(5965.9,0)"><g data-mml-node="mrow" transform="translate(249,487.1) scale(0.707)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-346.3) scale(0.707)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><rect width="2063.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8491.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9492,0)"><g data-mml-node="mi"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(889,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1478,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11923.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(12090.3,0)"><g data-mml-node="mrow" transform="translate(249,485) scale(0.707)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-346.3) scale(0.707)"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><rect width="1424.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(14032.8,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span> 表示顶点处的切角变化；</li>
</ul></li>
<li>目标函数定义为：</li>
</ul>
<figure>
<img src="/images/20221011-5.jpg" alt="目标函数">
<figcaption aria-hidden="true">目标函数</figcaption>
</figure>
<p>损失函数的第一项可以高效地引导机器人移动，无论狭窄和开阔的地方都能远离障碍物；</p>
<p>第二项惩罚与障碍物的碰撞；</p>
<p>第三项限制每个顶点处的瞬时曲率，并加强车辆的非完整约束；</p>
<p>第四项是路径平滑措施；</p>
<ul>
<li>梯度求解：</li>
</ul>
<figure>
<img src="/images/20221011-6.jpg" alt="目标函数梯度-1">
<figcaption aria-hidden="true">目标函数梯度-1</figcaption>
</figure>
<figure>
<img src="/images/20221011-7.jpg" alt="目标函数梯度-2">
<figcaption aria-hidden="true">目标函数梯度-2</figcaption>
</figure>
<figure>
<img src="/images/20221011-8.jpg" alt="目标函数梯度-3">
<figcaption aria-hidden="true">目标函数梯度-3</figcaption>
</figure>
<ul>
<li>经过共轭梯度法的优化，轨迹显著更平滑了，但顶点之间仍有较大间距（论文中0.5-1m）。因此需要对轨迹进行再次插值。但许多参数化的插值算法对噪声敏感，加剧输出中的噪声（例如，随着输入顶点彼此靠近，三次样条曲线会导致输出中包含任意大的振荡）。</li>
<li>本文对共轭梯度法轨迹进行了非参数化的插值，之后再用共轭梯度法进行平滑</li>
<li>We used the following parameters for our planner: the obstacle map
was of size 160m×160m with 0.15cm resolution; A* used a grid of size
160m×160m×360◦ with 0.5m x-y resolution and 5◦ resolution for the
heading θ. Typical running times for a full replanning cycle involving
the hybrid A* search, CG smoothing, and interpolation were on the order
of 50–300ms.</li>
</ul>
<figure>
<img src="/images/20221011-9.jpg" alt="轨迹平滑">
<figcaption aria-hidden="true">轨迹平滑</figcaption>
</figure>
<figure>
<img src="/images/20221011-10.jpg" alt="轨迹案例">
<figcaption aria-hidden="true">轨迹案例</figcaption>
</figure>
<h3 id="总结">总结</h3>
<p>本文面向AVP问题，发表于2008年，整体思路很清晰：hybird
A*求粗略轨迹-&gt;共轭梯度轨迹平滑-&gt;非参数插值-&gt;共轭梯度轨迹平滑。方法受年代限制，没有使用NN优化，这或许是一个可以产生明显提升的地方</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
        <tag>Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Path Planning for Autonomous Vehicles in Unknown Semi-structured Environments</title>
    <url>/2022/10/14/2022-10-14-Autonomous%20Driving%20-%20Path%20Planning%20for%20Autonomous%20Vehicles%20in%20Unknown%20Semi-structured%20Environments/</url>
    <content><![CDATA[<h2 id="path-planning-for-autonomous-vehicles-in-unknown-semi-structured-environments">Path
Planning for Autonomous Vehicles in Unknown Semi-structured
Environments</h2>
<p>本文为其姊妹篇会议论文（Practical Search Techniques in Path Planning
for Autonomous Driving）的扩展，时隔一年发表在机器人顶刊 IJRR
上，内容无太大变化。</p>
<p>算法分为两步：</p>
<ul>
<li>A* 搜索的变体，结合车辆动力学，进行路径搜索；</li>
<li>数值非线性优化提升解的质量，<strong>新增结合先验信息模块</strong>；</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>主要难点：
<ul>
<li>连续变量的优化；</li>
<li>时间成本</li>
<li>非结构化环境</li>
</ul></li>
</ul>
<h3 id="hybrid-state-a-search">2 Hybrid-state A* Search</h3>
<ul>
<li>算法描述：
<ul>
<li>自车起始状态：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="15.678ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 6929.8 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g></g><g data-mml-node="mi" transform="translate(3017.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3589.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4033.8,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4523.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4968.4,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="msub" transform="translate(5715.2,0)"><g data-mml-node="mo"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(811,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span></li>
<li>目标状态：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="15.605ex" height="2.262ex" role="img" focusable="false" viewBox="0 -705 6897.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g><g data-mml-node="mo" transform="translate(1167.1,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g></g><g data-mml-node="mi" transform="translate(3000.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3572.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4017.5,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4507.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4952.2,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="msub" transform="translate(5699,0)"><g data-mml-node="mo"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(811,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></g></svg></mjx-container></span></li>
<li>扩展的4D状态空间：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.28ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 5427.6 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1055.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1627.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2072.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2562.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3007.1,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(3476.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3920.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4649.6,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.568ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4229.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1784.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(2284.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2784.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3229.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3729.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>是自车的行进方向，前进or后退</li>
<li>惩罚倒车（乘性惩罚）和切换行驶方向（加性惩罚）的行为。</li>
</ul></li>
<li>本文没有速度规划，使用固定的 5 mph 速度</li>
<li>节点从open list中pop
out，根据运动学连接三个节点：最大左转，直行，最大右转，hybrid
A*生成的轨迹一定是可达的，但不保证全局最优。</li>
</ul>
<h4 id="heuristics">Heuristics</h4>
<ul>
<li>使用了两个启发式函数：
<ul>
<li><code>non-holonomic-without-obstacles heuristic</code>,
忽略障碍物，但考虑到汽车的非完整性。</li>
<li><code>holonomic-with-obstacles heuristic</code>，与上一个启函数对称，忽略汽车的非完整约束，考虑障碍物地图计算最短路径。</li>
</ul></li>
<li>During the Urban Challenge, we used a 160 m X 160 m grid with 1 m X
5 deg resolution.</li>
<li>用 Reed–Shepp model 优化hybrid A*的解，计算最优的 Reed–Shepp path
<ul>
<li>Reeds, J. A. and Shepp, L. A. (1990). Optimal paths for a car that
goes both forwards and backwards. Pacific Journal of Mathematics,
145(2): 367–393.</li>
</ul></li>
<li>变分辨率搜索（Variable Resolution
Search），计算中期望竟可能精细的分辨率，主要原因在于：
<ul>
<li>完整性，分辨率太粗，狭窄的通道不能通过；</li>
<li>最优性，粗分辨率导致轨迹在最优解附近震荡了；</li>
<li>计算效率；</li>
</ul></li>
<li>具体实施：在宽阔的地方使用大步长，在狭窄的地方使用小步长；利用Generalized
Voronoi Diagram (GVD)中的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="7.945ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 3511.7 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g><g data-mml-node="mo" transform="translate(1364.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2365,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></g></svg></mjx-container></span>变化规划的弧长长度，实现变分辨率，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.585ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 1142.5 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></g></svg></mjx-container></span>是最近障碍物距离，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.594ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 1146.8 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></g></svg></mjx-container></span>是GVD最近边界的距离；</li>
</ul>
<h3 id="trajectory-optimization">3 Trajectory Optimization</h3>
<ul>
<li>计算流程：
<ul>
<li>Hybrid A*（0.5-1m）</li>
<li>R-S曲线（0.5-1m）</li>
<li>共轭梯度轨迹平滑（0.5-1m）</li>
<li>非参数插值（5-10cm）</li>
<li>共轭梯度轨迹平滑（5-10cm）</li>
</ul></li>
</ul>
<h4 id="trajectory-smoothing-via-conjugate-gradient">Trajectory
Smoothing via Conjugate Gradient</h4>
<ul>
<li>该步骤同之前的文章，此处不再描述；</li>
</ul>
<h4 id="guaranteeing-smoother-safety">Guaranteeing Smoother Safety</h4>
<ul>
<li>共轭梯度轨迹平滑中虽然加了碰撞惩罚，但是并不能保证无碰撞，优化目标也没考虑车身形状，因此不能精确优化轨迹。如果在共轭梯度轨迹平滑模块内实施精确的碰撞检测，那么计算量又会过大；</li>
<li>共轭梯度法平滑的轨迹如果不安全，则锚定住A*
solution中的相关点。迭代优化其余点，直到collision-free</li>
</ul>
<figure>
<img src="/images/20221017-1.jpg" alt="锚定路径点保证平滑安全性">
<figcaption aria-hidden="true">锚定路径点保证平滑安全性</figcaption>
</figure>
<h4 id="navigation-potential-using-the-voronoi-field">Navigation
Potential Using the Voronoi Field</h4>
<ul>
<li>使用了Voronoi
Field得到导航信息，这部分和之前论文一样，不重复介绍。</li>
</ul>
<h3 id="graph-guided-path-planning-in-semi-structured-environments">4
Graph-guided Path Planning in Semi-structured Environments</h3>
<h4 id="trajectory-smoothing-in-semi-structured-environments">Trajectory
Smoothing in Semi-structured Environments</h4>
<p>本文增加了这部分内容，在GC优化项中增加了一项。感觉意义不是太大，这里不再介绍。</p>
<h3 id="总结">总结</h3>
<p>本文和之前的会议论文差不多，感觉意义新加部分意义不是很大。</p>
]]></content>
      <tags>
        <tag>Autonomous Driving</tag>
        <tag>Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>Autonomous Driving | Parallel, Angular and Perpendicular Parking for Self-Driving Cars using Deep Reinforcement Learning</title>
    <url>/2022/09/30/2022-09-30-Autonomous%20Driving%20-%20Parallel%20Angular%20and%20Perpendicular%20Parking%20for%20Self-Driving%20Cars%20using%20Deep%20Reinforcement%20Learning/</url>
    <content><![CDATA[<h2 id="parallel-angular-and-perpendicular-parking-for-self-driving-cars-using-deep-reinforcement-learning">Parallel,
Angular and Perpendicular Parking for Self-Driving Cars using Deep
Reinforcement Learning</h2>
<p>parking是所有驾驶行为的最终步骤，主要分为三类：垂直、平行、斜向泊车。</p>
<p>本文使用DDPG控制汽车完成三种场景的泊车。</p>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>强化学习控制泊车：
<ul>
<li>"Reinforcement learning-based end-to-end parking for automatic
parking system", Sensors (Switzerland), vol. 19 ,September 2019.</li>
<li>“An Automatic Parking Model Based on Deep Reinforcement Learning",
2021 J. Phys.: Conf. Ser. 1883 012111.</li>
</ul></li>
<li>parallel autonomous parking (truncated Monte Carlo tree):
<ul>
<li>“Data efficient reinforcement learning for integrated lateral
planning and control in automated parking system”, Sensors
(Switzerland), vol. 20, pp. 1–24, dec 2020.</li>
<li>"Reinforcement Learning-Based Motion Planning for Automatic Parking
System," in IEEE Access, vol. 8, pp. 154485-154501, 2020, doi:
0.1109/ACCESS.2020.3017770.</li>
</ul></li>
<li>避障：
<ul>
<li>"Q-Learning for Autonomous Mobile Robot Obstacle Avoidance," 2019
IEEE International Conference on Autonomous Robot Systems and
Competitions (ICARSC), Porto, Portugal, 2019, pp. 1-7. DOI:
10.1109/ICARSC.2019.8733621</li>
<li>Combining YOLO and Deep Reinforcement Learning for Autonomous
Driving in Public Roadworks Scenarios. In Proceedings of the 14th
International Conference on Agents and Artificial Intelligence - Volume
3: ICAART, ISBN 978-989-758-547-0, pages 793-800. DOI:
10.5220/0010913600003116.</li>
</ul></li>
</ul>
<h3 id="总结">总结</h3>
<p>本文除了比较新之外（2022）没有无亮点，完全借用DDPG分别实现三种库的parking</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Autonomous Driving</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Driving | Mastering the game of Go without human knowledge</title>
    <url>/2022/10/19/2022-10-19-Autonomous%20Driving%20-%20Mastering%20the%20game%20of%20Go%20without%20human%20knowledge/</url>
    <content><![CDATA[<h2 id="mastering-the-game-of-go-without-human-knowledge">Mastering the
game of Go without human knowledge</h2>
<p>AlphaGo和AlphaGo
Master之后的又一力作，不同于AlphaGo学习人类棋谱，利用人类先验知识，AlphaGo
Zero完全自学，并在学习三天后超越了AlphaGo，40天超越了AlphaGo
Master。</p>
<h3 id="introduction">1 Introduction</h3>
<h4 id="reinforcement-learning-in-alphago-zero">Reinforcement learning
in AlphaGo Zero</h4>
<ul>
<li><p>算法的特点是将RL的策略网络和价值网络合并，只改变输入层。神经网络表示为
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.887ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5695.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(892,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1336.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1821.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2488.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3544.2,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4448.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4837.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5306.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<ul>
<li>输入：棋局表征 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>
及其历史信息</li>
<li>输出：下一步的落子概率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></span>
，当前局面获胜概率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container></span></li>
<li>训练目标是去拟合自我对弈里面产生的真实胜率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.052ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 465 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container></span> 和下面提到的 MCTS 产生的落子概率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container></span>，即 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.629ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6023.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(892,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1336.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1821.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2488.4,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3766.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4155.2,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(4725.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5169.9,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(5634.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</li>
</ul></li>
<li><p>MCTS（蒙特卡洛树搜索）使用 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="2.047ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 904.6 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></g></g></svg></mjx-container></span> 进行自博弈，搜索策略 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container></span> 一般优于网络估计的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></span></p>
<figure>
<img src="/images/20221019-1.jpg" alt="Self-play reinforcement learning in AlphaGo Zero">
<figcaption aria-hidden="true">Self-play reinforcement learning in
AlphaGo Zero</figcaption>
</figure></li>
<li><p>因此，基于以下两点，可以实现训练：</p>
<ol type="1">
<li>MCTS 优于网络 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.868ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2151.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(904.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1293.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1762.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.868ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2151.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(904.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1293.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1762.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
性能提升后，MCTS自博弈的结果也更好，两者相互促进提升；</li>
</ol></li>
<li><p>MCTS:</p>
<ul>
<li><p>搜索树使用神经网络策略引导仿真（自博弈）</p></li>
<li><p>搜索树的每一条边有一个先验概率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.723ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2971.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1609,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2053.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2582.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，一个访问数（visit count） <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.033ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3108.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1277,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1746,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2190.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2719.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，一个行为价值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.814ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3011.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(791,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1180,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1649,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2093.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2622.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>每次仿真从根节点开始迭代进行，最大化置信上界 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.339ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7221.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(791,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1180,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1649,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2093.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2622.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3233.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4234.1,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(5001.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5390.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5859.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6303.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6832.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，直到达到访问过的叶子节点。<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30.321ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13402 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(767,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1156,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1625,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2069.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2598.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3265.4,0)"><path data-c="221D" d="M56 124T56 216T107 375T238 442Q260 442 280 438T319 425T352 407T382 385T406 361T427 336T442 315T455 297T462 285L469 297Q555 442 679 442Q687 442 722 437V398H718Q710 400 694 400Q657 400 623 383T567 343T527 294T503 253T495 235Q495 231 520 192T554 143Q625 44 696 44Q717 44 719 46H722V-5Q695 -11 678 -11Q552 -11 457 141Q455 145 454 146L447 134Q362 -11 235 -11Q157 -11 107 56ZM93 213Q93 143 126 87T220 31Q258 31 292 48T349 88T389 137T413 178T421 196Q421 200 396 239T362 288Q322 345 288 366T213 387Q163 387 128 337T93 213Z"></path></g><g data-mml-node="mi" transform="translate(4321.2,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(5072.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5461.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5930.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6374.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6903.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7292.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(7792.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8181.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8904.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9904.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(10792.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11181.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(11650.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12095,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(12624,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13013,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>每个叶子节点位置仅被网络扩展和评估一次，以生成先验概率和评估值；<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.251ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 10276.9 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(1140,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1529,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2275.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2720.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mo" transform="translate(2998.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3387.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3831.8,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(4600.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4989.8,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5736.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6125.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6792,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(7847.8,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8752.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(9141.4,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(9887.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>每条边<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.024ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2220.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(858,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1302.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1831.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>每使用一次就增加访问数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.033ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3108.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1277,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1746,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2190.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2719.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，并更新行为价值为仿真中的平均估计值，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.044ex;" xmlns="http://www.w3.org/2000/svg" width="34.121ex" height="2.761ex" role="img" focusable="false" viewBox="0 -759 15081.3 1220.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(791,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1180,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1649,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2093.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2622.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3289.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4345.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4845.2,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(5345.2,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(6233.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6622.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(7091.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7535.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8064.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="munder" transform="translate(8620.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(746.5,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(1024.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1493.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1771.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2300.5,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(3300.5,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(12787.8,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(13556.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(13945.8,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(14692.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>MCTS 使用的节点选择策略正比与节点访问数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.544ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 6870.5 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="TeXAtom" transform="translate(603,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1105.5,0)"><g data-mml-node="mo"><path data-c="2009" d=""></path></g></g><g data-mml-node="mo" transform="translate(1550.3,0)"><path data-c="221D" d="M56 124T56 216T107 375T238 442Q260 442 280 438T319 425T352 407T382 385T406 361T427 336T442 315T455 297T462 285L469 297Q555 442 679 442Q687 442 722 437V398H718Q710 400 694 400Q657 400 623 383T567 343T527 294T503 253T495 235Q495 231 520 192T554 143Q625 44 696 44Q717 44 719 46H722V-5Q695 -11 678 -11Q552 -11 457 141Q455 145 454 146L447 134Q362 -11 235 -11Q157 -11 107 56ZM93 213Q93 143 126 87T220 31Q258 31 292 48T349 88T389 137T413 178T421 196Q421 200 396 239T362 288Q322 345 288 366T213 387Q163 387 128 337T93 213Z"></path></g><g data-mml-node="mi" transform="translate(2606.1,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3494.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3883.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4352.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4796.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msup" transform="translate(5325.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container></span>
是温度系数；</p></li>
<li><p>仿真直到搜索的价值低于阈值或者到达最大次数，此时给出最终奖励<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.152ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6255 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(1309.6,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(2254.4,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(2754.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3532.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4032.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4477,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5255,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5755,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>每一时间步的数据存为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.471ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4186.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1196.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1640.9,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(603,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(2549.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2993.9,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(3797.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.929ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 3946.6 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1081,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2136.8,0)"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g><g data-mml-node="msub" transform="translate(2914.8,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container></span>是当前玩家在第<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span>步成为赢家获得的奖励</p></li>
<li><p>网络优化：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.622ex" height="1.595ex" role="img" focusable="false" viewBox="0 -511 5578.8 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(762.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2040.6,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(2505.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2950.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3731,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5008.8,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>损失函数为均方误差+交叉熵损失+网络权重的平方：</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.702ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 14012.5 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1631.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2020.6,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(2707.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3708,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msup" transform="translate(4193,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5240.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(6241,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(603,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(7558.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(8836.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(9003.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(9728.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10728.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(11439.4,0)"><g data-mml-node="text"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mi" transform="translate(12273.1,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(13019.9,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(13297.9,0)"><g data-mml-node="mo"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p></li>
</ul></li>
</ul>
<h4 id="empirical-analysis-of-alphago-zero-training">Empirical analysis
of AlphaGo Zero training</h4>
<figure>
<img src="/images/20221019-2.jpg" alt="MCTS">
<figcaption aria-hidden="true">MCTS</figcaption>
</figure>
<ul>
<li><p>MCTS行为选择策略为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="33.38ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 14753.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1145,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2200.8,0)"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(500,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(892,0)"></path></g><g data-mml-node="mo" transform="translate(3592.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="munder" transform="translate(3759.5,0)"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"></path></g><g data-mml-node="mi" transform="translate(1894,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(6077.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6466.5,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(7257.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(7646.5,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(8453.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8898.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(9427.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10038.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11038.9,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(11805.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(12194.9,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(13002.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13446.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(13975.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14364.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li>
<li><p>a.选择
每次仿真通过选择动作值Q和置信上限U之和最大的边来遍历树，U取决于存储的先验概率P和该边的访问次数N(一旦遍历就递增)。</p></li>
<li><p>b.扩展 扩展叶子节点，并用神经网络评估相应的棋局状态s</p></li>
<li><p>c.更新
行为价值Q被更新以跟踪该动作下的子树中所有评估值V的平均值</p></li>
<li><p>d.仿真 搜索完成后，将返回概率<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container></span>，其与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.746ex" height="2.021ex" role="img" focusable="false" viewBox="0 -893.3 2097.9 893.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(975.3,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></g></g></svg></mjx-container></span>成比例，N是从根状态开始的节点访问计数，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container></span>是温度参数。</p></li>
<li><p>附录有详细的MCTS计算方法！</p></li>
<li><p>后续性能展示过于知名，不再赘述</p></li>
</ul>
<h3 id="总结">总结</h3>
<p>MCTS与神经网络结合的思路可以借鉴，目前不清楚在其它任务中该框架的训练难度（GPU需求量）</p>
<p>​</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Driving | Mastering Atari, Go, chess and shogi by planning with a learned model</title>
    <url>/2022/10/20/2022-10-20-Autonomous%20Driving%20-%20Mastering%20Atari%20Go%20chess%20and%20shogi%20by%20planning%20with%20a%20learned%20model/</url>
    <content><![CDATA[<h2 id="mastering-atari-go-chess-and-shogi-by-planning-with-a-learned-model">Mastering
Atari, Go, chess and shogi by planning with a learned model</h2>
<p>MuZero是AlphaGo
Zero之上的第二次改进。第一次改进为AlphaZero，一个模型实现围棋、国际象棋、将棋的超人水平。此次在AlphaZero基础上，更是从棋类拓展到了更具有普遍意义的Atari游戏。</p>
<p>训练模型的规划能力通常是较为困难的，本文提出MuZero，一个结合学习模型的树搜索方法</p>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>model-based RL 需要
<ul>
<li>状态转移模型：根据是s,a预测下一时刻的状态</li>
<li>奖励模型：预测期望的奖励</li>
</ul></li>
</ul>
<h3 id="muzero-algorithm">2 MuZero algorithm</h3>
<ul>
<li><p>构建一个模型 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="2.302ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 1017.6 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="TeXAtom" transform="translate(636,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></g></g></svg></mjx-container></span>
预测三个未来的量：</p>
<ul>
<li>Policy <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="39.258ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 17351.9 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(536,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1232.2,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mi" transform="translate(2288,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(2858,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3247,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2438,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6214.2,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(6770,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(7691.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8136.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8580.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9025.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9470.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(9914.9,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(10738.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(11182.8,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12953.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13398.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(13843.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14287.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14732.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(15177.1,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(16962.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li>
<li>Value function <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="53.358ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 23584 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(518,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1214.2,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2270,0)"><g data-mml-node="mi"><path data-c="1D53C" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"></path></g></g><g data-mml-node="mo" transform="translate(2937,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(3215,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2438,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6169.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7169.9,0)"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="msub" transform="translate(7712.9,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2438,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10445.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(11223.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(11668,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(12112.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(12557.4,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(13113.1,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(14034.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(14479.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14924,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15368.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15813.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(16258,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(17081.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(17526,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(19296.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(19741.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(20186.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(20630.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(21075.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(21520.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(23306,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></li>
<li>immediate reward <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="9.196ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 4064.8 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(484,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1180.2,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="msub" transform="translate(2236,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></span></li>
</ul>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>表示真实的观测到的奖励，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container></span>表示用于选择真实行为的策略</p></li>
<li><p>具体地，模型包括三个部分：</p>
<ul>
<li>dynamics function: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.276ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 8519.8 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(902.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1347.1,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2545.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3601,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4492.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4881.7,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6705.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(7150.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(8130.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，在每个假设步骤k执行，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.042ex" height="1.956ex" role="img" focusable="false" viewBox="0 -853.7 902.4 864.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>是即时奖励；<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="2.082ex" height="1.954ex" role="img" focusable="false" viewBox="0 -853.7 920.4 863.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>是内部状态表征（internal
state），其没有环境信息的语义含义，只是用于准确预测未来变量policies,
values and rewards</li>
<li>prediction function: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.19ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 6272.1 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(954.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1399.1,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2613.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3669,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4573.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4962.7,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(5883.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li>
<li>representation function: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.045ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 7975.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2239.1,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(609,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3229.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3618.7,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4540.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4985,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5429.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5874.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6319,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6763.6,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(7586.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，根据过去的观测信息生成根节点的内部状态表征</li>
</ul></li>
<li><p>利用上述模型，可以利用过去的观测信息<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.978ex" height="1.437ex" role="img" focusable="false" viewBox="0 -441 3968.2 635"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(921.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1366.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(1810.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2255.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2700.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3144.9,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container></span>，生成假设的未来轨迹<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.433ex" height="2.37ex" role="img" focusable="false" viewBox="0 -853.7 4169.3 1047.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(965.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1410.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(1854.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2299.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2744.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(3188.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span></p></li>
<li><p>损失函数：（每一项都是L2损失函数）</p></li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex;" xmlns="http://www.w3.org/2000/svg" width="66.46ex" height="6.784ex" role="img" focusable="false" viewBox="0 -1733 29375.3 2998.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(636.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1025.3,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1494.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2161,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(3216.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(407.7,1150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="msup" transform="translate(4827.5,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,413) scale(0.707)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g><g data-mml-node="mo" transform="translate(5739.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6128.5,0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="TeXAtom" transform="translate(603,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7955.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(8400,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,413) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(536,-247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(9354.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9965.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(10965.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(407.7,1150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="msup" transform="translate(12576.5,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,413) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g><g data-mml-node="mo" transform="translate(13501.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(13890.3,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15612.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16056.7,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,413) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(518,-247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(16993.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17604.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(18604.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(407.7,1150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="msup" transform="translate(20215.2,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(331,413) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(20915.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(21304.2,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(23132.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(23577.6,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(484,413) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(484,-247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(24480,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(25091.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(26091.5,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(26802.2,0)"><g data-mml-node="text"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mi" transform="translate(27636,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(28382.8,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(28660.8,0)"><g data-mml-node="mo"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>policy损失, value损失 and 即时reward损失</p>
<figure>
<img src="/images/20221020-1.jpg" alt="Planning, acting and training with a learned model">
<figcaption aria-hidden="true">Planning, acting and training with a
learned model</figcaption>
</figure>
<ul>
<li></li>
<li></li>
</ul>
<h3 id="总结">总结</h3>
<p>​</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement Driving | Robust Reinforcement Learning using Offline Data</title>
    <url>/2022/11/25/2022-11-25-Autonomous%20Driving%20-%20Robust%20Reinforcement%20Learning%20using%20Offline%20Data/</url>
    <content><![CDATA[<h2 id="robust-reinforcement-learning-using-offline-data">Robust
Reinforcement Learning using Offline Data</h2>
<ul>
<li>鲁棒强化学习可以形式化为一个最大值最小化问题，目标是学习最大化价值的策略，而不是不确定性集合中最差的可能模型。本文提出一个Robust
Fitted Q-Iteration
(RFQI)算法来应对离线数据收集、模型优化、无偏估计问题。</li>
</ul>
<h3 id="introduction">1 Introduction</h3>
<ul>
<li>处理RL的实际应用问题：
<ul>
<li>online RL</li>
<li>pre-collected offline dataset</li>
</ul></li>
<li>仿真环境的典型误差：
<ul>
<li>sensor noise</li>
<li>action delay</li>
<li>friction</li>
<li>mass of a mobile robot</li>
</ul></li>
<li>RL算法可能因为环境的细微变化而失效，为了应对这样的问题，因此有了robust
RL，旨在处理训练和测试中的环境参数误匹配问题；</li>
<li>Robust Markov Decision Process
(RMDP)：标准MDP只考虑单个模型（转移概率函数），RMDP考虑整个不确定性模型集合（uncertainty
set），训练模型，以获得能够在不确定性集中最坏的模型上表现得最好的最优鲁棒策略</li>
</ul>
<h4 id="offline-rl">Offline RL</h4>
<ul>
<li><p>只使用离线数据集</p></li>
<li><p>许多近期工作设计 Fitted Q-Iteration (FQI) algorithm
的变体</p></li>
</ul>
<h4 id="robust-rl">Robust RL</h4>
<ul>
<li><p>2005年提出</p></li>
<li><p>这些工作与本文的区别在于：</p>
<p>（1）考虑大的状态空间，而不是表格空间</p>
<p>（2）真实的离线RL设定，状态-行为对通过武断的分布采样，而不是使用生成模型获得</p>
<p>（3）使用函数近似学习优化鲁棒的策略，而不是使用评估模型求解表格规划问题；</p></li>
<li><p>To the best of our knowledge, this is the first work that
addresses the offline robust RL problem with arbitrary large state space
using function approximation, with provable guarantees on the
performance of the learned policy.</p></li>
</ul>
<h4 id="offline-robust-rl">Offline Robust RL:</h4>
<ul>
<li><figure>
<img src="https://raw.githubusercontent.com/txing-casia/txing-casia.github.io/master/img/20221020-11.jpg" alt="Planning, acting and training with a learned model">
<figcaption aria-hidden="true">Planning, acting and training with a
learned model</figcaption>
</figure></li>
<li></li>
<li></li>
</ul>
<h3 id="总结">总结</h3>
<p>​</p>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>python多线程与多进程简易实现</title>
    <url>/2023/03/09/2023-03-09%20-%20Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="python多线程与多进程简易实现">Python多线程与多进程简易实现</h2>
<h4 id="问题背景">1 问题背景</h4>
<p>近期需要提升代码运行效率，想通过多线程或多进程实现。</p>
<p>一般来说，单进程程序运行起来会作为一个进程占用CPU资源，而一个进程可以包含1或多个线程。在多CPU核的机器上，线程之间可以并行执行，通过该方式可以提高代码运行效率。</p>
<p><strong>最后，通过本次优化调用48个核，成功把代码运行效率提升了10倍，效果显著</strong></p>
<p><strong>NOTE</strong>：Python虽然可以通过threading库实现多线程，但由于全局解释器锁（GIL）的存在，一个时刻只能有1个线程执行，并不是真正的多线程；在一些情况下，例如跑不满一个核，由于线程之间还有通信成本，多线程python程序时间效率上并不一定优于单线程python程序；</p>
<h4 id="实现方法">2 实现方法</h4>
<h5 id="python-多线程实现">2.1 Python 多线程实现：</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name,ind</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,ind)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    process_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = threading.Thread(target=fun,args=(i,<span class="number">1</span>))</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> process_list:</span><br><span class="line">        p.join()  <span class="comment"># 等待进程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Finish"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="python-多进程实现">2.2 Python 多进程实现：</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span>  Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name,ind</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,ind)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    process_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = Process(target=fun,args=(i,<span class="number">1</span>))</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> process_list:</span><br><span class="line">        p.join()  <span class="comment"># 等待进程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Finish"</span>)</span><br></pre></td></tr></table></figure>
<p>2023年03月09日</p>
<p>PCon</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Gperf查看模块函数级别CPU资源占用</title>
    <url>/2023/01/09/2023-01-09%20-%20%E4%BD%BF%E7%94%A8Gperf%E6%9F%A5%E7%9C%8B%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0%E7%BA%A7%E5%88%ABCPU%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<h2 id="使用gperf查看模块函数级别cpu资源占用">使用Gperf查看模块函数级别CPU资源占用</h2>
<p><strong>步骤1：Cmake修改</strong></p>
<p>CMakeLists.txt文件，添加有<code>#_</code>标记的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(PKGS common map error_relation)</span><br><span class="line">set(PKG_LIBRARIES)</span><br><span class="line">foreach(pkg ${PKGS})</span><br><span class="line">   find_package(${pkg})</span><br><span class="line">   include_directories(${${pkg}_INCLUDE_DIRS})</span><br><span class="line">   include_directories(/build_env/x86/thirdparty/gperf/include) #_</span><br><span class="line">   link_directories(${${pkg}_LIBRARY_DIRS})</span><br><span class="line">   link_directories(/build_env/x86/thirdparty/gperf/lib) #_</span><br><span class="line">   message(STATUS "${pkg}_INCLUDE_DIRS ${${pkg}_INCLUDE_DIRS}")</span><br><span class="line">   message(STATUS "${pkg}_LIBRARY_DIRS ${${pkg}_LIBRARY_DIRS}")</span><br><span class="line">   list(APPEND PKG_LIBRARIES ${${pkg}_LIBRARIES})</span><br><span class="line">endforeach()</span><br><span class="line"></span><br><span class="line">#_</span><br><span class="line">include_directories(/build_env/x86/thirdparty/gperf/include) #_</span><br><span class="line">link_directories(/build_env/x86/thirdparty/gperf/lib) #_</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (USE_IPOPT)</span><br><span class="line">    add_definitions(-DUSE_IPOPT)</span><br><span class="line">    set(LIBS</span><br><span class="line">        ${HIOS_ALL_LIBRARIES}</span><br><span class="line">        ${PKG_LIBRARIES}</span><br><span class="line">        ${catkin_LIBRARIES}</span><br><span class="line">        ${OSQP_LIBRARIES}</span><br><span class="line">        ${IPOPT_LIBRARIES}</span><br><span class="line">        ${ADOLC_LIBRARIES}</span><br><span class="line">        ${HSL_LIBRARIES}</span><br><span class="line">        profiler #_</span><br><span class="line">    )</span><br><span class="line">else()</span><br><span class="line">    set(LIBS</span><br><span class="line">        ${HIOS_ALL_LIBRARIES}</span><br><span class="line">        ${PKG_LIBRARIES}</span><br><span class="line">        ${catkin_LIBRARIES}</span><br><span class="line">        ${OSQP_LIBRARIES}</span><br><span class="line">        # ${IPOPT_LIBRARIES}</span><br><span class="line">        ${ADOLC_LIBRARIES}</span><br><span class="line">        ${HSL_LIBRARIES}</span><br><span class="line">        profiler #_</span><br><span class="line">        )</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>
<p>include_directories(/build_env/x86/thirdparty/gperf/include)
link_directories(/build_env/x86/thirdparty/gperf/lib) set(LIBS xxx
profiler xxx) LIBS 里面加入profiler。
建议如果是发版分支，在提交代码时，把BUILD_GPERF 设置为"OFF"</p>
<p><strong>步骤2：执行器代码更改</strong></p>
<p>planning_exec.h添加头文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;gperftools/profiler.h&gt; // #_</span><br></pre></td></tr></table></figure>
<p><strong>步骤3：process函数修改</strong></p>
<p>planning_exec.cpp添加如下行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int PlanningExec::process(const ::haomo::pos::IData* const input, ::haomo::pos::IData* const output) {</span><br><span class="line">    MLOG(PLANNING, INFO) &lt;&lt; "-------------In PlanningExec process------------";</span><br><span class="line"></span><br><span class="line">    // #_</span><br><span class="line">    // GPERF_SECTION("planning.prof", 1200)</span><br><span class="line">    static int ii = 0;</span><br><span class="line">    if(ii == 0)</span><br><span class="line">    {</span><br><span class="line">        ProfilerStart("planning.prof");</span><br><span class="line">        ProfilerRegisterThread();</span><br><span class="line">        ProfilerEnable();</span><br><span class="line">    }</span><br><span class="line">    ii++;</span><br><span class="line">    if(ii &lt; 1200)</span><br><span class="line">    {</span><br><span class="line">        ProfilerFlush();</span><br><span class="line">    }</span><br><span class="line">    if(ii == 1200)</span><br><span class="line">    {</span><br><span class="line">        ProfilerStop();</span><br><span class="line">    }</span><br><span class="line">    // #_</span><br></pre></td></tr></table></figure>
<p>1200 表示函数调用1200次后，终止profile，可根据实际情况修改</p>
<p><strong>步骤4：程序执行</strong></p>
<p>和之前在docker里跑包一样，正常运行即可。</p>
<p><strong>步骤5：生成text prof文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pprof ./output/x86/planning/lib/libplanning.so planning.prof  --text &gt; test.txt</span><br></pre></td></tr></table></figure>
<p>这里根据自己模块名称，生成prof名称替换即可。</p>
<p>txt文档从左到右的含义是：</p>
<p>每一行表示一个函数的信息。</p>
<p>flat：函数在 CPU 上运行的时间</p>
<p>flat%：函数在CPU上运行时间的百分比</p>
<p>sum%：是从上到当前行所有函数累加使用 CPU
的比例，如第二行sum=48.52=28.79+19.73</p>
<p>cum：这个函数以及子函数运行所占用的时间，应该大于等于flat</p>
<p>cum%：这个函数以及子函数运行所占用的比例，应该大于等于flat%</p>
<p>最后一列：函数的名字</p>
<p>步骤6：生成SVG文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pprof ./output/x86/planning/lib/libplanning.so planning.prof  --svg &gt; test.svg</span><br></pre></td></tr></table></figure>
<p>最下面一行数字代表该函数共占用多少CPU片段，一个CPU片段大概是10ms。我一共跑了1200次，所以可以得出该函数的平均CPU时间是2386*10/1200
= 19ms</p>
<p>参考资料：</p>
<p>https://gperftools.github.io/gperftools/cpuprofile.html</p>
<p>https://www.cnblogs.com/caosiyang/archive/2013/01/25/2876244.html</p>
]]></content>
  </entry>
  <entry>
    <title>Autonomous Driving | Focal Loss for Dense Object Detection</title>
    <url>/2023/03/13/2023-03-13-Autonomous%20Driving%20-%20Focal%20Loss%20for%20Dense%20Object%20Detection/</url>
    <content><![CDATA[<h2 id="focal-loss-for-dense-object-detection">Focal Loss for Dense
Object Detection</h2>
<ul>
<li>提出一种处理不平衡类别的损失函数，对分类准确的样本小权重，给不确定的样本大权重。在保持检测速度的情况下（一阶段检测器），精确度达到二阶段检测器水平</li>
<li>代码：https://github.com/facebookresearch/Detectron</li>
</ul>
<h3 id="focal-loss">1 Focal Loss</h3>
<p>focal loss针对one-stage object
detection场景中的类别不平衡问题设计（e.g.,
1:1000）。首先，从交叉熵损失开始： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="37.698ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 16662.3 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1524,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1913,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2416,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2860.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3350.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4017.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(5073.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(944.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2611.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3114.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3503.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(6504.1,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mtext" transform="translate(895,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1145,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1912.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2968.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(944.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(2222.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2611.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3333.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4334.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4837.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5226.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(6504.1,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(846,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1422,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2339,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3055,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3400,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3869,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(11589.1,0) translate(0 250)"></g></g></g></g></svg></mjx-container></span> 其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.028ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3990.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1712.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(2212.6,0)"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g><g data-mml-node="mn" transform="translate(2990.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3490.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>表示真值类别，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.43ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3726.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(780.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1725.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2003.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2503.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2948.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3448.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>表示模型输出的属于类别<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.257ex" height="1.971ex" role="img" focusable="false" viewBox="0 -666 2323.6 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1823.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>的类别概率。定义： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="24.351ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 10763.3 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1119,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2174.8,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(3503.4,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mtext" transform="translate(895,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1145,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1912.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2968.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2225.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(3503.4,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(846,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1422,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2339,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3055,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3400,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3869,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(8588.4,0) translate(0 250)"></g></g></g></g></svg></mjx-container></span> 重写<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13392 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1524,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1913,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2416,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2860.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3350.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4017.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5073.2,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(5833.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(6597.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6986.2,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(7827.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8494.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(9550,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10494.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(11772.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(11772.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(12161.7,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(13003,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<h4 id="balanced-cross-entropy">1.1 Balanced Cross Entropy</h4>
<p>常用的处理类别不平衡的方法是使用权重<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.74ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3863.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1862.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2140.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2640.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3085.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3585.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>，它可以看做是样本类别频率的倒数。<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>-balanced CE loss： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.034ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9297 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1524,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1913,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(2754.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3421,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4476.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5254.8,0)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(673,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mi" transform="translate(6399.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(7677.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7677.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8066.8,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(8908,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<h4 id="focal-loss-definition">1.2 Focal Loss Definition</h4>
<p>下调容易分类的样本权重，让模型关注困难的情况，在交叉熵损失函数基础上使用调制因子<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.617ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3808.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2111.4,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="msup" transform="translate(2952.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></g></g></svg></mjx-container></span>，其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="5.377ex" height="1.995ex" role="img" focusable="false" viewBox="0 -666 2376.6 882"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="mo" transform="translate(820.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1876.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>是可调参数，定义focal
loss为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.225ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12033.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(1430,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1819,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(2660.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3327,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4382.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5160.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5549.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6272,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(7272.3,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="msup" transform="translate(8113.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g><g data-mml-node="mi" transform="translate(9136.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(10414.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(10414.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10803.2,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(11644.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<ul>
<li><figure>
<img src="/images/20221020-1.jpg" alt="Planning, acting and training with a learned model">
<figcaption aria-hidden="true">Planning, acting and training with a
learned model</figcaption>
</figure></li>
</ul>
<h3 id="总结">总结</h3>
]]></content>
      <tags>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
</search>
